
FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af48  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800b130  0800b130  0001b130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b248  0800b248  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800b248  0800b248  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b248  0800b248  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b248  0800b248  0001b248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b250  0800b250  0001b250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000078  0800b2cc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  0800b2cc  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c49  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d25  00000000  00000000  00039cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0003ca10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0003dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e6fd  00000000  00000000  0003edc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000d245  00000000  00000000  0004d4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0005a70a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000571c  00000000  00000000  0005a760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000078 	.word	0x20000078
 8000204:	00000000 	.word	0x00000000
 8000208:	0800b118 	.word	0x0800b118

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000007c 	.word	0x2000007c
 8000224:	0800b118 	.word	0x0800b118

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fmul>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d06f      	beq.n	8000e64 <__aeabi_fmul+0xf8>
 8000d84:	441a      	add	r2, r3
 8000d86:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8a:	0240      	lsls	r0, r0, #9
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d92:	d01e      	beq.n	8000dd2 <__aeabi_fmul+0x66>
 8000d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da0:	fba0 3101 	umull	r3, r1, r0, r1
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dac:	bf3e      	ittt	cc
 8000dae:	0049      	lslcc	r1, r1, #1
 8000db0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	ea40 0001 	orr.w	r0, r0, r1
 8000dba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dbe:	2afd      	cmp	r2, #253	; 0xfd
 8000dc0:	d81d      	bhi.n	8000dfe <__aeabi_fmul+0x92>
 8000dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dca:	bf08      	it	eq
 8000dcc:	f020 0001 	biceq.w	r0, r0, #1
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	0249      	lsleq	r1, r1, #9
 8000dde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de6:	3a7f      	subs	r2, #127	; 0x7f
 8000de8:	bfc2      	ittt	gt
 8000dea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df2:	4770      	bxgt	lr
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	dc5d      	bgt.n	8000ebc <__aeabi_fmul+0x150>
 8000e00:	f112 0f19 	cmn.w	r2, #25
 8000e04:	bfdc      	itt	le
 8000e06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e0a:	4770      	bxle	lr
 8000e0c:	f1c2 0200 	rsb	r2, r2, #0
 8000e10:	0041      	lsls	r1, r0, #1
 8000e12:	fa21 f102 	lsr.w	r1, r1, r2
 8000e16:	f1c2 0220 	rsb	r2, r2, #32
 8000e1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e22:	f140 0000 	adc.w	r0, r0, #0
 8000e26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e2a:	bf08      	it	eq
 8000e2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e30:	4770      	bx	lr
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xce>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xe6>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e78f      	b.n	8000d84 <__aeabi_fmul+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	bf18      	it	ne
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d00a      	beq.n	8000e8a <__aeabi_fmul+0x11e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1d8      	bne.n	8000e32 <__aeabi_fmul+0xc6>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	bf17      	itett	ne
 8000e90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e94:	4608      	moveq	r0, r1
 8000e96:	f091 0f00 	teqne	r1, #0
 8000e9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9e:	d014      	beq.n	8000eca <__aeabi_fmul+0x15e>
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_fmul+0x13e>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d10f      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eaa:	ea93 0f0c 	teq	r3, ip
 8000eae:	d103      	bne.n	8000eb8 <__aeabi_fmul+0x14c>
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	bf18      	it	ne
 8000eb4:	4608      	movne	r0, r1
 8000eb6:	d108      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec8:	4770      	bx	lr
 8000eca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ece:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fdiv>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d069      	beq.n	8000fc0 <__aeabi_fdiv+0xec>
 8000eec:	eba2 0203 	sub.w	r2, r2, r3
 8000ef0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000efa:	d037      	beq.n	8000f6c <__aeabi_fdiv+0x98>
 8000efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf38      	it	cc
 8000f10:	005b      	lslcc	r3, r3, #1
 8000f12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	bf24      	itt	cs
 8000f1e:	1a5b      	subcs	r3, r3, r1
 8000f20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f36:	bf24      	itt	cs
 8000f38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	bf18      	it	ne
 8000f52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f56:	d1e0      	bne.n	8000f1a <__aeabi_fdiv+0x46>
 8000f58:	2afd      	cmp	r2, #253	; 0xfd
 8000f5a:	f63f af50 	bhi.w	8000dfe <__aeabi_fmul+0x92>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f64:	bf08      	it	eq
 8000f66:	f020 0001 	biceq.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f74:	327f      	adds	r2, #127	; 0x7f
 8000f76:	bfc2      	ittt	gt
 8000f78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f80:	4770      	bxgt	lr
 8000f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	e737      	b.n	8000dfe <__aeabi_fmul+0x92>
 8000f8e:	f092 0f00 	teq	r2, #0
 8000f92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0040      	lsleq	r0, r0, #1
 8000f9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9e:	3a01      	subeq	r2, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xc2>
 8000fa2:	ea40 000c 	orr.w	r0, r0, ip
 8000fa6:	f093 0f00 	teq	r3, #0
 8000faa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0049      	lsleq	r1, r1, #1
 8000fb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb6:	3b01      	subeq	r3, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xda>
 8000fba:	ea41 010c 	orr.w	r1, r1, ip
 8000fbe:	e795      	b.n	8000eec <__aeabi_fdiv+0x18>
 8000fc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc4:	ea92 0f0c 	teq	r2, ip
 8000fc8:	d108      	bne.n	8000fdc <__aeabi_fdiv+0x108>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	f47f af7d 	bne.w	8000eca <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	f47f af70 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e776      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fdc:	ea93 0f0c 	teq	r3, ip
 8000fe0:	d104      	bne.n	8000fec <__aeabi_fdiv+0x118>
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	f43f af4c 	beq.w	8000e80 <__aeabi_fmul+0x114>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e76e      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	d1ca      	bne.n	8000f8e <__aeabi_fdiv+0xba>
 8000ff8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ffc:	f47f af5c 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8001000:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001004:	f47f af3c 	bne.w	8000e80 <__aeabi_fmul+0x114>
 8001008:	e75f      	b.n	8000eca <__aeabi_fmul+0x15e>
 800100a:	bf00      	nop

0800100c <__gesf2>:
 800100c:	f04f 3cff 	mov.w	ip, #4294967295
 8001010:	e006      	b.n	8001020 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__lesf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	e002      	b.n	8001020 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__cmpsf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	bf18      	it	ne
 8001032:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001036:	d011      	beq.n	800105c <__cmpsf2+0x40>
 8001038:	b001      	add	sp, #4
 800103a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800103e:	bf18      	it	ne
 8001040:	ea90 0f01 	teqne	r0, r1
 8001044:	bf58      	it	pl
 8001046:	ebb2 0003 	subspl.w	r0, r2, r3
 800104a:	bf88      	it	hi
 800104c:	17c8      	asrhi	r0, r1, #31
 800104e:	bf38      	it	cc
 8001050:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001054:	bf18      	it	ne
 8001056:	f040 0001 	orrne.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001060:	d102      	bne.n	8001068 <__cmpsf2+0x4c>
 8001062:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001066:	d105      	bne.n	8001074 <__cmpsf2+0x58>
 8001068:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800106c:	d1e4      	bne.n	8001038 <__cmpsf2+0x1c>
 800106e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001072:	d0e1      	beq.n	8001038 <__cmpsf2+0x1c>
 8001074:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <__aeabi_cfrcmple>:
 800107c:	4684      	mov	ip, r0
 800107e:	4608      	mov	r0, r1
 8001080:	4661      	mov	r1, ip
 8001082:	e7ff      	b.n	8001084 <__aeabi_cfcmpeq>

08001084 <__aeabi_cfcmpeq>:
 8001084:	b50f      	push	{r0, r1, r2, r3, lr}
 8001086:	f7ff ffc9 	bl	800101c <__cmpsf2>
 800108a:	2800      	cmp	r0, #0
 800108c:	bf48      	it	mi
 800108e:	f110 0f00 	cmnmi.w	r0, #0
 8001092:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001094 <__aeabi_fcmpeq>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff fff4 	bl	8001084 <__aeabi_cfcmpeq>
 800109c:	bf0c      	ite	eq
 800109e:	2001      	moveq	r0, #1
 80010a0:	2000      	movne	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmplt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffea 	bl	8001084 <__aeabi_cfcmpeq>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmple>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffe0 	bl	8001084 <__aeabi_cfcmpeq>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpge>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffd2 	bl	800107c <__aeabi_cfrcmple>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpgt>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffc8 	bl	800107c <__aeabi_cfrcmple>
 80010ec:	bf34      	ite	cc
 80010ee:	2001      	movcc	r0, #1
 80010f0:	2000      	movcs	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpun>:
 80010f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001100:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001104:	d102      	bne.n	800110c <__aeabi_fcmpun+0x14>
 8001106:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110a:	d108      	bne.n	800111e <__aeabi_fcmpun+0x26>
 800110c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001110:	d102      	bne.n	8001118 <__aeabi_fcmpun+0x20>
 8001112:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001116:	d102      	bne.n	800111e <__aeabi_fcmpun+0x26>
 8001118:	f04f 0000 	mov.w	r0, #0
 800111c:	4770      	bx	lr
 800111e:	f04f 0001 	mov.w	r0, #1
 8001122:	4770      	bx	lr

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6839      	ldr	r1, [r7, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fa87 	bl	8004692 <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6839      	ldr	r1, [r7, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f003 fa90 	bl	80046c0 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_ZN9Publisher6notifyEv>:
    void notify() {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 fabc 	bl	8004734 <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	4293      	cmp	r3, r2
 80011c4:	bf34      	ite	cc
 80011c6:	2301      	movcc	r3, #1
 80011c8:	2300      	movcs	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00e      	beq.n	80011ee <_ZN9Publisher6notifyEv+0x46>
          subscriber[i]->notify();
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f003 fab8 	bl	800474c <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 80011dc:	4603      	mov	r3, r0
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	4790      	blx	r2
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	3301      	adds	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e7e2      	b.n	80011b4 <_ZN9Publisher6notifyEv+0xc>
      }
    }
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_ZN9PublisherC1Ev>:
struct Publisher
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f003 fab1 	bl	8004768 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ffeb 	bl	80011f6 <_ZN9PublisherC1Ev>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ffdd 	bl	80011f6 <_ZN9PublisherC1Ev>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3334      	adds	r3, #52	; 0x34
 8001240:	2234      	movs	r2, #52	; 0x34
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f009 ff1b 	bl	800b080 <memset>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3334      	adds	r3, #52	; 0x34
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffde 	bl	8001210 <_ZN11TickUpdater7SubtickC1Ev>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	669a      	str	r2, [r3, #104]	; 0x68
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <_ZN11TickUpdaterC1Ev+0x44>)
 8001262:	f003 fa8b 	bl	800477c <_ZN10SystemTick13initInterruptILt1000EEEvv>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000094 	.word	0x20000094

08001274 <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <HAL_IncTick+0x10>)
 800127a:	f000 f8a8 	bl	80013ce <_ZN11TickUpdater9interruptEv>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000098 	.word	0x20000098

08001288 <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	791b      	ldrb	r3, [r3, #4]
 8001294:	f083 0301 	eor.w	r3, r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d007      	beq.n	80012ae <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4619      	mov	r1, r3
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <_ZN14TickSubscriber9subscribeEv+0x30>)
 80012aa:	f7ff ff61 	bl	8001170 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000098 	.word	0x20000098

080012bc <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	791b      	ldrb	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d007      	beq.n	80012dc <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4803      	ldr	r0, [pc, #12]	; (80012e4 <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 80012d8:	f7ff ff58 	bl	800118c <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000098 	.word	0x20000098

080012e8 <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <_ZN10SubscriberC1Ev+0x1c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	0800b1e4 	.word	0x0800b1e4

08001308 <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffe8 	bl	80012e8 <_ZN10SubscriberC1Ev>
 8001318:	4a03      	ldr	r2, [pc, #12]	; (8001328 <_ZN14TickSubscriberC1Ev+0x20>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0800b1d8 	.word	0x0800b1d8

0800132c <_ZN5TimerC1Ev>:

class Timer : TickSubscriber
{
  volatile uint32_t time_passed;
public:
  Timer(){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ffe6 	bl	8001308 <_ZN14TickSubscriberC1Ev>
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <_ZN5TimerC1Ev+0x2c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
    subscribed = false;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	711a      	strb	r2, [r3, #4]
  };
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	0800b1cc 	.word	0x0800b1cc

0800135c <_ZN5TimerC1Em>:
  Timer(uint32_t ms){
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ffcd 	bl	8001308 <_ZN14TickSubscriberC1Ev>
 800136e:	4a09      	ldr	r2, [pc, #36]	; (8001394 <_ZN5TimerC1Em+0x38>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
    subscribed = false;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	711a      	strb	r2, [r3, #4]
    start(ms);
 8001380:	6839      	ldr	r1, [r7, #0]
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f834 	bl	80013f0 <_ZN5Timer5startEm>
  }
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	0800b1cc 	.word	0x0800b1cc

08001398 <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
    time_passed++;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	609a      	str	r2, [r3, #8]
  }
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>:
}

void TickUpdater::interrupt()
{
//    subtick.notify();
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
        notify();
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fef1 	bl	80011a8 <_ZN9Publisher6notifyEv>
    });
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_ZN11TickUpdater9interruptEv>:
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f103 0068 	add.w	r0, r3, #104	; 0x68
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4619      	mov	r1, r3
 80013e4:	f003 f9e0 	bl	80047a8 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
   time_set = ms;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	60da      	str	r2, [r3, #12]
   subscribe();
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff3d 	bl	8001288 <_ZN14TickSubscriber9subscribeEv>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_ZN5Timer5eventEv>:

bool Timer::event()
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	429a      	cmp	r2, r3
 8001428:	bf2c      	ite	cs
 800142a:	2301      	movcs	r3, #1
 800142c:	2300      	movcc	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d004      	beq.n	800143e <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
      return (true);
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 800143e:	2300      	movs	r3, #0
  }
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
   unsubscribe();
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff2e 	bl	80012bc <_ZN14TickSubscriber11unsubscribeEv>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <_ZN5Timer4doneEv>:

bool     Timer::done()       { return time_passed >= time_set; }
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	429a      	cmp	r2, r3
 800147a:	bf2c      	ite	cs
 800147c:	2301      	movcs	r3, #1
 800147e:	2300      	movcc	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <_ZN5Timer5startEv>:
void     Timer::pause()      { unsubscribe(); }
void     Timer::start()      { subscribe();  }
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fef6 	bl	8001288 <_ZN14TickSubscriber9subscribeEv>
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_ZN5Timer7isCountEv>:
bool     Timer::isCount()    { return subscribed; }
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	791b      	ldrb	r3, [r3, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	601a      	str	r2, [r3, #0]
    }
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4610      	mov	r0, r2
 80014ea:	4798      	blx	r3
    }
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_ZN4ADC_13adc_interruptEv>:

	uint16_t max_current_phase{20};
	uint8_t over_current_a{0};
	uint8_t over_current_c{0};

	void adc_interrupt() {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop_DMA (&hadc1);
 80014fc:	4819      	ldr	r0, [pc, #100]	; (8001564 <_ZN4ADC_13adc_interruptEv+0x70>)
 80014fe:	f004 fb0d 	bl	8005b1c <HAL_ADC_Stop_DMA>
		new_hv = buffer[3];
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	8b9a      	ldrh	r2, [r3, #28]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		if (abs(new_hv - h_voltage) > 170) {  // 250 ~= 96V
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001512:	461a      	mov	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	bfb8      	it	lt
 8001520:	425b      	neglt	r3, r3
 8001522:	2baa      	cmp	r3, #170	; 0xaa
 8001524:	dd03      	ble.n	800152e <_ZN4ADC_13adc_interruptEv+0x3a>
			error_HV = true;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		}
		h_voltage += (new_hv - h_voltage) * 10 / 30;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800153a:	4619      	mov	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001542:	1acb      	subs	r3, r1, r3
 8001544:	4908      	ldr	r1, [pc, #32]	; (8001568 <_ZN4ADC_13adc_interruptEv+0x74>)
 8001546:	fb81 0103 	smull	r0, r1, r1, r3
 800154a:	17db      	asrs	r3, r3, #31
 800154c:	1acb      	subs	r3, r1, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	b29a      	uxth	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000108 	.word	0x20000108
 8001568:	55555556 	.word	0x55555556

0800156c <_ZN4ADC_22adc_injected_interruptEv>:

	void adc_injected_interrupt() {
 800156c:	b5b0      	push	{r4, r5, r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 8001574:	4862      	ldr	r0, [pc, #392]	; (8001700 <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 8001576:	f004 fecf 	bl	8006318 <HAL_ADCEx_InjectedStop_IT>
		arr_current_S[j] = HAL_ADCEx_InjectedGetValue(&hadc2, PS);
 800157a:	2101      	movs	r1, #1
 800157c:	4860      	ldr	r0, [pc, #384]	; (8001700 <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 800157e:	f004 ff15 	bl	80063ac <HAL_ADCEx_InjectedGetValue>
 8001582:	4602      	mov	r2, r0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800158a:	b211      	sxth	r1, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	330c      	adds	r3, #12
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	460a      	mov	r2, r1
 8001596:	80da      	strh	r2, [r3, #6]
		arr_current_A[j] = HAL_ADCEx_InjectedGetValue(&hadc2, phase_A);
 8001598:	2102      	movs	r1, #2
 800159a:	4859      	ldr	r0, [pc, #356]	; (8001700 <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 800159c:	f004 ff06 	bl	80063ac <HAL_ADCEx_InjectedGetValue>
 80015a0:	4601      	mov	r1, r0
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80015a8:	461a      	mov	r2, r3
 80015aa:	b209      	sxth	r1, r1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3218      	adds	r2, #24
 80015b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		arr_current_C[j] = HAL_ADCEx_InjectedGetValue(&hadc2, phase_C);
 80015b4:	2103      	movs	r1, #3
 80015b6:	4852      	ldr	r0, [pc, #328]	; (8001700 <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 80015b8:	f004 fef8 	bl	80063ac <HAL_ADCEx_InjectedGetValue>
 80015bc:	4602      	mov	r2, r0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80015c4:	b211      	sxth	r1, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	3320      	adds	r3, #32
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	460a      	mov	r2, r1
 80015d0:	805a      	strh	r2, [r3, #2]
//		if(abs(new_hv - h_voltage) > 150) {  // 250 ~= 96V
//			error_HV = true;
//		}
//		h_voltage += (new_hv - h_voltage) * 10 / 30;

		measure = true;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87

		if(not work) {
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80015e0:	f083 0301 	eor.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 808e 	beq.w	8001708 <_ZN4ADC_22adc_injected_interruptEv+0x19c>
			offset_I_S = 0;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
			offset_I_A = 0;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
			offset_I_C = 0;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
			for (auto i = 0; i < 9; i++) {
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b08      	cmp	r3, #8
 800160c:	dc37      	bgt.n	800167e <_ZN4ADC_22adc_injected_interruptEv+0x112>
				offset_I_S += arr_current_S[i];
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8001614:	b29a      	uxth	r2, r3
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	330c      	adds	r3, #12
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	440b      	add	r3, r1
 8001620:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001624:	b29b      	uxth	r3, r3
 8001626:	4413      	add	r3, r2
 8001628:	b29b      	uxth	r3, r3
 800162a:	b21a      	sxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
				offset_I_A += arr_current_A[i];
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 8001638:	b29a      	uxth	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68f9      	ldr	r1, [r7, #12]
 800163e:	3118      	adds	r1, #24
 8001640:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8001644:	b29b      	uxth	r3, r3
 8001646:	4413      	add	r3, r2
 8001648:	b29b      	uxth	r3, r3
 800164a:	b21a      	sxth	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
				offset_I_C += arr_current_C[i];
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 8001658:	b29a      	uxth	r2, r3
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3320      	adds	r3, #32
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	440b      	add	r3, r1
 8001664:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001668:	b29b      	uxth	r3, r3
 800166a:	4413      	add	r3, r2
 800166c:	b29b      	uxth	r3, r3
 800166e:	b21a      	sxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
			for (auto i = 0; i < 9; i++) {
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3301      	adds	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e7c4      	b.n	8001608 <_ZN4ADC_22adc_injected_interruptEv+0x9c>
			}
			offset_I_S /= (9);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8001684:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <_ZN4ADC_22adc_injected_interruptEv+0x198>)
 8001686:	fb82 1203 	smull	r1, r2, r2, r3
 800168a:	1052      	asrs	r2, r2, #1
 800168c:	17db      	asrs	r3, r3, #31
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	b21a      	sxth	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
			offset_I_A /= (9);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 800169e:	4a19      	ldr	r2, [pc, #100]	; (8001704 <_ZN4ADC_22adc_injected_interruptEv+0x198>)
 80016a0:	fb82 1203 	smull	r1, r2, r2, r3
 80016a4:	1052      	asrs	r2, r2, #1
 80016a6:	17db      	asrs	r3, r3, #31
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
			offset_I_C /= (9);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 80016b8:	4a12      	ldr	r2, [pc, #72]	; (8001704 <_ZN4ADC_22adc_injected_interruptEv+0x198>)
 80016ba:	fb82 1203 	smull	r1, r2, r2, r3
 80016be:	1052      	asrs	r2, r2, #1
 80016c0:	17db      	asrs	r3, r3, #31
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8

			error_a = 0;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
			error_b = 0;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
			error_c = 0;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8

			over_current_s = 0;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
			over_current_a = 0;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
			over_current_c = 0;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 80016fc:	e240      	b.n	8001b80 <_ZN4ADC_22adc_injected_interruptEv+0x614>
 80016fe:	bf00      	nop
 8001700:	20000138 	.word	0x20000138
 8001704:	38e38e39 	.word	0x38e38e39

		} else if (work) {
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8236 	beq.w	8001b80 <_ZN4ADC_22adc_injected_interruptEv+0x614>

			arr_S[j] = abs(arr_current_S[j] - offset_I_S);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	330c      	adds	r3, #12
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001734:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800173e:	b211      	sxth	r1, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	3344      	adds	r3, #68	; 0x44
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	460a      	mov	r2, r1
 800174a:	80da      	strh	r2, [r3, #6]
			arr_A[j] = abs(arr_current_A[j] - offset_I_A);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001752:	461a      	mov	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3218      	adds	r2, #24
 8001758:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800175c:	461a      	mov	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800176a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001774:	b211      	sxth	r1, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	3358      	adds	r3, #88	; 0x58
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	460a      	mov	r2, r1
 8001780:	805a      	strh	r2, [r3, #2]
			arr_B[j] = abs(abs(arr_current_A[j] - offset_I_A) - abs(arr_current_C[j] - offset_I_C));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3218      	adds	r2, #24
 800178e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017a0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	3320      	adds	r3, #32
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	440b      	add	r3, r1
 80017b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017b6:	4619      	mov	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 80017be:	1acb      	subs	r3, r1, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bfb8      	it	lt
 80017c4:	425b      	neglt	r3, r3
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017cc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80017d6:	b211      	sxth	r1, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	3360      	adds	r3, #96	; 0x60
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	460a      	mov	r2, r1
 80017e2:	809a      	strh	r2, [r3, #4]
			arr_C[j] = abs(arr_current_C[j] - offset_I_C);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	3320      	adds	r3, #32
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017f6:	461a      	mov	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001804:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800180e:	461a      	mov	r2, r3
 8001810:	b209      	sxth	r1, r1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3250      	adds	r2, #80	; 0x50
 8001816:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			a = (arr_current_A[j] - offset_I_A) * 10 / 21;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001820:	461a      	mov	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3218      	adds	r2, #24
 8001826:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800182a:	461a      	mov	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 8001832:	1ad2      	subs	r2, r2, r3
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4ac6      	ldr	r2, [pc, #792]	; (8001b58 <_ZN4ADC_22adc_injected_interruptEv+0x5ec>)
 800183e:	fb82 1203 	smull	r1, r2, r2, r3
 8001842:	1092      	asrs	r2, r2, #2
 8001844:	17db      	asrs	r3, r3, #31
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	b21a      	sxth	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
			c = (arr_current_C[j] - offset_I_C) * 10 / 21;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	3320      	adds	r3, #32
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001862:	461a      	mov	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 800186a:	1ad2      	subs	r2, r2, r3
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4ab8      	ldr	r2, [pc, #736]	; (8001b58 <_ZN4ADC_22adc_injected_interruptEv+0x5ec>)
 8001876:	fb82 1203 	smull	r1, r2, r2, r3
 800187a:	1092      	asrs	r2, r2, #2
 800187c:	17db      	asrs	r3, r3, #31
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	b21a      	sxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
			b = -1 * (a + c);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 800188e:	b29a      	uxth	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8001896:	b29b      	uxth	r3, r3
 8001898:	4413      	add	r3, r2
 800189a:	b29b      	uxth	r3, r3
 800189c:	425b      	negs	r3, r3
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b21a      	sxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

//			if(abs(new_hv - h_voltage) > 250) {  // 250 ~= 96V
//				error_HV = true;
//			}

			if(arr_B[j] <= abs(offset_I_A - offset_I_C) and Km_check) {
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	3360      	adds	r3, #96	; 0x60
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018ba:	461a      	mov	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 80018c2:	4619      	mov	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 80018ca:	1acb      	subs	r3, r1, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bfb8      	it	lt
 80018d0:	425b      	neglt	r3, r3
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dc15      	bgt.n	8001902 <_ZN4ADC_22adc_injected_interruptEv+0x396>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d010      	beq.n	8001902 <_ZN4ADC_22adc_injected_interruptEv+0x396>
				error_b++;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
				if(error_b > 6)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d903      	bls.n	8001902 <_ZN4ADC_22adc_injected_interruptEv+0x396>
					error = true;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			}

			if (arr_A[j] <= 5 and Km_check) {
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	3358      	adds	r3, #88	; 0x58
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001914:	2b05      	cmp	r3, #5
 8001916:	dc15      	bgt.n	8001944 <_ZN4ADC_22adc_injected_interruptEv+0x3d8>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800191e:	2b00      	cmp	r3, #0
 8001920:	d010      	beq.n	8001944 <_ZN4ADC_22adc_injected_interruptEv+0x3d8>
				error_a++;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8001928:	3301      	adds	r3, #1
 800192a:	b2da      	uxtb	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
				if (error_a > 6)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8001938:	2b06      	cmp	r3, #6
 800193a:	d903      	bls.n	8001944 <_ZN4ADC_22adc_injected_interruptEv+0x3d8>
					error = true;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			}

			if (arr_C[j] <= 5 and Km_check) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800194a:	461a      	mov	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3250      	adds	r2, #80	; 0x50
 8001950:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001954:	2b05      	cmp	r3, #5
 8001956:	dc15      	bgt.n	8001984 <_ZN4ADC_22adc_injected_interruptEv+0x418>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800195e:	2b00      	cmp	r3, #0
 8001960:	d010      	beq.n	8001984 <_ZN4ADC_22adc_injected_interruptEv+0x418>
				error_c++;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001968:	3301      	adds	r3, #1
 800196a:	b2da      	uxtb	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
				if (error_c > 6)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001978:	2b06      	cmp	r3, #6
 800197a:	d903      	bls.n	8001984 <_ZN4ADC_22adc_injected_interruptEv+0x418>
					error = true;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			}

			if (arr_S[j] / 21 >= max_current and Km_check) {
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	3344      	adds	r3, #68	; 0x44
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001996:	4a70      	ldr	r2, [pc, #448]	; (8001b58 <_ZN4ADC_22adc_injected_interruptEv+0x5ec>)
 8001998:	fb82 1203 	smull	r1, r2, r2, r3
 800199c:	1092      	asrs	r2, r2, #2
 800199e:	17db      	asrs	r3, r3, #31
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 80019ac:	429a      	cmp	r2, r3
 80019ae:	db15      	blt.n	80019dc <_ZN4ADC_22adc_injected_interruptEv+0x470>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d010      	beq.n	80019dc <_ZN4ADC_22adc_injected_interruptEv+0x470>
				over_current_s++;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80019c0:	3301      	adds	r3, #1
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
				if (over_current_s >= 4)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d903      	bls.n	80019dc <_ZN4ADC_22adc_injected_interruptEv+0x470>
					over_cur_s = true;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			}

			if (arr_A[j] / 21 >= max_current_phase and Km_check) {
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	3358      	adds	r3, #88	; 0x58
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019ee:	4a5a      	ldr	r2, [pc, #360]	; (8001b58 <_ZN4ADC_22adc_injected_interruptEv+0x5ec>)
 80019f0:	fb82 1203 	smull	r1, r2, r2, r3
 80019f4:	1092      	asrs	r2, r2, #2
 80019f6:	17db      	asrs	r3, r3, #31
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 8001a04:	429a      	cmp	r2, r3
 8001a06:	db15      	blt.n	8001a34 <_ZN4ADC_22adc_injected_interruptEv+0x4c8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d010      	beq.n	8001a34 <_ZN4ADC_22adc_injected_interruptEv+0x4c8>
				over_current_a++;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				if (over_current_a >= 4)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d903      	bls.n	8001a34 <_ZN4ADC_22adc_injected_interruptEv+0x4c8>
					over_cur_a = true;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
			}

			if (arr_C[j] / 21 >= max_current_phase and Km_check) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3250      	adds	r2, #80	; 0x50
 8001a40:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001a44:	4a44      	ldr	r2, [pc, #272]	; (8001b58 <_ZN4ADC_22adc_injected_interruptEv+0x5ec>)
 8001a46:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4a:	1092      	asrs	r2, r2, #2
 8001a4c:	17db      	asrs	r3, r3, #31
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	db15      	blt.n	8001a8a <_ZN4ADC_22adc_injected_interruptEv+0x51e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d010      	beq.n	8001a8a <_ZN4ADC_22adc_injected_interruptEv+0x51e>
				over_current_c++;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8001a6e:	3301      	adds	r3, #1
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
				if (over_current_c >= 4)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d903      	bls.n	8001a8a <_ZN4ADC_22adc_injected_interruptEv+0x51e>
					over_cur_c = true;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
			}

			new_r = (std::sqrt( std::pow((a - b / 2 - c / 2), 2) + std::pow( (b * 17 / 20 - c * 17 / 20), 2) ) * 2) / 3;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 8001a90:	4619      	mov	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8001a98:	0fda      	lsrs	r2, r3, #31
 8001a9a:	4413      	add	r3, r2
 8001a9c:	105b      	asrs	r3, r3, #1
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	1aca      	subs	r2, r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8001aa8:	0fd9      	lsrs	r1, r3, #31
 8001aaa:	440b      	add	r3, r1
 8001aac:	105b      	asrs	r3, r3, #1
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f002 fe98 	bl	80047ea <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001aba:	4604      	mov	r4, r0
 8001abc:	460d      	mov	r5, r1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	4413      	add	r3, r2
 8001acc:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <_ZN4ADC_22adc_injected_interruptEv+0x5f0>)
 8001ace:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad2:	10d2      	asrs	r2, r2, #3
 8001ad4:	17db      	asrs	r3, r3, #31
 8001ad6:	1ad2      	subs	r2, r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8001ade:	4619      	mov	r1, r3
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	440b      	add	r3, r1
 8001ae6:	491d      	ldr	r1, [pc, #116]	; (8001b5c <_ZN4ADC_22adc_injected_interruptEv+0x5f0>)
 8001ae8:	fb81 0103 	smull	r0, r1, r1, r3
 8001aec:	10c9      	asrs	r1, r1, #3
 8001aee:	17db      	asrs	r3, r3, #31
 8001af0:	1a5b      	subs	r3, r3, r1
 8001af2:	4413      	add	r3, r2
 8001af4:	2102      	movs	r1, #2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 fe77 	bl	80047ea <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4620      	mov	r0, r4
 8001b02:	4629      	mov	r1, r5
 8001b04:	f7fe fb96 	bl	8000234 <__adddf3>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f008 fb44 	bl	800a19c <sqrt>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	f7fe fb8c 	bl	8000234 <__adddf3>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <_ZN4ADC_22adc_injected_interruptEv+0x5f4>)
 8001b2a:	f7fe fe63 	bl	80007f4 <__aeabi_ddiv>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f7fe ffe3 	bl	8000b00 <__aeabi_d2iz>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

			r += (new_r - r) / 4;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8001b52:	4619      	mov	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	e005      	b.n	8001b64 <_ZN4ADC_22adc_injected_interruptEv+0x5f8>
 8001b58:	30c30c31 	.word	0x30c30c31
 8001b5c:	66666667 	.word	0x66666667
 8001b60:	40080000 	.word	0x40080000
 8001b64:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001b68:	1acb      	subs	r3, r1, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da00      	bge.n	8001b70 <_ZN4ADC_22adc_injected_interruptEv+0x604>
 8001b6e:	3303      	adds	r3, #3
 8001b70:	109b      	asrs	r3, r3, #2
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	b21a      	sxth	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		}

		if (j < 8) j++;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001b86:	2b07      	cmp	r3, #7
 8001b88:	d808      	bhi.n	8001b9c <_ZN4ADC_22adc_injected_interruptEv+0x630>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001b90:	3301      	adds	r3, #1
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			over_current_a = 0;
			over_current_c = 0;
		}
//		if(m < 15) m++;
//		else m = 0;
	}
 8001b9a:	e01b      	b.n	8001bd4 <_ZN4ADC_22adc_injected_interruptEv+0x668>
			j = 0;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			error_a = 0;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
			error_b = 0;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
			error_c = 0;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			over_current_s = 0;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
			over_current_a = 0;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
			over_current_c = 0;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
	}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bdb0      	pop	{r4, r5, r7, pc}

08001bdc <_ZN12InterruptingC1Ev>:
struct Interrupting
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <_ZN12InterruptingC1Ev+0x1c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	0800b1c0 	.word	0x0800b1c0

08001bfc <_ZN4ADC_13ADC_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_interrupt : Interrupting {
		Parent &parent;
		ADC_interrupt(Parent &parent) :
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ffe7 	bl	8001bdc <_ZN12InterruptingC1Ev>
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <_ZN4ADC_13ADC_interruptC1ERS_+0x38>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	605a      	str	r2, [r3, #4]
			parent.adc_callback.subscribe(this);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fc49 	bl	80014ba <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	0800b1b4 	.word	0x0800b1b4

08001c38 <_ZN4ADC_13ADC_interrupt9interruptEv>:
		void interrupt() override {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
			parent.adc_interrupt();
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fc55 	bl	80014f4 <_ZN4ADC_13adc_interruptEv>
		}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:
	} adc_ { *this };

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ffbb 	bl	8001bdc <_ZN12InterruptingC1Ev>
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fc1d 	bl	80014ba <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	0800b1a8 	.word	0x0800b1a8

08001c90 <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fc65 	bl	800156c <_ZN4ADC_22adc_injected_interruptEv>
		}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <_ZN4ADC_C1ER9InterruptS1_ht>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_callback, Interrupt& adc_injected_callback, uint8_t qty_channel, uint16_t time_refresh)
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	70fb      	strb	r3, [r7, #3]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , qty_channel  {qty_channel}
    , time_refresh {time_refresh}
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fb23 	bl	8001308 <_ZN14TickSubscriberC1Ev>
 8001cc2:	4a70      	ldr	r2, [pc, #448]	; (8001e84 <_ZN4ADC_C1ER9InterruptS1_ht+0x1d8>)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	78fa      	ldrb	r2, [r7, #3]
 8001cd8:	741a      	strb	r2, [r3, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8b3a      	ldrh	r2, [r7, #24]
 8001cde:	825a      	strh	r2, [r3, #18]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	829a      	strh	r2, [r3, #20]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	331e      	adds	r3, #30
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	821a      	strh	r2, [r3, #16]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3330      	adds	r3, #48	; 0x30
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
 8001d04:	821a      	strh	r2, [r3, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3342      	adds	r3, #66	; 0x42
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	821a      	strh	r2, [r3, #16]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3354      	adds	r3, #84	; 0x54
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f009 f9ae 	bl	800b080 <memset>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	338e      	adds	r3, #142	; 0x8e
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	821a      	strh	r2, [r3, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	33a0      	adds	r3, #160	; 0xa0
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	821a      	strh	r2, [r3, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	33b2      	adds	r3, #178	; 0xb2
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	821a      	strh	r2, [r3, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	33c4      	adds	r3, #196	; 0xc4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	821a      	strh	r2, [r3, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2214      	movs	r2, #20
 8001e10:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2214      	movs	r2, #20
 8001e20:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	33e4      	adds	r3, #228	; 0xe4
 8001e38:	68f9      	ldr	r1, [r7, #12]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fede 	bl	8001bfc <_ZN4ADC_13ADC_interruptC1ERS_>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	33ec      	adds	r3, #236	; 0xec
 8001e44:	68f9      	ldr	r1, [r7, #12]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff04 	bl	8001c54 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
	{
		subscribed = false;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8001e6a:	8b3b      	ldrh	r3, [r7, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <_ZN4ADC_C1ER9InterruptS1_ht+0x1cc>
		  subscribe();
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fa08 	bl	8001288 <_ZN14TickSubscriber9subscribeEv>
	}
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	0800b19c 	.word	0x0800b19c

08001e88 <_ZN4ADC_14measure_offsetEv>:

	int16_t offset_I_S{0};
	int16_t offset_I_A{0};
	int16_t offset_I_C{0};

	void measure_offset() {
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
		work = false;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <_ZN4ADC_13measure_valueEv>:

	void measure_value() {
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
		work = true;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <_ZN4ADC_ixEh>:

	uint16_t operator[](uint8_t i) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
		return buffer[i];
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	3308      	adds	r3, #8
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	88db      	ldrh	r3, [r3, #6]
	}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <_ZN4ADC_5valueEh>:

	uint16_t value(uint8_t i) {
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	70fb      	strb	r3, [r7, #3]
		if (i == PS)
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d10a      	bne.n	8001f06 <_ZN4ADC_5valueEh+0x28>
			return arr_current_S[j];
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	330c      	adds	r3, #12
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	e01a      	b.n	8001f3c <_ZN4ADC_5valueEh+0x5e>
		if (i == phase_A)
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d109      	bne.n	8001f20 <_ZN4ADC_5valueEh+0x42>
			return arr_current_A[j];
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001f12:	461a      	mov	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3218      	adds	r2, #24
 8001f18:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	e00d      	b.n	8001f3c <_ZN4ADC_5valueEh+0x5e>
		if (i == phase_C)
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d10a      	bne.n	8001f3c <_ZN4ADC_5valueEh+0x5e>
			return arr_current_C[j];
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	3320      	adds	r3, #32
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	e7ff      	b.n	8001f3c <_ZN4ADC_5valueEh+0x5e>
//		if (i == HV)
//			return h_voltage;
	}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <_ZN4ADC_7currentEv>:

	uint16_t current(){
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
		return r;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001f54:	b29b      	uxth	r3, r3
	}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <_ZN4ADC_8value_HVEv>:

	uint16_t value_HV() {
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
		return h_voltage;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
	}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <_ZN4ADC_13reset_measureEv>:

	bool is_measure() { return measure; }
	void reset_measure() { measure = false; }
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <_ZN4ADC_11reset_errorEv>:
	bool is_error(){return error;}
	void reset_error(){error = false;}
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <_ZN4ADC_9is_over_sEv>:
	bool is_over_s(){return over_cur_s;}
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <_ZN4ADC_12reset_over_sEv>:
	void reset_over_s(){over_cur_s = false;}
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <_ZN4ADC_9is_over_aEv>:
	bool is_over_a(){return over_cur_a;}
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <_ZN4ADC_12reset_over_aEv>:
	void reset_over_a(){over_cur_a = false;}
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <_ZN4ADC_9is_over_cEv>:
	bool is_over_c(){return over_cur_c;}
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <_ZN4ADC_12reset_over_cEv>:
	void reset_over_c(){over_cur_c = false;}
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <_ZN4ADC_11is_error_HVEv>:
	bool is_error_HV(){return error_HV;}
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <_ZN4ADC_14reset_error_HVEv>:
	void reset_error_HV(){error_HV = false;}
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <_ZN4ADC_7what_KmEt>:
	void what_Km(uint16_t k) {Km_check = k > 50 ? true : false;}
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	2b32      	cmp	r3, #50	; 0x32
 8002084:	bf8c      	ite	hi
 8002086:	2301      	movhi	r3, #1
 8002088:	2300      	movls	r3, #0
 800208a:	b2da      	uxtb	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <_ZN4ADC_6notifyEv>:

	void notify(){
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	8a9b      	ldrh	r3, [r3, #20]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	b291      	uxth	r1, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	8291      	strh	r1, [r2, #20]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	8a52      	ldrh	r2, [r2, #18]
 80020b4:	4293      	cmp	r3, r2
 80020b6:	bf2c      	ite	cs
 80020b8:	2301      	movcs	r3, #1
 80020ba:	2300      	movcc	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00b      	beq.n	80020da <_ZN4ADC_6notifyEv+0x3e>
		   time = 0;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	829a      	strh	r2, [r3, #20]
		   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, qty_channel);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f103 0116 	add.w	r1, r3, #22
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7c1b      	ldrb	r3, [r3, #16]
 80020d2:	461a      	mov	r2, r3
 80020d4:	480d      	ldr	r0, [pc, #52]	; (800210c <_ZN4ADC_6notifyEv+0x70>)
 80020d6:	f003 fc43 	bl	8005960 <HAL_ADC_Start_DMA>
		}
		if( not time % 100 and not work)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	8a9b      	ldrh	r3, [r3, #20]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf0c      	ite	eq
 80020e2:	2301      	moveq	r3, #1
 80020e4:	2300      	movne	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <_ZN4ADC_6notifyEv+0x66>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80020f2:	f083 0301 	eor.w	r3, r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <_ZN4ADC_6notifyEv+0x66>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 80020fc:	4804      	ldr	r0, [pc, #16]	; (8002110 <_ZN4ADC_6notifyEv+0x74>)
 80020fe:	f004 f87d 	bl	80061fc <HAL_ADCEx_InjectedStart_IT>
	}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000108 	.word	0x20000108
 8002110:	20000138 	.word	0x20000138

08002114 <_ZN4ADC_15set_max_currentEt>:

	void set_max_current(uint16_t v){
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
		max_current = v;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <_ZN4ADC_21set_max_current_phaseEt>:

	void set_max_current_phase(uint16_t v){
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	807b      	strh	r3, [r7, #2]
		max_current_phase = v;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	887a      	ldrh	r2, [r7, #2]
 8002142:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
	}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <HAL_ADC_ConvCpltCallback>:
};

Interrupt adc_callback;
Interrupt adc_injected_callback;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_ADC_ConvCpltCallback+0x20>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d102      	bne.n	8002168 <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_callback.interrupt();
 8002162:	4804      	ldr	r0, [pc, #16]	; (8002174 <HAL_ADC_ConvCpltCallback+0x24>)
 8002164:	f7ff f9b6 	bl	80014d4 <_ZN9Interrupt9interruptEv>
	}
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40012400 	.word	0x40012400
 8002174:	20000350 	.word	0x20000350

08002178 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d102      	bne.n	8002190 <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 800218a:	4804      	ldr	r0, [pc, #16]	; (800219c <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 800218c:	f7ff f9a2 	bl	80014d4 <_ZN9Interrupt9interruptEv>
	}
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40012800 	.word	0x40012800
 800219c:	20000354 	.word	0x20000354

080021a0 <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	809a      	strh	r2, [r3, #4]
	  }
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	889b      	ldrh	r3, [r3, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	4619      	mov	r1, r3
 80021da:	f005 f9fc 	bl	80075d6 <HAL_GPIO_WritePin>
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	889b      	ldrh	r3, [r3, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	4619      	mov	r1, r3
 80021fa:	f005 f9ec 	bl	80075d6 <HAL_GPIO_WritePin>
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <_ZN3Pin6is_setEv>:
	  bool is_set(){return HAL_GPIO_ReadPin(port, n);}
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	889b      	ldrh	r3, [r3, #4]
 8002216:	4619      	mov	r1, r3
 8002218:	4610      	mov	r0, r2
 800221a:	f005 f9c5 	bl	80075a8 <HAL_GPIO_ReadPin>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf14      	ite	ne
 8002224:	2301      	movne	r3, #1
 8002226:	2300      	moveq	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <_ZN3PinaSEb>:

	  void toggle() {
		  HAL_GPIO_TogglePin(port, n);
	  }

	  bool operator=(bool v)
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <_ZN3PinaSEb+0x1a>
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ffbe 	bl	80021c6 <_ZN3Pin3setEv>
 800224a:	e002      	b.n	8002252 <_ZN3PinaSEb+0x20>
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ffca 	bl	80021e6 <_ZN3Pin5clearEv>
	      return v;
 8002252:	78fb      	ldrb	r3, [r7, #3]
	  }
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_ZN3PincvbEv>:
	  {
	     if (v)
	        toggle();
	  }

	  operator bool() {return is_set();}
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ffce 	bl	8002206 <_ZN3Pin6is_setEv>
 800226a:	4603      	mov	r3, r0
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_ZN3NTCC1Ev>:
    float T_formula; //25 градусов в Кельвин.
    float Temp_formula;

public:

    NTC()
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    {
      R_formula = 10000;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <_ZN3NTCC1Ev+0x20>)
 8002280:	605a      	str	r2, [r3, #4]
      T_formula  =298.15;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <_ZN3NTCC1Ev+0x24>)
 8002286:	609a      	str	r2, [r3, #8]
    }
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	461c4000 	.word	0x461c4000
 8002298:	43951333 	.word	0x43951333

0800229c <_ZN3NTCclEt>:

    uint16_t operator() (uint16_t adc)
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
    {
      //Вычисление температуры в К датчика
        Om_float = (float)4095 - adc;
 80022a8:	887b      	ldrh	r3, [r7, #2]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fd0a 	bl	8000cc4 <__aeabi_i2f>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4619      	mov	r1, r3
 80022b4:	482d      	ldr	r0, [pc, #180]	; (800236c <_ZN3NTCclEt+0xd0>)
 80022b6:	f7fe fc4f 	bl	8000b58 <__aeabi_fsub>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	601a      	str	r2, [r3, #0]
        Om_float = adc / Om_float;
 80022c2:	887b      	ldrh	r3, [r7, #2]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe fcfd 	bl	8000cc4 <__aeabi_i2f>
 80022ca:	4602      	mov	r2, r0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	4610      	mov	r0, r2
 80022d4:	f7fe fdfe 	bl	8000ed4 <__aeabi_fdiv>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	601a      	str	r2, [r3, #0]
        Om_float = Om_float * RESESTIVE_TEMPERATUR_SCHOULDER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4922      	ldr	r1, [pc, #136]	; (8002370 <_ZN3NTCclEt+0xd4>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fd40 	bl	8000d6c <__aeabi_fmul>
 80022ec:	4603      	mov	r3, r0
 80022ee:	461a      	mov	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	601a      	str	r2, [r3, #0]
        //Вычисляем по формуле T1 = 1 / ((ln(R1) – ln(R2)) / B + 1 / T2) температуру.
        Temp_formula = (1 / ( (log1pf(Om_float) - log1pf(R_formula)) / B_T_1_2 + 1 / T_formula));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f007 fd63 	bl	8009dc4 <log1pf>
 80022fe:	4604      	mov	r4, r0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	f007 fd5d 	bl	8009dc4 <log1pf>
 800230a:	4603      	mov	r3, r0
 800230c:	4619      	mov	r1, r3
 800230e:	4620      	mov	r0, r4
 8002310:	f7fe fc22 	bl	8000b58 <__aeabi_fsub>
 8002314:	4603      	mov	r3, r0
 8002316:	4917      	ldr	r1, [pc, #92]	; (8002374 <_ZN3NTCclEt+0xd8>)
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fddb 	bl	8000ed4 <__aeabi_fdiv>
 800231e:	4603      	mov	r3, r0
 8002320:	461c      	mov	r4, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	4619      	mov	r1, r3
 8002328:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800232c:	f7fe fdd2 	bl	8000ed4 <__aeabi_fdiv>
 8002330:	4603      	mov	r3, r0
 8002332:	4619      	mov	r1, r3
 8002334:	4620      	mov	r0, r4
 8002336:	f7fe fc11 	bl	8000b5c <__addsf3>
 800233a:	4603      	mov	r3, r0
 800233c:	4619      	mov	r1, r3
 800233e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002342:	f7fe fdc7 	bl	8000ed4 <__aeabi_fdiv>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	60da      	str	r2, [r3, #12]
        return (int16_t)Temp_formula - 273;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fee6 	bl	8001124 <__aeabi_f2iz>
 8002358:	4603      	mov	r3, r0
 800235a:	b21b      	sxth	r3, r3
 800235c:	b29b      	uxth	r3, r3
 800235e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002362:	b29b      	uxth	r3, r3
    }
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bd90      	pop	{r4, r7, pc}
 800236c:	457ff000 	.word	0x457ff000
 8002370:	461c4000 	.word	0x461c4000
 8002374:	45790000 	.word	0x45790000

08002378 <HAL_UART_TxCpltCallback>:

Interrupt interrupt_dma;
Interrupt interrupt_uart;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_UART_TxCpltCallback+0x20>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d102      	bne.n	8002390 <HAL_UART_TxCpltCallback+0x18>
		interrupt_dma.interrupt();
 800238a:	4804      	ldr	r0, [pc, #16]	; (800239c <HAL_UART_TxCpltCallback+0x24>)
 800238c:	f7ff f8a2 	bl	80014d4 <_ZN9Interrupt9interruptEv>
	}
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40004800 	.word	0x40004800
 800239c:	20000358 	.word	0x20000358

080023a0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <HAL_UARTEx_RxEventCallback+0x24>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d102      	bne.n	80023bc <HAL_UARTEx_RxEventCallback+0x1c>
		interrupt_uart.interrupt();
 80023b6:	4804      	ldr	r0, [pc, #16]	; (80023c8 <HAL_UARTEx_RxEventCallback+0x28>)
 80023b8:	f7ff f88c 	bl	80014d4 <_ZN9Interrupt9interruptEv>
	}
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40004800 	.word	0x40004800
 80023c8:	2000035c 	.word	0x2000035c

080023cc <_ZN9ContactorC1ER4ADC_R7ServiceI7In_data8Out_dataE>:
	bool on_off{false};
	bool enable{false};

public:

	Contactor(ADC_& adc, Service<In_data, Out_data>& service) : adc{adc}, service{service} {}
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3308      	adds	r3, #8
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe ff9f 	bl	800132c <_ZN5TimerC1Ev>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	761a      	strb	r2, [r3, #24]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	765a      	strb	r2, [r3, #25]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	769a      	strb	r2, [r3, #26]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_ZN9Contactor5startEv>:

	void start(){
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
		on_off = true;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	765a      	strb	r2, [r3, #25]
		enable = false;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	769a      	strb	r2, [r3, #26]
		timer.stop();
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3308      	adds	r3, #8
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff f811 	bl	800144a <_ZN5Timer4stopEv>
	}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <_ZN9Contactor4stopEv>:

	void stop(){
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
		TIM4->CCR1 = 0;
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <_ZN9Contactor4stopEv+0x34>)
 800243a:	2200      	movs	r2, #0
 800243c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800243e:	2100      	movs	r1, #0
 8002440:	4809      	ldr	r0, [pc, #36]	; (8002468 <_ZN9Contactor4stopEv+0x38>)
 8002442:	f005 ff99 	bl	8008378 <HAL_TIM_PWM_Stop>
		enable = false;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	769a      	strb	r2, [r3, #26]
		on_off = false;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	765a      	strb	r2, [r3, #25]
		timer.stop();
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3308      	adds	r3, #8
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fff7 	bl	800144a <_ZN5Timer4stopEv>
	}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40000800 	.word	0x40000800
 8002468:	2000023c 	.word	0x2000023c

0800246c <_ZN9Contactor5is_onEv>:

	bool is_on() {
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
		return on;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e1b      	ldrb	r3, [r3, #24]
	}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
	...

08002484 <_ZN9ContactorclEv>:

	void operator()(){
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
		if(on_off and not enable and service.outData.high_voltage >= 300) {
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7e5b      	ldrb	r3, [r3, #25]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d042      	beq.n	800251a <_ZN9ContactorclEv+0x96>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7e9b      	ldrb	r3, [r3, #26]
 8002498:	f083 0301 	eor.w	r3, r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d03b      	beq.n	800251a <_ZN9ContactorclEv+0x96>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80024aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80024ae:	d334      	bcc.n	800251a <_ZN9ContactorclEv+0x96>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80024b0:	2100      	movs	r1, #0
 80024b2:	4836      	ldr	r0, [pc, #216]	; (800258c <_ZN9ContactorclEv+0x108>)
 80024b4:	f005 fea6 	bl	8008204 <HAL_TIM_PWM_Start>
			TIM4->CCR1 = 1799;
 80024b8:	4b35      	ldr	r3, [pc, #212]	; (8002590 <_ZN9ContactorclEv+0x10c>)
 80024ba:	f240 7207 	movw	r2, #1799	; 0x707
 80024be:	635a      	str	r2, [r3, #52]	; 0x34
			if(is_on() and not timer.isCount()) {
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ffd3 	bl	800246c <_ZN9Contactor5is_onEv>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00c      	beq.n	80024e6 <_ZN9ContactorclEv+0x62>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3308      	adds	r3, #8
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe ffe7 	bl	80014a4 <_ZN5Timer7isCountEv>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f083 0301 	eor.w	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <_ZN9ContactorclEv+0x62>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <_ZN9ContactorclEv+0x64>
 80024e6:	2300      	movs	r3, #0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <_ZN9ContactorclEv+0x76>
				timer.start(1000);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3308      	adds	r3, #8
 80024f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe ff7b 	bl	80013f0 <_ZN5Timer5startEm>
			}

			if(timer.done()){
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3308      	adds	r3, #8
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe ffb2 	bl	8001468 <_ZN5Timer4doneEv>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <_ZN9ContactorclEv+0x96>
				timer.stop();
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3308      	adds	r3, #8
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe ff9b 	bl	800144a <_ZN5Timer4stopEv>
				enable = true;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	769a      	strb	r2, [r3, #26]
			}
		}

		if(enable){
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7e9b      	ldrb	r3, [r3, #26]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d023      	beq.n	800256a <_ZN9ContactorclEv+0xe6>
			if(service.outData.voltage_board > 240) TIM4->CCR1 = 900;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800252a:	2bf0      	cmp	r3, #240	; 0xf0
 800252c:	d904      	bls.n	8002538 <_ZN9ContactorclEv+0xb4>
 800252e:	4b18      	ldr	r3, [pc, #96]	; (8002590 <_ZN9ContactorclEv+0x10c>)
 8002530:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002534:	635a      	str	r2, [r3, #52]	; 0x34
 8002536:	e018      	b.n	800256a <_ZN9ContactorclEv+0xe6>
			else if (service.outData.voltage_board < 200) TIM4->CCR1 = 1799;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8002540:	2bc7      	cmp	r3, #199	; 0xc7
 8002542:	d804      	bhi.n	800254e <_ZN9ContactorclEv+0xca>
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <_ZN9ContactorclEv+0x10c>)
 8002546:	f240 7207 	movw	r2, #1799	; 0x707
 800254a:	635a      	str	r2, [r3, #52]	; 0x34
 800254c:	e00d      	b.n	800256a <_ZN9ContactorclEv+0xe6>
			else
				TIM4->CCR1 = 5220 - 18 * service.outData.voltage_board;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8002556:	461a      	mov	r2, r3
 8002558:	f06f 0311 	mvn.w	r3, #17
 800255c:	fb03 f302 	mul.w	r3, r3, r2
 8002560:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8002564:	3304      	adds	r3, #4
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <_ZN9ContactorclEv+0x10c>)
 8002568:	6353      	str	r3, [r2, #52]	; 0x34
		}

		on = HAL_GPIO_ReadPin(GPIOD, Contactor_Pin);
 800256a:	2104      	movs	r1, #4
 800256c:	4809      	ldr	r0, [pc, #36]	; (8002594 <_ZN9ContactorclEv+0x110>)
 800256e:	f005 f81b 	bl	80075a8 <HAL_GPIO_ReadPin>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2da      	uxtb	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	761a      	strb	r2, [r3, #24]
	}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000023c 	.word	0x2000023c
 8002590:	40000800 	.word	0x40000800
 8002594:	40011400 	.word	0x40011400

08002598 <_ZN9Convertor14TIM3_interruptC1ERS_>:

	using Parent = Convertor;

	struct TIM3_interrupt: Interrupting {
		Parent &parent;
		TIM3_interrupt(Parent &parent) :
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
				parent(parent) {
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fb19 	bl	8001bdc <_ZN12InterruptingC1Ev>
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <_ZN9Convertor14TIM3_interruptC1ERS_+0x38>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	605a      	str	r2, [r3, #4]
			parent.period_callback.subscribe(this);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe ff7b 	bl	80014ba <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	0800b178 	.word	0x0800b178

080025d4 <_ZN9Convertor14TIM3_interrupt9interruptEv>:
		void interrupt() override {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
			parent.period_interrupt();
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f831 	bl	8002648 <_ZN9Convertor16period_interruptEv>
		}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <_ZN9Convertor24adc_comparator_interruptC1ERS_>:
	} tim3_interrupt { *this };

	struct adc_comparator_interrupt: Interrupting {
		Parent &parent;
		adc_comparator_interrupt(Parent &parent) :
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
				parent(parent) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff faed 	bl	8001bdc <_ZN12InterruptingC1Ev>
 8002602:	4a09      	ldr	r2, [pc, #36]	; (8002628 <_ZN9Convertor24adc_comparator_interruptC1ERS_+0x38>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	605a      	str	r2, [r3, #4]
			parent.adc_comparator_callback.subscribe(this);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe ff4f 	bl	80014ba <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	0800b16c 	.word	0x0800b16c

0800262c <_ZN9Convertor24adc_comparator_interrupt9interruptEv>:
		void interrupt() override {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
			parent.comparator_interrupt();
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f879 	bl	8002730 <_ZN9Convertor20comparator_interruptEv>
		}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <_ZN9Convertor16period_interruptEv>:
	} adc_comparator_ { *this };

	void period_interrupt(){
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

		TIM1->CCR1 = Km * sin_table[k++] / 1000;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800265c:	1c59      	adds	r1, r3, #1
 800265e:	b2c8      	uxtb	r0, r1
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	f881 00a1 	strb.w	r0, [r1, #161]	; 0xa1
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	333c      	adds	r3, #60	; 0x3c
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	440b      	add	r3, r1
 800266e:	889b      	ldrh	r3, [r3, #4]
 8002670:	fb03 f302 	mul.w	r3, r3, r2
 8002674:	4a2b      	ldr	r2, [pc, #172]	; (8002724 <_ZN9Convertor16period_interruptEv+0xdc>)
 8002676:	492c      	ldr	r1, [pc, #176]	; (8002728 <_ZN9Convertor16period_interruptEv+0xe0>)
 8002678:	fba1 1303 	umull	r1, r3, r1, r3
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = Km * sin_table[m++] / 1000;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800268c:	1c59      	adds	r1, r3, #1
 800268e:	b2c8      	uxtb	r0, r1
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	f881 00a2 	strb.w	r0, [r1, #162]	; 0xa2
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	333c      	adds	r3, #60	; 0x3c
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	440b      	add	r3, r1
 800269e:	889b      	ldrh	r3, [r3, #4]
 80026a0:	fb03 f302 	mul.w	r3, r3, r2
 80026a4:	4a1f      	ldr	r2, [pc, #124]	; (8002724 <_ZN9Convertor16period_interruptEv+0xdc>)
 80026a6:	4920      	ldr	r1, [pc, #128]	; (8002728 <_ZN9Convertor16period_interruptEv+0xe0>)
 80026a8:	fba1 1303 	umull	r1, r3, r1, r3
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = Km * sin_table[n++] / 1000;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80026bc:	1c59      	adds	r1, r3, #1
 80026be:	b2c8      	uxtb	r0, r1
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	f881 00a3 	strb.w	r0, [r1, #163]	; 0xa3
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	333c      	adds	r3, #60	; 0x3c
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	440b      	add	r3, r1
 80026ce:	889b      	ldrh	r3, [r3, #4]
 80026d0:	fb03 f302 	mul.w	r3, r3, r2
 80026d4:	4a13      	ldr	r2, [pc, #76]	; (8002724 <_ZN9Convertor16period_interruptEv+0xdc>)
 80026d6:	4914      	ldr	r1, [pc, #80]	; (8002728 <_ZN9Convertor16period_interruptEv+0xe0>)
 80026d8:	fba1 1303 	umull	r1, r3, r1, r3
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	63d3      	str	r3, [r2, #60]	; 0x3c

		if (k >= qty_point) {k = 0;}
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80026e6:	2b11      	cmp	r3, #17
 80026e8:	d903      	bls.n	80026f2 <_ZN9Convertor16period_interruptEv+0xaa>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		if (m >= qty_point) {m = 0;}
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80026f8:	2b11      	cmp	r3, #17
 80026fa:	d903      	bls.n	8002704 <_ZN9Convertor16period_interruptEv+0xbc>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		if (n >= qty_point) {n = 0;}
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800270a:	2b11      	cmp	r3, #17
 800270c:	d903      	bls.n	8002716 <_ZN9Convertor16period_interruptEv+0xce>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

//		TIM3->ARR = (div_f / (frequency)) * 10 - 1;

		HAL_ADCEx_InjectedStart_IT(&hadc2);
 8002716:	4805      	ldr	r0, [pc, #20]	; (800272c <_ZN9Convertor16period_interruptEv+0xe4>)
 8002718:	f003 fd70 	bl	80061fc <HAL_ADCEx_InjectedStart_IT>

	}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40012c00 	.word	0x40012c00
 8002728:	10624dd3 	.word	0x10624dd3
 800272c:	20000138 	.word	0x20000138

08002730 <_ZN9Convertor20comparator_interruptEv>:

	void comparator_interrupt() {
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

	}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
	...

08002744 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptSA_R3PinSC_SC_SC_SC_SC_SC_SC_SC_>:

public:

	Convertor(ADC_& adc, Service<In_data, Out_data>& service, Contactor& contactor, Interrupt& period_callback, Interrupt& adc_comparator_callback
 8002744:	b5b0      	push	{r4, r5, r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
			, Pin& led_red, Pin& led_green, Pin& ventilator, Pin& unload, Pin& condens, Pin& TD_DM, Pin& SP, Pin& Start, Pin& Motor)
	: adc{adc}, service{service}, contactor{contactor}, period_callback{period_callback}, adc_comparator_callback{adc_comparator_callback}
	, led_red{led_red}, led_green{led_green}, ventilator{ventilator}, unload{unload}, condens{condens}, TD_DM{TD_DM}, SP{SP}, Start{Start}, Motor{Motor}
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a3a      	ldr	r2, [r7, #32]
 800276e:	611a      	str	r2, [r3, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002774:	615a      	str	r2, [r3, #20]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800277a:	619a      	str	r2, [r3, #24]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002780:	61da      	str	r2, [r3, #28]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002786:	621a      	str	r2, [r3, #32]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800278c:	625a      	str	r2, [r3, #36]	; 0x24
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027a4:	635a      	str	r2, [r3, #52]	; 0x34
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027aa:	639a      	str	r2, [r3, #56]	; 0x38
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	333c      	adds	r3, #60	; 0x3c
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fdbb 	bl	800132c <_ZN5TimerC1Ev>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	334c      	adds	r3, #76	; 0x4c
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fdb6 	bl	800132c <_ZN5TimerC1Ev>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	335c      	adds	r3, #92	; 0x5c
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fdb1 	bl	800132c <_ZN5TimerC1Ev>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	336c      	adds	r3, #108	; 0x6c
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fdac 	bl	800132c <_ZN5TimerC1Ev>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4a4f      	ldr	r2, [pc, #316]	; (8002914 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptSA_R3PinSC_SC_SC_SC_SC_SC_SC_SC_+0x1d0>)
 80027d8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80027dc:	4615      	mov	r5, r2
 80027de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027e6:	682b      	ldr	r3, [r5, #0]
 80027e8:	6023      	str	r3, [r4, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2206      	movs	r2, #6
 80027fe:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	220c      	movs	r2, #12
 8002806:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2205      	movs	r2, #5
 800280e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f240 427e 	movw	r2, #1150	; 0x47e
 8002818:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2264      	movs	r2, #100	; 0x64
 8002820:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2219      	movs	r2, #25
 8002828:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002832:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2202      	movs	r2, #2
 8002842:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2219      	movs	r2, #25
 800286a:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800289c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4a15      	ldr	r2, [pc, #84]	; (8002918 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptSA_R3PinSC_SC_SC_SC_SC_SC_SC_SC_+0x1d4>)
 80028c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	33cc      	adds	r3, #204	; 0xcc
 80028cc:	68f9      	ldr	r1, [r7, #12]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fe62 	bl	8002598 <_ZN9Convertor14TIM3_interruptC1ERS_>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	33d4      	adds	r3, #212	; 0xd4
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fe88 	bl	80025f0 <_ZN9Convertor24adc_comparator_interruptC1ERS_>
	{rerun.time_set = 0; timer_stop.time_set = 0; restart.time_set = 0; stop(); motor = Motor;}
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	659a      	str	r2, [r3, #88]	; 0x58
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	669a      	str	r2, [r3, #104]	; 0x68
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	679a      	str	r2, [r3, #120]	; 0x78
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 ffa6 	bl	8003844 <_ZN9Convertor4stopEv>
 80028f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80028fa:	f7ff fcaf 	bl	800225c <_ZN3PincvbEv>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bdb0      	pop	{r4, r5, r7, pc}
 8002912:	bf00      	nop
 8002914:	0800b130 	.word	0x0800b130
 8002918:	000186a0 	.word	0x000186a0

0800291c <_ZN9ConvertorclEv>:

	void operator() (){
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

		service();
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4618      	mov	r0, r3
 800292a:	f001 ff79 	bl	8004820 <_ZN7ServiceI7In_data8Out_dataEclEv>
		contactor();
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fda6 	bl	8002484 <_ZN9ContactorclEv>

		service.outData.PWM = Km;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	b212      	sxth	r2, r2
 8002944:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
		service.outData.error.on = Start;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689c      	ldr	r4, [r3, #8]
 8002950:	4610      	mov	r0, r2
 8002952:	f7ff fc83 	bl	800225c <_ZN3PincvbEv>
 8002956:	4603      	mov	r3, r0
 8002958:	461a      	mov	r2, r3
 800295a:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 800295e:	f362 1304 	bfi	r3, r2, #4, #1
 8002962:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
		service.outData.U_phase = U_phase;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 8002970:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		service.outData.error.overheat_c = not bool(TD_DM);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fc6f 	bl	800225c <_ZN3PincvbEv>
 800297e:	4603      	mov	r3, r0
 8002980:	4619      	mov	r1, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	f081 0301 	eor.w	r3, r1, #1
 800298a:	b2d9      	uxtb	r1, r3
 800298c:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 8002990:	f361 1386 	bfi	r3, r1, #6, #1
 8002994:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
		service.outData.error.HV_low = /*(service.outData.high_voltage <= 300) or*/ U_stop;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 10b6 	ldrb.w	r1, [r3, #182]	; 0xb6
 80029a2:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 80029a6:	f361 1345 	bfi	r3, r1, #5, #1
 80029aa:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
		service.outData.error.voltage_board_low = (service.outData.voltage_board <= 18);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6892      	ldr	r2, [r2, #8]
 80029ba:	2b12      	cmp	r3, #18
 80029bc:	bf94      	ite	ls
 80029be:	2301      	movls	r3, #1
 80029c0:	2300      	movhi	r3, #0
 80029c2:	b2d9      	uxtb	r1, r3
 80029c4:	f892 3093 	ldrb.w	r3, [r2, #147]	; 0x93
 80029c8:	f361 0341 	bfi	r3, r1, #1, #1
 80029cc:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
//		service.outData.error.voltage_board_low = false;
//		service.outData.error.HV = adc.is_error_HV();//service.outData.high_voltage >= 850;
		service.outData.max_current_A = min_ARR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 80029da:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
		service.outData.max_current_C = U_phase_max;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
 80029e8:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e

		service.outData.voltage_board = Kp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	; 0xa8
 80029f6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		service.outData.max_current = TIM3->ARR;
 80029fa:	4b99      	ldr	r3, [pc, #612]	; (8002c60 <_ZN9ConvertorclEv+0x344>)
 80029fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	b292      	uxth	r2, r2
 8002a04:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

		if(service.outData.high_voltage <= 300) U_stop = true;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002a10:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002a14:	d804      	bhi.n	8002a20 <_ZN9ConvertorclEv+0x104>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
 8002a1e:	e00f      	b.n	8002a40 <_ZN9ConvertorclEv+0x124>
		else if(service.outData.high_voltage > 300) {U_stop = false; adc.reset_error_HV();}
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002a28:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002a2c:	d908      	bls.n	8002a40 <_ZN9ConvertorclEv+0x124>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fb0d 	bl	800205a <_ZN4ADC_14reset_error_HVEv>

		if (service.outData.error.overheat_fc |= service.outData.convertor_temp >= 60) {
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002a48:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8002a58:	2b3b      	cmp	r3, #59	; 0x3b
 8002a5a:	bfcc      	ite	gt
 8002a5c:	2301      	movgt	r3, #1
 8002a5e:	2300      	movle	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2a00      	cmp	r2, #0
 8002a6a:	bf14      	ite	ne
 8002a6c:	2201      	movne	r2, #1
 8002a6e:	2200      	moveq	r2, #0
 8002a70:	b2d1      	uxtb	r1, r2
 8002a72:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8002a76:	f361 12c7 	bfi	r2, r1, #7, #1
 8002a7a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8002a7e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002a82:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d010      	beq.n	8002aae <_ZN9ConvertorclEv+0x192>
			service.outData.error.overheat_fc = service.outData.convertor_temp >= 50;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6892      	ldr	r2, [r2, #8]
 8002a98:	2b31      	cmp	r3, #49	; 0x31
 8002a9a:	bfcc      	ite	gt
 8002a9c:	2301      	movgt	r3, #1
 8002a9e:	2300      	movle	r3, #0
 8002aa0:	b2d9      	uxtb	r1, r3
 8002aa2:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 8002aa6:	f361 13c7 	bfi	r3, r1, #7, #1
 8002aaa:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
		}

		if (cool |= service.outData.convertor_temp >= 40) {
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8002abe:	2b27      	cmp	r3, #39	; 0x27
 8002ac0:	bfcc      	ite	gt
 8002ac2:	2301      	movgt	r3, #1
 8002ac4:	2300      	movle	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00b      	beq.n	8002afc <_ZN9ConvertorclEv+0x1e0>
			cool = service.outData.convertor_temp >= 30;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8002aec:	2b1d      	cmp	r3, #29
 8002aee:	bfcc      	ite	gt
 8002af0:	2301      	movgt	r3, #1
 8002af2:	2300      	movle	r3, #0
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		}

		if(enable)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <_ZN9ConvertorclEv+0x1fe>
			ventilator = cool;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1a      	ldr	r2, [r3, #32]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002b10:	4619      	mov	r1, r3
 8002b12:	4610      	mov	r0, r2
 8002b14:	f7ff fb8d 	bl	8002232 <_ZN3PinaSEb>
 8002b18:	e005      	b.n	8002b26 <_ZN9ConvertorclEv+0x20a>
		else
			ventilator = false;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fb86 	bl	8002232 <_ZN3PinaSEb>

		if(contactor.is_on() and enable) alarm();
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fc9e 	bl	800246c <_ZN9Contactor5is_onEv>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <_ZN9ConvertorclEv+0x228>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <_ZN9ConvertorclEv+0x228>
 8002b40:	2301      	movs	r3, #1
 8002b42:	e000      	b.n	8002b46 <_ZN9ConvertorclEv+0x22a>
 8002b44:	2300      	movs	r3, #0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <_ZN9ConvertorclEv+0x234>
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 feca 	bl	80038e4 <_ZN9Convertor5alarmEv>

		switch(state) {
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d004      	beq.n	8002b62 <_ZN9ConvertorclEv+0x246>
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	f000 81eb 	beq.w	8002f34 <_ZN9ConvertorclEv+0x618>
			}
	}
} // else if(motor == SYNCHRON) {
			break;
		}
	}
 8002b5e:	f000 bdc4 	b.w	80036ea <_ZN9ConvertorclEv+0xdce>
			motor = Motor;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fb78 	bl	800225c <_ZN3PincvbEv>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
if(motor == ASYNCHRON) {
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d177      	bne.n	8002c70 <_ZN9ConvertorclEv+0x354>
	adc.set_max_current(20);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2114      	movs	r1, #20
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fac4 	bl	8002114 <_ZN4ADC_15set_max_currentEt>
	adc.set_max_current_phase(22);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2116      	movs	r1, #22
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff facd 	bl	8002132 <_ZN4ADC_21set_max_current_phaseEt>
	unload = false;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fb47 	bl	8002232 <_ZN3PinaSEb>
	if (service.outData.high_voltage > 300 and service.outData.high_voltage < 540) {
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002bac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002bb0:	d94c      	bls.n	8002c4c <_ZN9ConvertorclEv+0x330>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002bba:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8002bbe:	d245      	bcs.n	8002c4c <_ZN9ConvertorclEv+0x330>
		U_phase_max = ((((service.outData.high_voltage / 20) * 990) / 141) * 115) / 100;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002bc8:	4a26      	ldr	r2, [pc, #152]	; (8002c64 <_ZN9ConvertorclEv+0x348>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f240 33de 	movw	r3, #990	; 0x3de
 8002bd8:	fb03 f302 	mul.w	r3, r3, r2
 8002bdc:	4a22      	ldr	r2, [pc, #136]	; (8002c68 <_ZN9ConvertorclEv+0x34c>)
 8002bde:	fb82 1203 	smull	r1, r2, r2, r3
 8002be2:	1152      	asrs	r2, r2, #5
 8002be4:	17db      	asrs	r3, r3, #31
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2273      	movs	r2, #115	; 0x73
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	4a1f      	ldr	r2, [pc, #124]	; (8002c6c <_ZN9ConvertorclEv+0x350>)
 8002bf0:	fb82 1203 	smull	r1, r2, r2, r3
 8002bf4:	1152      	asrs	r2, r2, #5
 8002bf6:	17db      	asrs	r3, r3, #31
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		min_ARR = (div_f / ((U_phase_max) * 5)) * 22; // 5/22 = 50/220
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8002c0e:	4619      	mov	r1, r3
 8002c10:	460b      	mov	r3, r1
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	0092      	lsls	r2, r2, #2
 8002c20:	441a      	add	r2, r3
 8002c22:	0052      	lsls	r2, r2, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		if(min_ARR <= 2081) min_ARR = 2081;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002c36:	f640 0221 	movw	r2, #2081	; 0x821
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	f200 8087 	bhi.w	8002d4e <_ZN9ConvertorclEv+0x432>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f640 0221 	movw	r2, #2081	; 0x821
 8002c46:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8002c4a:	e080      	b.n	8002d4e <_ZN9ConvertorclEv+0x432>
		U_phase_max = 220;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	22dc      	movs	r2, #220	; 0xdc
 8002c50:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		min_ARR = 2080;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f44f 6202 	mov.w	r2, #2080	; 0x820
 8002c5a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8002c5e:	e076      	b.n	8002d4e <_ZN9ConvertorclEv+0x432>
 8002c60:	40000400 	.word	0x40000400
 8002c64:	cccccccd 	.word	0xcccccccd
 8002c68:	3a196b1f 	.word	0x3a196b1f
 8002c6c:	51eb851f 	.word	0x51eb851f
} else if (motor == SYNCHRON) {
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d169      	bne.n	8002d4e <_ZN9ConvertorclEv+0x432>
	adc.set_max_current(35);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2123      	movs	r1, #35	; 0x23
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fa47 	bl	8002114 <_ZN4ADC_15set_max_currentEt>
	adc.set_max_current_phase(35);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2123      	movs	r1, #35	; 0x23
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fa50 	bl	8002132 <_ZN4ADC_21set_max_current_phaseEt>
			unload = true;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	2101      	movs	r1, #1
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff faca 	bl	8002232 <_ZN3PinaSEb>
			if(service.outData.high_voltage > 300 and service.outData.high_voltage < 540) {
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002ca6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002caa:	d947      	bls.n	8002d3c <_ZN9ConvertorclEv+0x420>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002cb4:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8002cb8:	d240      	bcs.n	8002d3c <_ZN9ConvertorclEv+0x420>
				U_phase_max = ((((service.outData.high_voltage / 20) * 940) / 141) * 115) / 100;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002cc2:	4a98      	ldr	r2, [pc, #608]	; (8002f24 <_ZN9ConvertorclEv+0x608>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f44f 736b 	mov.w	r3, #940	; 0x3ac
 8002cd2:	fb03 f302 	mul.w	r3, r3, r2
 8002cd6:	4a94      	ldr	r2, [pc, #592]	; (8002f28 <_ZN9ConvertorclEv+0x60c>)
 8002cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8002cdc:	1152      	asrs	r2, r2, #5
 8002cde:	17db      	asrs	r3, r3, #31
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2273      	movs	r2, #115	; 0x73
 8002ce4:	fb02 f303 	mul.w	r3, r2, r3
 8002ce8:	4a90      	ldr	r2, [pc, #576]	; (8002f2c <_ZN9ConvertorclEv+0x610>)
 8002cea:	fb82 1203 	smull	r1, r2, r2, r3
 8002cee:	1152      	asrs	r2, r2, #5
 8002cf0:	17db      	asrs	r3, r3, #31
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
				min_ARR = ( (div_f / (U_phase_max)) * 50) / 70; // 70/53 = 280/212
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
 8002d08:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d0c:	2232      	movs	r2, #50	; 0x32
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	085b      	lsrs	r3, r3, #1
 8002d14:	4a86      	ldr	r2, [pc, #536]	; (8002f30 <_ZN9ConvertorclEv+0x614>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
				if(min_ARR < 362) min_ARR = 362;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002d2a:	f5b3 7fb5 	cmp.w	r3, #362	; 0x16a
 8002d2e:	d20e      	bcs.n	8002d4e <_ZN9ConvertorclEv+0x432>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8002d36:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8002d3a:	e008      	b.n	8002d4e <_ZN9ConvertorclEv+0x432>
				U_phase_max = 215;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	22d7      	movs	r2, #215	; 0xd7
 8002d40:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
				min_ARR = 362;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8002d4a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			enable = Start and not rerun.isCount() /*and not service.pressure_is_normal()*/
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fa82 	bl	800225c <_ZN3PincvbEv>
 8002d58:	4603      	mov	r3, r0
					 and not service.outData.error.voltage_board_low and (error < 3) and not U_stop /* and not service.outData.error.contactor*/;
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d049      	beq.n	8002df2 <_ZN9ConvertorclEv+0x4d6>
			enable = Start and not rerun.isCount() /*and not service.pressure_is_normal()*/
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	334c      	adds	r3, #76	; 0x4c
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fb9e 	bl	80014a4 <_ZN5Timer7isCountEv>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f083 0301 	eor.w	r3, r3, #1
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d03e      	beq.n	8002df2 <_ZN9ConvertorclEv+0x4d6>
					 and not service.outData.error.overheat_fc and not service.outData.error.overheat_c
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002d7c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f083 0301 	eor.w	r3, r3, #1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d032      	beq.n	8002df2 <_ZN9ConvertorclEv+0x4d6>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002d94:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f083 0301 	eor.w	r3, r3, #1
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d026      	beq.n	8002df2 <_ZN9ConvertorclEv+0x4d6>
					 /*and not service.outData.error.HV */and not service.outData.error.HV_low
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002dac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f083 0301 	eor.w	r3, r3, #1
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01a      	beq.n	8002df2 <_ZN9ConvertorclEv+0x4d6>
					 and not service.outData.error.voltage_board_low and (error < 3) and not U_stop /* and not service.outData.error.contactor*/;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002dc4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f083 0301 	eor.w	r3, r3, #1
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00e      	beq.n	8002df2 <_ZN9ConvertorclEv+0x4d6>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d809      	bhi.n	8002df2 <_ZN9ConvertorclEv+0x4d6>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8002de4:	f083 0301 	eor.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <_ZN9ConvertorclEv+0x4d6>
 8002dee:	2201      	movs	r2, #1
 8002df0:	e000      	b.n	8002df4 <_ZN9ConvertorclEv+0x4d8>
 8002df2:	2200      	movs	r2, #0
			enable = Start and not rerun.isCount() /*and not service.pressure_is_normal()*/
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
			if(rerun.done()) rerun.stop();
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	334c      	adds	r3, #76	; 0x4c
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe fb32 	bl	8001468 <_ZN5Timer4doneEv>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <_ZN9ConvertorclEv+0x4f8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	334c      	adds	r3, #76	; 0x4c
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe fb1b 	bl	800144a <_ZN5Timer4stopEv>
			if(error >= 3 and not restart.isCount()) {
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d90c      	bls.n	8002e38 <_ZN9ConvertorclEv+0x51c>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	336c      	adds	r3, #108	; 0x6c
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe fb3e 	bl	80014a4 <_ZN5Timer7isCountEv>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f083 0301 	eor.w	r3, r3, #1
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <_ZN9ConvertorclEv+0x51c>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <_ZN9ConvertorclEv+0x51e>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d006      	beq.n	8002e4c <_ZN9ConvertorclEv+0x530>
				restart.start(10'000);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	336c      	adds	r3, #108	; 0x6c
 8002e42:	f242 7110 	movw	r1, #10000	; 0x2710
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fad2 	bl	80013f0 <_ZN5Timer5startEm>
			if(error >= 3 and restart.done()) {
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d909      	bls.n	8002e6a <_ZN9ConvertorclEv+0x54e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	336c      	adds	r3, #108	; 0x6c
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fb04 	bl	8001468 <_ZN5Timer4doneEv>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <_ZN9ConvertorclEv+0x54e>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <_ZN9ConvertorclEv+0x550>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <_ZN9ConvertorclEv+0x566>
				restart.stop();
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	336c      	adds	r3, #108	; 0x6c
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe fae8 	bl	800144a <_ZN5Timer4stopEv>
				error = 0;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			if (enable){
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d018      	beq.n	8002ebe <_ZN9ConvertorclEv+0x5a2>
				rerun.stop();
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	334c      	adds	r3, #76	; 0x4c
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe fada 	bl	800144a <_ZN5Timer4stopEv>
				contactor.start();
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fab5 	bl	800240a <_ZN9Contactor5startEv>
				if(contactor.is_on()) {
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fae1 	bl	800246c <_ZN9Contactor5is_onEv>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d009      	beq.n	8002ec4 <_ZN9ConvertorclEv+0x5a8>
					pusk();
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fc21 	bl	80036f8 <_ZN9Convertor4puskEv>
					state = State::starting;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	e002      	b.n	8002ec4 <_ZN9ConvertorclEv+0x5a8>
			} else stop();
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fcc0 	bl	8003844 <_ZN9Convertor4stopEv>
			if (not Start) {
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff f9c7 	bl	800225c <_ZN3PincvbEv>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f083 0301 	eor.w	r3, r3, #1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 8404 	beq.w	80036e4 <_ZN9ConvertorclEv+0xdc8>
				rerun.stop();
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	334c      	adds	r3, #76	; 0x4c
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe fab2 	bl	800144a <_ZN5Timer4stopEv>
				rerun.time_set = 0;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	659a      	str	r2, [r3, #88]	; 0x58
				restart.stop();
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	336c      	adds	r3, #108	; 0x6c
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe faaa 	bl	800144a <_ZN5Timer4stopEv>
				restart.time_set = 0;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	679a      	str	r2, [r3, #120]	; 0x78
				error = 0;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
				led_red = false;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff f991 	bl	8002232 <_ZN3PinaSEb>
				adc.reset_error();
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff f83c 	bl	8001f92 <_ZN4ADC_11reset_errorEv>
				phase = false;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
			break;
 8002f22:	e3df      	b.n	80036e4 <_ZN9ConvertorclEv+0xdc8>
 8002f24:	cccccccd 	.word	0xcccccccd
 8002f28:	3a196b1f 	.word	0x3a196b1f
 8002f2c:	51eb851f 	.word	0x51eb851f
 8002f30:	ea0ea0eb 	.word	0xea0ea0eb
			adc.what_Km(Km);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f7ff f896 	bl	8002074 <_ZN4ADC_7what_KmEt>
if(motor == ASYNCHRON) {
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	f040 816c 	bne.w	800322c <_ZN9ConvertorclEv+0x910>
	if (service.outData.high_voltage > 300 and service.outData.high_voltage < 540) {
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002f60:	d94b      	bls.n	8002ffa <_ZN9ConvertorclEv+0x6de>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f6a:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8002f6e:	d244      	bcs.n	8002ffa <_ZN9ConvertorclEv+0x6de>
		U_phase_max = ((((service.outData.high_voltage / 20) * 990) / 141) * 115) / 100;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f78:	4aa7      	ldr	r2, [pc, #668]	; (8003218 <_ZN9ConvertorclEv+0x8fc>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	f240 33de 	movw	r3, #990	; 0x3de
 8002f88:	fb03 f302 	mul.w	r3, r3, r2
 8002f8c:	4aa3      	ldr	r2, [pc, #652]	; (800321c <_ZN9ConvertorclEv+0x900>)
 8002f8e:	fb82 1203 	smull	r1, r2, r2, r3
 8002f92:	1152      	asrs	r2, r2, #5
 8002f94:	17db      	asrs	r3, r3, #31
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2273      	movs	r2, #115	; 0x73
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	4aa0      	ldr	r2, [pc, #640]	; (8003220 <_ZN9ConvertorclEv+0x904>)
 8002fa0:	fb82 1203 	smull	r1, r2, r2, r3
 8002fa4:	1152      	asrs	r2, r2, #5
 8002fa6:	17db      	asrs	r3, r3, #31
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		min_ARR = (div_f / ((U_phase_max) * 5)) * 22; // 5/22 = 50/220
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	0092      	lsls	r2, r2, #2
 8002fd0:	441a      	add	r2, r3
 8002fd2:	0052      	lsls	r2, r2, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		if(min_ARR <= 2081) min_ARR = 2081;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002fe6:	f640 0221 	movw	r2, #2081	; 0x821
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d80e      	bhi.n	800300c <_ZN9ConvertorclEv+0x6f0>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f640 0221 	movw	r2, #2081	; 0x821
 8002ff4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8002ff8:	e008      	b.n	800300c <_ZN9ConvertorclEv+0x6f0>
		U_phase_max = 220;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	22dc      	movs	r2, #220	; 0xdc
 8002ffe:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		min_ARR = 2080;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f44f 6202 	mov.w	r2, #2080	; 0x820
 8003008:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	U_phase = ((((service.outData.high_voltage / 20) * Km) / 141) * 112) / 100; // 31 = 620 / 20; 141 = sqrt(2) * 100; 115 = добавочный
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003014:	4a80      	ldr	r2, [pc, #512]	; (8003218 <_ZN9ConvertorclEv+0x8fc>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	b29b      	uxth	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003026:	fb03 f302 	mul.w	r3, r3, r2
 800302a:	4a7c      	ldr	r2, [pc, #496]	; (800321c <_ZN9ConvertorclEv+0x900>)
 800302c:	fba2 2303 	umull	r2, r3, r2, r3
 8003030:	095a      	lsrs	r2, r3, #5
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	461a      	mov	r2, r3
 800303c:	4b78      	ldr	r3, [pc, #480]	; (8003220 <_ZN9ConvertorclEv+0x904>)
 800303e:	fba3 2302 	umull	r2, r3, r3, r2
 8003042:	095b      	lsrs	r3, r3, #5
 8003044:	b29a      	uxth	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	Km = offset + ( (Kp * (div_f / TIM3->ARR) / service.outData.high_voltage ) * 4 )/ 3;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 8003052:	4619      	mov	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800305a:	4618      	mov	r0, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003062:	4b70      	ldr	r3, [pc, #448]	; (8003224 <_ZN9ConvertorclEv+0x908>)
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	fbb2 f3f3 	udiv	r3, r2, r3
 800306a:	fb03 f300 	mul.w	r3, r3, r0
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6892      	ldr	r2, [r2, #8]
 8003072:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
 8003076:	fbb3 f3f2 	udiv	r3, r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4a6a      	ldr	r2, [pc, #424]	; (8003228 <_ZN9ConvertorclEv+0x90c>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	18ca      	adds	r2, r1, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	if (TIM3->ARR <= (min_ARR + 5)) {
 800308c:	4b65      	ldr	r3, [pc, #404]	; (8003224 <_ZN9ConvertorclEv+0x908>)
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8003096:	3205      	adds	r2, #5
 8003098:	4293      	cmp	r3, r2
 800309a:	bf94      	ite	ls
 800309c:	2301      	movls	r3, #1
 800309e:	2300      	movhi	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <_ZN9ConvertorclEv+0x79e>
		unload = true;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	2101      	movs	r1, #1
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff f8c0 	bl	8002232 <_ZN3PinaSEb>
		error = 0;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	if (Kp > 12000) {
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80030c0:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d904      	bls.n	80030d2 <_ZN9ConvertorclEv+0x7b6>
		Kp = 12000;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80030ce:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	if (TIM3->ARR <= min_ARR) {
 80030d2:	4b54      	ldr	r3, [pc, #336]	; (8003224 <_ZN9ConvertorclEv+0x908>)
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 80030dc:	4293      	cmp	r3, r2
 80030de:	bf94      	ite	ls
 80030e0:	2301      	movls	r3, #1
 80030e2:	2300      	movhi	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d04d      	beq.n	8003186 <_ZN9ConvertorclEv+0x86a>
		if (U_phase - U_phase_max > 10) {
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80030f0:	461a      	mov	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b0a      	cmp	r3, #10
 80030fc:	dd08      	ble.n	8003110 <_ZN9ConvertorclEv+0x7f4>
			Kp--;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800310e:	e01e      	b.n	800314e <_ZN9ConvertorclEv+0x832>
			if(adc.current() < 120 and (U_phase_max - U_phase > 10))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4618      	mov	r0, r3
 8003116:	f7fe ff16 	bl	8001f46 <_ZN4ADC_7currentEv>
 800311a:	4603      	mov	r3, r0
 800311c:	2b77      	cmp	r3, #119	; 0x77
 800311e:	d80b      	bhi.n	8003138 <_ZN9ConvertorclEv+0x81c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8003126:	461a      	mov	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b0a      	cmp	r3, #10
 8003132:	dd01      	ble.n	8003138 <_ZN9ConvertorclEv+0x81c>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <_ZN9ConvertorclEv+0x81e>
 8003138:	2300      	movs	r3, #0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <_ZN9ConvertorclEv+0x832>
			Kp++;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003144:	3301      	adds	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		if (adc.current() > 160) {
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fe fef7 	bl	8001f46 <_ZN4ADC_7currentEv>
 8003158:	4603      	mov	r3, r0
 800315a:	2ba0      	cmp	r3, #160	; 0xa0
 800315c:	bf8c      	ite	hi
 800315e:	2301      	movhi	r3, #1
 8003160:	2300      	movls	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00e      	beq.n	8003186 <_ZN9ConvertorclEv+0x86a>
			if (Kp > 5000) {
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d907      	bls.n	8003186 <_ZN9ConvertorclEv+0x86a>
				Kp -= 4;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800317c:	3b04      	subs	r3, #4
 800317e:	b29a      	uxth	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	if (adc.current() < 35) {
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fedb 	bl	8001f46 <_ZN4ADC_7currentEv>
 8003190:	4603      	mov	r3, r0
 8003192:	2b22      	cmp	r3, #34	; 0x22
 8003194:	bf94      	ite	ls
 8003196:	2301      	movls	r3, #1
 8003198:	2300      	movhi	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00e      	beq.n	80031be <_ZN9ConvertorclEv+0x8a2>
		if (Kp < 12000) {
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80031a6:	f642 62df 	movw	r2, #11999	; 0x2edf
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d807      	bhi.n	80031be <_ZN9ConvertorclEv+0x8a2>
			Kp++;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80031b4:	3301      	adds	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	if (TIM3->ARR > (min_ARR + 5)) {
 80031be:	4b19      	ldr	r3, [pc, #100]	; (8003224 <_ZN9ConvertorclEv+0x908>)
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 80031c8:	3205      	adds	r2, #5
 80031ca:	4293      	cmp	r3, r2
 80031cc:	bf8c      	ite	hi
 80031ce:	2301      	movhi	r3, #1
 80031d0:	2300      	movls	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 81b0 	beq.w	800353a <_ZN9ConvertorclEv+0xc1e>
		if (adc.current() > 75) {
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fe feb1 	bl	8001f46 <_ZN4ADC_7currentEv>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b4b      	cmp	r3, #75	; 0x4b
 80031e8:	bf8c      	ite	hi
 80031ea:	2301      	movhi	r3, #1
 80031ec:	2300      	movls	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 81a2 	beq.w	800353a <_ZN9ConvertorclEv+0xc1e>
			if (Kp >= 6000) {
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80031fc:	f241 726f 	movw	r2, #5999	; 0x176f
 8003200:	4293      	cmp	r3, r2
 8003202:	f240 819a 	bls.w	800353a <_ZN9ConvertorclEv+0xc1e>
				Kp--;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8003216:	e190      	b.n	800353a <_ZN9ConvertorclEv+0xc1e>
 8003218:	cccccccd 	.word	0xcccccccd
 800321c:	3a196b1f 	.word	0x3a196b1f
 8003220:	51eb851f 	.word	0x51eb851f
 8003224:	40000400 	.word	0x40000400
 8003228:	aaaaaaab 	.word	0xaaaaaaab
} else if(motor == SYNCHRON) {
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 8181 	bne.w	800353a <_ZN9ConvertorclEv+0xc1e>
				if (service.outData.high_voltage > 300 and service.outData.high_voltage < 540 and not cold) {
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003240:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003244:	d94f      	bls.n	80032e6 <_ZN9ConvertorclEv+0x9ca>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800324e:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8003252:	d248      	bcs.n	80032e6 <_ZN9ConvertorclEv+0x9ca>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800325a:	f083 0301 	eor.w	r3, r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d040      	beq.n	80032e6 <_ZN9ConvertorclEv+0x9ca>
					U_phase_max = ((((service.outData.high_voltage / 20) * 940) / 141) * 115) / 100;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800326c:	4a6d      	ldr	r2, [pc, #436]	; (8003424 <_ZN9ConvertorclEv+0xb08>)
 800326e:	fba2 2303 	umull	r2, r3, r2, r3
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	b29b      	uxth	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	f44f 736b 	mov.w	r3, #940	; 0x3ac
 800327c:	fb03 f302 	mul.w	r3, r3, r2
 8003280:	4a69      	ldr	r2, [pc, #420]	; (8003428 <_ZN9ConvertorclEv+0xb0c>)
 8003282:	fb82 1203 	smull	r1, r2, r2, r3
 8003286:	1152      	asrs	r2, r2, #5
 8003288:	17db      	asrs	r3, r3, #31
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2273      	movs	r2, #115	; 0x73
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	4a66      	ldr	r2, [pc, #408]	; (800342c <_ZN9ConvertorclEv+0xb10>)
 8003294:	fb82 1203 	smull	r1, r2, r2, r3
 8003298:	1152      	asrs	r2, r2, #5
 800329a:	17db      	asrs	r3, r3, #31
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	b29a      	uxth	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
					min_ARR = ((div_f / (U_phase_max)) * 50) / 70; // 70/53 = 280/212
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
 80032b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80032b6:	2232      	movs	r2, #50	; 0x32
 80032b8:	fb02 f303 	mul.w	r3, r2, r3
 80032bc:	085b      	lsrs	r3, r3, #1
 80032be:	4a5c      	ldr	r2, [pc, #368]	; (8003430 <_ZN9ConvertorclEv+0xb14>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	095b      	lsrs	r3, r3, #5
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
					if(min_ARR < 362) min_ARR = 362;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 80032d4:	f5b3 7fb5 	cmp.w	r3, #362	; 0x16a
 80032d8:	d216      	bcs.n	8003308 <_ZN9ConvertorclEv+0x9ec>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80032e0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 80032e4:	e010      	b.n	8003308 <_ZN9ConvertorclEv+0x9ec>
				} else if (not cold){
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 80032ec:	f083 0301 	eor.w	r3, r3, #1
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <_ZN9ConvertorclEv+0x9ec>
					min_ARR = 362;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80032fc:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
					U_phase_max = 215;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	22d7      	movs	r2, #215	; 0xd7
 8003304:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
				U_phase = ((((service.outData.high_voltage / 20) * Km) / 141) * 115) / 100; // 31 = 620 / 20; 141 = sqrt(2) * 100; 115 = добавочный
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003310:	4a44      	ldr	r2, [pc, #272]	; (8003424 <_ZN9ConvertorclEv+0xb08>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	091b      	lsrs	r3, r3, #4
 8003318:	b29b      	uxth	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003322:	fb03 f302 	mul.w	r3, r3, r2
 8003326:	4a40      	ldr	r2, [pc, #256]	; (8003428 <_ZN9ConvertorclEv+0xb0c>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	2273      	movs	r2, #115	; 0x73
 8003330:	fb02 f303 	mul.w	r3, r2, r3
 8003334:	4a3d      	ldr	r2, [pc, #244]	; (800342c <_ZN9ConvertorclEv+0xb10>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	b29a      	uxth	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
				U_phase += (U_phase_max - U_phase) * 10 / 50;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8b3 20b4 	ldrh.w	r2, [r3, #180]	; 0xb4
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8003350:	4619      	mov	r1, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003358:	1acb      	subs	r3, r1, r3
 800335a:	4936      	ldr	r1, [pc, #216]	; (8003434 <_ZN9ConvertorclEv+0xb18>)
 800335c:	fb81 0103 	smull	r0, r1, r1, r3
 8003360:	1049      	asrs	r1, r1, #1
 8003362:	17db      	asrs	r3, r3, #31
 8003364:	1acb      	subs	r3, r1, r3
 8003366:	b29b      	uxth	r3, r3
 8003368:	4413      	add	r3, r2
 800336a:	b29a      	uxth	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
				Km = offset + Kp * (div_f / TIM3->ARR) / (service.outData.high_voltage);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 8003378:	4619      	mov	r1, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003380:	4618      	mov	r0, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003388:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <_ZN9ConvertorclEv+0xb1c>)
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	fb03 f300 	mul.w	r3, r3, r0
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6892      	ldr	r2, [r2, #8]
 8003398:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
 800339c:	fbb3 f3f2 	udiv	r3, r3, r2
 80033a0:	18ca      	adds	r2, r1, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
				if (TIM3->ARR <= (min_ARR + 5)) {
 80033a8:	4b23      	ldr	r3, [pc, #140]	; (8003438 <_ZN9ConvertorclEv+0xb1c>)
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 80033b2:	3205      	adds	r2, #5
 80033b4:	4293      	cmp	r3, r2
 80033b6:	bf94      	ite	ls
 80033b8:	2301      	movls	r3, #1
 80033ba:	2300      	movhi	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <_ZN9ConvertorclEv+0xaba>
					unload = false;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe ff32 	bl	8002232 <_ZN3PinaSEb>
					error = 0;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
				if(TIM3->ARR <= min_ARR) {
 80033d6:	4b18      	ldr	r3, [pc, #96]	; (8003438 <_ZN9ConvertorclEv+0xb1c>)
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 80033e0:	4293      	cmp	r3, r2
 80033e2:	bf94      	ite	ls
 80033e4:	2301      	movls	r3, #1
 80033e6:	2300      	movhi	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d054      	beq.n	8003498 <_ZN9ConvertorclEv+0xb7c>
					if ((U_phase > U_phase_max)) {
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8b3 20b4 	ldrh.w	r2, [r3, #180]	; 0xb4
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d91e      	bls.n	800343c <_ZN9ConvertorclEv+0xb20>
						if((U_phase - U_phase_max) > 10)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003404:	461a      	mov	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b0a      	cmp	r3, #10
 8003410:	dd26      	ble.n	8003460 <_ZN9ConvertorclEv+0xb44>
							Kp--;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8003422:	e01d      	b.n	8003460 <_ZN9ConvertorclEv+0xb44>
 8003424:	cccccccd 	.word	0xcccccccd
 8003428:	3a196b1f 	.word	0x3a196b1f
 800342c:	51eb851f 	.word	0x51eb851f
 8003430:	ea0ea0eb 	.word	0xea0ea0eb
 8003434:	66666667 	.word	0x66666667
 8003438:	40000400 	.word	0x40000400
						if ((U_phase_max - U_phase > 10))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8003442:	461a      	mov	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b0a      	cmp	r3, #10
 800344e:	dd07      	ble.n	8003460 <_ZN9ConvertorclEv+0xb44>
							Kp++;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003456:	3301      	adds	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					if (adc.current() > 160) {
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe fd6e 	bl	8001f46 <_ZN4ADC_7currentEv>
 800346a:	4603      	mov	r3, r0
 800346c:	2ba0      	cmp	r3, #160	; 0xa0
 800346e:	bf8c      	ite	hi
 8003470:	2301      	movhi	r3, #1
 8003472:	2300      	movls	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00e      	beq.n	8003498 <_ZN9ConvertorclEv+0xb7c>
						if (Kp > 1250) {
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003480:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8003484:	4293      	cmp	r3, r2
 8003486:	d907      	bls.n	8003498 <_ZN9ConvertorclEv+0xb7c>
							Kp -= 4;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800348e:	3b04      	subs	r3, #4
 8003490:	b29a      	uxth	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
				if (adc.current() < 35) {
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe fd52 	bl	8001f46 <_ZN4ADC_7currentEv>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b22      	cmp	r3, #34	; 0x22
 80034a6:	bf94      	ite	ls
 80034a8:	2301      	movls	r3, #1
 80034aa:	2300      	movhi	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00e      	beq.n	80034d0 <_ZN9ConvertorclEv+0xbb4>
					if (Kp < 2200) {
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80034b8:	f640 0297 	movw	r2, #2199	; 0x897
 80034bc:	4293      	cmp	r3, r2
 80034be:	d807      	bhi.n	80034d0 <_ZN9ConvertorclEv+0xbb4>
						Kp++;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80034c6:	3301      	adds	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
				if (TIM3->ARR > (min_ARR + 5)) {
 80034d0:	4b88      	ldr	r3, [pc, #544]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 80034da:	3205      	adds	r2, #5
 80034dc:	4293      	cmp	r3, r2
 80034de:	bf8c      	ite	hi
 80034e0:	2301      	movhi	r3, #1
 80034e2:	2300      	movls	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d01b      	beq.n	8003522 <_ZN9ConvertorclEv+0xc06>
					if (adc.current() > 110) {
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe fd29 	bl	8001f46 <_ZN4ADC_7currentEv>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b6e      	cmp	r3, #110	; 0x6e
 80034f8:	bf8c      	ite	hi
 80034fa:	2301      	movhi	r3, #1
 80034fc:	2300      	movls	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00e      	beq.n	8003522 <_ZN9ConvertorclEv+0xc06>
						if(Kp > 1250) {
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800350a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800350e:	4293      	cmp	r3, r2
 8003510:	d907      	bls.n	8003522 <_ZN9ConvertorclEv+0xc06>
							Kp--;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
				if (Kp >= 2200) {
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003528:	f640 0297 	movw	r2, #2199	; 0x897
 800352c:	4293      	cmp	r3, r2
 800352e:	d904      	bls.n	800353a <_ZN9ConvertorclEv+0xc1e>
					Kp = 2200;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f640 0298 	movw	r2, #2200	; 0x898
 8003536:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
			if (Km >= 990) {
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003540:	f240 32dd 	movw	r2, #989	; 0x3dd
 8003544:	4293      	cmp	r3, r2
 8003546:	d904      	bls.n	8003552 <_ZN9ConvertorclEv+0xc36>
				Km = 990;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f240 32de 	movw	r2, #990	; 0x3de
 800354e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			if (timer.done()) {
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	333c      	adds	r3, #60	; 0x3c
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd ff86 	bl	8001468 <_ZN5Timer4doneEv>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80c2 	beq.w	80036e8 <_ZN9ConvertorclEv+0xdcc>
				timer.stop();
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	333c      	adds	r3, #60	; 0x3c
 8003568:	4618      	mov	r0, r3
 800356a:	f7fd ff6e 	bl	800144a <_ZN5Timer4stopEv>
				timer.start(time);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800357a:	4619      	mov	r1, r3
 800357c:	4610      	mov	r0, r2
 800357e:	f7fd ff37 	bl	80013f0 <_ZN5Timer5startEm>
if(motor == ASYNCHRON) {
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8003588:	2b01      	cmp	r3, #1
 800358a:	d134      	bne.n	80035f6 <_ZN9ConvertorclEv+0xcda>
	if (TIM3->ARR != min_ARR) {
 800358c:	4b59      	ldr	r3, [pc, #356]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8003596:	4293      	cmp	r3, r2
 8003598:	bf14      	ite	ne
 800359a:	2301      	movne	r3, #1
 800359c:	2300      	moveq	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80a1 	beq.w	80036e8 <_ZN9ConvertorclEv+0xdcc>
		if (TIM3->ARR > 6000) {
 80035a6:	4b53      	ldr	r3, [pc, #332]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	f241 7270 	movw	r2, #6000	; 0x1770
 80035ae:	4293      	cmp	r3, r2
 80035b0:	bf8c      	ite	hi
 80035b2:	2301      	movhi	r3, #1
 80035b4:	2300      	movls	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <_ZN9ConvertorclEv+0xcac>
			TIM3->ARR -= 25;
 80035bc:	4b4d      	ldr	r3, [pc, #308]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	4a4c      	ldr	r2, [pc, #304]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 80035c2:	3b19      	subs	r3, #25
 80035c4:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
 80035c6:	e08f      	b.n	80036e8 <_ZN9ConvertorclEv+0xdcc>
		} else if (TIM3->ARR > min_ARR) {
 80035c8:	4b4a      	ldr	r3, [pc, #296]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 80035d2:	4293      	cmp	r3, r2
 80035d4:	bf8c      	ite	hi
 80035d6:	2301      	movhi	r3, #1
 80035d8:	2300      	movls	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <_ZN9ConvertorclEv+0xcd0>
			TIM3->ARR -= 5;
 80035e0:	4b44      	ldr	r3, [pc, #272]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	4a43      	ldr	r2, [pc, #268]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 80035e6:	3b05      	subs	r3, #5
 80035e8:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
 80035ea:	e07d      	b.n	80036e8 <_ZN9ConvertorclEv+0xdcc>
			TIM3->ARR++;
 80035ec:	4b41      	ldr	r3, [pc, #260]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 80035ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f0:	3201      	adds	r2, #1
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 80035f4:	e078      	b.n	80036e8 <_ZN9ConvertorclEv+0xdcc>
} else if(motor == SYNCHRON) {
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d173      	bne.n	80036e8 <_ZN9ConvertorclEv+0xdcc>
			if(TIM3->ARR != min_ARR) {
 8003600:	4b3c      	ldr	r3, [pc, #240]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 8003602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 800360a:	4293      	cmp	r3, r2
 800360c:	bf14      	ite	ne
 800360e:	2301      	movne	r3, #1
 8003610:	2300      	moveq	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d067      	beq.n	80036e8 <_ZN9ConvertorclEv+0xdcc>
				if(TIM3->ARR > min_ARR) {
 8003618:	4b36      	ldr	r3, [pc, #216]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8003622:	4293      	cmp	r3, r2
 8003624:	bf8c      	ite	hi
 8003626:	2301      	movhi	r3, #1
 8003628:	2300      	movls	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d026      	beq.n	800367e <_ZN9ConvertorclEv+0xd62>
					if(TIM3->ARR > 624) {
 8003630:	4b30      	ldr	r3, [pc, #192]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8003638:	bf8c      	ite	hi
 800363a:	2301      	movhi	r3, #1
 800363c:	2300      	movls	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d016      	beq.n	8003672 <_ZN9ConvertorclEv+0xd56>
						if(TIM3->ARR > 1500) {
 8003644:	4b2b      	ldr	r3, [pc, #172]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800364c:	4293      	cmp	r3, r2
 800364e:	bf8c      	ite	hi
 8003650:	2301      	movhi	r3, #1
 8003652:	2300      	movls	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <_ZN9ConvertorclEv+0xd4a>
							TIM3->ARR -= 32;
 800365a:	4b26      	ldr	r3, [pc, #152]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	4a25      	ldr	r2, [pc, #148]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 8003660:	3b20      	subs	r3, #32
 8003662:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003664:	e00f      	b.n	8003686 <_ZN9ConvertorclEv+0xd6a>
							TIM3->ARR -= 3;
 8003666:	4b23      	ldr	r3, [pc, #140]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 800366c:	3b03      	subs	r3, #3
 800366e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003670:	e009      	b.n	8003686 <_ZN9ConvertorclEv+0xd6a>
						TIM3->ARR-=1;
 8003672:	4b20      	ldr	r3, [pc, #128]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	4a1f      	ldr	r2, [pc, #124]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 8003678:	3b01      	subs	r3, #1
 800367a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800367c:	e003      	b.n	8003686 <_ZN9ConvertorclEv+0xd6a>
					TIM3->ARR++;
 800367e:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 8003680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003682:	3201      	adds	r2, #1
 8003684:	62da      	str	r2, [r3, #44]	; 0x2c
				if(TIM3->ARR > 624) {
 8003686:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800368e:	bf8c      	ite	hi
 8003690:	2301      	movhi	r3, #1
 8003692:	2300      	movls	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d004      	beq.n	80036a4 <_ZN9ConvertorclEv+0xd88>
					time = 3;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2203      	movs	r2, #3
 800369e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
			break;
 80036a2:	e021      	b.n	80036e8 <_ZN9ConvertorclEv+0xdcc>
				} else if (TIM3->ARR >= 554) {
 80036a4:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	f240 2229 	movw	r2, #553	; 0x229
 80036ac:	4293      	cmp	r3, r2
 80036ae:	bf8c      	ite	hi
 80036b0:	2301      	movhi	r3, #1
 80036b2:	2300      	movls	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d004      	beq.n	80036c4 <_ZN9ConvertorclEv+0xda8>
					time = 6;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2206      	movs	r2, #6
 80036be:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
			break;
 80036c2:	e011      	b.n	80036e8 <_ZN9ConvertorclEv+0xdcc>
				} else if (TIM3->ARR < 554) {
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <_ZN9ConvertorclEv+0xdd8>)
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	f240 2229 	movw	r2, #553	; 0x229
 80036cc:	4293      	cmp	r3, r2
 80036ce:	bf94      	ite	ls
 80036d0:	2301      	movls	r3, #1
 80036d2:	2300      	movhi	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d006      	beq.n	80036e8 <_ZN9ConvertorclEv+0xdcc>
					time = 8;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2208      	movs	r2, #8
 80036de:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
			break;
 80036e2:	e001      	b.n	80036e8 <_ZN9ConvertorclEv+0xdcc>
			break;
 80036e4:	bf00      	nop
 80036e6:	e000      	b.n	80036ea <_ZN9ConvertorclEv+0xdce>
			break;
 80036e8:	bf00      	nop
	}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd90      	pop	{r4, r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40000400 	.word	0x40000400

080036f8 <_ZN9Convertor4puskEv>:

	void pusk() {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]

if(motor == ASYNCHRON) {
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8003706:	2b01      	cmp	r3, #1
 8003708:	d111      	bne.n	800372e <_ZN9Convertor4puskEv+0x36>
		frequency = 60;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	223c      	movs	r2, #60	; 0x3c
 800370e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		Kp = 6000;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f241 7270 	movw	r2, #6000	; 0x1770
 8003718:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		time = 3;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2203      	movs	r2, #3
 8003720:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		offset = 35;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2223      	movs	r2, #35	; 0x23
 8003728:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
 800372c:	e015      	b.n	800375a <_ZN9Convertor4puskEv+0x62>

} else if(motor == SYNCHRON) {
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8003734:	2b00      	cmp	r3, #0
 8003736:	d110      	bne.n	800375a <_ZN9Convertor4puskEv+0x62>
		frequency = 10;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	220a      	movs	r2, #10
 800373c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		Kp = 1140;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f240 4274 	movw	r2, #1140	; 0x474
 8003746:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		time = 2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2202      	movs	r2, #2
 800374e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		offset = 30;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	221e      	movs	r2, #30
 8003756:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
} // else if(motor == SYNCHRON) {

		Km = 5;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2205      	movs	r2, #5
 800375e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		TIM3->ARR = (div_f / (frequency)) * 10 - 1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	f8b2 20aa 	ldrh.w	r2, [r2, #170]	; 0xaa
 800376e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4a2f      	ldr	r2, [pc, #188]	; (8003838 <_ZN9Convertor4puskEv+0x140>)
 800377c:	3b01      	subs	r3, #1
 800377e:	62d3      	str	r3, [r2, #44]	; 0x2c

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003780:	2100      	movs	r1, #0
 8003782:	482e      	ldr	r0, [pc, #184]	; (800383c <_ZN9Convertor4puskEv+0x144>)
 8003784:	f004 fd3e 	bl	8008204 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8003788:	2100      	movs	r1, #0
 800378a:	482c      	ldr	r0, [pc, #176]	; (800383c <_ZN9Convertor4puskEv+0x144>)
 800378c:	f005 faf0 	bl	8008d70 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003790:	2104      	movs	r1, #4
 8003792:	482a      	ldr	r0, [pc, #168]	; (800383c <_ZN9Convertor4puskEv+0x144>)
 8003794:	f004 fd36 	bl	8008204 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8003798:	2104      	movs	r1, #4
 800379a:	4828      	ldr	r0, [pc, #160]	; (800383c <_ZN9Convertor4puskEv+0x144>)
 800379c:	f005 fae8 	bl	8008d70 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80037a0:	2108      	movs	r1, #8
 80037a2:	4826      	ldr	r0, [pc, #152]	; (800383c <_ZN9Convertor4puskEv+0x144>)
 80037a4:	f004 fd2e 	bl	8008204 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80037a8:	2108      	movs	r1, #8
 80037aa:	4824      	ldr	r0, [pc, #144]	; (800383c <_ZN9Convertor4puskEv+0x144>)
 80037ac:	f005 fae0 	bl	8008d70 <HAL_TIMEx_PWMN_Start>

		HAL_TIM_Base_Start_IT(&htim3);
 80037b0:	4823      	ldr	r0, [pc, #140]	; (8003840 <_ZN9Convertor4puskEv+0x148>)
 80037b2:	f004 fbfb 	bl	8007fac <HAL_TIM_Base_Start_IT>

		timer.start(time);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80037c2:	4619      	mov	r1, r3
 80037c4:	4610      	mov	r0, r2
 80037c6:	f7fd fe13 	bl	80013f0 <_ZN5Timer5startEm>
		adc.measure_value();
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe fb67 	bl	8001ea2 <_ZN4ADC_13measure_valueEv>

		service.outData.error.current_S = false;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 80037dc:	f36f 0300 	bfc	r3, #0, #1
 80037e0:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
		service.outData.error.current_A = false;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 80037ec:	f36f 0341 	bfc	r3, #1, #1
 80037f0:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
		service.outData.error.current_C = false;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 80037fc:	f36f 0382 	bfc	r3, #2, #1
 8003800:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
		service.outData.error.phase_break = false;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	f892 3093 	ldrb.w	r3, [r2, #147]	; 0x93
 800380c:	f36f 0300 	bfc	r3, #0, #1
 8003810:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
		service.outData.error.HV = false;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 800381c:	f36f 03c3 	bfc	r3, #3, #1
 8003820:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92

		led_red = false;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe fd01 	bl	8002232 <_ZN3PinaSEb>
	}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40000400 	.word	0x40000400
 800383c:	200001ac 	.word	0x200001ac
 8003840:	200001f4 	.word	0x200001f4

08003844 <_ZN9Convertor4stopEv>:

	void stop() {
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

		TIM1->CCR1 = 0;
 800384c:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <_ZN9Convertor4stopEv+0x94>)
 800384e:	2200      	movs	r2, #0
 8003850:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 8003852:	4b21      	ldr	r3, [pc, #132]	; (80038d8 <_ZN9Convertor4stopEv+0x94>)
 8003854:	2200      	movs	r2, #0
 8003856:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 8003858:	4b1f      	ldr	r3, [pc, #124]	; (80038d8 <_ZN9Convertor4stopEv+0x94>)
 800385a:	2200      	movs	r2, #0
 800385c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800385e:	2100      	movs	r1, #0
 8003860:	481e      	ldr	r0, [pc, #120]	; (80038dc <_ZN9Convertor4stopEv+0x98>)
 8003862:	f004 fd89 	bl	8008378 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8003866:	2100      	movs	r1, #0
 8003868:	481c      	ldr	r0, [pc, #112]	; (80038dc <_ZN9Convertor4stopEv+0x98>)
 800386a:	f005 fb2d 	bl	8008ec8 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800386e:	2104      	movs	r1, #4
 8003870:	481a      	ldr	r0, [pc, #104]	; (80038dc <_ZN9Convertor4stopEv+0x98>)
 8003872:	f004 fd81 	bl	8008378 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8003876:	2104      	movs	r1, #4
 8003878:	4818      	ldr	r0, [pc, #96]	; (80038dc <_ZN9Convertor4stopEv+0x98>)
 800387a:	f005 fb25 	bl	8008ec8 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800387e:	2108      	movs	r1, #8
 8003880:	4816      	ldr	r0, [pc, #88]	; (80038dc <_ZN9Convertor4stopEv+0x98>)
 8003882:	f004 fd79 	bl	8008378 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8003886:	2108      	movs	r1, #8
 8003888:	4814      	ldr	r0, [pc, #80]	; (80038dc <_ZN9Convertor4stopEv+0x98>)
 800388a:	f005 fb1d 	bl	8008ec8 <HAL_TIMEx_PWMN_Stop>

		HAL_TIM_Base_Stop_IT(&htim3);
 800388e:	4814      	ldr	r0, [pc, #80]	; (80038e0 <_ZN9Convertor4stopEv+0x9c>)
 8003890:	f004 fbec 	bl	800806c <HAL_TIM_Base_Stop_IT>
		timer.stop();
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	333c      	adds	r3, #60	; 0x3c
 8003898:	4618      	mov	r0, r3
 800389a:	f7fd fdd6 	bl	800144a <_ZN5Timer4stopEv>
		contactor.stop();
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fdc4 	bl	8002430 <_ZN9Contactor4stopEv>

		k = 0;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		m = 6;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2206      	movs	r2, #6
 80038b4:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		n = 12;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	220c      	movs	r2, #12
 80038bc:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

//		TIM3->ARR = (div_f / (frequency)) * 10 - 1;

		state = State::wait;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]

		adc.measure_offset();
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fadc 	bl	8001e88 <_ZN4ADC_14measure_offsetEv>

	}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40012c00 	.word	0x40012c00
 80038dc:	200001ac 	.word	0x200001ac
 80038e0:	200001f4 	.word	0x200001f4

080038e4 <_ZN9Convertor5alarmEv>:

	void alarm() {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
		if((not Start or timer_stop.done()) or not contactor.is_on() /*or service.pressure_is_normal()*/
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fe fcb3 	bl	800225c <_ZN3PincvbEv>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f083 0301 	eor.w	r3, r3, #1
 80038fc:	b2db      	uxtb	r3, r3
				     or service.outData.error.overheat_fc or service.outData.error.overheat_c
				     or service.outData.error.HV_low /*or service.outData.error.HV*/ or service.outData.error.voltage_board_low
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d136      	bne.n	8003970 <_ZN9Convertor5alarmEv+0x8c>
		if((not Start or timer_stop.done()) or not contactor.is_on() /*or service.pressure_is_normal()*/
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	335c      	adds	r3, #92	; 0x5c
 8003906:	4618      	mov	r0, r3
 8003908:	f7fd fdae 	bl	8001468 <_ZN5Timer4doneEv>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d12e      	bne.n	8003970 <_ZN9Convertor5alarmEv+0x8c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	4618      	mov	r0, r3
 8003918:	f7fe fda8 	bl	800246c <_ZN9Contactor5is_onEv>
 800391c:	4603      	mov	r3, r0
 800391e:	f083 0301 	eor.w	r3, r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d123      	bne.n	8003970 <_ZN9Convertor5alarmEv+0x8c>
				     or service.outData.error.overheat_fc or service.outData.error.overheat_c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003930:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d11a      	bne.n	8003970 <_ZN9Convertor5alarmEv+0x8c>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003942:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d111      	bne.n	8003970 <_ZN9Convertor5alarmEv+0x8c>
				     or service.outData.error.HV_low /*or service.outData.error.HV*/ or service.outData.error.voltage_board_low
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003954:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d108      	bne.n	8003970 <_ZN9Convertor5alarmEv+0x8c>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003966:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <_ZN9Convertor5alarmEv+0x90>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <_ZN9Convertor5alarmEv+0x92>
 8003974:	2300      	movs	r3, #0
		if((not Start or timer_stop.done()) or not contactor.is_on() /*or service.pressure_is_normal()*/
 8003976:	2b00      	cmp	r3, #0
 8003978:	d07d      	beq.n	8003a76 <_ZN9Convertor5alarmEv+0x192>
					 )
		{
//			if(service.pressure_is_normal()) error = 0;
			if(not Start and not timer_stop.isCount()) {
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fc6c 	bl	800225c <_ZN3PincvbEv>
 8003984:	4603      	mov	r3, r0
 8003986:	f083 0301 	eor.w	r3, r3, #1
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00c      	beq.n	80039aa <_ZN9Convertor5alarmEv+0xc6>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	335c      	adds	r3, #92	; 0x5c
 8003994:	4618      	mov	r0, r3
 8003996:	f7fd fd85 	bl	80014a4 <_ZN5Timer7isCountEv>
 800399a:	4603      	mov	r3, r0
 800399c:	f083 0301 	eor.w	r3, r3, #1
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <_ZN9Convertor5alarmEv+0xc6>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <_ZN9Convertor5alarmEv+0xc8>
 80039aa:	2300      	movs	r3, #0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d006      	beq.n	80039be <_ZN9Convertor5alarmEv+0xda>
				timer_stop.start(1000);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	335c      	adds	r3, #92	; 0x5c
 80039b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fd fd19 	bl	80013f0 <_ZN5Timer5startEm>
			}

			if(timer_stop.done() and not Start) {
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	335c      	adds	r3, #92	; 0x5c
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd fd50 	bl	8001468 <_ZN5Timer4doneEv>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00c      	beq.n	80039e8 <_ZN9Convertor5alarmEv+0x104>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe fc42 	bl	800225c <_ZN3PincvbEv>
 80039d8:	4603      	mov	r3, r0
 80039da:	f083 0301 	eor.w	r3, r3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <_ZN9Convertor5alarmEv+0x104>
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <_ZN9Convertor5alarmEv+0x106>
 80039e8:	2300      	movs	r3, #0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d007      	beq.n	80039fe <_ZN9Convertor5alarmEv+0x11a>
				stop();
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff ff28 	bl	8003844 <_ZN9Convertor4stopEv>
				timer_stop.stop();
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	335c      	adds	r3, #92	; 0x5c
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fd fd26 	bl	800144a <_ZN5Timer4stopEv>
			}

			if(not contactor.is_on() /*or service.pressure_is_normal()*/
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe fd32 	bl	800246c <_ZN9Contactor5is_onEv>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f083 0301 	eor.w	r3, r3, #1
 8003a0e:	b2db      	uxtb	r3, r3
				     or service.outData.error.overheat_fc or service.outData.error.overheat_c
				     or service.outData.error.HV_low /*or service.outData.error.HV*/ or service.outData.error.voltage_board_low) {
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d123      	bne.n	8003a5c <_ZN9Convertor5alarmEv+0x178>
				     or service.outData.error.overheat_fc or service.outData.error.overheat_c
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003a1c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d11a      	bne.n	8003a5c <_ZN9Convertor5alarmEv+0x178>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003a2e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d111      	bne.n	8003a5c <_ZN9Convertor5alarmEv+0x178>
				     or service.outData.error.HV_low /*or service.outData.error.HV*/ or service.outData.error.voltage_board_low) {
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003a40:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d108      	bne.n	8003a5c <_ZN9Convertor5alarmEv+0x178>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003a52:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <_ZN9Convertor5alarmEv+0x17c>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <_ZN9Convertor5alarmEv+0x17e>
 8003a60:	2300      	movs	r3, #0
			if(not contactor.is_on() /*or service.pressure_is_normal()*/
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <_ZN9Convertor5alarmEv+0x192>
				stop();
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7ff feec 	bl	8003844 <_ZN9Convertor4stopEv>
				timer_stop.stop();
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	335c      	adds	r3, #92	; 0x5c
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fd fcea 	bl	800144a <_ZN5Timer4stopEv>
			service.outData.error.phase_break = true;
			//rerun.start(5000);

		}*/

		if(adc.is_error_HV()) {
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe fae1 	bl	8002042 <_ZN4ADC_11is_error_HVEv>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d024      	beq.n	8003ad0 <_ZN9Convertor5alarmEv+0x1ec>
			adc.reset_error_HV();
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fae5 	bl	800205a <_ZN4ADC_14reset_error_HVEv>
			error++;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8003a96:	3301      	adds	r3, #1
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			led_red = true;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe fbc3 	bl	8002232 <_ZN3PinaSEb>
			stop();
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff fec9 	bl	8003844 <_ZN9Convertor4stopEv>
			service.outData.error.HV = true;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 8003aba:	f043 0308 	orr.w	r3, r3, #8
 8003abe:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
			rerun.start(5000);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	334c      	adds	r3, #76	; 0x4c
 8003ac6:	f241 3188 	movw	r1, #5000	; 0x1388
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fd fc90 	bl	80013f0 <_ZN5Timer5startEm>
		}

		if(adc.is_over_s() and not service.outData.error.current_S) {
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe fa69 	bl	8001fac <_ZN4ADC_9is_over_sEv>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00d      	beq.n	8003afc <_ZN9Convertor5alarmEv+0x218>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003ae8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f083 0301 	eor.w	r3, r3, #1
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <_ZN9Convertor5alarmEv+0x218>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <_ZN9Convertor5alarmEv+0x21a>
 8003afc:	2300      	movs	r3, #0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d024      	beq.n	8003b4c <_ZN9Convertor5alarmEv+0x268>
			adc.reset_over_s();
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe fa5c 	bl	8001fc4 <_ZN4ADC_12reset_over_sEv>
			error++;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8003b12:	3301      	adds	r3, #1
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			led_red = true;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2101      	movs	r1, #1
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe fb85 	bl	8002232 <_ZN3PinaSEb>
			stop();
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff fe8b 	bl	8003844 <_ZN9Convertor4stopEv>
			service.outData.error.current_S = true;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
			rerun.start(5000);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	334c      	adds	r3, #76	; 0x4c
 8003b42:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fd fc52 	bl	80013f0 <_ZN5Timer5startEm>
		}

		if(adc.is_over_a() and not service.outData.error.current_A) {
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe fa44 	bl	8001fde <_ZN4ADC_9is_over_aEv>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <_ZN9Convertor5alarmEv+0x294>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003b64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	f083 0301 	eor.w	r3, r3, #1
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <_ZN9Convertor5alarmEv+0x294>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <_ZN9Convertor5alarmEv+0x296>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d024      	beq.n	8003bc8 <_ZN9Convertor5alarmEv+0x2e4>
			adc.reset_over_a();
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fa37 	bl	8001ff6 <_ZN4ADC_12reset_over_aEv>
			error++;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8003b8e:	3301      	adds	r3, #1
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			led_red = true;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe fb47 	bl	8002232 <_ZN3PinaSEb>
			stop();
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff fe4d 	bl	8003844 <_ZN9Convertor4stopEv>
			service.outData.error.current_A = true;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 8003bb2:	f043 0302 	orr.w	r3, r3, #2
 8003bb6:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
			rerun.start(5000);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	334c      	adds	r3, #76	; 0x4c
 8003bbe:	f241 3188 	movw	r1, #5000	; 0x1388
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fd fc14 	bl	80013f0 <_ZN5Timer5startEm>
		}

		if(adc.is_over_c() and not service.outData.error.current_C) {
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe fa1f 	bl	8002010 <_ZN4ADC_9is_over_cEv>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00d      	beq.n	8003bf4 <_ZN9Convertor5alarmEv+0x310>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003be0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f083 0301 	eor.w	r3, r3, #1
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <_ZN9Convertor5alarmEv+0x310>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <_ZN9Convertor5alarmEv+0x312>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d024      	beq.n	8003c44 <_ZN9Convertor5alarmEv+0x360>
			adc.reset_over_c();
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe fa12 	bl	8002028 <_ZN4ADC_12reset_over_cEv>
			error++;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			led_red = true;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2101      	movs	r1, #1
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe fb09 	bl	8002232 <_ZN3PinaSEb>
			stop();
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff fe0f 	bl	8003844 <_ZN9Convertor4stopEv>
			service.outData.error.current_C = true;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 8003c2e:	f043 0304 	orr.w	r3, r3, #4
 8003c32:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
			rerun.start(5000);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	334c      	adds	r3, #76	; 0x4c
 8003c3a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fd fbd6 	bl	80013f0 <_ZN5Timer5startEm>
		}

		adc.reset_measure();
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fe f995 	bl	8001f78 <_ZN4ADC_13reset_measureEv>
	}
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <HAL_TIM_PeriodElapsedCallback>:
};

Interrupt period_callback;
Interrupt adc_comparator_callback;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from ACD2
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d102      	bne.n	8003c70 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		period_callback.interrupt();
 8003c6a:	4804      	ldr	r0, [pc, #16]	; (8003c7c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003c6c:	f7fd fc32 	bl	80014d4 <_ZN9Interrupt9interruptEv>
	}
}
 8003c70:	bf00      	nop
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	20000360 	.word	0x20000360

08003c80 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d102      	bne.n	8003c98 <HAL_ADC_LevelOutOfWindowCallback+0x18>
	{
		adc_comparator_callback.interrupt();
 8003c92:	4804      	ldr	r0, [pc, #16]	; (8003ca4 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
 8003c94:	f7fd fc1e 	bl	80014d4 <_ZN9Interrupt9interruptEv>
	}
}
 8003c98:	bf00      	nop
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40012800 	.word	0x40012800
 8003ca4:	20000364 	.word	0x20000364

08003ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ca8:	b590      	push	{r4, r7, lr}
 8003caa:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8003cae:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003cb0:	f001 fd1c 	bl	80056ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cb4:	f000 f8c8 	bl	8003e48 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cb8:	f000 fc3c 	bl	8004534 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003cbc:	f000 fc0c 	bl	80044d8 <_ZL11MX_DMA_Initv>
//  MX_CAN_Init();
  MX_TIM1_Init();
 8003cc0:	f000 fa54 	bl	800416c <_ZL12MX_TIM1_Initv>
  MX_USART3_UART_Init();
 8003cc4:	f000 fbda 	bl	800447c <_ZL19MX_USART3_UART_Initv>
  MX_TIM4_Init();
 8003cc8:	f000 fb70 	bl	80043ac <_ZL12MX_TIM4_Initv>

  MX_ADC1_Init();
 8003ccc:	f000 f92a 	bl	8003f24 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8003cd0:	f000 f9aa 	bl	8004028 <_ZL12MX_ADC2_Initv>
  MX_TIM3_Init();
 8003cd4:	f000 fb04 	bl	80042e0 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

  decltype(auto) led_red    = Pin{GPIOB, LED_RED_Pin  };
 8003cd8:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003cdc:	2201      	movs	r2, #1
 8003cde:	4951      	ldr	r1, [pc, #324]	; (8003e24 <main+0x17c>)
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fe fa5d 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green  = Pin{GPIOB, LED_GREEN_Pin};
 8003ce6:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8003cea:	2220      	movs	r2, #32
 8003cec:	494d      	ldr	r1, [pc, #308]	; (8003e24 <main+0x17c>)
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fe fa56 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can    = Pin{GPIOC, LED_CAN_Pin  };
 8003cf4:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8003cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cfc:	494a      	ldr	r1, [pc, #296]	; (8003e28 <main+0x180>)
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe fa4e 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) ventilator = Pin{GPIOB, VENT_Pin     };
 8003d04:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003d08:	2210      	movs	r2, #16
 8003d0a:	4946      	ldr	r1, [pc, #280]	; (8003e24 <main+0x17c>)
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fe fa47 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) unload     = Pin{GPIOA, UNLOAD_Pin   };
 8003d12:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8003d16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d1a:	4944      	ldr	r1, [pc, #272]	; (8003e2c <main+0x184>)
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe fa3f 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) condens    = Pin{GPIOC, CONDENS_Pin  };
 8003d22:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003d26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d2a:	493f      	ldr	r1, [pc, #252]	; (8003e28 <main+0x180>)
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fe fa37 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) TD_DM      = Pin{GPIOB, TD_DM_Pin    };
 8003d32:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003d36:	2280      	movs	r2, #128	; 0x80
 8003d38:	493a      	ldr	r1, [pc, #232]	; (8003e24 <main+0x17c>)
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe fa30 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) SP         = Pin{GPIOB, SP_Pin       };
 8003d40:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d48:	4936      	ldr	r1, [pc, #216]	; (8003e24 <main+0x17c>)
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe fa28 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) Start      = Pin{GPIOB, START_Pin    };
 8003d50:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d58:	4932      	ldr	r1, [pc, #200]	; (8003e24 <main+0x17c>)
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fe fa20 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) Motor      = Pin{GPIOA, ASYNC_Pin    };
 8003d60:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003d64:	2204      	movs	r2, #4
 8003d66:	4931      	ldr	r1, [pc, #196]	; (8003e2c <main+0x184>)
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fe fa19 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>

  decltype(auto) adc = ADC_ {adc_callback, adc_injected_callback, 4, 1};
 8003d6e:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8003d72:	2301      	movs	r3, #1
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	2304      	movs	r3, #4
 8003d78:	4a2d      	ldr	r2, [pc, #180]	; (8003e30 <main+0x188>)
 8003d7a:	492e      	ldr	r1, [pc, #184]	; (8003e34 <main+0x18c>)
 8003d7c:	f7fd ff96 	bl	8001cac <_ZN4ADC_C1ER9InterruptS1_ht>

  decltype(auto) uart = UART_<>{led_can};
 8003d80:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8003d84:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 ff7c 	bl	8004c88 <_ZN5UART_ILj26EEC1ER3Pin>

  decltype(auto) ntc = NTC{};
 8003d90:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fe fa6d 	bl	8002274 <_ZN3NTCC1Ev>
  decltype(auto) service = Service<In_data, Out_data>{adc, ntc, uart, interrupt_dma, interrupt_uart};
 8003d9a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8003d9e:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8003da2:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8003da6:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8003daa:	4c23      	ldr	r4, [pc, #140]	; (8003e38 <main+0x190>)
 8003dac:	9401      	str	r4, [sp, #4]
 8003dae:	4c23      	ldr	r4, [pc, #140]	; (8003e3c <main+0x194>)
 8003db0:	9400      	str	r4, [sp, #0]
 8003db2:	f000 ff7b 	bl	8004cac <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R3NTCR5UART_ILj26EER9InterruptSB_>
  decltype(auto) contactor = Contactor{adc, service};
 8003db6:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8003dba:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8003dbe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe fb02 	bl	80023cc <_ZN9ContactorC1ER4ADC_R7ServiceI7In_data8Out_dataE>
//  decltype(auto) cooler = Cooler{service};

  decltype(auto) convertor = Convertor{adc, service, contactor, period_callback, adc_comparator_callback, led_red, led_green, ventilator, unload, condens, TD_DM, SP, Start, Motor};
 8003dc8:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8003dcc:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8003dd0:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8003dd4:	1d38      	adds	r0, r7, #4
 8003dd6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003dda:	930a      	str	r3, [sp, #40]	; 0x28
 8003ddc:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003de0:	9309      	str	r3, [sp, #36]	; 0x24
 8003de2:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003de6:	9308      	str	r3, [sp, #32]
 8003de8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003dec:	9307      	str	r3, [sp, #28]
 8003dee:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003df2:	9306      	str	r3, [sp, #24]
 8003df4:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8003df8:	9305      	str	r3, [sp, #20]
 8003dfa:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003dfe:	9304      	str	r3, [sp, #16]
 8003e00:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8003e04:	9303      	str	r3, [sp, #12]
 8003e06:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003e0a:	9302      	str	r3, [sp, #8]
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <main+0x198>)
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <main+0x19c>)
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	4623      	mov	r3, r4
 8003e16:	f7fe fc95 	bl	8002744 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptSA_R3PinSC_SC_SC_SC_SC_SC_SC_SC_>
  /* USER CODE BEGIN WHILE */

//  contactor.start();
  while (1)
  {
	  convertor();
 8003e1a:	1d3b      	adds	r3, r7, #4
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fe fd7d 	bl	800291c <_ZN9ConvertorclEv>
 8003e22:	e7fa      	b.n	8003e1a <main+0x172>
 8003e24:	40010c00 	.word	0x40010c00
 8003e28:	40011000 	.word	0x40011000
 8003e2c:	40010800 	.word	0x40010800
 8003e30:	20000354 	.word	0x20000354
 8003e34:	20000350 	.word	0x20000350
 8003e38:	2000035c 	.word	0x2000035c
 8003e3c:	20000358 	.word	0x20000358
 8003e40:	20000364 	.word	0x20000364
 8003e44:	20000360 	.word	0x20000360

08003e48 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b096      	sub	sp, #88	; 0x58
 8003e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e52:	2228      	movs	r2, #40	; 0x28
 8003e54:	2100      	movs	r1, #0
 8003e56:	4618      	mov	r0, r3
 8003e58:	f007 f912 	bl	800b080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e5c:	f107 031c 	add.w	r3, r7, #28
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	60da      	str	r2, [r3, #12]
 8003e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e6c:	1d3b      	adds	r3, r7, #4
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	605a      	str	r2, [r3, #4]
 8003e74:	609a      	str	r2, [r3, #8]
 8003e76:	60da      	str	r2, [r3, #12]
 8003e78:	611a      	str	r2, [r3, #16]
 8003e7a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003e86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e90:	2302      	movs	r3, #2
 8003e92:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e98:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003e9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003e9e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ea0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f003 fbaf 	bl	8007608 <HAL_RCC_OscConfig>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8003eba:	f000 fbe5 	bl	8004688 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ebe:	230f      	movs	r3, #15
 8003ec0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ece:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ed4:	f107 031c 	add.w	r3, r7, #28
 8003ed8:	2102      	movs	r1, #2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f003 fe14 	bl	8007b08 <HAL_RCC_ClockConfig>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	bf14      	ite	ne
 8003ee6:	2301      	movne	r3, #1
 8003ee8:	2300      	moveq	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8003ef0:	f000 fbca 	bl	8004688 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003efc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003efe:	1d3b      	adds	r3, r7, #4
 8003f00:	4618      	mov	r0, r3
 8003f02:	f003 ff9d 	bl	8007e40 <HAL_RCCEx_PeriphCLKConfig>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	bf14      	ite	ne
 8003f0c:	2301      	movne	r3, #1
 8003f0e:	2300      	moveq	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8003f16:	f000 fbb7 	bl	8004688 <Error_Handler>
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	3758      	adds	r7, #88	; 0x58
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003f2a:	1d3b      	adds	r3, r7, #4
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003f34:	4b3a      	ldr	r3, [pc, #232]	; (8004020 <_ZL12MX_ADC1_Initv+0xfc>)
 8003f36:	4a3b      	ldr	r2, [pc, #236]	; (8004024 <_ZL12MX_ADC1_Initv+0x100>)
 8003f38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003f3a:	4b39      	ldr	r3, [pc, #228]	; (8004020 <_ZL12MX_ADC1_Initv+0xfc>)
 8003f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003f42:	4b37      	ldr	r3, [pc, #220]	; (8004020 <_ZL12MX_ADC1_Initv+0xfc>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003f48:	4b35      	ldr	r3, [pc, #212]	; (8004020 <_ZL12MX_ADC1_Initv+0xfc>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f4e:	4b34      	ldr	r3, [pc, #208]	; (8004020 <_ZL12MX_ADC1_Initv+0xfc>)
 8003f50:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003f54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f56:	4b32      	ldr	r3, [pc, #200]	; (8004020 <_ZL12MX_ADC1_Initv+0xfc>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8003f5c:	4b30      	ldr	r3, [pc, #192]	; (8004020 <_ZL12MX_ADC1_Initv+0xfc>)
 8003f5e:	2204      	movs	r2, #4
 8003f60:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003f62:	482f      	ldr	r0, [pc, #188]	; (8004020 <_ZL12MX_ADC1_Initv+0xfc>)
 8003f64:	f001 fc12 	bl	800578c <HAL_ADC_Init>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	bf14      	ite	ne
 8003f6e:	2301      	movne	r3, #1
 8003f70:	2300      	moveq	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 8003f78:	f000 fb86 	bl	8004688 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003f80:	2301      	movs	r3, #1
 8003f82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8003f84:	2302      	movs	r3, #2
 8003f86:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f88:	1d3b      	adds	r3, r7, #4
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4824      	ldr	r0, [pc, #144]	; (8004020 <_ZL12MX_ADC1_Initv+0xfc>)
 8003f8e:	f001 fee5 	bl	8005d5c <HAL_ADC_ConfigChannel>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	bf14      	ite	ne
 8003f98:	2301      	movne	r3, #1
 8003f9a:	2300      	moveq	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 8003fa2:	f000 fb71 	bl	8004688 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003faa:	2302      	movs	r3, #2
 8003fac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003fae:	1d3b      	adds	r3, r7, #4
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	481b      	ldr	r0, [pc, #108]	; (8004020 <_ZL12MX_ADC1_Initv+0xfc>)
 8003fb4:	f001 fed2 	bl	8005d5c <HAL_ADC_ConfigChannel>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bf14      	ite	ne
 8003fbe:	2301      	movne	r3, #1
 8003fc0:	2300      	moveq	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8003fc8:	f000 fb5e 	bl	8004688 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003fd4:	1d3b      	adds	r3, r7, #4
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4811      	ldr	r0, [pc, #68]	; (8004020 <_ZL12MX_ADC1_Initv+0xfc>)
 8003fda:	f001 febf 	bl	8005d5c <HAL_ADC_ConfigChannel>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf14      	ite	ne
 8003fe4:	2301      	movne	r3, #1
 8003fe6:	2300      	moveq	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 8003fee:	f000 fb4b 	bl	8004688 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003ff2:	2307      	movs	r3, #7
 8003ff4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ffa:	1d3b      	adds	r3, r7, #4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	4808      	ldr	r0, [pc, #32]	; (8004020 <_ZL12MX_ADC1_Initv+0xfc>)
 8004000:	f001 feac 	bl	8005d5c <HAL_ADC_ConfigChannel>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf14      	ite	ne
 800400a:	2301      	movne	r3, #1
 800400c:	2300      	moveq	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <_ZL12MX_ADC1_Initv+0xf4>
  {
    Error_Handler();
 8004014:	f000 fb38 	bl	8004688 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000108 	.word	0x20000108
 8004024:	40012400 	.word	0x40012400

08004028 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08e      	sub	sp, #56	; 0x38
 800402c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800402e:	f107 0320 	add.w	r3, r7, #32
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	605a      	str	r2, [r3, #4]
 8004038:	609a      	str	r2, [r3, #8]
 800403a:	60da      	str	r2, [r3, #12]
 800403c:	611a      	str	r2, [r3, #16]
 800403e:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8004040:	1d3b      	adds	r3, r7, #4
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	605a      	str	r2, [r3, #4]
 8004048:	609a      	str	r2, [r3, #8]
 800404a:	60da      	str	r2, [r3, #12]
 800404c:	611a      	str	r2, [r3, #16]
 800404e:	615a      	str	r2, [r3, #20]
 8004050:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8004052:	4b44      	ldr	r3, [pc, #272]	; (8004164 <_ZL12MX_ADC2_Initv+0x13c>)
 8004054:	4a44      	ldr	r2, [pc, #272]	; (8004168 <_ZL12MX_ADC2_Initv+0x140>)
 8004056:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004058:	4b42      	ldr	r3, [pc, #264]	; (8004164 <_ZL12MX_ADC2_Initv+0x13c>)
 800405a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800405e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004060:	4b40      	ldr	r3, [pc, #256]	; (8004164 <_ZL12MX_ADC2_Initv+0x13c>)
 8004062:	2200      	movs	r2, #0
 8004064:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004066:	4b3f      	ldr	r3, [pc, #252]	; (8004164 <_ZL12MX_ADC2_Initv+0x13c>)
 8004068:	2200      	movs	r2, #0
 800406a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800406c:	4b3d      	ldr	r3, [pc, #244]	; (8004164 <_ZL12MX_ADC2_Initv+0x13c>)
 800406e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004072:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004074:	4b3b      	ldr	r3, [pc, #236]	; (8004164 <_ZL12MX_ADC2_Initv+0x13c>)
 8004076:	2200      	movs	r2, #0
 8004078:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800407a:	4b3a      	ldr	r3, [pc, #232]	; (8004164 <_ZL12MX_ADC2_Initv+0x13c>)
 800407c:	2201      	movs	r2, #1
 800407e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004080:	4838      	ldr	r0, [pc, #224]	; (8004164 <_ZL12MX_ADC2_Initv+0x13c>)
 8004082:	f001 fb83 	bl	800578c <HAL_ADC_Init>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf14      	ite	ne
 800408c:	2301      	movne	r3, #1
 800408e:	2300      	moveq	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <_ZL12MX_ADC2_Initv+0x72>
  {
    Error_Handler();
 8004096:	f000 faf7 	bl	8004688 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_ALL_INJEC;
 800409a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800409e:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.HighThreshold = 2700;
 80040a0:	f640 238c 	movw	r3, #2700	; 0xa8c
 80040a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.LowThreshold = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.ITMode = ENABLE;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80040b0:	f107 0320 	add.w	r3, r7, #32
 80040b4:	4619      	mov	r1, r3
 80040b6:	482b      	ldr	r0, [pc, #172]	; (8004164 <_ZL12MX_ADC2_Initv+0x13c>)
 80040b8:	f001 ff48 	bl	8005f4c <HAL_ADC_AnalogWDGConfig>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bf14      	ite	ne
 80040c2:	2301      	movne	r3, #1
 80040c4:	2300      	moveq	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <_ZL12MX_ADC2_Initv+0xa8>
  {
    Error_Handler();
 80040cc:	f000 fadc 	bl	8004688 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80040d0:	2304      	movs	r3, #4
 80040d2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80040d4:	2301      	movs	r3, #1
 80040d6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80040d8:	2303      	movs	r3, #3
 80040da:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80040dc:	2303      	movs	r3, #3
 80040de:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80040e0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80040e4:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80040f2:	1d3b      	adds	r3, r7, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	481b      	ldr	r0, [pc, #108]	; (8004164 <_ZL12MX_ADC2_Initv+0x13c>)
 80040f8:	f002 f986 	bl	8006408 <HAL_ADCEx_InjectedConfigChannel>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bf14      	ite	ne
 8004102:	2301      	movne	r3, #1
 8004104:	2300      	moveq	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <_ZL12MX_ADC2_Initv+0xe8>
  {
    Error_Handler();
 800410c:	f000 fabc 	bl	8004688 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8004110:	2305      	movs	r3, #5
 8004112:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8004114:	2302      	movs	r3, #2
 8004116:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8004118:	1d3b      	adds	r3, r7, #4
 800411a:	4619      	mov	r1, r3
 800411c:	4811      	ldr	r0, [pc, #68]	; (8004164 <_ZL12MX_ADC2_Initv+0x13c>)
 800411e:	f002 f973 	bl	8006408 <HAL_ADCEx_InjectedConfigChannel>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <_ZL12MX_ADC2_Initv+0x10e>
  {
    Error_Handler();
 8004132:	f000 faa9 	bl	8004688 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8004136:	2306      	movs	r3, #6
 8004138:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800413a:	2303      	movs	r3, #3
 800413c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800413e:	1d3b      	adds	r3, r7, #4
 8004140:	4619      	mov	r1, r3
 8004142:	4808      	ldr	r0, [pc, #32]	; (8004164 <_ZL12MX_ADC2_Initv+0x13c>)
 8004144:	f002 f960 	bl	8006408 <HAL_ADCEx_InjectedConfigChannel>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	bf14      	ite	ne
 800414e:	2301      	movne	r3, #1
 8004150:	2300      	moveq	r3, #0
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <_ZL12MX_ADC2_Initv+0x134>
  {
    Error_Handler();
 8004158:	f000 fa96 	bl	8004688 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800415c:	bf00      	nop
 800415e:	3738      	adds	r7, #56	; 0x38
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000138 	.word	0x20000138
 8004168:	40012800 	.word	0x40012800

0800416c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b092      	sub	sp, #72	; 0x48
 8004170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004172:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800417c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	605a      	str	r2, [r3, #4]
 8004186:	609a      	str	r2, [r3, #8]
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	611a      	str	r2, [r3, #16]
 800418c:	615a      	str	r2, [r3, #20]
 800418e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004190:	1d3b      	adds	r3, r7, #4
 8004192:	2220      	movs	r2, #32
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f006 ff72 	bl	800b080 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800419c:	4b4e      	ldr	r3, [pc, #312]	; (80042d8 <_ZL12MX_TIM1_Initv+0x16c>)
 800419e:	4a4f      	ldr	r2, [pc, #316]	; (80042dc <_ZL12MX_TIM1_Initv+0x170>)
 80041a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80041a2:	4b4d      	ldr	r3, [pc, #308]	; (80042d8 <_ZL12MX_TIM1_Initv+0x16c>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80041a8:	4b4b      	ldr	r3, [pc, #300]	; (80042d8 <_ZL12MX_TIM1_Initv+0x16c>)
 80041aa:	2220      	movs	r2, #32
 80041ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80041ae:	4b4a      	ldr	r3, [pc, #296]	; (80042d8 <_ZL12MX_TIM1_Initv+0x16c>)
 80041b0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80041b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041b6:	4b48      	ldr	r3, [pc, #288]	; (80042d8 <_ZL12MX_TIM1_Initv+0x16c>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80041bc:	4b46      	ldr	r3, [pc, #280]	; (80042d8 <_ZL12MX_TIM1_Initv+0x16c>)
 80041be:	2200      	movs	r2, #0
 80041c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041c2:	4b45      	ldr	r3, [pc, #276]	; (80042d8 <_ZL12MX_TIM1_Initv+0x16c>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80041c8:	4843      	ldr	r0, [pc, #268]	; (80042d8 <_ZL12MX_TIM1_Initv+0x16c>)
 80041ca:	f003 ffcc 	bl	8008166 <HAL_TIM_PWM_Init>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	bf14      	ite	ne
 80041d4:	2301      	movne	r3, #1
 80041d6:	2300      	moveq	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80041de:	f000 fa53 	bl	8004688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041e2:	2300      	movs	r3, #0
 80041e4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80041ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041ee:	4619      	mov	r1, r3
 80041f0:	4839      	ldr	r0, [pc, #228]	; (80042d8 <_ZL12MX_TIM1_Initv+0x16c>)
 80041f2:	f004 fec7 	bl	8008f84 <HAL_TIMEx_MasterConfigSynchronization>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf14      	ite	ne
 80041fc:	2301      	movne	r3, #1
 80041fe:	2300      	moveq	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8004206:	f000 fa3f 	bl	8004688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800420a:	2360      	movs	r3, #96	; 0x60
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004212:	2300      	movs	r3, #0
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004216:	2300      	movs	r3, #0
 8004218:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800421a:	2300      	movs	r3, #0
 800421c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800421e:	2300      	movs	r3, #0
 8004220:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004222:	2300      	movs	r3, #0
 8004224:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800422a:	2200      	movs	r2, #0
 800422c:	4619      	mov	r1, r3
 800422e:	482a      	ldr	r0, [pc, #168]	; (80042d8 <_ZL12MX_TIM1_Initv+0x16c>)
 8004230:	f004 fa72 	bl	8008718 <HAL_TIM_PWM_ConfigChannel>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf14      	ite	ne
 800423a:	2301      	movne	r3, #1
 800423c:	2300      	moveq	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8004244:	f000 fa20 	bl	8004688 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800424c:	2204      	movs	r2, #4
 800424e:	4619      	mov	r1, r3
 8004250:	4821      	ldr	r0, [pc, #132]	; (80042d8 <_ZL12MX_TIM1_Initv+0x16c>)
 8004252:	f004 fa61 	bl	8008718 <HAL_TIM_PWM_ConfigChannel>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 8004266:	f000 fa0f 	bl	8004688 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800426a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800426e:	2208      	movs	r2, #8
 8004270:	4619      	mov	r1, r3
 8004272:	4819      	ldr	r0, [pc, #100]	; (80042d8 <_ZL12MX_TIM1_Initv+0x16c>)
 8004274:	f004 fa50 	bl	8008718 <HAL_TIM_PWM_ConfigChannel>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	bf14      	ite	ne
 800427e:	2301      	movne	r3, #1
 8004280:	2300      	moveq	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8004288:	f000 f9fe 	bl	8004688 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800428c:	2300      	movs	r3, #0
 800428e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004290:	2300      	movs	r3, #0
 8004292:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 115;
 8004298:	2373      	movs	r3, #115	; 0x73
 800429a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80042a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80042aa:	1d3b      	adds	r3, r7, #4
 80042ac:	4619      	mov	r1, r3
 80042ae:	480a      	ldr	r0, [pc, #40]	; (80042d8 <_ZL12MX_TIM1_Initv+0x16c>)
 80042b0:	f004 fed4 	bl	800905c <HAL_TIMEx_ConfigBreakDeadTime>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	bf14      	ite	ne
 80042ba:	2301      	movne	r3, #1
 80042bc:	2300      	moveq	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 80042c4:	f000 f9e0 	bl	8004688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80042c8:	4803      	ldr	r0, [pc, #12]	; (80042d8 <_ZL12MX_TIM1_Initv+0x16c>)
 80042ca:	f001 f82d 	bl	8005328 <HAL_TIM_MspPostInit>

}
 80042ce:	bf00      	nop
 80042d0:	3748      	adds	r7, #72	; 0x48
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	200001ac 	.word	0x200001ac
 80042dc:	40012c00 	.word	0x40012c00

080042e0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08a      	sub	sp, #40	; 0x28
 80042e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042e6:	f107 0320 	add.w	r3, r7, #32
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042f0:	1d3b      	adds	r3, r7, #4
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	605a      	str	r2, [r3, #4]
 80042f8:	609a      	str	r2, [r3, #8]
 80042fa:	60da      	str	r2, [r3, #12]
 80042fc:	611a      	str	r2, [r3, #16]
 80042fe:	615a      	str	r2, [r3, #20]
 8004300:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004302:	4b28      	ldr	r3, [pc, #160]	; (80043a4 <_ZL12MX_TIM3_Initv+0xc4>)
 8004304:	4a28      	ldr	r2, [pc, #160]	; (80043a8 <_ZL12MX_TIM3_Initv+0xc8>)
 8004306:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 8004308:	4b26      	ldr	r3, [pc, #152]	; (80043a4 <_ZL12MX_TIM3_Initv+0xc4>)
 800430a:	2227      	movs	r2, #39	; 0x27
 800430c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800430e:	4b25      	ldr	r3, [pc, #148]	; (80043a4 <_ZL12MX_TIM3_Initv+0xc4>)
 8004310:	2200      	movs	r2, #0
 8004312:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8004314:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <_ZL12MX_TIM3_Initv+0xc4>)
 8004316:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800431a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800431c:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <_ZL12MX_TIM3_Initv+0xc4>)
 800431e:	2200      	movs	r2, #0
 8004320:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004322:	4b20      	ldr	r3, [pc, #128]	; (80043a4 <_ZL12MX_TIM3_Initv+0xc4>)
 8004324:	2280      	movs	r2, #128	; 0x80
 8004326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8004328:	481e      	ldr	r0, [pc, #120]	; (80043a4 <_ZL12MX_TIM3_Initv+0xc4>)
 800432a:	f003 fecd 	bl	80080c8 <HAL_TIM_OC_Init>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf14      	ite	ne
 8004334:	2301      	movne	r3, #1
 8004336:	2300      	moveq	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 800433e:	f000 f9a3 	bl	8004688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004342:	2300      	movs	r3, #0
 8004344:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004346:	2300      	movs	r3, #0
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800434a:	f107 0320 	add.w	r3, r7, #32
 800434e:	4619      	mov	r1, r3
 8004350:	4814      	ldr	r0, [pc, #80]	; (80043a4 <_ZL12MX_TIM3_Initv+0xc4>)
 8004352:	f004 fe17 	bl	8008f84 <HAL_TIMEx_MasterConfigSynchronization>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	bf14      	ite	ne
 800435c:	2301      	movne	r3, #1
 800435e:	2300      	moveq	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8004366:	f000 f98f 	bl	8004688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800436a:	2300      	movs	r3, #0
 800436c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800437a:	1d3b      	adds	r3, r7, #4
 800437c:	2200      	movs	r2, #0
 800437e:	4619      	mov	r1, r3
 8004380:	4808      	ldr	r0, [pc, #32]	; (80043a4 <_ZL12MX_TIM3_Initv+0xc4>)
 8004382:	f004 f971 	bl	8008668 <HAL_TIM_OC_ConfigChannel>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8004396:	f000 f977 	bl	8004688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800439a:	bf00      	nop
 800439c:	3728      	adds	r7, #40	; 0x28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	200001f4 	.word	0x200001f4
 80043a8:	40000400 	.word	0x40000400

080043ac <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043b2:	f107 0320 	add.w	r3, r7, #32
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043bc:	1d3b      	adds	r3, r7, #4
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	605a      	str	r2, [r3, #4]
 80043c4:	609a      	str	r2, [r3, #8]
 80043c6:	60da      	str	r2, [r3, #12]
 80043c8:	611a      	str	r2, [r3, #16]
 80043ca:	615a      	str	r2, [r3, #20]
 80043cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80043ce:	4b29      	ldr	r3, [pc, #164]	; (8004474 <_ZL12MX_TIM4_Initv+0xc8>)
 80043d0:	4a29      	ldr	r2, [pc, #164]	; (8004478 <_ZL12MX_TIM4_Initv+0xcc>)
 80043d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80043d4:	4b27      	ldr	r3, [pc, #156]	; (8004474 <_ZL12MX_TIM4_Initv+0xc8>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043da:	4b26      	ldr	r3, [pc, #152]	; (8004474 <_ZL12MX_TIM4_Initv+0xc8>)
 80043dc:	2200      	movs	r2, #0
 80043de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80043e0:	4b24      	ldr	r3, [pc, #144]	; (8004474 <_ZL12MX_TIM4_Initv+0xc8>)
 80043e2:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80043e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043e8:	4b22      	ldr	r3, [pc, #136]	; (8004474 <_ZL12MX_TIM4_Initv+0xc8>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043ee:	4b21      	ldr	r3, [pc, #132]	; (8004474 <_ZL12MX_TIM4_Initv+0xc8>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80043f4:	481f      	ldr	r0, [pc, #124]	; (8004474 <_ZL12MX_TIM4_Initv+0xc8>)
 80043f6:	f003 feb6 	bl	8008166 <HAL_TIM_PWM_Init>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf14      	ite	ne
 8004400:	2301      	movne	r3, #1
 8004402:	2300      	moveq	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 800440a:	f000 f93d 	bl	8004688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004412:	2300      	movs	r3, #0
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004416:	f107 0320 	add.w	r3, r7, #32
 800441a:	4619      	mov	r1, r3
 800441c:	4815      	ldr	r0, [pc, #84]	; (8004474 <_ZL12MX_TIM4_Initv+0xc8>)
 800441e:	f004 fdb1 	bl	8008f84 <HAL_TIMEx_MasterConfigSynchronization>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf14      	ite	ne
 8004428:	2301      	movne	r3, #1
 800442a:	2300      	moveq	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 8004432:	f000 f929 	bl	8004688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004436:	2360      	movs	r3, #96	; 0x60
 8004438:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004446:	1d3b      	adds	r3, r7, #4
 8004448:	2200      	movs	r2, #0
 800444a:	4619      	mov	r1, r3
 800444c:	4809      	ldr	r0, [pc, #36]	; (8004474 <_ZL12MX_TIM4_Initv+0xc8>)
 800444e:	f004 f963 	bl	8008718 <HAL_TIM_PWM_ConfigChannel>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	bf14      	ite	ne
 8004458:	2301      	movne	r3, #1
 800445a:	2300      	moveq	r3, #0
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 8004462:	f000 f911 	bl	8004688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004466:	4803      	ldr	r0, [pc, #12]	; (8004474 <_ZL12MX_TIM4_Initv+0xc8>)
 8004468:	f000 ff5e 	bl	8005328 <HAL_TIM_MspPostInit>

}
 800446c:	bf00      	nop
 800446e:	3728      	adds	r7, #40	; 0x28
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	2000023c 	.word	0x2000023c
 8004478:	40000800 	.word	0x40000800

0800447c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004480:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004482:	4a14      	ldr	r2, [pc, #80]	; (80044d4 <_ZL19MX_USART3_UART_Initv+0x58>)
 8004484:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800448c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800448e:	4b10      	ldr	r3, [pc, #64]	; (80044d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004490:	2200      	movs	r2, #0
 8004492:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004494:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004496:	2200      	movs	r2, #0
 8004498:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800449a:	4b0d      	ldr	r3, [pc, #52]	; (80044d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 800449c:	2200      	movs	r2, #0
 800449e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80044a2:	220c      	movs	r2, #12
 80044a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80044ac:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80044b2:	4807      	ldr	r0, [pc, #28]	; (80044d0 <_ZL19MX_USART3_UART_Initv+0x54>)
 80044b4:	f004 fe59 	bl	800916a <HAL_UART_Init>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	bf14      	ite	ne
 80044be:	2301      	movne	r3, #1
 80044c0:	2300      	moveq	r3, #0
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80044c8:	f000 f8de 	bl	8004688 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80044cc:	bf00      	nop
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20000284 	.word	0x20000284
 80044d4:	40004800 	.word	0x40004800

080044d8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044de:	4b14      	ldr	r3, [pc, #80]	; (8004530 <_ZL11MX_DMA_Initv+0x58>)
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	4a13      	ldr	r2, [pc, #76]	; (8004530 <_ZL11MX_DMA_Initv+0x58>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	6153      	str	r3, [r2, #20]
 80044ea:	4b11      	ldr	r3, [pc, #68]	; (8004530 <_ZL11MX_DMA_Initv+0x58>)
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	607b      	str	r3, [r7, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80044f6:	2200      	movs	r2, #0
 80044f8:	2100      	movs	r1, #0
 80044fa:	200b      	movs	r0, #11
 80044fc:	f002 fa07 	bl	800690e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004500:	200b      	movs	r0, #11
 8004502:	f002 fa20 	bl	8006946 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004506:	2200      	movs	r2, #0
 8004508:	2100      	movs	r1, #0
 800450a:	200c      	movs	r0, #12
 800450c:	f002 f9ff 	bl	800690e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004510:	200c      	movs	r0, #12
 8004512:	f002 fa18 	bl	8006946 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004516:	2200      	movs	r2, #0
 8004518:	2100      	movs	r1, #0
 800451a:	200d      	movs	r0, #13
 800451c:	f002 f9f7 	bl	800690e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004520:	200d      	movs	r0, #13
 8004522:	f002 fa10 	bl	8006946 <HAL_NVIC_EnableIRQ>

}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40021000 	.word	0x40021000

08004534 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800453a:	f107 0310 	add.w	r3, r7, #16
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	605a      	str	r2, [r3, #4]
 8004544:	609a      	str	r2, [r3, #8]
 8004546:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004548:	4b4a      	ldr	r3, [pc, #296]	; (8004674 <_ZL12MX_GPIO_Initv+0x140>)
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	4a49      	ldr	r2, [pc, #292]	; (8004674 <_ZL12MX_GPIO_Initv+0x140>)
 800454e:	f043 0320 	orr.w	r3, r3, #32
 8004552:	6193      	str	r3, [r2, #24]
 8004554:	4b47      	ldr	r3, [pc, #284]	; (8004674 <_ZL12MX_GPIO_Initv+0x140>)
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004560:	4b44      	ldr	r3, [pc, #272]	; (8004674 <_ZL12MX_GPIO_Initv+0x140>)
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	4a43      	ldr	r2, [pc, #268]	; (8004674 <_ZL12MX_GPIO_Initv+0x140>)
 8004566:	f043 0310 	orr.w	r3, r3, #16
 800456a:	6193      	str	r3, [r2, #24]
 800456c:	4b41      	ldr	r3, [pc, #260]	; (8004674 <_ZL12MX_GPIO_Initv+0x140>)
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004578:	4b3e      	ldr	r3, [pc, #248]	; (8004674 <_ZL12MX_GPIO_Initv+0x140>)
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	4a3d      	ldr	r2, [pc, #244]	; (8004674 <_ZL12MX_GPIO_Initv+0x140>)
 800457e:	f043 0304 	orr.w	r3, r3, #4
 8004582:	6193      	str	r3, [r2, #24]
 8004584:	4b3b      	ldr	r3, [pc, #236]	; (8004674 <_ZL12MX_GPIO_Initv+0x140>)
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	607b      	str	r3, [r7, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004590:	4b38      	ldr	r3, [pc, #224]	; (8004674 <_ZL12MX_GPIO_Initv+0x140>)
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	4a37      	ldr	r2, [pc, #220]	; (8004674 <_ZL12MX_GPIO_Initv+0x140>)
 8004596:	f043 0308 	orr.w	r3, r3, #8
 800459a:	6193      	str	r3, [r2, #24]
 800459c:	4b35      	ldr	r3, [pc, #212]	; (8004674 <_ZL12MX_GPIO_Initv+0x140>)
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_CAN_Pin|CONDENS_Pin, GPIO_PIN_RESET);
 80045a8:	2200      	movs	r2, #0
 80045aa:	f241 2101 	movw	r1, #4609	; 0x1201
 80045ae:	4832      	ldr	r0, [pc, #200]	; (8004678 <_ZL12MX_GPIO_Initv+0x144>)
 80045b0:	f003 f811 	bl	80075d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UNLOAD_GPIO_Port, UNLOAD_Pin, GPIO_PIN_RESET);
 80045b4:	2200      	movs	r2, #0
 80045b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045ba:	4830      	ldr	r0, [pc, #192]	; (800467c <_ZL12MX_GPIO_Initv+0x148>)
 80045bc:	f003 f80b 	bl	80075d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VENT_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80045c0:	2200      	movs	r2, #0
 80045c2:	2130      	movs	r1, #48	; 0x30
 80045c4:	482e      	ldr	r0, [pc, #184]	; (8004680 <_ZL12MX_GPIO_Initv+0x14c>)
 80045c6:	f003 f806 	bl	80075d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin LED_CAN_Pin CONDENS_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_CAN_Pin|CONDENS_Pin;
 80045ca:	f241 2301 	movw	r3, #4609	; 0x1201
 80045ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045d0:	2301      	movs	r3, #1
 80045d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d8:	2302      	movs	r3, #2
 80045da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045dc:	f107 0310 	add.w	r3, r7, #16
 80045e0:	4619      	mov	r1, r3
 80045e2:	4825      	ldr	r0, [pc, #148]	; (8004678 <_ZL12MX_GPIO_Initv+0x144>)
 80045e4:	f002 fe4c 	bl	8007280 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASYNC_Pin */
  GPIO_InitStruct.Pin = ASYNC_Pin;
 80045e8:	2304      	movs	r3, #4
 80045ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ASYNC_GPIO_Port, &GPIO_InitStruct);
 80045f4:	f107 0310 	add.w	r3, r7, #16
 80045f8:	4619      	mov	r1, r3
 80045fa:	4820      	ldr	r0, [pc, #128]	; (800467c <_ZL12MX_GPIO_Initv+0x148>)
 80045fc:	f002 fe40 	bl	8007280 <HAL_GPIO_Init>

  /*Configure GPIO pin : UNLOAD_Pin */
  GPIO_InitStruct.Pin = UNLOAD_Pin;
 8004600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004606:	2301      	movs	r3, #1
 8004608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460a:	2300      	movs	r3, #0
 800460c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460e:	2302      	movs	r3, #2
 8004610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UNLOAD_GPIO_Port, &GPIO_InitStruct);
 8004612:	f107 0310 	add.w	r3, r7, #16
 8004616:	4619      	mov	r1, r3
 8004618:	4818      	ldr	r0, [pc, #96]	; (800467c <_ZL12MX_GPIO_Initv+0x148>)
 800461a:	f002 fe31 	bl	8007280 <HAL_GPIO_Init>

  /*Configure GPIO pin : Contactor_Pin */
  GPIO_InitStruct.Pin = Contactor_Pin;
 800461e:	2304      	movs	r3, #4
 8004620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004626:	2300      	movs	r3, #0
 8004628:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Contactor_GPIO_Port, &GPIO_InitStruct);
 800462a:	f107 0310 	add.w	r3, r7, #16
 800462e:	4619      	mov	r1, r3
 8004630:	4814      	ldr	r0, [pc, #80]	; (8004684 <_ZL12MX_GPIO_Initv+0x150>)
 8004632:	f002 fe25 	bl	8007280 <HAL_GPIO_Init>

  /*Configure GPIO pins : VENT_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = VENT_Pin|LED_GREEN_Pin;
 8004636:	2330      	movs	r3, #48	; 0x30
 8004638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800463a:	2301      	movs	r3, #1
 800463c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463e:	2300      	movs	r3, #0
 8004640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004642:	2302      	movs	r3, #2
 8004644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004646:	f107 0310 	add.w	r3, r7, #16
 800464a:	4619      	mov	r1, r3
 800464c:	480c      	ldr	r0, [pc, #48]	; (8004680 <_ZL12MX_GPIO_Initv+0x14c>)
 800464e:	f002 fe17 	bl	8007280 <HAL_GPIO_Init>

  /*Configure GPIO pins : TD_DM_Pin SP_Pin START_Pin */
  GPIO_InitStruct.Pin = TD_DM_Pin|SP_Pin|START_Pin;
 8004652:	f44f 7360 	mov.w	r3, #896	; 0x380
 8004656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465c:	2300      	movs	r3, #0
 800465e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004660:	f107 0310 	add.w	r3, r7, #16
 8004664:	4619      	mov	r1, r3
 8004666:	4806      	ldr	r0, [pc, #24]	; (8004680 <_ZL12MX_GPIO_Initv+0x14c>)
 8004668:	f002 fe0a 	bl	8007280 <HAL_GPIO_Init>

}
 800466c:	bf00      	nop
 800466e:	3720      	adds	r7, #32
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000
 8004678:	40011000 	.word	0x40011000
 800467c:	40010800 	.word	0x40010800
 8004680:	40010c00 	.word	0x40010c00
 8004684:	40011400 	.word	0x40011400

08004688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800468c:	b672      	cpsid	i
}
 800468e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004690:	e7fe      	b.n	8004690 <Error_Handler+0x8>

08004692 <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    size_t size ()  {return end_i;}
    void push_back(T p)
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	2b0b      	cmp	r3, #11
 80046a2:	d808      	bhi.n	80046b6 <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_+0x24>
            vector[end_i++] = p;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	1c59      	adds	r1, r3, #1
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6311      	str	r1, [r2, #48]	; 0x30
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr

080046c0 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>:
    void remove (T p)
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 80046ce:	2300      	movs	r3, #0
 80046d0:	73bb      	strb	r3, [r7, #14]
 80046d2:	7bba      	ldrb	r2, [r7, #14]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	429a      	cmp	r2, r3
 80046da:	d20d      	bcs.n	80046f8 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
        if (vector[i] == p) {
 80046dc:	7bba      	ldrb	r2, [r7, #14]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d102      	bne.n	80046f0 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x30>
          index = i;
 80046ea:	7bbb      	ldrb	r3, [r7, #14]
 80046ec:	73fb      	strb	r3, [r7, #15]
          break;
 80046ee:	e003      	b.n	80046f8 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
      for (uint8_t i = 0; i < end_i; i++) {
 80046f0:	7bbb      	ldrb	r3, [r7, #14]
 80046f2:	3301      	adds	r3, #1
 80046f4:	73bb      	strb	r3, [r7, #14]
 80046f6:	e7ec      	b.n	80046d2 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	737b      	strb	r3, [r7, #13]
 80046fc:	7b7a      	ldrb	r2, [r7, #13]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	429a      	cmp	r2, r3
 8004704:	d20c      	bcs.n	8004720 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x60>
          vector[i] = vector[i+1];
 8004706:	7b7b      	ldrb	r3, [r7, #13]
 8004708:	1c59      	adds	r1, r3, #1
 800470a:	7b7a      	ldrb	r2, [r7, #13]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 8004718:	7b7b      	ldrb	r3, [r7, #13]
 800471a:	3301      	adds	r3, #1
 800471c:	737b      	strb	r3, [r7, #13]
 800471e:	e7ed      	b.n	80046fc <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x3c>
      }
      end_i--;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	1e5a      	subs	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800472a:	bf00      	nop
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr

08004734 <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	b2db      	uxtb	r3, r3
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr

0800474c <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>:

    T operator[] (const size_t index) const
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>:
    Static_vector (){}
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr

0800477c <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 8004784:	f003 fb0c 	bl	8007da0 <HAL_RCC_GetHCLKFreq>
 8004788:	4603      	mov	r3, r0
 800478a:	4a06      	ldr	r2, [pc, #24]	; (80047a4 <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	3b01      	subs	r3, #1
 8004794:	4618      	mov	r0, r3
 8004796:	f002 f8e4 	bl	8006962 <HAL_SYSTICK_Config>
	}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	10624dd3 	.word	0x10624dd3

080047a8 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>:
inline void every_qty_cnt_call(size_t& cnt, size_t qty, Function call)
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
    if (not(cnt++ % qty))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	1c59      	adds	r1, r3, #1
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	6011      	str	r1, [r2, #0]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	fb01 f202 	mul.w	r2, r1, r2
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bf0c      	ite	eq
 80047d0:	2301      	moveq	r3, #1
 80047d2:	2300      	movne	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_+0x3a>
        call();
 80047da:	1d3b      	adds	r3, r7, #4
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fc fde9 	bl	80013b4 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>
}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80047ea:	b5b0      	push	{r4, r5, r7, lr}
 80047ec:	b082      	sub	sp, #8
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7fb fe69 	bl	80004cc <__aeabi_i2d>
 80047fa:	4604      	mov	r4, r0
 80047fc:	460d      	mov	r5, r1
 80047fe:	6838      	ldr	r0, [r7, #0]
 8004800:	f7fb fe64 	bl	80004cc <__aeabi_i2d>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4620      	mov	r0, r4
 800480a:	4629      	mov	r1, r5
 800480c:	f005 fc1a 	bl	800a044 <pow>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
    }
 8004814:	4610      	mov	r0, r2
 8004816:	4619      	mov	r1, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004820 <_ZN7ServiceI7In_data8Out_dataEclEv>:
	void operator()(){
 8004820:	b590      	push	{r4, r7, lr}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
		outData.convertor_temp  = ntc(adc[Trad]);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685c      	ldr	r4, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2102      	movs	r1, #2
 8004832:	4618      	mov	r0, r3
 8004834:	f7fd fb42 	bl	8001ebc <_ZN4ADC_ixEh>
 8004838:	4603      	mov	r3, r0
 800483a:	4619      	mov	r1, r3
 800483c:	4620      	mov	r0, r4
 800483e:	f7fd fd2d 	bl	800229c <_ZN3NTCclEt>
 8004842:	4603      	mov	r3, r0
 8004844:	b21a      	sxth	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		new_pressure = (((k_adc * adc[Press]) * 100) * 3) / 2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2101      	movs	r1, #1
 8004852:	4618      	mov	r0, r3
 8004854:	f7fd fb32 	bl	8001ebc <_ZN4ADC_ixEh>
 8004858:	4603      	mov	r3, r0
 800485a:	4618      	mov	r0, r3
 800485c:	f7fc fa32 	bl	8000cc4 <__aeabi_i2f>
 8004860:	4603      	mov	r3, r0
 8004862:	49a4      	ldr	r1, [pc, #656]	; (8004af4 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2d4>)
 8004864:	4618      	mov	r0, r3
 8004866:	f7fc fa81 	bl	8000d6c <__aeabi_fmul>
 800486a:	4603      	mov	r3, r0
 800486c:	49a2      	ldr	r1, [pc, #648]	; (8004af8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2d8>)
 800486e:	4618      	mov	r0, r3
 8004870:	f7fc fa7c 	bl	8000d6c <__aeabi_fmul>
 8004874:	4603      	mov	r3, r0
 8004876:	49a1      	ldr	r1, [pc, #644]	; (8004afc <_ZN7ServiceI7In_data8Out_dataEclEv+0x2dc>)
 8004878:	4618      	mov	r0, r3
 800487a:	f7fc fa77 	bl	8000d6c <__aeabi_fmul>
 800487e:	4603      	mov	r3, r0
 8004880:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004884:	4618      	mov	r0, r3
 8004886:	f7fc fb25 	bl	8000ed4 <__aeabi_fdiv>
 800488a:	4603      	mov	r3, r0
 800488c:	4618      	mov	r0, r3
 800488e:	f7fc fc49 	bl	8001124 <__aeabi_f2iz>
 8004892:	4603      	mov	r3, r0
 8004894:	b21a      	sxth	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		outData.pressure += (new_pressure - outData.pressure) / 2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 80048a8:	4619      	mov	r1, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80048b0:	1acb      	subs	r3, r1, r3
 80048b2:	0fd9      	lsrs	r1, r3, #31
 80048b4:	440b      	add	r3, r1
 80048b6:	105b      	asrs	r3, r3, #1
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	4413      	add	r3, r2
 80048bc:	b29a      	uxth	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
		outData.current        = (abs(adc.value(PS) - adc.offset_I_S)) * 100 / 21;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2101      	movs	r1, #1
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fd fb07 	bl	8001ede <_ZN4ADC_5valueEh>
 80048d0:	4603      	mov	r3, r0
 80048d2:	461a      	mov	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	bfb8      	it	lt
 80048e2:	425b      	neglt	r3, r3
 80048e4:	2264      	movs	r2, #100	; 0x64
 80048e6:	fb02 f303 	mul.w	r3, r2, r3
 80048ea:	4a85      	ldr	r2, [pc, #532]	; (8004b00 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2e0>)
 80048ec:	fb82 1203 	smull	r1, r2, r2, r3
 80048f0:	1092      	asrs	r2, r2, #2
 80048f2:	17db      	asrs	r3, r3, #31
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		outData.current_A      = adc.current();
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f7fd fb1f 	bl	8001f46 <_ZN4ADC_7currentEv>
 8004908:	4603      	mov	r3, r0
 800490a:	461a      	mov	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		new_hv = (adc.value_HV() * 350 / 4095 * 45) / 10;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fd fb22 	bl	8001f60 <_ZN4ADC_8value_HVEv>
 800491c:	4603      	mov	r3, r0
 800491e:	461a      	mov	r2, r3
 8004920:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004924:	fb03 f302 	mul.w	r3, r3, r2
 8004928:	4a76      	ldr	r2, [pc, #472]	; (8004b04 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2e4>)
 800492a:	fb82 1203 	smull	r1, r2, r2, r3
 800492e:	441a      	add	r2, r3
 8004930:	12d2      	asrs	r2, r2, #11
 8004932:	17db      	asrs	r3, r3, #31
 8004934:	1ad2      	subs	r2, r2, r3
 8004936:	4613      	mov	r3, r2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	4413      	add	r3, r2
 800493c:	011a      	lsls	r2, r3, #4
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	4a71      	ldr	r2, [pc, #452]	; (8004b08 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2e8>)
 8004942:	fb82 1203 	smull	r1, r2, r2, r3
 8004946:	1092      	asrs	r2, r2, #2
 8004948:	17db      	asrs	r3, r3, #31
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	b21a      	sxth	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		if(measure_timer.done()) {
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	334c      	adds	r3, #76	; 0x4c
 8004958:	4618      	mov	r0, r3
 800495a:	f7fc fd85 	bl	8001468 <_ZN5Timer4doneEv>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d065      	beq.n	8004a30 <_ZN7ServiceI7In_data8Out_dataEclEv+0x210>
			measure_timer.stop();
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	334c      	adds	r3, #76	; 0x4c
 8004968:	4618      	mov	r0, r3
 800496a:	f7fc fd6e 	bl	800144a <_ZN5Timer4stopEv>
			measure_timer.start();
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	334c      	adds	r3, #76	; 0x4c
 8004972:	4618      	mov	r0, r3
 8004974:	f7fc fd8a 	bl	800148c <_ZN5Timer5startEv>
			arr_new_hv[m] = new_hv;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f9b3 205e 	ldrsh.w	r2, [r3, #94]	; 0x5e
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004984:	b291      	uxth	r1, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	3308      	adds	r3, #8
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	4413      	add	r3, r2
 800498e:	460a      	mov	r2, r1
 8004990:	809a      	strh	r2, [r3, #4]
			if (m < (qty_measure - 1)) m++;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004998:	2b08      	cmp	r3, #8
 800499a:	d808      	bhi.n	80049ae <_ZN7ServiceI7In_data8Out_dataEclEv+0x18e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049a2:	3301      	adds	r3, #1
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80049ac:	e003      	b.n	80049b6 <_ZN7ServiceI7In_data8Out_dataEclEv+0x196>
			else m = 0;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			HV_avarage = 0;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	855a      	strh	r2, [r3, #42]	; 0x2a
			for (auto i = 0; i < qty_measure; i++) {
 80049bc:	2300      	movs	r3, #0
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b09      	cmp	r3, #9
 80049c4:	dc12      	bgt.n	80049ec <_ZN7ServiceI7In_data8Out_dataEclEv+0x1cc>
				HV_avarage += arr_new_hv[i];
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	3308      	adds	r3, #8
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	440b      	add	r3, r1
 80049d8:	889b      	ldrh	r3, [r3, #4]
 80049da:	4413      	add	r3, r2
 80049dc:	b29b      	uxth	r3, r3
 80049de:	b21a      	sxth	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	855a      	strh	r2, [r3, #42]	; 0x2a
			for (auto i = 0; i < qty_measure; i++) {
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3301      	adds	r3, #1
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	e7e9      	b.n	80049c0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1a0>
			HV_avarage /= qty_measure;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80049f2:	4a45      	ldr	r2, [pc, #276]	; (8004b08 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2e8>)
 80049f4:	fb82 1203 	smull	r1, r2, r2, r3
 80049f8:	1092      	asrs	r2, r2, #2
 80049fa:	17db      	asrs	r3, r3, #31
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	b21a      	sxth	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	855a      	strh	r2, [r3, #42]	; 0x2a
			outData.high_voltage  += (HV_avarage - outData.high_voltage) * 10 / 60;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8004a10:	4619      	mov	r1, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004a18:	1acb      	subs	r3, r1, r3
 8004a1a:	493c      	ldr	r1, [pc, #240]	; (8004b0c <_ZN7ServiceI7In_data8Out_dataEclEv+0x2ec>)
 8004a1c:	fb81 0103 	smull	r0, r1, r1, r3
 8004a20:	17db      	asrs	r3, r3, #31
 8004a22:	1acb      	subs	r3, r1, r3
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	4413      	add	r3, r2
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		if(outData.pressure >= 360) {
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8004a36:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8004a3a:	d31c      	bcc.n	8004a76 <_ZN7ServiceI7In_data8Out_dataEclEv+0x256>
			if(press_delay.isCount()) {
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	333c      	adds	r3, #60	; 0x3c
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fc fd2f 	bl	80014a4 <_ZN5Timer7isCountEv>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00c      	beq.n	8004a66 <_ZN7ServiceI7In_data8Out_dataEclEv+0x246>
				if(press_delay.done()) {
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	333c      	adds	r3, #60	; 0x3c
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fc fd09 	bl	8001468 <_ZN5Timer4doneEv>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d011      	beq.n	8004a80 <_ZN7ServiceI7In_data8Out_dataEclEv+0x260>
					done = true;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8004a64:	e00c      	b.n	8004a80 <_ZN7ServiceI7In_data8Out_dataEclEv+0x260>
				press_delay.start(1000);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	333c      	adds	r3, #60	; 0x3c
 8004a6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fc fcbe 	bl	80013f0 <_ZN5Timer5startEm>
 8004a74:	e004      	b.n	8004a80 <_ZN7ServiceI7In_data8Out_dataEclEv+0x260>
			press_delay.stop();
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	333c      	adds	r3, #60	; 0x3c
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fc fce5 	bl	800144a <_ZN5Timer4stopEv>
		if(outData.pressure < 280) done = false;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8004a86:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8004a8a:	d203      	bcs.n	8004a94 <_ZN7ServiceI7In_data8Out_dataEclEv+0x274>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		kolhoz ^= timer.event();
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	332c      	adds	r3, #44	; 0x2c
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fc fcbc 	bl	8001416 <_ZN5Timer5eventEv>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8004aa8:	4053      	eors	r3, r2
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bf14      	ite	ne
 8004ab0:	2301      	movne	r3, #1
 8004ab2:	2300      	moveq	r3, #0
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		if (event or kolhoz) {
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d105      	bne.n	8004ad2 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2b2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80d7 	beq.w	8004c80 <_ZN7ServiceI7In_data8Out_dataEclEv+0x460>
			if(uart.buffer[0] == 4 or kolhoz) {
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	2100      	movs	r1, #0
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f958 	bl	8004d90 <_ZN10Net_bufferILh26EEixEi>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d004      	beq.n	8004af0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2d0>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00f      	beq.n	8004b10 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2f0>
 8004af0:	2301      	movs	r3, #1
 8004af2:	e00e      	b.n	8004b12 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2f2>
 8004af4:	3a534067 	.word	0x3a534067
 8004af8:	42c80000 	.word	0x42c80000
 8004afc:	40400000 	.word	0x40400000
 8004b00:	30c30c31 	.word	0x30c30c31
 8004b04:	80080081 	.word	0x80080081
 8004b08:	66666667 	.word	0x66666667
 8004b0c:	2aaaaaab 	.word	0x2aaaaaab
 8004b10:	2300      	movs	r3, #0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d070      	beq.n	8004bf8 <_ZN7ServiceI7In_data8Out_dataEclEv+0x3d8>
				uart.buffer.clear();
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 f946 	bl	8004dae <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << outData.voltage_board
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	1d1a      	adds	r2, r3, #4
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4610      	mov	r0, r2
 8004b32:	f000 f94b 	bl	8004dcc <_ZN10Net_bufferILh26EElsEt>
 8004b36:	4602      	mov	r2, r0
						    << outData.pressure
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4610      	mov	r0, r2
 8004b42:	f000 f943 	bl	8004dcc <_ZN10Net_bufferILh26EElsEt>
 8004b46:	4602      	mov	r2, r0
							<< outData.PWM
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4610      	mov	r0, r2
 8004b52:	f000 f959 	bl	8004e08 <_ZN10Net_bufferILh26EElsEs>
 8004b56:	4602      	mov	r2, r0
							<< outData.convertor_temp
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4610      	mov	r0, r2
 8004b62:	f000 f951 	bl	8004e08 <_ZN10Net_bufferILh26EElsEs>
 8004b66:	4602      	mov	r2, r0
							<< outData.current
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f000 f92b 	bl	8004dcc <_ZN10Net_bufferILh26EElsEt>
 8004b76:	4602      	mov	r2, r0
							<< outData.current_A
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4610      	mov	r0, r2
 8004b82:	f000 f923 	bl	8004dcc <_ZN10Net_bufferILh26EElsEt>
 8004b86:	4602      	mov	r2, r0
							<< outData.current_C
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4610      	mov	r0, r2
 8004b92:	f000 f91b 	bl	8004dcc <_ZN10Net_bufferILh26EElsEt>
 8004b96:	4602      	mov	r2, r0
							<< outData.high_voltage
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f000 f913 	bl	8004dcc <_ZN10Net_bufferILh26EElsEt>
 8004ba6:	4602      	mov	r2, r0
							<< outData.max_current
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f000 f90b 	bl	8004dcc <_ZN10Net_bufferILh26EElsEt>
 8004bb6:	4602      	mov	r2, r0
							<< outData.max_current_A
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f000 f903 	bl	8004dcc <_ZN10Net_bufferILh26EElsEt>
 8004bc6:	4602      	mov	r2, r0
							<< outData.max_current_C
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	f000 f8fb 	bl	8004dcc <_ZN10Net_bufferILh26EElsEt>
 8004bd6:	4602      	mov	r2, r0
							<< outData.U_phase
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f000 f8f3 	bl	8004dcc <_ZN10Net_bufferILh26EElsEt>
 8004be6:	4602      	mov	r2, r0
							<< arOutData[12];
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	f000 f8eb 	bl	8004dcc <_ZN10Net_bufferILh26EElsEt>
 8004bf6:	e022      	b.n	8004c3e <_ZN7ServiceI7In_data8Out_dataEclEv+0x41e>
			} else if(uart.buffer[0] == '+') {
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 f8c5 	bl	8004d90 <_ZN10Net_bufferILh26EEixEi>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b2b      	cmp	r3, #43	; 0x2b
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2301      	moveq	r3, #1
 8004c0e:	2300      	movne	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d013      	beq.n	8004c3e <_ZN7ServiceI7In_data8Out_dataEclEv+0x41e>
				uart.buffer.clear();
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 f8c6 	bl	8004dae <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << 'O';
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	3304      	adds	r3, #4
 8004c28:	214f      	movs	r1, #79	; 0x4f
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 f90a 	bl	8004e44 <_ZN10Net_bufferILh26EElsEc>
				uart.buffer << 'K';
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	3304      	adds	r3, #4
 8004c36:	214b      	movs	r1, #75	; 0x4b
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 f903 	bl	8004e44 <_ZN10Net_bufferILh26EElsEc>
			event = false;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			kolhoz = false;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
			if(uart.buffer.size())
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	3304      	adds	r3, #4
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 f912 	bl	8004e7e <_ZN10Net_bufferILh26EE4sizeEv>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d005      	beq.n	8004c76 <_ZN7ServiceI7In_data8Out_dataEclEv+0x456>
				uart.transmit();
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f914 	bl	8004e9c <_ZN5UART_ILj26EE8transmitEv>
	}
 8004c74:	e004      	b.n	8004c80 <_ZN7ServiceI7In_data8Out_dataEclEv+0x460>
				uart.receive();
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 f930 	bl	8004ee0 <_ZN5UART_ILj26EE7receiveEv>
	}
 8004c80:	bf00      	nop
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd90      	pop	{r4, r7, pc}

08004c88 <_ZN5UART_ILj26EEC1ER3Pin>:

public:

	Pin& led_red;

	UART_(Pin& led_red) : led_red{led_red}{}
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 f93b 	bl	8004f18 <_ZN10Net_bufferILh26EEC1Ev>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R3NTCR5UART_ILj26EER9InterruptSB_>:
	Service (
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	603b      	str	r3, [r7, #0]
      , arInData { }, arOutData { }, arInDataMin { }, arInDataMax {}
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	605a      	str	r2, [r3, #4]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	609a      	str	r2, [r3, #8]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	60da      	str	r2, [r3, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	69fa      	ldr	r2, [r7, #28]
 8004cd6:	611a      	str	r2, [r3, #16]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	3314      	adds	r3, #20
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	609a      	str	r2, [r3, #8]
 8004ce4:	60da      	str	r2, [r3, #12]
 8004ce6:	611a      	str	r2, [r3, #16]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	332c      	adds	r3, #44	; 0x2c
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fc fb16 	bl	800132c <_ZN5TimerC1Ev>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	333c      	adds	r3, #60	; 0x3c
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fc fb11 	bl	800132c <_ZN5TimerC1Ev>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	334c      	adds	r3, #76	; 0x4c
 8004d0e:	2119      	movs	r1, #25
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fc fb23 	bl	800135c <_ZN5TimerC1Em>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3368      	adds	r3, #104	; 0x68
 8004d4a:	68f9      	ldr	r1, [r7, #12]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 f8ef 	bl	8004f30 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3370      	adds	r3, #112	; 0x70
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 f907 	bl	8004f6c <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	337a      	adds	r3, #122	; 0x7a
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	605a      	str	r2, [r3, #4]
 8004d68:	609a      	str	r2, [r3, #8]
 8004d6a:	60da      	str	r2, [r3, #12]
 8004d6c:	611a      	str	r2, [r3, #16]
 8004d6e:	615a      	str	r2, [r3, #20]
 8004d70:	831a      	strh	r2, [r3, #24]
		uart.receive();
 8004d72:	6838      	ldr	r0, [r7, #0]
 8004d74:	f000 f8b4 	bl	8004ee0 <_ZN5UART_ILj26EE7receiveEv>
		timer.start(2000);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	332c      	adds	r3, #44	; 0x2c
 8004d7c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fc fb35 	bl	80013f0 <_ZN5Timer5startEm>
	}
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <_ZN10Net_bufferILh26EEixEi>:
    Net_buffer& operator>> (uint16_t&);

    Net_buffer& operator<< (char*);


    uint8_t operator[](int n){return buffer[n];}
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	4413      	add	r3, r2
 8004da0:	3302      	adds	r3, #2
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bc80      	pop	{r7}
 8004dac:	4770      	bx	lr

08004dae <_ZN10Net_bufferILh26EE5clearEv>:
    void clear() { begin_i = 0; end_i = 0; }
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	701a      	strb	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	705a      	strb	r2, [r3, #1]
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr

08004dcc <_ZN10Net_bufferILh26EElsEt>:
        end_i++;
   }
}

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint16_t v)
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 8004dd8:	f107 030e 	add.w	r3, r7, #14
 8004ddc:	f107 020f 	add.w	r2, r7, #15
 8004de0:	8879      	ldrh	r1, [r7, #2]
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f8e0 	bl	8004fa8 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 8004de8:	7bbb      	ldrb	r3, [r7, #14]
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f8f0 	bl	8004fd2 <_ZN10Net_bufferILh26EElsEh>
 8004df2:	4602      	mov	r2, r0
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	4619      	mov	r1, r3
 8004df8:	4610      	mov	r0, r2
 8004dfa:	f000 f8ea 	bl	8004fd2 <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8004dfe:	687b      	ldr	r3, [r7, #4]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <_ZN10Net_bufferILh26EElsEs>:

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (int16_t v)
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 8004e14:	8879      	ldrh	r1, [r7, #2]
 8004e16:	f107 030e 	add.w	r3, r7, #14
 8004e1a:	f107 020f 	add.w	r2, r7, #15
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f8c2 	bl	8004fa8 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 8004e24:	7bbb      	ldrb	r3, [r7, #14]
 8004e26:	4619      	mov	r1, r3
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f8d2 	bl	8004fd2 <_ZN10Net_bufferILh26EElsEh>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	4619      	mov	r1, r3
 8004e34:	4610      	mov	r0, r2
 8004e36:	f000 f8cc 	bl	8004fd2 <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8004e3a:	687b      	ldr	r3, [r7, #4]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <_ZN10Net_bufferILh26EElsEc>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (char v)
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b19      	cmp	r3, #25
 8004e56:	d80c      	bhi.n	8004e72 <_ZN10Net_bufferILh26EElsEc+0x2e>
      buffer[end_i] = v;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4413      	add	r3, r2
 8004e62:	78fa      	ldrb	r2, [r7, #3]
 8004e64:	709a      	strb	r2, [r3, #2]
      end_i++;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	785b      	ldrb	r3, [r3, #1]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	705a      	strb	r2, [r3, #1]
    return *this;
 8004e72:	687b      	ldr	r3, [r7, #4]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <_ZN10Net_bufferILh26EE4sizeEv>:
    uint8_t size()  { return end_i - begin_i; }
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	785a      	ldrb	r2, [r3, #1]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr

08004e9c <_ZN5UART_ILj26EE8transmitEv>:

	Net_buffer<buffer_size> buffer;

	void transmit(){
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
//		buffer.set_size(buffer_size - DMA1_Channel3->CNDTR);
		HAL_UART_Transmit_DMA(&huart3, buffer.ptr(), buffer.size());
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 f8af 	bl	800500c <_ZN10Net_bufferILh26EE3ptrEv>
 8004eae:	4604      	mov	r4, r0
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff ffe2 	bl	8004e7e <_ZN10Net_bufferILh26EE4sizeEv>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	4806      	ldr	r0, [pc, #24]	; (8004edc <_ZN5UART_ILj26EE8transmitEv+0x40>)
 8004ec4:	f004 f99e 	bl	8009204 <HAL_UART_Transmit_DMA>
		led_red = true;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2101      	movs	r1, #1
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fd f9af 	bl	8002232 <_ZN3PinaSEb>
	}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd90      	pop	{r4, r7, pc}
 8004edc:	20000284 	.word	0x20000284

08004ee0 <_ZN5UART_ILj26EE7receiveEv>:

	void receive(){
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer.ptr(), buffer_size);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3304      	adds	r3, #4
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 f88d 	bl	800500c <_ZN10Net_bufferILh26EE3ptrEv>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	221a      	movs	r2, #26
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4806      	ldr	r0, [pc, #24]	; (8004f14 <_ZN5UART_ILj26EE7receiveEv+0x34>)
 8004efa:	f004 f9ef 	bl	80092dc <HAL_UARTEx_ReceiveToIdle_DMA>
		led_red = false;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2100      	movs	r1, #0
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fd f994 	bl	8002232 <_ZN3PinaSEb>
	}
 8004f0a:	bf00      	nop
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20000284 	.word	0x20000284

08004f18 <_ZN10Net_bufferILh26EEC1Ev>:
    Net_buffer() {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
      clear();
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff ff44 	bl	8004dae <_ZN10Net_bufferILh26EE5clearEv>
    }
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>:
		uart_interrupt(Parent &parent) :
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fc fe4d 	bl	8001bdc <_ZN12InterruptingC1Ev>
 8004f42:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_+0x38>)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
			parent.interrupt_usart.subscribe(this);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fc faaf 	bl	80014ba <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	0800b190 	.word	0x0800b190

08004f6c <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>:
		dma_interrupt(Parent &parent) :
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fc fe2f 	bl	8001bdc <_ZN12InterruptingC1Ev>
 8004f7e:	4a09      	ldr	r2, [pc, #36]	; (8004fa4 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_+0x38>)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	605a      	str	r2, [r3, #4]
			parent.interrupt_DMA.subscribe(this);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	4611      	mov	r1, r2
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fc fa91 	bl	80014ba <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	0800b184 	.word	0x0800b184

08004fa8 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>:
    void to_bytes (uint16_t v, uint8_t& low, uint8_t& hi)
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	607a      	str	r2, [r7, #4]
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	817b      	strh	r3, [r7, #10]
        u.d16 = v;
 8004fb8:	897b      	ldrh	r3, [r7, #10]
 8004fba:	82bb      	strh	r3, [r7, #20]
        low = u.d8[0];
 8004fbc:	7d3a      	ldrb	r2, [r7, #20]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	701a      	strb	r2, [r3, #0]
        hi = u.d8[1];
 8004fc2:	7d7a      	ldrb	r2, [r7, #21]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	701a      	strb	r2, [r3, #0]
    }
 8004fc8:	bf00      	nop
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr

08004fd2 <_ZN10Net_bufferILh26EElsEh>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint8_t v)
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	785b      	ldrb	r3, [r3, #1]
 8004fe2:	2b19      	cmp	r3, #25
 8004fe4:	d80c      	bhi.n	8005000 <_ZN10Net_bufferILh26EElsEh+0x2e>
      buffer[end_i] = v;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	461a      	mov	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4413      	add	r3, r2
 8004ff0:	78fa      	ldrb	r2, [r7, #3]
 8004ff2:	709a      	strb	r2, [r3, #2]
      end_i++;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	785b      	ldrb	r3, [r3, #1]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	705a      	strb	r2, [r3, #1]
    return *this;
 8005000:	687b      	ldr	r3, [r7, #4]
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <_ZN10Net_bufferILh26EE3ptrEv>:
    uint8_t* ptr() {return &buffer[0];}
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3302      	adds	r3, #2
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	bc80      	pop	{r7}
 8005020:	4770      	bx	lr
	...

08005024 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d107      	bne.n	8005044 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800503a:	4293      	cmp	r3, r2
 800503c:	d102      	bne.n	8005044 <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 800503e:	4803      	ldr	r0, [pc, #12]	; (800504c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8005040:	f7fc f8f4 	bl	800122c <_ZN11TickUpdaterC1Ev>
 8005044:	bf00      	nop
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000098 	.word	0x20000098

08005050 <_ZN7ServiceI7In_data8Out_dataE13dma_interrupt9interruptEv>:
		void interrupt() override {
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
			parent.dmaInterrupt();
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	4618      	mov	r0, r3
 800505e:	f000 f811 	bl	8005084 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>
		}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <_ZN7ServiceI7In_data8Out_dataE14uart_interrupt9interruptEv>:
		void interrupt() override {
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
			parent.uartInterrupt();
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	4618      	mov	r0, r3
 8005078:	f000 f811 	bl	800509e <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>
		}
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>:
	void dmaInterrupt(){
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
		uart.receive();
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff ff25 	bl	8004ee0 <_ZN5UART_ILj26EE7receiveEv>
	}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>:
	void uartInterrupt(){
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
		event = true;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		timer.stop();
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	332c      	adds	r3, #44	; 0x2c
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fc f9c9 	bl	800144a <_ZN5Timer4stopEv>
	}
 80050b8:	bf00      	nop
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <_GLOBAL__sub_I_systemtick>:
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050c8:	2001      	movs	r0, #1
 80050ca:	f7ff ffab 	bl	8005024 <_Z41__static_initialization_and_destruction_0ii>
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80050d6:	4b15      	ldr	r3, [pc, #84]	; (800512c <HAL_MspInit+0x5c>)
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	4a14      	ldr	r2, [pc, #80]	; (800512c <HAL_MspInit+0x5c>)
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	6193      	str	r3, [r2, #24]
 80050e2:	4b12      	ldr	r3, [pc, #72]	; (800512c <HAL_MspInit+0x5c>)
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050ee:	4b0f      	ldr	r3, [pc, #60]	; (800512c <HAL_MspInit+0x5c>)
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	4a0e      	ldr	r2, [pc, #56]	; (800512c <HAL_MspInit+0x5c>)
 80050f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f8:	61d3      	str	r3, [r2, #28]
 80050fa:	4b0c      	ldr	r3, [pc, #48]	; (800512c <HAL_MspInit+0x5c>)
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005102:	607b      	str	r3, [r7, #4]
 8005104:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005106:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <HAL_MspInit+0x60>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	4a04      	ldr	r2, [pc, #16]	; (8005130 <HAL_MspInit+0x60>)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr
 800512c:	40021000 	.word	0x40021000
 8005130:	40010000 	.word	0x40010000

08005134 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08a      	sub	sp, #40	; 0x28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800513c:	f107 0318 	add.w	r3, r7, #24
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	605a      	str	r2, [r3, #4]
 8005146:	609a      	str	r2, [r3, #8]
 8005148:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a44      	ldr	r2, [pc, #272]	; (8005260 <HAL_ADC_MspInit+0x12c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d152      	bne.n	80051fa <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005154:	4b43      	ldr	r3, [pc, #268]	; (8005264 <HAL_ADC_MspInit+0x130>)
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	4a42      	ldr	r2, [pc, #264]	; (8005264 <HAL_ADC_MspInit+0x130>)
 800515a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800515e:	6193      	str	r3, [r2, #24]
 8005160:	4b40      	ldr	r3, [pc, #256]	; (8005264 <HAL_ADC_MspInit+0x130>)
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800516c:	4b3d      	ldr	r3, [pc, #244]	; (8005264 <HAL_ADC_MspInit+0x130>)
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	4a3c      	ldr	r2, [pc, #240]	; (8005264 <HAL_ADC_MspInit+0x130>)
 8005172:	f043 0304 	orr.w	r3, r3, #4
 8005176:	6193      	str	r3, [r2, #24]
 8005178:	4b3a      	ldr	r3, [pc, #232]	; (8005264 <HAL_ADC_MspInit+0x130>)
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 8005184:	238b      	movs	r3, #139	; 0x8b
 8005186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005188:	2303      	movs	r3, #3
 800518a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800518c:	f107 0318 	add.w	r3, r7, #24
 8005190:	4619      	mov	r1, r3
 8005192:	4835      	ldr	r0, [pc, #212]	; (8005268 <HAL_ADC_MspInit+0x134>)
 8005194:	f002 f874 	bl	8007280 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005198:	4b34      	ldr	r3, [pc, #208]	; (800526c <HAL_ADC_MspInit+0x138>)
 800519a:	4a35      	ldr	r2, [pc, #212]	; (8005270 <HAL_ADC_MspInit+0x13c>)
 800519c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800519e:	4b33      	ldr	r3, [pc, #204]	; (800526c <HAL_ADC_MspInit+0x138>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80051a4:	4b31      	ldr	r3, [pc, #196]	; (800526c <HAL_ADC_MspInit+0x138>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80051aa:	4b30      	ldr	r3, [pc, #192]	; (800526c <HAL_ADC_MspInit+0x138>)
 80051ac:	2280      	movs	r2, #128	; 0x80
 80051ae:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80051b0:	4b2e      	ldr	r3, [pc, #184]	; (800526c <HAL_ADC_MspInit+0x138>)
 80051b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80051b8:	4b2c      	ldr	r3, [pc, #176]	; (800526c <HAL_ADC_MspInit+0x138>)
 80051ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80051c0:	4b2a      	ldr	r3, [pc, #168]	; (800526c <HAL_ADC_MspInit+0x138>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80051c6:	4b29      	ldr	r3, [pc, #164]	; (800526c <HAL_ADC_MspInit+0x138>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80051cc:	4827      	ldr	r0, [pc, #156]	; (800526c <HAL_ADC_MspInit+0x138>)
 80051ce:	f001 fbd5 	bl	800697c <HAL_DMA_Init>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80051d8:	f7ff fa56 	bl	8004688 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a23      	ldr	r2, [pc, #140]	; (800526c <HAL_ADC_MspInit+0x138>)
 80051e0:	621a      	str	r2, [r3, #32]
 80051e2:	4a22      	ldr	r2, [pc, #136]	; (800526c <HAL_ADC_MspInit+0x138>)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80051e8:	2200      	movs	r2, #0
 80051ea:	2101      	movs	r1, #1
 80051ec:	2012      	movs	r0, #18
 80051ee:	f001 fb8e 	bl	800690e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80051f2:	2012      	movs	r0, #18
 80051f4:	f001 fba7 	bl	8006946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80051f8:	e02e      	b.n	8005258 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1d      	ldr	r2, [pc, #116]	; (8005274 <HAL_ADC_MspInit+0x140>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d129      	bne.n	8005258 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005204:	4b17      	ldr	r3, [pc, #92]	; (8005264 <HAL_ADC_MspInit+0x130>)
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	4a16      	ldr	r2, [pc, #88]	; (8005264 <HAL_ADC_MspInit+0x130>)
 800520a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800520e:	6193      	str	r3, [r2, #24]
 8005210:	4b14      	ldr	r3, [pc, #80]	; (8005264 <HAL_ADC_MspInit+0x130>)
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800521c:	4b11      	ldr	r3, [pc, #68]	; (8005264 <HAL_ADC_MspInit+0x130>)
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	4a10      	ldr	r2, [pc, #64]	; (8005264 <HAL_ADC_MspInit+0x130>)
 8005222:	f043 0304 	orr.w	r3, r3, #4
 8005226:	6193      	str	r3, [r2, #24]
 8005228:	4b0e      	ldr	r3, [pc, #56]	; (8005264 <HAL_ADC_MspInit+0x130>)
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	60bb      	str	r3, [r7, #8]
 8005232:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005234:	2370      	movs	r3, #112	; 0x70
 8005236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005238:	2303      	movs	r3, #3
 800523a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800523c:	f107 0318 	add.w	r3, r7, #24
 8005240:	4619      	mov	r1, r3
 8005242:	4809      	ldr	r0, [pc, #36]	; (8005268 <HAL_ADC_MspInit+0x134>)
 8005244:	f002 f81c 	bl	8007280 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8005248:	2200      	movs	r2, #0
 800524a:	2101      	movs	r1, #1
 800524c:	2012      	movs	r0, #18
 800524e:	f001 fb5e 	bl	800690e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005252:	2012      	movs	r0, #18
 8005254:	f001 fb77 	bl	8006946 <HAL_NVIC_EnableIRQ>
}
 8005258:	bf00      	nop
 800525a:	3728      	adds	r7, #40	; 0x28
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	40012400 	.word	0x40012400
 8005264:	40021000 	.word	0x40021000
 8005268:	40010800 	.word	0x40010800
 800526c:	20000168 	.word	0x20000168
 8005270:	40020008 	.word	0x40020008
 8005274:	40012800 	.word	0x40012800

08005278 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a12      	ldr	r2, [pc, #72]	; (80052d0 <HAL_TIM_PWM_MspInit+0x58>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d10c      	bne.n	80052a4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <HAL_TIM_PWM_MspInit+0x5c>)
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	4a11      	ldr	r2, [pc, #68]	; (80052d4 <HAL_TIM_PWM_MspInit+0x5c>)
 8005290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005294:	6193      	str	r3, [r2, #24]
 8005296:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <HAL_TIM_PWM_MspInit+0x5c>)
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80052a2:	e010      	b.n	80052c6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a0b      	ldr	r2, [pc, #44]	; (80052d8 <HAL_TIM_PWM_MspInit+0x60>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d10b      	bne.n	80052c6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80052ae:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <HAL_TIM_PWM_MspInit+0x5c>)
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <HAL_TIM_PWM_MspInit+0x5c>)
 80052b4:	f043 0304 	orr.w	r3, r3, #4
 80052b8:	61d3      	str	r3, [r2, #28]
 80052ba:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <HAL_TIM_PWM_MspInit+0x5c>)
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	60bb      	str	r3, [r7, #8]
 80052c4:	68bb      	ldr	r3, [r7, #8]
}
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40021000 	.word	0x40021000
 80052d8:	40000800 	.word	0x40000800

080052dc <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a0d      	ldr	r2, [pc, #52]	; (8005320 <HAL_TIM_OC_MspInit+0x44>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d113      	bne.n	8005316 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052ee:	4b0d      	ldr	r3, [pc, #52]	; (8005324 <HAL_TIM_OC_MspInit+0x48>)
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	4a0c      	ldr	r2, [pc, #48]	; (8005324 <HAL_TIM_OC_MspInit+0x48>)
 80052f4:	f043 0302 	orr.w	r3, r3, #2
 80052f8:	61d3      	str	r3, [r2, #28]
 80052fa:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <HAL_TIM_OC_MspInit+0x48>)
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005306:	2200      	movs	r2, #0
 8005308:	2100      	movs	r1, #0
 800530a:	201d      	movs	r0, #29
 800530c:	f001 faff 	bl	800690e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005310:	201d      	movs	r0, #29
 8005312:	f001 fb18 	bl	8006946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005316:	bf00      	nop
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	40000400 	.word	0x40000400
 8005324:	40021000 	.word	0x40021000

08005328 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08a      	sub	sp, #40	; 0x28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005330:	f107 0318 	add.w	r3, r7, #24
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	605a      	str	r2, [r3, #4]
 800533a:	609a      	str	r2, [r3, #8]
 800533c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a2b      	ldr	r2, [pc, #172]	; (80053f0 <HAL_TIM_MspPostInit+0xc8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d132      	bne.n	80053ae <HAL_TIM_MspPostInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005348:	4b2a      	ldr	r3, [pc, #168]	; (80053f4 <HAL_TIM_MspPostInit+0xcc>)
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	4a29      	ldr	r2, [pc, #164]	; (80053f4 <HAL_TIM_MspPostInit+0xcc>)
 800534e:	f043 0308 	orr.w	r3, r3, #8
 8005352:	6193      	str	r3, [r2, #24]
 8005354:	4b27      	ldr	r3, [pc, #156]	; (80053f4 <HAL_TIM_MspPostInit+0xcc>)
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005360:	4b24      	ldr	r3, [pc, #144]	; (80053f4 <HAL_TIM_MspPostInit+0xcc>)
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	4a23      	ldr	r2, [pc, #140]	; (80053f4 <HAL_TIM_MspPostInit+0xcc>)
 8005366:	f043 0304 	orr.w	r3, r3, #4
 800536a:	6193      	str	r3, [r2, #24]
 800536c:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <HAL_TIM_MspPostInit+0xcc>)
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	613b      	str	r3, [r7, #16]
 8005376:	693b      	ldr	r3, [r7, #16]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005378:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800537c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800537e:	2302      	movs	r3, #2
 8005380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005382:	2302      	movs	r3, #2
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005386:	f107 0318 	add.w	r3, r7, #24
 800538a:	4619      	mov	r1, r3
 800538c:	481a      	ldr	r0, [pc, #104]	; (80053f8 <HAL_TIM_MspPostInit+0xd0>)
 800538e:	f001 ff77 	bl	8007280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005392:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005398:	2302      	movs	r3, #2
 800539a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800539c:	2302      	movs	r3, #2
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a0:	f107 0318 	add.w	r3, r7, #24
 80053a4:	4619      	mov	r1, r3
 80053a6:	4815      	ldr	r0, [pc, #84]	; (80053fc <HAL_TIM_MspPostInit+0xd4>)
 80053a8:	f001 ff6a 	bl	8007280 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80053ac:	e01c      	b.n	80053e8 <HAL_TIM_MspPostInit+0xc0>
  else if(htim->Instance==TIM4)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a13      	ldr	r2, [pc, #76]	; (8005400 <HAL_TIM_MspPostInit+0xd8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d117      	bne.n	80053e8 <HAL_TIM_MspPostInit+0xc0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053b8:	4b0e      	ldr	r3, [pc, #56]	; (80053f4 <HAL_TIM_MspPostInit+0xcc>)
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	4a0d      	ldr	r2, [pc, #52]	; (80053f4 <HAL_TIM_MspPostInit+0xcc>)
 80053be:	f043 0308 	orr.w	r3, r3, #8
 80053c2:	6193      	str	r3, [r2, #24]
 80053c4:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <HAL_TIM_MspPostInit+0xcc>)
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80053d0:	2340      	movs	r3, #64	; 0x40
 80053d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d4:	2302      	movs	r3, #2
 80053d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053d8:	2302      	movs	r3, #2
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053dc:	f107 0318 	add.w	r3, r7, #24
 80053e0:	4619      	mov	r1, r3
 80053e2:	4805      	ldr	r0, [pc, #20]	; (80053f8 <HAL_TIM_MspPostInit+0xd0>)
 80053e4:	f001 ff4c 	bl	8007280 <HAL_GPIO_Init>
}
 80053e8:	bf00      	nop
 80053ea:	3728      	adds	r7, #40	; 0x28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40012c00 	.word	0x40012c00
 80053f4:	40021000 	.word	0x40021000
 80053f8:	40010c00 	.word	0x40010c00
 80053fc:	40010800 	.word	0x40010800
 8005400:	40000800 	.word	0x40000800

08005404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08a      	sub	sp, #40	; 0x28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800540c:	f107 0314 	add.w	r3, r7, #20
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	605a      	str	r2, [r3, #4]
 8005416:	609a      	str	r2, [r3, #8]
 8005418:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a50      	ldr	r2, [pc, #320]	; (8005560 <HAL_UART_MspInit+0x15c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	f040 8099 	bne.w	8005558 <HAL_UART_MspInit+0x154>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005426:	4b4f      	ldr	r3, [pc, #316]	; (8005564 <HAL_UART_MspInit+0x160>)
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	4a4e      	ldr	r2, [pc, #312]	; (8005564 <HAL_UART_MspInit+0x160>)
 800542c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005430:	61d3      	str	r3, [r2, #28]
 8005432:	4b4c      	ldr	r3, [pc, #304]	; (8005564 <HAL_UART_MspInit+0x160>)
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800543a:	613b      	str	r3, [r7, #16]
 800543c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800543e:	4b49      	ldr	r3, [pc, #292]	; (8005564 <HAL_UART_MspInit+0x160>)
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	4a48      	ldr	r2, [pc, #288]	; (8005564 <HAL_UART_MspInit+0x160>)
 8005444:	f043 0310 	orr.w	r3, r3, #16
 8005448:	6193      	str	r3, [r2, #24]
 800544a:	4b46      	ldr	r3, [pc, #280]	; (8005564 <HAL_UART_MspInit+0x160>)
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f003 0310 	and.w	r3, r3, #16
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800545a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800545c:	2302      	movs	r3, #2
 800545e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005460:	2303      	movs	r3, #3
 8005462:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005464:	f107 0314 	add.w	r3, r7, #20
 8005468:	4619      	mov	r1, r3
 800546a:	483f      	ldr	r0, [pc, #252]	; (8005568 <HAL_UART_MspInit+0x164>)
 800546c:	f001 ff08 	bl	8007280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005470:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005476:	2300      	movs	r3, #0
 8005478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800547e:	f107 0314 	add.w	r3, r7, #20
 8005482:	4619      	mov	r1, r3
 8005484:	4838      	ldr	r0, [pc, #224]	; (8005568 <HAL_UART_MspInit+0x164>)
 8005486:	f001 fefb 	bl	8007280 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800548a:	4b38      	ldr	r3, [pc, #224]	; (800556c <HAL_UART_MspInit+0x168>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	f043 0310 	orr.w	r3, r3, #16
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
 80054a8:	4a30      	ldr	r2, [pc, #192]	; (800556c <HAL_UART_MspInit+0x168>)
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80054ae:	4b30      	ldr	r3, [pc, #192]	; (8005570 <HAL_UART_MspInit+0x16c>)
 80054b0:	4a30      	ldr	r2, [pc, #192]	; (8005574 <HAL_UART_MspInit+0x170>)
 80054b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054b4:	4b2e      	ldr	r3, [pc, #184]	; (8005570 <HAL_UART_MspInit+0x16c>)
 80054b6:	2210      	movs	r2, #16
 80054b8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054ba:	4b2d      	ldr	r3, [pc, #180]	; (8005570 <HAL_UART_MspInit+0x16c>)
 80054bc:	2200      	movs	r2, #0
 80054be:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054c0:	4b2b      	ldr	r3, [pc, #172]	; (8005570 <HAL_UART_MspInit+0x16c>)
 80054c2:	2280      	movs	r2, #128	; 0x80
 80054c4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054c6:	4b2a      	ldr	r3, [pc, #168]	; (8005570 <HAL_UART_MspInit+0x16c>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054cc:	4b28      	ldr	r3, [pc, #160]	; (8005570 <HAL_UART_MspInit+0x16c>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80054d2:	4b27      	ldr	r3, [pc, #156]	; (8005570 <HAL_UART_MspInit+0x16c>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80054d8:	4b25      	ldr	r3, [pc, #148]	; (8005570 <HAL_UART_MspInit+0x16c>)
 80054da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80054e0:	4823      	ldr	r0, [pc, #140]	; (8005570 <HAL_UART_MspInit+0x16c>)
 80054e2:	f001 fa4b 	bl	800697c <HAL_DMA_Init>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 80054ec:	f7ff f8cc 	bl	8004688 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a1f      	ldr	r2, [pc, #124]	; (8005570 <HAL_UART_MspInit+0x16c>)
 80054f4:	635a      	str	r2, [r3, #52]	; 0x34
 80054f6:	4a1e      	ldr	r2, [pc, #120]	; (8005570 <HAL_UART_MspInit+0x16c>)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80054fc:	4b1e      	ldr	r3, [pc, #120]	; (8005578 <HAL_UART_MspInit+0x174>)
 80054fe:	4a1f      	ldr	r2, [pc, #124]	; (800557c <HAL_UART_MspInit+0x178>)
 8005500:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005502:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <HAL_UART_MspInit+0x174>)
 8005504:	2200      	movs	r2, #0
 8005506:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005508:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <HAL_UART_MspInit+0x174>)
 800550a:	2200      	movs	r2, #0
 800550c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800550e:	4b1a      	ldr	r3, [pc, #104]	; (8005578 <HAL_UART_MspInit+0x174>)
 8005510:	2280      	movs	r2, #128	; 0x80
 8005512:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005514:	4b18      	ldr	r3, [pc, #96]	; (8005578 <HAL_UART_MspInit+0x174>)
 8005516:	2200      	movs	r2, #0
 8005518:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800551a:	4b17      	ldr	r3, [pc, #92]	; (8005578 <HAL_UART_MspInit+0x174>)
 800551c:	2200      	movs	r2, #0
 800551e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005520:	4b15      	ldr	r3, [pc, #84]	; (8005578 <HAL_UART_MspInit+0x174>)
 8005522:	2200      	movs	r2, #0
 8005524:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005526:	4b14      	ldr	r3, [pc, #80]	; (8005578 <HAL_UART_MspInit+0x174>)
 8005528:	2200      	movs	r2, #0
 800552a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800552c:	4812      	ldr	r0, [pc, #72]	; (8005578 <HAL_UART_MspInit+0x174>)
 800552e:	f001 fa25 	bl	800697c <HAL_DMA_Init>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8005538:	f7ff f8a6 	bl	8004688 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a0e      	ldr	r2, [pc, #56]	; (8005578 <HAL_UART_MspInit+0x174>)
 8005540:	639a      	str	r2, [r3, #56]	; 0x38
 8005542:	4a0d      	ldr	r2, [pc, #52]	; (8005578 <HAL_UART_MspInit+0x174>)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8005548:	2200      	movs	r2, #0
 800554a:	2102      	movs	r1, #2
 800554c:	2027      	movs	r0, #39	; 0x27
 800554e:	f001 f9de 	bl	800690e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005552:	2027      	movs	r0, #39	; 0x27
 8005554:	f001 f9f7 	bl	8006946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005558:	bf00      	nop
 800555a:	3728      	adds	r7, #40	; 0x28
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40004800 	.word	0x40004800
 8005564:	40021000 	.word	0x40021000
 8005568:	40011000 	.word	0x40011000
 800556c:	40010000 	.word	0x40010000
 8005570:	200002c8 	.word	0x200002c8
 8005574:	4002001c 	.word	0x4002001c
 8005578:	2000030c 	.word	0x2000030c
 800557c:	40020030 	.word	0x40020030

08005580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005584:	e7fe      	b.n	8005584 <NMI_Handler+0x4>

08005586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005586:	b480      	push	{r7}
 8005588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800558a:	e7fe      	b.n	800558a <HardFault_Handler+0x4>

0800558c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005590:	e7fe      	b.n	8005590 <MemManage_Handler+0x4>

08005592 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005592:	b480      	push	{r7}
 8005594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005596:	e7fe      	b.n	8005596 <BusFault_Handler+0x4>

08005598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800559c:	e7fe      	b.n	800559c <UsageFault_Handler+0x4>

0800559e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800559e:	b480      	push	{r7}
 80055a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055a2:	bf00      	nop
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055aa:	b480      	push	{r7}
 80055ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055ae:	bf00      	nop
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bc80      	pop	{r7}
 80055b4:	4770      	bx	lr

080055b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055b6:	b480      	push	{r7}
 80055b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055ba:	bf00      	nop
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr

080055c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055c6:	f7fb fe55 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055ca:	bf00      	nop
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80055d4:	4802      	ldr	r0, [pc, #8]	; (80055e0 <DMA1_Channel1_IRQHandler+0x10>)
 80055d6:	f001 fbe9 	bl	8006dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80055da:	bf00      	nop
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000168 	.word	0x20000168

080055e4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80055e8:	4802      	ldr	r0, [pc, #8]	; (80055f4 <DMA1_Channel2_IRQHandler+0x10>)
 80055ea:	f001 fbdf 	bl	8006dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80055ee:	bf00      	nop
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	200002c8 	.word	0x200002c8

080055f8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80055fc:	4802      	ldr	r0, [pc, #8]	; (8005608 <DMA1_Channel3_IRQHandler+0x10>)
 80055fe:	f001 fbd5 	bl	8006dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005602:	bf00      	nop
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	2000030c 	.word	0x2000030c

0800560c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005610:	4803      	ldr	r0, [pc, #12]	; (8005620 <ADC1_2_IRQHandler+0x14>)
 8005612:	f000 face 	bl	8005bb2 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005616:	4803      	ldr	r0, [pc, #12]	; (8005624 <ADC1_2_IRQHandler+0x18>)
 8005618:	f000 facb 	bl	8005bb2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800561c:	bf00      	nop
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20000108 	.word	0x20000108
 8005624:	20000138 	.word	0x20000138

08005628 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800562c:	4802      	ldr	r0, [pc, #8]	; (8005638 <TIM3_IRQHandler+0x10>)
 800562e:	f002 ff13 	bl	8008458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005632:	bf00      	nop
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	200001f4 	.word	0x200001f4

0800563c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005640:	4802      	ldr	r0, [pc, #8]	; (800564c <USART3_IRQHandler+0x10>)
 8005642:	f003 fe9b 	bl	800937c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005646:	bf00      	nop
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000284 	.word	0x20000284

08005650 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
	return 1;
 8005654:	2301      	movs	r3, #1
}
 8005656:	4618      	mov	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr

0800565e <_kill>:

int _kill(int pid, int sig)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005668:	f005 fce0 	bl	800b02c <__errno>
 800566c:	4603      	mov	r3, r0
 800566e:	2216      	movs	r2, #22
 8005670:	601a      	str	r2, [r3, #0]
	return -1;
 8005672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <_exit>:

void _exit (int status)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005686:	f04f 31ff 	mov.w	r1, #4294967295
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff ffe7 	bl	800565e <_kill>
	while (1) {}		/* Make sure we hang here */
 8005690:	e7fe      	b.n	8005690 <_exit+0x12>

08005692 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005692:	b480      	push	{r7}
 8005694:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005696:	bf00      	nop
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr
	...

080056a0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80056a0:	480c      	ldr	r0, [pc, #48]	; (80056d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80056a2:	490d      	ldr	r1, [pc, #52]	; (80056d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80056a4:	4a0d      	ldr	r2, [pc, #52]	; (80056dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80056a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80056a8:	e002      	b.n	80056b0 <LoopCopyDataInit>

080056aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80056aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056ae:	3304      	adds	r3, #4

080056b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056b4:	d3f9      	bcc.n	80056aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056b6:	4a0a      	ldr	r2, [pc, #40]	; (80056e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80056b8:	4c0a      	ldr	r4, [pc, #40]	; (80056e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80056ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056bc:	e001      	b.n	80056c2 <LoopFillZerobss>

080056be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056c0:	3204      	adds	r2, #4

080056c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056c4:	d3fb      	bcc.n	80056be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80056c6:	f7ff ffe4 	bl	8005692 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056ca:	f005 fcb5 	bl	800b038 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80056ce:	f7fe faeb 	bl	8003ca8 <main>
  bx lr
 80056d2:	4770      	bx	lr
  ldr r0, =_sdata
 80056d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056d8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80056dc:	0800b254 	.word	0x0800b254
  ldr r2, =_sbss
 80056e0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80056e4:	20000370 	.word	0x20000370

080056e8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80056e8:	e7fe      	b.n	80056e8 <ADC3_IRQHandler>
	...

080056ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056f0:	4b08      	ldr	r3, [pc, #32]	; (8005714 <HAL_Init+0x28>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a07      	ldr	r2, [pc, #28]	; (8005714 <HAL_Init+0x28>)
 80056f6:	f043 0310 	orr.w	r3, r3, #16
 80056fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056fc:	2003      	movs	r0, #3
 80056fe:	f001 f8fb 	bl	80068f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005702:	2001      	movs	r0, #1
 8005704:	f000 f808 	bl	8005718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005708:	f7ff fce2 	bl	80050d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40022000 	.word	0x40022000

08005718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005720:	4b12      	ldr	r3, [pc, #72]	; (800576c <HAL_InitTick+0x54>)
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	4b12      	ldr	r3, [pc, #72]	; (8005770 <HAL_InitTick+0x58>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	4619      	mov	r1, r3
 800572a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800572e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005732:	fbb2 f3f3 	udiv	r3, r2, r3
 8005736:	4618      	mov	r0, r3
 8005738:	f001 f913 	bl	8006962 <HAL_SYSTICK_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e00e      	b.n	8005764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b0f      	cmp	r3, #15
 800574a:	d80a      	bhi.n	8005762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800574c:	2200      	movs	r2, #0
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	f04f 30ff 	mov.w	r0, #4294967295
 8005754:	f001 f8db 	bl	800690e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005758:	4a06      	ldr	r2, [pc, #24]	; (8005774 <HAL_InitTick+0x5c>)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
}
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20000000 	.word	0x20000000
 8005770:	20000008 	.word	0x20000008
 8005774:	20000004 	.word	0x20000004

08005778 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  return uwTick;
 800577c:	4b02      	ldr	r3, [pc, #8]	; (8005788 <HAL_GetTick+0x10>)
 800577e:	681b      	ldr	r3, [r3, #0]
}
 8005780:	4618      	mov	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr
 8005788:	20000368 	.word	0x20000368

0800578c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e0ce      	b.n	800594c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d109      	bne.n	80057d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7ff fcb2 	bl	8005134 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fc6b 	bl	80060ac <ADC_ConversionStop_Disable>
 80057d6:	4603      	mov	r3, r0
 80057d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f040 80a9 	bne.w	800593a <HAL_ADC_Init+0x1ae>
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f040 80a5 	bne.w	800593a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80057f8:	f023 0302 	bic.w	r3, r3, #2
 80057fc:	f043 0202 	orr.w	r2, r3, #2
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4951      	ldr	r1, [pc, #324]	; (8005954 <HAL_ADC_Init+0x1c8>)
 800580e:	428b      	cmp	r3, r1
 8005810:	d10a      	bne.n	8005828 <HAL_ADC_Init+0x9c>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800581a:	d002      	beq.n	8005822 <HAL_ADC_Init+0x96>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	e004      	b.n	800582c <HAL_ADC_Init+0xa0>
 8005822:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005826:	e001      	b.n	800582c <HAL_ADC_Init+0xa0>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800582c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	7b1b      	ldrb	r3, [r3, #12]
 8005832:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005834:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	4313      	orrs	r3, r2
 800583a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005844:	d003      	beq.n	800584e <HAL_ADC_Init+0xc2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d102      	bne.n	8005854 <HAL_ADC_Init+0xc8>
 800584e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005852:	e000      	b.n	8005856 <HAL_ADC_Init+0xca>
 8005854:	2300      	movs	r3, #0
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	7d1b      	ldrb	r3, [r3, #20]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d119      	bne.n	8005898 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	7b1b      	ldrb	r3, [r3, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	3b01      	subs	r3, #1
 8005872:	035a      	lsls	r2, r3, #13
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	e00b      	b.n	8005898 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005884:	f043 0220 	orr.w	r2, r3, #32
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	f043 0201 	orr.w	r2, r3, #1
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	4b29      	ldr	r3, [pc, #164]	; (8005958 <HAL_ADC_Init+0x1cc>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	430b      	orrs	r3, r1
 80058be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c8:	d003      	beq.n	80058d2 <HAL_ADC_Init+0x146>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d104      	bne.n	80058dc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	051b      	lsls	r3, r3, #20
 80058da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	4b19      	ldr	r3, [pc, #100]	; (800595c <HAL_ADC_Init+0x1d0>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d10b      	bne.n	8005918 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	f043 0201 	orr.w	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005916:	e018      	b.n	800594a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591c:	f023 0312 	bic.w	r3, r3, #18
 8005920:	f043 0210 	orr.w	r2, r3, #16
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	f043 0201 	orr.w	r2, r3, #1
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005938:	e007      	b.n	800594a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	f043 0210 	orr.w	r2, r3, #16
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800594a:	7dfb      	ldrb	r3, [r7, #23]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40013c00 	.word	0x40013c00
 8005958:	ffe1f7fd 	.word	0xffe1f7fd
 800595c:	ff1f0efe 	.word	0xff1f0efe

08005960 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a64      	ldr	r2, [pc, #400]	; (8005b08 <HAL_ADC_Start_DMA+0x1a8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d004      	beq.n	8005984 <HAL_ADC_Start_DMA+0x24>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a63      	ldr	r2, [pc, #396]	; (8005b0c <HAL_ADC_Start_DMA+0x1ac>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d106      	bne.n	8005992 <HAL_ADC_Start_DMA+0x32>
 8005984:	4b60      	ldr	r3, [pc, #384]	; (8005b08 <HAL_ADC_Start_DMA+0x1a8>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800598c:	2b00      	cmp	r3, #0
 800598e:	f040 80b3 	bne.w	8005af8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_ADC_Start_DMA+0x40>
 800599c:	2302      	movs	r3, #2
 800599e:	e0ae      	b.n	8005afe <HAL_ADC_Start_DMA+0x19e>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fb25 	bl	8005ff8 <ADC_Enable>
 80059ae:	4603      	mov	r3, r0
 80059b0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80059b2:	7dfb      	ldrb	r3, [r7, #23]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f040 809a 	bne.w	8005aee <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059c2:	f023 0301 	bic.w	r3, r3, #1
 80059c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a4e      	ldr	r2, [pc, #312]	; (8005b0c <HAL_ADC_Start_DMA+0x1ac>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d105      	bne.n	80059e4 <HAL_ADC_Start_DMA+0x84>
 80059d8:	4b4b      	ldr	r3, [pc, #300]	; (8005b08 <HAL_ADC_Start_DMA+0x1a8>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d115      	bne.n	8005a10 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d026      	beq.n	8005a4c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a0e:	e01d      	b.n	8005a4c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a14:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a39      	ldr	r2, [pc, #228]	; (8005b08 <HAL_ADC_Start_DMA+0x1a8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d004      	beq.n	8005a30 <HAL_ADC_Start_DMA+0xd0>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a38      	ldr	r2, [pc, #224]	; (8005b0c <HAL_ADC_Start_DMA+0x1ac>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d10d      	bne.n	8005a4c <HAL_ADC_Start_DMA+0xec>
 8005a30:	4b35      	ldr	r3, [pc, #212]	; (8005b08 <HAL_ADC_Start_DMA+0x1a8>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d007      	beq.n	8005a4c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005a44:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d006      	beq.n	8005a66 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	f023 0206 	bic.w	r2, r3, #6
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	62da      	str	r2, [r3, #44]	; 0x2c
 8005a64:	e002      	b.n	8005a6c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	4a25      	ldr	r2, [pc, #148]	; (8005b10 <HAL_ADC_Start_DMA+0x1b0>)
 8005a7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	4a24      	ldr	r2, [pc, #144]	; (8005b14 <HAL_ADC_Start_DMA+0x1b4>)
 8005a82:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	4a23      	ldr	r2, [pc, #140]	; (8005b18 <HAL_ADC_Start_DMA+0x1b8>)
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0202 	mvn.w	r2, #2
 8005a94:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aa4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a18      	ldr	r0, [r3, #32]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	334c      	adds	r3, #76	; 0x4c
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f000 ffd7 	bl	8006a68 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005ac4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005ac8:	d108      	bne.n	8005adc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005ad8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005ada:	e00f      	b.n	8005afc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005aea:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005aec:	e006      	b.n	8005afc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8005af6:	e001      	b.n	8005afc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3718      	adds	r7, #24
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40012400 	.word	0x40012400
 8005b0c:	40012800 	.word	0x40012800
 8005b10:	0800612f 	.word	0x0800612f
 8005b14:	080061ab 	.word	0x080061ab
 8005b18:	080061c7 	.word	0x080061c7

08005b1c <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <HAL_ADC_Stop_DMA+0x1a>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e039      	b.n	8005baa <HAL_ADC_Stop_DMA+0x8e>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fab4 	bl	80060ac <ADC_ConversionStop_Disable>
 8005b44:	4603      	mov	r3, r0
 8005b46:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d128      	bne.n	8005ba0 <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b5c:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d11a      	bne.n	8005ba0 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 ffd9 	bl	8006b26 <HAL_DMA_Abort>
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005b86:	f023 0301 	bic.w	r3, r3, #1
 8005b8a:	f043 0201 	orr.w	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	629a      	str	r2, [r3, #40]	; 0x28
 8005b92:	e005      	b.n	8005ba0 <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b082      	sub	sp, #8
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	d140      	bne.n	8005c4a <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d139      	bne.n	8005c4a <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	f003 0310 	and.w	r3, r3, #16
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d105      	bne.n	8005bee <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005bf8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005bfc:	d11d      	bne.n	8005c3a <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d119      	bne.n	8005c3a <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0220 	bic.w	r2, r2, #32
 8005c14:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d105      	bne.n	8005c3a <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	f043 0201 	orr.w	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fc fa88 	bl	8002150 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0212 	mvn.w	r2, #18
 8005c48:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c54:	2b80      	cmp	r3, #128	; 0x80
 8005c56:	d14f      	bne.n	8005cf8 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0304 	and.w	r3, r3, #4
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	d148      	bne.n	8005cf8 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6a:	f003 0310 	and.w	r3, r3, #16
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d105      	bne.n	8005c7e <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c76:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005c88:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8005c8c:	d012      	beq.n	8005cb4 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d125      	bne.n	8005ce8 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005ca6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005caa:	d11d      	bne.n	8005ce8 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d119      	bne.n	8005ce8 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cc2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d105      	bne.n	8005ce8 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	f043 0201 	orr.w	r2, r3, #1
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7fc fa45 	bl	8002178 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f06f 020c 	mvn.w	r2, #12
 8005cf6:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d02:	2b40      	cmp	r3, #64	; 0x40
 8005d04:	d114      	bne.n	8005d30 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d10d      	bne.n	8005d30 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7fd ffad 	bl	8003c80 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f06f 0201 	mvn.w	r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bc80      	pop	{r7}
 8005d48:	4770      	bx	lr

08005d4a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr

08005d5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_ADC_ConfigChannel+0x20>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e0dc      	b.n	8005f36 <HAL_ADC_ConfigChannel+0x1da>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	2b06      	cmp	r3, #6
 8005d8a:	d81c      	bhi.n	8005dc6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	4613      	mov	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	3b05      	subs	r3, #5
 8005d9e:	221f      	movs	r2, #31
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	43db      	mvns	r3, r3
 8005da6:	4019      	ands	r1, r3
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	4613      	mov	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	3b05      	subs	r3, #5
 8005db8:	fa00 f203 	lsl.w	r2, r0, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	635a      	str	r2, [r3, #52]	; 0x34
 8005dc4:	e03c      	b.n	8005e40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b0c      	cmp	r3, #12
 8005dcc:	d81c      	bhi.n	8005e08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	3b23      	subs	r3, #35	; 0x23
 8005de0:	221f      	movs	r2, #31
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	43db      	mvns	r3, r3
 8005de8:	4019      	ands	r1, r3
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	3b23      	subs	r3, #35	; 0x23
 8005dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	631a      	str	r2, [r3, #48]	; 0x30
 8005e06:	e01b      	b.n	8005e40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	3b41      	subs	r3, #65	; 0x41
 8005e1a:	221f      	movs	r2, #31
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	43db      	mvns	r3, r3
 8005e22:	4019      	ands	r1, r3
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	3b41      	subs	r3, #65	; 0x41
 8005e34:	fa00 f203 	lsl.w	r2, r0, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b09      	cmp	r3, #9
 8005e46:	d91c      	bls.n	8005e82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68d9      	ldr	r1, [r3, #12]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4613      	mov	r3, r2
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	4413      	add	r3, r2
 8005e58:	3b1e      	subs	r3, #30
 8005e5a:	2207      	movs	r2, #7
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	43db      	mvns	r3, r3
 8005e62:	4019      	ands	r1, r3
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	6898      	ldr	r0, [r3, #8]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	4413      	add	r3, r2
 8005e72:	3b1e      	subs	r3, #30
 8005e74:	fa00 f203 	lsl.w	r2, r0, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	60da      	str	r2, [r3, #12]
 8005e80:	e019      	b.n	8005eb6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6919      	ldr	r1, [r3, #16]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	4413      	add	r3, r2
 8005e92:	2207      	movs	r2, #7
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	43db      	mvns	r3, r3
 8005e9a:	4019      	ands	r1, r3
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	6898      	ldr	r0, [r3, #8]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	4413      	add	r3, r2
 8005eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b10      	cmp	r3, #16
 8005ebc:	d003      	beq.n	8005ec6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005ec2:	2b11      	cmp	r3, #17
 8005ec4:	d132      	bne.n	8005f2c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a1d      	ldr	r2, [pc, #116]	; (8005f40 <HAL_ADC_ConfigChannel+0x1e4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d125      	bne.n	8005f1c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d126      	bne.n	8005f2c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005eec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b10      	cmp	r3, #16
 8005ef4:	d11a      	bne.n	8005f2c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ef6:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <HAL_ADC_ConfigChannel+0x1e8>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a13      	ldr	r2, [pc, #76]	; (8005f48 <HAL_ADC_ConfigChannel+0x1ec>)
 8005efc:	fba2 2303 	umull	r2, r3, r2, r3
 8005f00:	0c9a      	lsrs	r2, r3, #18
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005f0c:	e002      	b.n	8005f14 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	3b01      	subs	r3, #1
 8005f12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f9      	bne.n	8005f0e <HAL_ADC_ConfigChannel+0x1b2>
 8005f1a:	e007      	b.n	8005f2c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f20:	f043 0220 	orr.w	r2, r3, #32
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bc80      	pop	{r7}
 8005f3e:	4770      	bx	lr
 8005f40:	40012400 	.word	0x40012400
 8005f44:	20000000 	.word	0x20000000
 8005f48:	431bde83 	.word	0x431bde83

08005f4c <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a24      	ldr	r2, [pc, #144]	; (8005fec <HAL_ADC_AnalogWDGConfig+0xa0>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d003      	beq.n	8005f68 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005f64:	4a22      	ldr	r2, [pc, #136]	; (8005ff0 <HAL_ADC_AnalogWDGConfig+0xa4>)
 8005f66:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d101      	bne.n	8005f76 <HAL_ADC_AnalogWDGConfig+0x2a>
 8005f72:	2302      	movs	r3, #2
 8005f74:	e035      	b.n	8005fe2 <HAL_ADC_AnalogWDGConfig+0x96>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	7a1b      	ldrb	r3, [r3, #8]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d108      	bne.n	8005f98 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f94:	605a      	str	r2, [r3, #4]
 8005f96:	e007      	b.n	8005fa8 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fa6:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	4b11      	ldr	r3, [pc, #68]	; (8005ff4 <HAL_ADC_AnalogWDGConfig+0xa8>)
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	6811      	ldr	r1, [r2, #0]
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	6852      	ldr	r2, [r2, #4]
 8005fba:	4311      	orrs	r1, r2
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	6812      	ldr	r2, [r2, #0]
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	68d2      	ldr	r2, [r2, #12]
 8005fcc:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	6912      	ldr	r2, [r2, #16]
 8005fd6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr
 8005fec:	00800200 	.word	0x00800200
 8005ff0:	00400200 	.word	0x00400200
 8005ff4:	ff3ffde0 	.word	0xff3ffde0

08005ff8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b01      	cmp	r3, #1
 8006014:	d040      	beq.n	8006098 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0201 	orr.w	r2, r2, #1
 8006024:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006026:	4b1f      	ldr	r3, [pc, #124]	; (80060a4 <ADC_Enable+0xac>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1f      	ldr	r2, [pc, #124]	; (80060a8 <ADC_Enable+0xb0>)
 800602c:	fba2 2303 	umull	r2, r3, r2, r3
 8006030:	0c9b      	lsrs	r3, r3, #18
 8006032:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006034:	e002      	b.n	800603c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	3b01      	subs	r3, #1
 800603a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f9      	bne.n	8006036 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006042:	f7ff fb99 	bl	8005778 <HAL_GetTick>
 8006046:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006048:	e01f      	b.n	800608a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800604a:	f7ff fb95 	bl	8005778 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d918      	bls.n	800608a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b01      	cmp	r3, #1
 8006064:	d011      	beq.n	800608a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606a:	f043 0210 	orr.w	r2, r3, #16
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	f043 0201 	orr.w	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e007      	b.n	800609a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b01      	cmp	r3, #1
 8006096:	d1d8      	bne.n	800604a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000000 	.word	0x20000000
 80060a8:	431bde83 	.word	0x431bde83

080060ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060b4:	2300      	movs	r3, #0
 80060b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d12e      	bne.n	8006124 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0201 	bic.w	r2, r2, #1
 80060d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80060d6:	f7ff fb4f 	bl	8005778 <HAL_GetTick>
 80060da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80060dc:	e01b      	b.n	8006116 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80060de:	f7ff fb4b 	bl	8005778 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d914      	bls.n	8006116 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d10d      	bne.n	8006116 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	f043 0210 	orr.w	r2, r3, #16
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610a:	f043 0201 	orr.w	r2, r3, #1
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e007      	b.n	8006126 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b01      	cmp	r3, #1
 8006122:	d0dc      	beq.n	80060de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006140:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006144:	2b00      	cmp	r3, #0
 8006146:	d127      	bne.n	8006198 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800615e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006162:	d115      	bne.n	8006190 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006168:	2b00      	cmp	r3, #0
 800616a:	d111      	bne.n	8006190 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006170:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d105      	bne.n	8006190 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006188:	f043 0201 	orr.w	r2, r3, #1
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f7fb ffdd 	bl	8002150 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006196:	e004      	b.n	80061a2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	4798      	blx	r3
}
 80061a2:	bf00      	nop
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f7ff fdbd 	bl	8005d38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061be:	bf00      	nop
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	f043 0204 	orr.w	r2, r3, #4
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff fdac 	bl	8005d4a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80061f2:	bf00      	nop
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
	...

080061fc <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_ADCEx_InjectedStart_IT+0x1a>
 8006212:	2302      	movs	r3, #2
 8006214:	e078      	b.n	8006308 <HAL_ADCEx_InjectedStart_IT+0x10c>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff feea 	bl	8005ff8 <ADC_Enable>
 8006224:	4603      	mov	r3, r0
 8006226:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d167      	bne.n	80062fe <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006232:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006236:	f023 0301 	bic.w	r3, r3, #1
 800623a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a32      	ldr	r2, [pc, #200]	; (8006310 <HAL_ADCEx_InjectedStart_IT+0x114>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d105      	bne.n	8006258 <HAL_ADCEx_InjectedStart_IT+0x5c>
 800624c:	4b31      	ldr	r3, [pc, #196]	; (8006314 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d106      	bne.n	8006266 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	629a      	str	r2, [r3, #40]	; 0x28
 8006264:	e005      	b.n	8006272 <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627a:	2b00      	cmp	r3, #0
 800627c:	d102      	bne.n	8006284 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f06f 0204 	mvn.w	r2, #4
 8006294:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062a4:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d128      	bne.n	8006306 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80062be:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80062c2:	d113      	bne.n	80062ec <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80062c8:	4a11      	ldr	r2, [pc, #68]	; (8006310 <HAL_ADCEx_InjectedStart_IT+0x114>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d105      	bne.n	80062da <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80062ce:	4b11      	ldr	r3, [pc, #68]	; (8006314 <HAL_ADCEx_InjectedStart_IT+0x118>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d108      	bne.n	80062ec <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 80062e8:	609a      	str	r2, [r3, #8]
 80062ea:	e00c      	b.n	8006306 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062fa:	609a      	str	r2, [r3, #8]
 80062fc:	e003      	b.n	8006306 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006306:	7bfb      	ldrb	r3, [r7, #15]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40012800 	.word	0x40012800
 8006314:	40012400 	.word	0x40012400

08006318 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800632a:	2b01      	cmp	r3, #1
 800632c:	d101      	bne.n	8006332 <HAL_ADCEx_InjectedStop_IT+0x1a>
 800632e:	2302      	movs	r3, #2
 8006330:	e038      	b.n	80063a4 <HAL_ADCEx_InjectedStop_IT+0x8c>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006342:	2b00      	cmp	r3, #0
 8006344:	d121      	bne.n	800638a <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8006350:	2b00      	cmp	r3, #0
 8006352:	d11a      	bne.n	800638a <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff fea9 	bl	80060ac <ADC_ConversionStop_Disable>
 800635a:	4603      	mov	r3, r0
 800635c:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d11a      	bne.n	800639a <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006372:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800637c:	f023 0301 	bic.w	r3, r3, #1
 8006380:	f043 0201 	orr.w	r2, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8006388:	e007      	b.n	800639a <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638e:	f043 0220 	orr.w	r2, r3, #32
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d009      	beq.n	80063d4 <HAL_ADCEx_InjectedGetValue+0x28>
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d815      	bhi.n	80063f2 <HAL_ADCEx_InjectedGetValue+0x46>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d00d      	beq.n	80063e8 <HAL_ADCEx_InjectedGetValue+0x3c>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	d005      	beq.n	80063de <HAL_ADCEx_InjectedGetValue+0x32>
 80063d2:	e00e      	b.n	80063f2 <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063da:	60fb      	str	r3, [r7, #12]
      break;
 80063dc:	e00e      	b.n	80063fc <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e4:	60fb      	str	r3, [r7, #12]
      break;
 80063e6:	e009      	b.n	80063fc <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	60fb      	str	r3, [r7, #12]
      break;
 80063f0:	e004      	b.n	80063fc <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f8:	60fb      	str	r3, [r7, #12]
      break;
 80063fa:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 80063fc:	68fb      	ldr	r3, [r7, #12]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	bc80      	pop	{r7}
 8006406:	4770      	bx	lr

08006408 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8006408:	b490      	push	{r4, r7}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8006424:	2302      	movs	r3, #2
 8006426:	e18d      	b.n	8006744 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d119      	bne.n	800646c <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d10c      	bne.n	800645a <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	0d9b      	lsrs	r3, r3, #22
 8006448:	059b      	lsls	r3, r3, #22
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	6812      	ldr	r2, [r2, #0]
 800644e:	03d1      	lsls	r1, r2, #15
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6812      	ldr	r2, [r2, #0]
 8006454:	430b      	orrs	r3, r1
 8006456:	6393      	str	r3, [r2, #56]	; 0x38
 8006458:	e04f      	b.n	80064fa <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	f043 0220 	orr.w	r2, r3, #32
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	73fb      	strb	r3, [r7, #15]
 800646a:	e046      	b.n	80064fa <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	429a      	cmp	r2, r3
 8006476:	d82a      	bhi.n	80064ce <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	4613      	mov	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	330f      	adds	r3, #15
 8006490:	221f      	movs	r2, #31
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800649a:	43db      	mvns	r3, r3
 800649c:	4019      	ands	r1, r3
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	0518      	lsls	r0, r3, #20
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681c      	ldr	r4, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	1ad2      	subs	r2, r2, r3
 80064b4:	4613      	mov	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	330f      	adds	r3, #15
 80064bc:	fa04 f303 	lsl.w	r3, r4, r3
 80064c0:	ea40 0203 	orr.w	r2, r0, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38
 80064cc:	e015      	b.n	80064fa <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	1ad2      	subs	r2, r2, r3
 80064de:	4613      	mov	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	330f      	adds	r3, #15
 80064e6:	221f      	movs	r2, #31
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80064f0:	43da      	mvns	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	400a      	ands	r2, r1
 80064f8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b01      	cmp	r3, #1
 8006506:	d01c      	beq.n	8006542 <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006512:	f023 0301 	bic.w	r3, r3, #1
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	498d      	ldr	r1, [pc, #564]	; (8006750 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 800651c:	428a      	cmp	r2, r1
 800651e:	d10a      	bne.n	8006536 <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	6992      	ldr	r2, [r2, #24]
 8006524:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8006528:	d002      	beq.n	8006530 <HAL_ADCEx_InjectedConfigChannel+0x128>
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	6992      	ldr	r2, [r2, #24]
 800652e:	e004      	b.n	800653a <HAL_ADCEx_InjectedConfigChannel+0x132>
 8006530:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006534:	e001      	b.n	800653a <HAL_ADCEx_InjectedConfigChannel+0x132>
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	6992      	ldr	r2, [r2, #24]
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	6809      	ldr	r1, [r1, #0]
 800653e:	4313      	orrs	r3, r2
 8006540:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	7d5b      	ldrb	r3, [r3, #21]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d115      	bne.n	8006576 <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8006552:	d108      	bne.n	8006566 <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006562:	605a      	str	r2, [r3, #4]
 8006564:	e007      	b.n	8006576 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	f043 0220 	orr.w	r2, r3, #32
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	7d1b      	ldrb	r3, [r3, #20]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d114      	bne.n	80065a8 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	7d5b      	ldrb	r3, [r3, #21]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d108      	bne.n	8006598 <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006594:	605a      	str	r2, [r3, #4]
 8006596:	e007      	b.n	80065a8 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	f043 0220 	orr.w	r2, r3, #32
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b09      	cmp	r3, #9
 80065ae:	d91c      	bls.n	80065ea <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68d9      	ldr	r1, [r3, #12]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	4613      	mov	r3, r2
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	4413      	add	r3, r2
 80065c0:	3b1e      	subs	r3, #30
 80065c2:	2207      	movs	r2, #7
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	43db      	mvns	r3, r3
 80065ca:	4019      	ands	r1, r3
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	6898      	ldr	r0, [r3, #8]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	4613      	mov	r3, r2
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	4413      	add	r3, r2
 80065da:	3b1e      	subs	r3, #30
 80065dc:	fa00 f203 	lsl.w	r2, r0, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	60da      	str	r2, [r3, #12]
 80065e8:	e019      	b.n	800661e <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6919      	ldr	r1, [r3, #16]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	4613      	mov	r3, r2
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	4413      	add	r3, r2
 80065fa:	2207      	movs	r2, #7
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	43db      	mvns	r3, r3
 8006602:	4019      	ands	r1, r3
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	6898      	ldr	r0, [r3, #8]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	4613      	mov	r3, r2
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	4413      	add	r3, r2
 8006612:	fa00 f203 	lsl.w	r2, r0, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b10      	cmp	r3, #16
 8006624:	d003      	beq.n	800662e <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800662a:	2b11      	cmp	r3, #17
 800662c:	d107      	bne.n	800663e <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800663c:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2b03      	cmp	r3, #3
 8006644:	d022      	beq.n	800668c <HAL_ADCEx_InjectedConfigChannel+0x284>
 8006646:	2b03      	cmp	r3, #3
 8006648:	d82e      	bhi.n	80066a8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 800664a:	2b01      	cmp	r3, #1
 800664c:	d002      	beq.n	8006654 <HAL_ADCEx_InjectedConfigChannel+0x24c>
 800664e:	2b02      	cmp	r3, #2
 8006650:	d00e      	beq.n	8006670 <HAL_ADCEx_InjectedConfigChannel+0x268>
 8006652:	e029      	b.n	80066a8 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800665e:	f023 030f 	bic.w	r3, r3, #15
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	68d1      	ldr	r1, [r2, #12]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	6812      	ldr	r2, [r2, #0]
 800666a:	430b      	orrs	r3, r1
 800666c:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 800666e:	e029      	b.n	80066c4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800667a:	f023 030f 	bic.w	r3, r3, #15
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	68d1      	ldr	r1, [r2, #12]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6812      	ldr	r2, [r2, #0]
 8006686:	430b      	orrs	r3, r1
 8006688:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 800668a:	e01b      	b.n	80066c4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006696:	f023 030f 	bic.w	r3, r3, #15
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	68d1      	ldr	r1, [r2, #12]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	430b      	orrs	r3, r1
 80066a4:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 80066a6:	e00d      	b.n	80066c4 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80066b2:	f023 030f 	bic.w	r3, r3, #15
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	68d1      	ldr	r1, [r2, #12]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	430b      	orrs	r3, r1
 80066c0:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 80066c2:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b10      	cmp	r3, #16
 80066ca:	d003      	beq.n	80066d4 <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80066d0:	2b11      	cmp	r3, #17
 80066d2:	d132      	bne.n	800673a <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a1e      	ldr	r2, [pc, #120]	; (8006754 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d125      	bne.n	800672a <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d126      	bne.n	800673a <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80066fa:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b10      	cmp	r3, #16
 8006702:	d11a      	bne.n	800673a <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006704:	4b14      	ldr	r3, [pc, #80]	; (8006758 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a14      	ldr	r2, [pc, #80]	; (800675c <HAL_ADCEx_InjectedConfigChannel+0x354>)
 800670a:	fba2 2303 	umull	r2, r3, r2, r3
 800670e:	0c9a      	lsrs	r2, r3, #18
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800671a:	e002      	b.n	8006722 <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	3b01      	subs	r3, #1
 8006720:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f9      	bne.n	800671c <HAL_ADCEx_InjectedConfigChannel+0x314>
 8006728:	e007      	b.n	800673a <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	f043 0220 	orr.w	r2, r3, #32
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006742:	7bfb      	ldrb	r3, [r7, #15]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bc90      	pop	{r4, r7}
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	40013c00 	.word	0x40013c00
 8006754:	40012400 	.word	0x40012400
 8006758:	20000000 	.word	0x20000000
 800675c:	431bde83 	.word	0x431bde83

08006760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006770:	4b0c      	ldr	r3, [pc, #48]	; (80067a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800677c:	4013      	ands	r3, r2
 800677e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800678c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006792:	4a04      	ldr	r2, [pc, #16]	; (80067a4 <__NVIC_SetPriorityGrouping+0x44>)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	60d3      	str	r3, [r2, #12]
}
 8006798:	bf00      	nop
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	e000ed00 	.word	0xe000ed00

080067a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067ac:	4b04      	ldr	r3, [pc, #16]	; (80067c0 <__NVIC_GetPriorityGrouping+0x18>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	0a1b      	lsrs	r3, r3, #8
 80067b2:	f003 0307 	and.w	r3, r3, #7
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bc80      	pop	{r7}
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	e000ed00 	.word	0xe000ed00

080067c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	db0b      	blt.n	80067ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	f003 021f 	and.w	r2, r3, #31
 80067dc:	4906      	ldr	r1, [pc, #24]	; (80067f8 <__NVIC_EnableIRQ+0x34>)
 80067de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067e2:	095b      	lsrs	r3, r3, #5
 80067e4:	2001      	movs	r0, #1
 80067e6:	fa00 f202 	lsl.w	r2, r0, r2
 80067ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr
 80067f8:	e000e100 	.word	0xe000e100

080067fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	6039      	str	r1, [r7, #0]
 8006806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800680c:	2b00      	cmp	r3, #0
 800680e:	db0a      	blt.n	8006826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	b2da      	uxtb	r2, r3
 8006814:	490c      	ldr	r1, [pc, #48]	; (8006848 <__NVIC_SetPriority+0x4c>)
 8006816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681a:	0112      	lsls	r2, r2, #4
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	440b      	add	r3, r1
 8006820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006824:	e00a      	b.n	800683c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	b2da      	uxtb	r2, r3
 800682a:	4908      	ldr	r1, [pc, #32]	; (800684c <__NVIC_SetPriority+0x50>)
 800682c:	79fb      	ldrb	r3, [r7, #7]
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	3b04      	subs	r3, #4
 8006834:	0112      	lsls	r2, r2, #4
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	440b      	add	r3, r1
 800683a:	761a      	strb	r2, [r3, #24]
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	e000e100 	.word	0xe000e100
 800684c:	e000ed00 	.word	0xe000ed00

08006850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006850:	b480      	push	{r7}
 8006852:	b089      	sub	sp, #36	; 0x24
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	f1c3 0307 	rsb	r3, r3, #7
 800686a:	2b04      	cmp	r3, #4
 800686c:	bf28      	it	cs
 800686e:	2304      	movcs	r3, #4
 8006870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	3304      	adds	r3, #4
 8006876:	2b06      	cmp	r3, #6
 8006878:	d902      	bls.n	8006880 <NVIC_EncodePriority+0x30>
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	3b03      	subs	r3, #3
 800687e:	e000      	b.n	8006882 <NVIC_EncodePriority+0x32>
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006884:	f04f 32ff 	mov.w	r2, #4294967295
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	43da      	mvns	r2, r3
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	401a      	ands	r2, r3
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006898:	f04f 31ff 	mov.w	r1, #4294967295
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	fa01 f303 	lsl.w	r3, r1, r3
 80068a2:	43d9      	mvns	r1, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068a8:	4313      	orrs	r3, r2
         );
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3724      	adds	r7, #36	; 0x24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bc80      	pop	{r7}
 80068b2:	4770      	bx	lr

080068b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3b01      	subs	r3, #1
 80068c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068c4:	d301      	bcc.n	80068ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068c6:	2301      	movs	r3, #1
 80068c8:	e00f      	b.n	80068ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068ca:	4a0a      	ldr	r2, [pc, #40]	; (80068f4 <SysTick_Config+0x40>)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068d2:	210f      	movs	r1, #15
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	f7ff ff90 	bl	80067fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068dc:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <SysTick_Config+0x40>)
 80068de:	2200      	movs	r2, #0
 80068e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068e2:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <SysTick_Config+0x40>)
 80068e4:	2207      	movs	r2, #7
 80068e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3708      	adds	r7, #8
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	e000e010 	.word	0xe000e010

080068f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff ff2d 	bl	8006760 <__NVIC_SetPriorityGrouping>
}
 8006906:	bf00      	nop
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800690e:	b580      	push	{r7, lr}
 8006910:	b086      	sub	sp, #24
 8006912:	af00      	add	r7, sp, #0
 8006914:	4603      	mov	r3, r0
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	607a      	str	r2, [r7, #4]
 800691a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800691c:	2300      	movs	r3, #0
 800691e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006920:	f7ff ff42 	bl	80067a8 <__NVIC_GetPriorityGrouping>
 8006924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	6978      	ldr	r0, [r7, #20]
 800692c:	f7ff ff90 	bl	8006850 <NVIC_EncodePriority>
 8006930:	4602      	mov	r2, r0
 8006932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006936:	4611      	mov	r1, r2
 8006938:	4618      	mov	r0, r3
 800693a:	f7ff ff5f 	bl	80067fc <__NVIC_SetPriority>
}
 800693e:	bf00      	nop
 8006940:	3718      	adds	r7, #24
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b082      	sub	sp, #8
 800694a:	af00      	add	r7, sp, #0
 800694c:	4603      	mov	r3, r0
 800694e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006954:	4618      	mov	r0, r3
 8006956:	f7ff ff35 	bl	80067c4 <__NVIC_EnableIRQ>
}
 800695a:	bf00      	nop
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b082      	sub	sp, #8
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff ffa2 	bl	80068b4 <SysTick_Config>
 8006970:	4603      	mov	r3, r0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e059      	b.n	8006a46 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	4b2d      	ldr	r3, [pc, #180]	; (8006a50 <HAL_DMA_Init+0xd4>)
 800699a:	429a      	cmp	r2, r3
 800699c:	d80f      	bhi.n	80069be <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	4b2b      	ldr	r3, [pc, #172]	; (8006a54 <HAL_DMA_Init+0xd8>)
 80069a6:	4413      	add	r3, r2
 80069a8:	4a2b      	ldr	r2, [pc, #172]	; (8006a58 <HAL_DMA_Init+0xdc>)
 80069aa:	fba2 2303 	umull	r2, r3, r2, r3
 80069ae:	091b      	lsrs	r3, r3, #4
 80069b0:	009a      	lsls	r2, r3, #2
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a28      	ldr	r2, [pc, #160]	; (8006a5c <HAL_DMA_Init+0xe0>)
 80069ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80069bc:	e00e      	b.n	80069dc <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	4b26      	ldr	r3, [pc, #152]	; (8006a60 <HAL_DMA_Init+0xe4>)
 80069c6:	4413      	add	r3, r2
 80069c8:	4a23      	ldr	r2, [pc, #140]	; (8006a58 <HAL_DMA_Init+0xdc>)
 80069ca:	fba2 2303 	umull	r2, r3, r2, r3
 80069ce:	091b      	lsrs	r3, r3, #4
 80069d0:	009a      	lsls	r2, r3, #2
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a22      	ldr	r2, [pc, #136]	; (8006a64 <HAL_DMA_Init+0xe8>)
 80069da:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80069f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80069f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr
 8006a50:	40020407 	.word	0x40020407
 8006a54:	bffdfff8 	.word	0xbffdfff8
 8006a58:	cccccccd 	.word	0xcccccccd
 8006a5c:	40020000 	.word	0x40020000
 8006a60:	bffdfbf8 	.word	0xbffdfbf8
 8006a64:	40020400 	.word	0x40020400

08006a68 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b086      	sub	sp, #24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a76:	2300      	movs	r3, #0
 8006a78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_DMA_Start_IT+0x20>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e04a      	b.n	8006b1e <HAL_DMA_Start_IT+0xb6>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d13a      	bne.n	8006b10 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0201 	bic.w	r2, r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	68b9      	ldr	r1, [r7, #8]
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 fbb0 	bl	8007224 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d008      	beq.n	8006ade <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 020e 	orr.w	r2, r2, #14
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	e00f      	b.n	8006afe <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0204 	bic.w	r2, r2, #4
 8006aec:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 020a 	orr.w	r2, r2, #10
 8006afc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0201 	orr.w	r2, r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	e005      	b.n	8006b1c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b085      	sub	sp, #20
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d008      	beq.n	8006b4e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2204      	movs	r2, #4
 8006b40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e020      	b.n	8006b90 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 020e 	bic.w	r2, r2, #14
 8006b5c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0201 	bic.w	r2, r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b76:	2101      	movs	r1, #1
 8006b78:	fa01 f202 	lsl.w	r2, r1, r2
 8006b7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr
	...

08006b9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d005      	beq.n	8006bbe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2204      	movs	r2, #4
 8006bb6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	73fb      	strb	r3, [r7, #15]
 8006bbc:	e0d6      	b.n	8006d6c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 020e 	bic.w	r2, r2, #14
 8006bcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0201 	bic.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	4b64      	ldr	r3, [pc, #400]	; (8006d78 <HAL_DMA_Abort_IT+0x1dc>)
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d958      	bls.n	8006c9c <HAL_DMA_Abort_IT+0x100>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a63      	ldr	r2, [pc, #396]	; (8006d7c <HAL_DMA_Abort_IT+0x1e0>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d04f      	beq.n	8006c94 <HAL_DMA_Abort_IT+0xf8>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a61      	ldr	r2, [pc, #388]	; (8006d80 <HAL_DMA_Abort_IT+0x1e4>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d048      	beq.n	8006c90 <HAL_DMA_Abort_IT+0xf4>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a60      	ldr	r2, [pc, #384]	; (8006d84 <HAL_DMA_Abort_IT+0x1e8>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d040      	beq.n	8006c8a <HAL_DMA_Abort_IT+0xee>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a5e      	ldr	r2, [pc, #376]	; (8006d88 <HAL_DMA_Abort_IT+0x1ec>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d038      	beq.n	8006c84 <HAL_DMA_Abort_IT+0xe8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a5d      	ldr	r2, [pc, #372]	; (8006d8c <HAL_DMA_Abort_IT+0x1f0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d030      	beq.n	8006c7e <HAL_DMA_Abort_IT+0xe2>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a5b      	ldr	r2, [pc, #364]	; (8006d90 <HAL_DMA_Abort_IT+0x1f4>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d028      	beq.n	8006c78 <HAL_DMA_Abort_IT+0xdc>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a53      	ldr	r2, [pc, #332]	; (8006d78 <HAL_DMA_Abort_IT+0x1dc>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d020      	beq.n	8006c72 <HAL_DMA_Abort_IT+0xd6>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a57      	ldr	r2, [pc, #348]	; (8006d94 <HAL_DMA_Abort_IT+0x1f8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d019      	beq.n	8006c6e <HAL_DMA_Abort_IT+0xd2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a56      	ldr	r2, [pc, #344]	; (8006d98 <HAL_DMA_Abort_IT+0x1fc>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d012      	beq.n	8006c6a <HAL_DMA_Abort_IT+0xce>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a54      	ldr	r2, [pc, #336]	; (8006d9c <HAL_DMA_Abort_IT+0x200>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d00a      	beq.n	8006c64 <HAL_DMA_Abort_IT+0xc8>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a53      	ldr	r2, [pc, #332]	; (8006da0 <HAL_DMA_Abort_IT+0x204>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d102      	bne.n	8006c5e <HAL_DMA_Abort_IT+0xc2>
 8006c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c5c:	e01b      	b.n	8006c96 <HAL_DMA_Abort_IT+0xfa>
 8006c5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c62:	e018      	b.n	8006c96 <HAL_DMA_Abort_IT+0xfa>
 8006c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c68:	e015      	b.n	8006c96 <HAL_DMA_Abort_IT+0xfa>
 8006c6a:	2310      	movs	r3, #16
 8006c6c:	e013      	b.n	8006c96 <HAL_DMA_Abort_IT+0xfa>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e011      	b.n	8006c96 <HAL_DMA_Abort_IT+0xfa>
 8006c72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c76:	e00e      	b.n	8006c96 <HAL_DMA_Abort_IT+0xfa>
 8006c78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006c7c:	e00b      	b.n	8006c96 <HAL_DMA_Abort_IT+0xfa>
 8006c7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c82:	e008      	b.n	8006c96 <HAL_DMA_Abort_IT+0xfa>
 8006c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c88:	e005      	b.n	8006c96 <HAL_DMA_Abort_IT+0xfa>
 8006c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c8e:	e002      	b.n	8006c96 <HAL_DMA_Abort_IT+0xfa>
 8006c90:	2310      	movs	r3, #16
 8006c92:	e000      	b.n	8006c96 <HAL_DMA_Abort_IT+0xfa>
 8006c94:	2301      	movs	r3, #1
 8006c96:	4a43      	ldr	r2, [pc, #268]	; (8006da4 <HAL_DMA_Abort_IT+0x208>)
 8006c98:	6053      	str	r3, [r2, #4]
 8006c9a:	e057      	b.n	8006d4c <HAL_DMA_Abort_IT+0x1b0>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a36      	ldr	r2, [pc, #216]	; (8006d7c <HAL_DMA_Abort_IT+0x1e0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d04f      	beq.n	8006d46 <HAL_DMA_Abort_IT+0x1aa>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a35      	ldr	r2, [pc, #212]	; (8006d80 <HAL_DMA_Abort_IT+0x1e4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d048      	beq.n	8006d42 <HAL_DMA_Abort_IT+0x1a6>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a33      	ldr	r2, [pc, #204]	; (8006d84 <HAL_DMA_Abort_IT+0x1e8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d040      	beq.n	8006d3c <HAL_DMA_Abort_IT+0x1a0>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a32      	ldr	r2, [pc, #200]	; (8006d88 <HAL_DMA_Abort_IT+0x1ec>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d038      	beq.n	8006d36 <HAL_DMA_Abort_IT+0x19a>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a30      	ldr	r2, [pc, #192]	; (8006d8c <HAL_DMA_Abort_IT+0x1f0>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d030      	beq.n	8006d30 <HAL_DMA_Abort_IT+0x194>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a2f      	ldr	r2, [pc, #188]	; (8006d90 <HAL_DMA_Abort_IT+0x1f4>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d028      	beq.n	8006d2a <HAL_DMA_Abort_IT+0x18e>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a26      	ldr	r2, [pc, #152]	; (8006d78 <HAL_DMA_Abort_IT+0x1dc>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d020      	beq.n	8006d24 <HAL_DMA_Abort_IT+0x188>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a2b      	ldr	r2, [pc, #172]	; (8006d94 <HAL_DMA_Abort_IT+0x1f8>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d019      	beq.n	8006d20 <HAL_DMA_Abort_IT+0x184>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a29      	ldr	r2, [pc, #164]	; (8006d98 <HAL_DMA_Abort_IT+0x1fc>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d012      	beq.n	8006d1c <HAL_DMA_Abort_IT+0x180>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a28      	ldr	r2, [pc, #160]	; (8006d9c <HAL_DMA_Abort_IT+0x200>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d00a      	beq.n	8006d16 <HAL_DMA_Abort_IT+0x17a>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a26      	ldr	r2, [pc, #152]	; (8006da0 <HAL_DMA_Abort_IT+0x204>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d102      	bne.n	8006d10 <HAL_DMA_Abort_IT+0x174>
 8006d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d0e:	e01b      	b.n	8006d48 <HAL_DMA_Abort_IT+0x1ac>
 8006d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d14:	e018      	b.n	8006d48 <HAL_DMA_Abort_IT+0x1ac>
 8006d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d1a:	e015      	b.n	8006d48 <HAL_DMA_Abort_IT+0x1ac>
 8006d1c:	2310      	movs	r3, #16
 8006d1e:	e013      	b.n	8006d48 <HAL_DMA_Abort_IT+0x1ac>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e011      	b.n	8006d48 <HAL_DMA_Abort_IT+0x1ac>
 8006d24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d28:	e00e      	b.n	8006d48 <HAL_DMA_Abort_IT+0x1ac>
 8006d2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006d2e:	e00b      	b.n	8006d48 <HAL_DMA_Abort_IT+0x1ac>
 8006d30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d34:	e008      	b.n	8006d48 <HAL_DMA_Abort_IT+0x1ac>
 8006d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d3a:	e005      	b.n	8006d48 <HAL_DMA_Abort_IT+0x1ac>
 8006d3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d40:	e002      	b.n	8006d48 <HAL_DMA_Abort_IT+0x1ac>
 8006d42:	2310      	movs	r3, #16
 8006d44:	e000      	b.n	8006d48 <HAL_DMA_Abort_IT+0x1ac>
 8006d46:	2301      	movs	r3, #1
 8006d48:	4a17      	ldr	r2, [pc, #92]	; (8006da8 <HAL_DMA_Abort_IT+0x20c>)
 8006d4a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d003      	beq.n	8006d6c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	4798      	blx	r3
    } 
  }
  return status;
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	40020080 	.word	0x40020080
 8006d7c:	40020008 	.word	0x40020008
 8006d80:	4002001c 	.word	0x4002001c
 8006d84:	40020030 	.word	0x40020030
 8006d88:	40020044 	.word	0x40020044
 8006d8c:	40020058 	.word	0x40020058
 8006d90:	4002006c 	.word	0x4002006c
 8006d94:	40020408 	.word	0x40020408
 8006d98:	4002041c 	.word	0x4002041c
 8006d9c:	40020430 	.word	0x40020430
 8006da0:	40020444 	.word	0x40020444
 8006da4:	40020400 	.word	0x40020400
 8006da8:	40020000 	.word	0x40020000

08006dac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	2204      	movs	r2, #4
 8006dca:	409a      	lsls	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4013      	ands	r3, r2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 80d6 	beq.w	8006f82 <HAL_DMA_IRQHandler+0x1d6>
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f003 0304 	and.w	r3, r3, #4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 80d0 	beq.w	8006f82 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d107      	bne.n	8006e00 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0204 	bic.w	r2, r2, #4
 8006dfe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	461a      	mov	r2, r3
 8006e06:	4b9b      	ldr	r3, [pc, #620]	; (8007074 <HAL_DMA_IRQHandler+0x2c8>)
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d958      	bls.n	8006ebe <HAL_DMA_IRQHandler+0x112>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a99      	ldr	r2, [pc, #612]	; (8007078 <HAL_DMA_IRQHandler+0x2cc>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d04f      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0x10a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a98      	ldr	r2, [pc, #608]	; (800707c <HAL_DMA_IRQHandler+0x2d0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d048      	beq.n	8006eb2 <HAL_DMA_IRQHandler+0x106>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a96      	ldr	r2, [pc, #600]	; (8007080 <HAL_DMA_IRQHandler+0x2d4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d040      	beq.n	8006eac <HAL_DMA_IRQHandler+0x100>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a95      	ldr	r2, [pc, #596]	; (8007084 <HAL_DMA_IRQHandler+0x2d8>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d038      	beq.n	8006ea6 <HAL_DMA_IRQHandler+0xfa>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a93      	ldr	r2, [pc, #588]	; (8007088 <HAL_DMA_IRQHandler+0x2dc>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d030      	beq.n	8006ea0 <HAL_DMA_IRQHandler+0xf4>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a92      	ldr	r2, [pc, #584]	; (800708c <HAL_DMA_IRQHandler+0x2e0>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d028      	beq.n	8006e9a <HAL_DMA_IRQHandler+0xee>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a89      	ldr	r2, [pc, #548]	; (8007074 <HAL_DMA_IRQHandler+0x2c8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d020      	beq.n	8006e94 <HAL_DMA_IRQHandler+0xe8>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a8e      	ldr	r2, [pc, #568]	; (8007090 <HAL_DMA_IRQHandler+0x2e4>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d019      	beq.n	8006e90 <HAL_DMA_IRQHandler+0xe4>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a8c      	ldr	r2, [pc, #560]	; (8007094 <HAL_DMA_IRQHandler+0x2e8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d012      	beq.n	8006e8c <HAL_DMA_IRQHandler+0xe0>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a8b      	ldr	r2, [pc, #556]	; (8007098 <HAL_DMA_IRQHandler+0x2ec>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00a      	beq.n	8006e86 <HAL_DMA_IRQHandler+0xda>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a89      	ldr	r2, [pc, #548]	; (800709c <HAL_DMA_IRQHandler+0x2f0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d102      	bne.n	8006e80 <HAL_DMA_IRQHandler+0xd4>
 8006e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e7e:	e01b      	b.n	8006eb8 <HAL_DMA_IRQHandler+0x10c>
 8006e80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e84:	e018      	b.n	8006eb8 <HAL_DMA_IRQHandler+0x10c>
 8006e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e8a:	e015      	b.n	8006eb8 <HAL_DMA_IRQHandler+0x10c>
 8006e8c:	2340      	movs	r3, #64	; 0x40
 8006e8e:	e013      	b.n	8006eb8 <HAL_DMA_IRQHandler+0x10c>
 8006e90:	2304      	movs	r3, #4
 8006e92:	e011      	b.n	8006eb8 <HAL_DMA_IRQHandler+0x10c>
 8006e94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e98:	e00e      	b.n	8006eb8 <HAL_DMA_IRQHandler+0x10c>
 8006e9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e9e:	e00b      	b.n	8006eb8 <HAL_DMA_IRQHandler+0x10c>
 8006ea0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ea4:	e008      	b.n	8006eb8 <HAL_DMA_IRQHandler+0x10c>
 8006ea6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006eaa:	e005      	b.n	8006eb8 <HAL_DMA_IRQHandler+0x10c>
 8006eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eb0:	e002      	b.n	8006eb8 <HAL_DMA_IRQHandler+0x10c>
 8006eb2:	2340      	movs	r3, #64	; 0x40
 8006eb4:	e000      	b.n	8006eb8 <HAL_DMA_IRQHandler+0x10c>
 8006eb6:	2304      	movs	r3, #4
 8006eb8:	4a79      	ldr	r2, [pc, #484]	; (80070a0 <HAL_DMA_IRQHandler+0x2f4>)
 8006eba:	6053      	str	r3, [r2, #4]
 8006ebc:	e057      	b.n	8006f6e <HAL_DMA_IRQHandler+0x1c2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a6d      	ldr	r2, [pc, #436]	; (8007078 <HAL_DMA_IRQHandler+0x2cc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d04f      	beq.n	8006f68 <HAL_DMA_IRQHandler+0x1bc>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a6b      	ldr	r2, [pc, #428]	; (800707c <HAL_DMA_IRQHandler+0x2d0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d048      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x1b8>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a6a      	ldr	r2, [pc, #424]	; (8007080 <HAL_DMA_IRQHandler+0x2d4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d040      	beq.n	8006f5e <HAL_DMA_IRQHandler+0x1b2>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a68      	ldr	r2, [pc, #416]	; (8007084 <HAL_DMA_IRQHandler+0x2d8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d038      	beq.n	8006f58 <HAL_DMA_IRQHandler+0x1ac>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a67      	ldr	r2, [pc, #412]	; (8007088 <HAL_DMA_IRQHandler+0x2dc>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d030      	beq.n	8006f52 <HAL_DMA_IRQHandler+0x1a6>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a65      	ldr	r2, [pc, #404]	; (800708c <HAL_DMA_IRQHandler+0x2e0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d028      	beq.n	8006f4c <HAL_DMA_IRQHandler+0x1a0>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a5d      	ldr	r2, [pc, #372]	; (8007074 <HAL_DMA_IRQHandler+0x2c8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d020      	beq.n	8006f46 <HAL_DMA_IRQHandler+0x19a>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a61      	ldr	r2, [pc, #388]	; (8007090 <HAL_DMA_IRQHandler+0x2e4>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d019      	beq.n	8006f42 <HAL_DMA_IRQHandler+0x196>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a60      	ldr	r2, [pc, #384]	; (8007094 <HAL_DMA_IRQHandler+0x2e8>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d012      	beq.n	8006f3e <HAL_DMA_IRQHandler+0x192>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a5e      	ldr	r2, [pc, #376]	; (8007098 <HAL_DMA_IRQHandler+0x2ec>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00a      	beq.n	8006f38 <HAL_DMA_IRQHandler+0x18c>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a5d      	ldr	r2, [pc, #372]	; (800709c <HAL_DMA_IRQHandler+0x2f0>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d102      	bne.n	8006f32 <HAL_DMA_IRQHandler+0x186>
 8006f2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f30:	e01b      	b.n	8006f6a <HAL_DMA_IRQHandler+0x1be>
 8006f32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006f36:	e018      	b.n	8006f6a <HAL_DMA_IRQHandler+0x1be>
 8006f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f3c:	e015      	b.n	8006f6a <HAL_DMA_IRQHandler+0x1be>
 8006f3e:	2340      	movs	r3, #64	; 0x40
 8006f40:	e013      	b.n	8006f6a <HAL_DMA_IRQHandler+0x1be>
 8006f42:	2304      	movs	r3, #4
 8006f44:	e011      	b.n	8006f6a <HAL_DMA_IRQHandler+0x1be>
 8006f46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006f4a:	e00e      	b.n	8006f6a <HAL_DMA_IRQHandler+0x1be>
 8006f4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f50:	e00b      	b.n	8006f6a <HAL_DMA_IRQHandler+0x1be>
 8006f52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006f56:	e008      	b.n	8006f6a <HAL_DMA_IRQHandler+0x1be>
 8006f58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f5c:	e005      	b.n	8006f6a <HAL_DMA_IRQHandler+0x1be>
 8006f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f62:	e002      	b.n	8006f6a <HAL_DMA_IRQHandler+0x1be>
 8006f64:	2340      	movs	r3, #64	; 0x40
 8006f66:	e000      	b.n	8006f6a <HAL_DMA_IRQHandler+0x1be>
 8006f68:	2304      	movs	r3, #4
 8006f6a:	4a4e      	ldr	r2, [pc, #312]	; (80070a4 <HAL_DMA_IRQHandler+0x2f8>)
 8006f6c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 8136 	beq.w	80071e4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006f80:	e130      	b.n	80071e4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	2202      	movs	r2, #2
 8006f88:	409a      	lsls	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 80f8 	beq.w	8007184 <HAL_DMA_IRQHandler+0x3d8>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 80f2 	beq.w	8007184 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10b      	bne.n	8006fc6 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 020a 	bic.w	r2, r2, #10
 8006fbc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	4b29      	ldr	r3, [pc, #164]	; (8007074 <HAL_DMA_IRQHandler+0x2c8>)
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d973      	bls.n	80070ba <HAL_DMA_IRQHandler+0x30e>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a28      	ldr	r2, [pc, #160]	; (8007078 <HAL_DMA_IRQHandler+0x2cc>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d06a      	beq.n	80070b2 <HAL_DMA_IRQHandler+0x306>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a26      	ldr	r2, [pc, #152]	; (800707c <HAL_DMA_IRQHandler+0x2d0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d063      	beq.n	80070ae <HAL_DMA_IRQHandler+0x302>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a25      	ldr	r2, [pc, #148]	; (8007080 <HAL_DMA_IRQHandler+0x2d4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d05b      	beq.n	80070a8 <HAL_DMA_IRQHandler+0x2fc>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a23      	ldr	r2, [pc, #140]	; (8007084 <HAL_DMA_IRQHandler+0x2d8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d038      	beq.n	800706c <HAL_DMA_IRQHandler+0x2c0>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a22      	ldr	r2, [pc, #136]	; (8007088 <HAL_DMA_IRQHandler+0x2dc>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d030      	beq.n	8007066 <HAL_DMA_IRQHandler+0x2ba>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a20      	ldr	r2, [pc, #128]	; (800708c <HAL_DMA_IRQHandler+0x2e0>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d028      	beq.n	8007060 <HAL_DMA_IRQHandler+0x2b4>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a18      	ldr	r2, [pc, #96]	; (8007074 <HAL_DMA_IRQHandler+0x2c8>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d020      	beq.n	800705a <HAL_DMA_IRQHandler+0x2ae>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1c      	ldr	r2, [pc, #112]	; (8007090 <HAL_DMA_IRQHandler+0x2e4>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d019      	beq.n	8007056 <HAL_DMA_IRQHandler+0x2aa>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a1b      	ldr	r2, [pc, #108]	; (8007094 <HAL_DMA_IRQHandler+0x2e8>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d012      	beq.n	8007052 <HAL_DMA_IRQHandler+0x2a6>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a19      	ldr	r2, [pc, #100]	; (8007098 <HAL_DMA_IRQHandler+0x2ec>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00a      	beq.n	800704c <HAL_DMA_IRQHandler+0x2a0>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a18      	ldr	r2, [pc, #96]	; (800709c <HAL_DMA_IRQHandler+0x2f0>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d102      	bne.n	8007046 <HAL_DMA_IRQHandler+0x29a>
 8007040:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007044:	e036      	b.n	80070b4 <HAL_DMA_IRQHandler+0x308>
 8007046:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800704a:	e033      	b.n	80070b4 <HAL_DMA_IRQHandler+0x308>
 800704c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007050:	e030      	b.n	80070b4 <HAL_DMA_IRQHandler+0x308>
 8007052:	2320      	movs	r3, #32
 8007054:	e02e      	b.n	80070b4 <HAL_DMA_IRQHandler+0x308>
 8007056:	2302      	movs	r3, #2
 8007058:	e02c      	b.n	80070b4 <HAL_DMA_IRQHandler+0x308>
 800705a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800705e:	e029      	b.n	80070b4 <HAL_DMA_IRQHandler+0x308>
 8007060:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007064:	e026      	b.n	80070b4 <HAL_DMA_IRQHandler+0x308>
 8007066:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800706a:	e023      	b.n	80070b4 <HAL_DMA_IRQHandler+0x308>
 800706c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007070:	e020      	b.n	80070b4 <HAL_DMA_IRQHandler+0x308>
 8007072:	bf00      	nop
 8007074:	40020080 	.word	0x40020080
 8007078:	40020008 	.word	0x40020008
 800707c:	4002001c 	.word	0x4002001c
 8007080:	40020030 	.word	0x40020030
 8007084:	40020044 	.word	0x40020044
 8007088:	40020058 	.word	0x40020058
 800708c:	4002006c 	.word	0x4002006c
 8007090:	40020408 	.word	0x40020408
 8007094:	4002041c 	.word	0x4002041c
 8007098:	40020430 	.word	0x40020430
 800709c:	40020444 	.word	0x40020444
 80070a0:	40020400 	.word	0x40020400
 80070a4:	40020000 	.word	0x40020000
 80070a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070ac:	e002      	b.n	80070b4 <HAL_DMA_IRQHandler+0x308>
 80070ae:	2320      	movs	r3, #32
 80070b0:	e000      	b.n	80070b4 <HAL_DMA_IRQHandler+0x308>
 80070b2:	2302      	movs	r3, #2
 80070b4:	4a4e      	ldr	r2, [pc, #312]	; (80071f0 <HAL_DMA_IRQHandler+0x444>)
 80070b6:	6053      	str	r3, [r2, #4]
 80070b8:	e057      	b.n	800716a <HAL_DMA_IRQHandler+0x3be>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a4d      	ldr	r2, [pc, #308]	; (80071f4 <HAL_DMA_IRQHandler+0x448>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d04f      	beq.n	8007164 <HAL_DMA_IRQHandler+0x3b8>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a4b      	ldr	r2, [pc, #300]	; (80071f8 <HAL_DMA_IRQHandler+0x44c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d048      	beq.n	8007160 <HAL_DMA_IRQHandler+0x3b4>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a4a      	ldr	r2, [pc, #296]	; (80071fc <HAL_DMA_IRQHandler+0x450>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d040      	beq.n	800715a <HAL_DMA_IRQHandler+0x3ae>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a48      	ldr	r2, [pc, #288]	; (8007200 <HAL_DMA_IRQHandler+0x454>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d038      	beq.n	8007154 <HAL_DMA_IRQHandler+0x3a8>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a47      	ldr	r2, [pc, #284]	; (8007204 <HAL_DMA_IRQHandler+0x458>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d030      	beq.n	800714e <HAL_DMA_IRQHandler+0x3a2>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a45      	ldr	r2, [pc, #276]	; (8007208 <HAL_DMA_IRQHandler+0x45c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d028      	beq.n	8007148 <HAL_DMA_IRQHandler+0x39c>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a44      	ldr	r2, [pc, #272]	; (800720c <HAL_DMA_IRQHandler+0x460>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d020      	beq.n	8007142 <HAL_DMA_IRQHandler+0x396>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a42      	ldr	r2, [pc, #264]	; (8007210 <HAL_DMA_IRQHandler+0x464>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d019      	beq.n	800713e <HAL_DMA_IRQHandler+0x392>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a41      	ldr	r2, [pc, #260]	; (8007214 <HAL_DMA_IRQHandler+0x468>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d012      	beq.n	800713a <HAL_DMA_IRQHandler+0x38e>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a3f      	ldr	r2, [pc, #252]	; (8007218 <HAL_DMA_IRQHandler+0x46c>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00a      	beq.n	8007134 <HAL_DMA_IRQHandler+0x388>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a3e      	ldr	r2, [pc, #248]	; (800721c <HAL_DMA_IRQHandler+0x470>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d102      	bne.n	800712e <HAL_DMA_IRQHandler+0x382>
 8007128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800712c:	e01b      	b.n	8007166 <HAL_DMA_IRQHandler+0x3ba>
 800712e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007132:	e018      	b.n	8007166 <HAL_DMA_IRQHandler+0x3ba>
 8007134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007138:	e015      	b.n	8007166 <HAL_DMA_IRQHandler+0x3ba>
 800713a:	2320      	movs	r3, #32
 800713c:	e013      	b.n	8007166 <HAL_DMA_IRQHandler+0x3ba>
 800713e:	2302      	movs	r3, #2
 8007140:	e011      	b.n	8007166 <HAL_DMA_IRQHandler+0x3ba>
 8007142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007146:	e00e      	b.n	8007166 <HAL_DMA_IRQHandler+0x3ba>
 8007148:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800714c:	e00b      	b.n	8007166 <HAL_DMA_IRQHandler+0x3ba>
 800714e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007152:	e008      	b.n	8007166 <HAL_DMA_IRQHandler+0x3ba>
 8007154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007158:	e005      	b.n	8007166 <HAL_DMA_IRQHandler+0x3ba>
 800715a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800715e:	e002      	b.n	8007166 <HAL_DMA_IRQHandler+0x3ba>
 8007160:	2320      	movs	r3, #32
 8007162:	e000      	b.n	8007166 <HAL_DMA_IRQHandler+0x3ba>
 8007164:	2302      	movs	r3, #2
 8007166:	4a2e      	ldr	r2, [pc, #184]	; (8007220 <HAL_DMA_IRQHandler+0x474>)
 8007168:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007176:	2b00      	cmp	r3, #0
 8007178:	d034      	beq.n	80071e4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007182:	e02f      	b.n	80071e4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007188:	2208      	movs	r2, #8
 800718a:	409a      	lsls	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d028      	beq.n	80071e6 <HAL_DMA_IRQHandler+0x43a>
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d023      	beq.n	80071e6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 020e 	bic.w	r2, r2, #14
 80071ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b6:	2101      	movs	r1, #1
 80071b8:	fa01 f202 	lsl.w	r2, r1, r2
 80071bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d004      	beq.n	80071e6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4798      	blx	r3
    }
  }
  return;
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop
}
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	40020400 	.word	0x40020400
 80071f4:	40020008 	.word	0x40020008
 80071f8:	4002001c 	.word	0x4002001c
 80071fc:	40020030 	.word	0x40020030
 8007200:	40020044 	.word	0x40020044
 8007204:	40020058 	.word	0x40020058
 8007208:	4002006c 	.word	0x4002006c
 800720c:	40020080 	.word	0x40020080
 8007210:	40020408 	.word	0x40020408
 8007214:	4002041c 	.word	0x4002041c
 8007218:	40020430 	.word	0x40020430
 800721c:	40020444 	.word	0x40020444
 8007220:	40020000 	.word	0x40020000

08007224 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723a:	2101      	movs	r1, #1
 800723c:	fa01 f202 	lsl.w	r2, r1, r2
 8007240:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2b10      	cmp	r3, #16
 8007250:	d108      	bne.n	8007264 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007262:	e007      	b.n	8007274 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	60da      	str	r2, [r3, #12]
}
 8007274:	bf00      	nop
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	bc80      	pop	{r7}
 800727c:	4770      	bx	lr
	...

08007280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007280:	b480      	push	{r7}
 8007282:	b08b      	sub	sp, #44	; 0x2c
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800728a:	2300      	movs	r3, #0
 800728c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800728e:	2300      	movs	r3, #0
 8007290:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007292:	e179      	b.n	8007588 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007294:	2201      	movs	r2, #1
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	fa02 f303 	lsl.w	r3, r2, r3
 800729c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69fa      	ldr	r2, [r7, #28]
 80072a4:	4013      	ands	r3, r2
 80072a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	f040 8168 	bne.w	8007582 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	4aa0      	ldr	r2, [pc, #640]	; (8007538 <HAL_GPIO_Init+0x2b8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d05e      	beq.n	800737a <HAL_GPIO_Init+0xfa>
 80072bc:	4a9e      	ldr	r2, [pc, #632]	; (8007538 <HAL_GPIO_Init+0x2b8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d875      	bhi.n	80073ae <HAL_GPIO_Init+0x12e>
 80072c2:	4a9e      	ldr	r2, [pc, #632]	; (800753c <HAL_GPIO_Init+0x2bc>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d058      	beq.n	800737a <HAL_GPIO_Init+0xfa>
 80072c8:	4a9c      	ldr	r2, [pc, #624]	; (800753c <HAL_GPIO_Init+0x2bc>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d86f      	bhi.n	80073ae <HAL_GPIO_Init+0x12e>
 80072ce:	4a9c      	ldr	r2, [pc, #624]	; (8007540 <HAL_GPIO_Init+0x2c0>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d052      	beq.n	800737a <HAL_GPIO_Init+0xfa>
 80072d4:	4a9a      	ldr	r2, [pc, #616]	; (8007540 <HAL_GPIO_Init+0x2c0>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d869      	bhi.n	80073ae <HAL_GPIO_Init+0x12e>
 80072da:	4a9a      	ldr	r2, [pc, #616]	; (8007544 <HAL_GPIO_Init+0x2c4>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d04c      	beq.n	800737a <HAL_GPIO_Init+0xfa>
 80072e0:	4a98      	ldr	r2, [pc, #608]	; (8007544 <HAL_GPIO_Init+0x2c4>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d863      	bhi.n	80073ae <HAL_GPIO_Init+0x12e>
 80072e6:	4a98      	ldr	r2, [pc, #608]	; (8007548 <HAL_GPIO_Init+0x2c8>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d046      	beq.n	800737a <HAL_GPIO_Init+0xfa>
 80072ec:	4a96      	ldr	r2, [pc, #600]	; (8007548 <HAL_GPIO_Init+0x2c8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d85d      	bhi.n	80073ae <HAL_GPIO_Init+0x12e>
 80072f2:	2b12      	cmp	r3, #18
 80072f4:	d82a      	bhi.n	800734c <HAL_GPIO_Init+0xcc>
 80072f6:	2b12      	cmp	r3, #18
 80072f8:	d859      	bhi.n	80073ae <HAL_GPIO_Init+0x12e>
 80072fa:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <HAL_GPIO_Init+0x80>)
 80072fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007300:	0800737b 	.word	0x0800737b
 8007304:	08007355 	.word	0x08007355
 8007308:	08007367 	.word	0x08007367
 800730c:	080073a9 	.word	0x080073a9
 8007310:	080073af 	.word	0x080073af
 8007314:	080073af 	.word	0x080073af
 8007318:	080073af 	.word	0x080073af
 800731c:	080073af 	.word	0x080073af
 8007320:	080073af 	.word	0x080073af
 8007324:	080073af 	.word	0x080073af
 8007328:	080073af 	.word	0x080073af
 800732c:	080073af 	.word	0x080073af
 8007330:	080073af 	.word	0x080073af
 8007334:	080073af 	.word	0x080073af
 8007338:	080073af 	.word	0x080073af
 800733c:	080073af 	.word	0x080073af
 8007340:	080073af 	.word	0x080073af
 8007344:	0800735d 	.word	0x0800735d
 8007348:	08007371 	.word	0x08007371
 800734c:	4a7f      	ldr	r2, [pc, #508]	; (800754c <HAL_GPIO_Init+0x2cc>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d013      	beq.n	800737a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007352:	e02c      	b.n	80073ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	623b      	str	r3, [r7, #32]
          break;
 800735a:	e029      	b.n	80073b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	3304      	adds	r3, #4
 8007362:	623b      	str	r3, [r7, #32]
          break;
 8007364:	e024      	b.n	80073b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	3308      	adds	r3, #8
 800736c:	623b      	str	r3, [r7, #32]
          break;
 800736e:	e01f      	b.n	80073b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	330c      	adds	r3, #12
 8007376:	623b      	str	r3, [r7, #32]
          break;
 8007378:	e01a      	b.n	80073b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d102      	bne.n	8007388 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007382:	2304      	movs	r3, #4
 8007384:	623b      	str	r3, [r7, #32]
          break;
 8007386:	e013      	b.n	80073b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d105      	bne.n	800739c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007390:	2308      	movs	r3, #8
 8007392:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	69fa      	ldr	r2, [r7, #28]
 8007398:	611a      	str	r2, [r3, #16]
          break;
 800739a:	e009      	b.n	80073b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800739c:	2308      	movs	r3, #8
 800739e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	69fa      	ldr	r2, [r7, #28]
 80073a4:	615a      	str	r2, [r3, #20]
          break;
 80073a6:	e003      	b.n	80073b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80073a8:	2300      	movs	r3, #0
 80073aa:	623b      	str	r3, [r7, #32]
          break;
 80073ac:	e000      	b.n	80073b0 <HAL_GPIO_Init+0x130>
          break;
 80073ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	2bff      	cmp	r3, #255	; 0xff
 80073b4:	d801      	bhi.n	80073ba <HAL_GPIO_Init+0x13a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	e001      	b.n	80073be <HAL_GPIO_Init+0x13e>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3304      	adds	r3, #4
 80073be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2bff      	cmp	r3, #255	; 0xff
 80073c4:	d802      	bhi.n	80073cc <HAL_GPIO_Init+0x14c>
 80073c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	e002      	b.n	80073d2 <HAL_GPIO_Init+0x152>
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	3b08      	subs	r3, #8
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	210f      	movs	r1, #15
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	fa01 f303 	lsl.w	r3, r1, r3
 80073e0:	43db      	mvns	r3, r3
 80073e2:	401a      	ands	r2, r3
 80073e4:	6a39      	ldr	r1, [r7, #32]
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	fa01 f303 	lsl.w	r3, r1, r3
 80073ec:	431a      	orrs	r2, r3
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 80c1 	beq.w	8007582 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007400:	4b53      	ldr	r3, [pc, #332]	; (8007550 <HAL_GPIO_Init+0x2d0>)
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	4a52      	ldr	r2, [pc, #328]	; (8007550 <HAL_GPIO_Init+0x2d0>)
 8007406:	f043 0301 	orr.w	r3, r3, #1
 800740a:	6193      	str	r3, [r2, #24]
 800740c:	4b50      	ldr	r3, [pc, #320]	; (8007550 <HAL_GPIO_Init+0x2d0>)
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	60bb      	str	r3, [r7, #8]
 8007416:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007418:	4a4e      	ldr	r2, [pc, #312]	; (8007554 <HAL_GPIO_Init+0x2d4>)
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	089b      	lsrs	r3, r3, #2
 800741e:	3302      	adds	r3, #2
 8007420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007424:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	220f      	movs	r2, #15
 8007430:	fa02 f303 	lsl.w	r3, r2, r3
 8007434:	43db      	mvns	r3, r3
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	4013      	ands	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a46      	ldr	r2, [pc, #280]	; (8007558 <HAL_GPIO_Init+0x2d8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d01f      	beq.n	8007484 <HAL_GPIO_Init+0x204>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a45      	ldr	r2, [pc, #276]	; (800755c <HAL_GPIO_Init+0x2dc>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d019      	beq.n	8007480 <HAL_GPIO_Init+0x200>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a44      	ldr	r2, [pc, #272]	; (8007560 <HAL_GPIO_Init+0x2e0>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d013      	beq.n	800747c <HAL_GPIO_Init+0x1fc>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a43      	ldr	r2, [pc, #268]	; (8007564 <HAL_GPIO_Init+0x2e4>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d00d      	beq.n	8007478 <HAL_GPIO_Init+0x1f8>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a42      	ldr	r2, [pc, #264]	; (8007568 <HAL_GPIO_Init+0x2e8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d007      	beq.n	8007474 <HAL_GPIO_Init+0x1f4>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a41      	ldr	r2, [pc, #260]	; (800756c <HAL_GPIO_Init+0x2ec>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d101      	bne.n	8007470 <HAL_GPIO_Init+0x1f0>
 800746c:	2305      	movs	r3, #5
 800746e:	e00a      	b.n	8007486 <HAL_GPIO_Init+0x206>
 8007470:	2306      	movs	r3, #6
 8007472:	e008      	b.n	8007486 <HAL_GPIO_Init+0x206>
 8007474:	2304      	movs	r3, #4
 8007476:	e006      	b.n	8007486 <HAL_GPIO_Init+0x206>
 8007478:	2303      	movs	r3, #3
 800747a:	e004      	b.n	8007486 <HAL_GPIO_Init+0x206>
 800747c:	2302      	movs	r3, #2
 800747e:	e002      	b.n	8007486 <HAL_GPIO_Init+0x206>
 8007480:	2301      	movs	r3, #1
 8007482:	e000      	b.n	8007486 <HAL_GPIO_Init+0x206>
 8007484:	2300      	movs	r3, #0
 8007486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007488:	f002 0203 	and.w	r2, r2, #3
 800748c:	0092      	lsls	r2, r2, #2
 800748e:	4093      	lsls	r3, r2
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007496:	492f      	ldr	r1, [pc, #188]	; (8007554 <HAL_GPIO_Init+0x2d4>)
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	089b      	lsrs	r3, r3, #2
 800749c:	3302      	adds	r3, #2
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d006      	beq.n	80074be <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80074b0:	4b2f      	ldr	r3, [pc, #188]	; (8007570 <HAL_GPIO_Init+0x2f0>)
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	492e      	ldr	r1, [pc, #184]	; (8007570 <HAL_GPIO_Init+0x2f0>)
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	600b      	str	r3, [r1, #0]
 80074bc:	e006      	b.n	80074cc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80074be:	4b2c      	ldr	r3, [pc, #176]	; (8007570 <HAL_GPIO_Init+0x2f0>)
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	43db      	mvns	r3, r3
 80074c6:	492a      	ldr	r1, [pc, #168]	; (8007570 <HAL_GPIO_Init+0x2f0>)
 80074c8:	4013      	ands	r3, r2
 80074ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d006      	beq.n	80074e6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80074d8:	4b25      	ldr	r3, [pc, #148]	; (8007570 <HAL_GPIO_Init+0x2f0>)
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	4924      	ldr	r1, [pc, #144]	; (8007570 <HAL_GPIO_Init+0x2f0>)
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	604b      	str	r3, [r1, #4]
 80074e4:	e006      	b.n	80074f4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80074e6:	4b22      	ldr	r3, [pc, #136]	; (8007570 <HAL_GPIO_Init+0x2f0>)
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	43db      	mvns	r3, r3
 80074ee:	4920      	ldr	r1, [pc, #128]	; (8007570 <HAL_GPIO_Init+0x2f0>)
 80074f0:	4013      	ands	r3, r2
 80074f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d006      	beq.n	800750e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007500:	4b1b      	ldr	r3, [pc, #108]	; (8007570 <HAL_GPIO_Init+0x2f0>)
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	491a      	ldr	r1, [pc, #104]	; (8007570 <HAL_GPIO_Init+0x2f0>)
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	4313      	orrs	r3, r2
 800750a:	608b      	str	r3, [r1, #8]
 800750c:	e006      	b.n	800751c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800750e:	4b18      	ldr	r3, [pc, #96]	; (8007570 <HAL_GPIO_Init+0x2f0>)
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	43db      	mvns	r3, r3
 8007516:	4916      	ldr	r1, [pc, #88]	; (8007570 <HAL_GPIO_Init+0x2f0>)
 8007518:	4013      	ands	r3, r2
 800751a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d025      	beq.n	8007574 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007528:	4b11      	ldr	r3, [pc, #68]	; (8007570 <HAL_GPIO_Init+0x2f0>)
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	4910      	ldr	r1, [pc, #64]	; (8007570 <HAL_GPIO_Init+0x2f0>)
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	4313      	orrs	r3, r2
 8007532:	60cb      	str	r3, [r1, #12]
 8007534:	e025      	b.n	8007582 <HAL_GPIO_Init+0x302>
 8007536:	bf00      	nop
 8007538:	10320000 	.word	0x10320000
 800753c:	10310000 	.word	0x10310000
 8007540:	10220000 	.word	0x10220000
 8007544:	10210000 	.word	0x10210000
 8007548:	10120000 	.word	0x10120000
 800754c:	10110000 	.word	0x10110000
 8007550:	40021000 	.word	0x40021000
 8007554:	40010000 	.word	0x40010000
 8007558:	40010800 	.word	0x40010800
 800755c:	40010c00 	.word	0x40010c00
 8007560:	40011000 	.word	0x40011000
 8007564:	40011400 	.word	0x40011400
 8007568:	40011800 	.word	0x40011800
 800756c:	40011c00 	.word	0x40011c00
 8007570:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007574:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <HAL_GPIO_Init+0x324>)
 8007576:	68da      	ldr	r2, [r3, #12]
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	43db      	mvns	r3, r3
 800757c:	4909      	ldr	r1, [pc, #36]	; (80075a4 <HAL_GPIO_Init+0x324>)
 800757e:	4013      	ands	r3, r2
 8007580:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	3301      	adds	r3, #1
 8007586:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	fa22 f303 	lsr.w	r3, r2, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	f47f ae7e 	bne.w	8007294 <HAL_GPIO_Init+0x14>
  }
}
 8007598:	bf00      	nop
 800759a:	bf00      	nop
 800759c:	372c      	adds	r7, #44	; 0x2c
 800759e:	46bd      	mov	sp, r7
 80075a0:	bc80      	pop	{r7}
 80075a2:	4770      	bx	lr
 80075a4:	40010400 	.word	0x40010400

080075a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	887b      	ldrh	r3, [r7, #2]
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075c0:	2301      	movs	r3, #1
 80075c2:	73fb      	strb	r3, [r7, #15]
 80075c4:	e001      	b.n	80075ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075c6:	2300      	movs	r3, #0
 80075c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bc80      	pop	{r7}
 80075d4:	4770      	bx	lr

080075d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	460b      	mov	r3, r1
 80075e0:	807b      	strh	r3, [r7, #2]
 80075e2:	4613      	mov	r3, r2
 80075e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80075e6:	787b      	ldrb	r3, [r7, #1]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075ec:	887a      	ldrh	r2, [r7, #2]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80075f2:	e003      	b.n	80075fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80075f4:	887b      	ldrh	r3, [r7, #2]
 80075f6:	041a      	lsls	r2, r3, #16
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	611a      	str	r2, [r3, #16]
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	bc80      	pop	{r7}
 8007604:	4770      	bx	lr
	...

08007608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e26c      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 8087 	beq.w	8007736 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007628:	4b92      	ldr	r3, [pc, #584]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f003 030c 	and.w	r3, r3, #12
 8007630:	2b04      	cmp	r3, #4
 8007632:	d00c      	beq.n	800764e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007634:	4b8f      	ldr	r3, [pc, #572]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f003 030c 	and.w	r3, r3, #12
 800763c:	2b08      	cmp	r3, #8
 800763e:	d112      	bne.n	8007666 <HAL_RCC_OscConfig+0x5e>
 8007640:	4b8c      	ldr	r3, [pc, #560]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800764c:	d10b      	bne.n	8007666 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800764e:	4b89      	ldr	r3, [pc, #548]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d06c      	beq.n	8007734 <HAL_RCC_OscConfig+0x12c>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d168      	bne.n	8007734 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e246      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800766e:	d106      	bne.n	800767e <HAL_RCC_OscConfig+0x76>
 8007670:	4b80      	ldr	r3, [pc, #512]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a7f      	ldr	r2, [pc, #508]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	e02e      	b.n	80076dc <HAL_RCC_OscConfig+0xd4>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10c      	bne.n	80076a0 <HAL_RCC_OscConfig+0x98>
 8007686:	4b7b      	ldr	r3, [pc, #492]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a7a      	ldr	r2, [pc, #488]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 800768c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007690:	6013      	str	r3, [r2, #0]
 8007692:	4b78      	ldr	r3, [pc, #480]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a77      	ldr	r2, [pc, #476]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	e01d      	b.n	80076dc <HAL_RCC_OscConfig+0xd4>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076a8:	d10c      	bne.n	80076c4 <HAL_RCC_OscConfig+0xbc>
 80076aa:	4b72      	ldr	r3, [pc, #456]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a71      	ldr	r2, [pc, #452]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 80076b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	4b6f      	ldr	r3, [pc, #444]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a6e      	ldr	r2, [pc, #440]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 80076bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	e00b      	b.n	80076dc <HAL_RCC_OscConfig+0xd4>
 80076c4:	4b6b      	ldr	r3, [pc, #428]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a6a      	ldr	r2, [pc, #424]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 80076ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	4b68      	ldr	r3, [pc, #416]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a67      	ldr	r2, [pc, #412]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 80076d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d013      	beq.n	800770c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076e4:	f7fe f848 	bl	8005778 <HAL_GetTick>
 80076e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076ec:	f7fe f844 	bl	8005778 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b64      	cmp	r3, #100	; 0x64
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e1fa      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076fe:	4b5d      	ldr	r3, [pc, #372]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d0f0      	beq.n	80076ec <HAL_RCC_OscConfig+0xe4>
 800770a:	e014      	b.n	8007736 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800770c:	f7fe f834 	bl	8005778 <HAL_GetTick>
 8007710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007714:	f7fe f830 	bl	8005778 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b64      	cmp	r3, #100	; 0x64
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e1e6      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007726:	4b53      	ldr	r3, [pc, #332]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f0      	bne.n	8007714 <HAL_RCC_OscConfig+0x10c>
 8007732:	e000      	b.n	8007736 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d063      	beq.n	800780a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007742:	4b4c      	ldr	r3, [pc, #304]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f003 030c 	and.w	r3, r3, #12
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800774e:	4b49      	ldr	r3, [pc, #292]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f003 030c 	and.w	r3, r3, #12
 8007756:	2b08      	cmp	r3, #8
 8007758:	d11c      	bne.n	8007794 <HAL_RCC_OscConfig+0x18c>
 800775a:	4b46      	ldr	r3, [pc, #280]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d116      	bne.n	8007794 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007766:	4b43      	ldr	r3, [pc, #268]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b00      	cmp	r3, #0
 8007770:	d005      	beq.n	800777e <HAL_RCC_OscConfig+0x176>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d001      	beq.n	800777e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e1ba      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800777e:	4b3d      	ldr	r3, [pc, #244]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	00db      	lsls	r3, r3, #3
 800778c:	4939      	ldr	r1, [pc, #228]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 800778e:	4313      	orrs	r3, r2
 8007790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007792:	e03a      	b.n	800780a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d020      	beq.n	80077de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800779c:	4b36      	ldr	r3, [pc, #216]	; (8007878 <HAL_RCC_OscConfig+0x270>)
 800779e:	2201      	movs	r2, #1
 80077a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077a2:	f7fd ffe9 	bl	8005778 <HAL_GetTick>
 80077a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077a8:	e008      	b.n	80077bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077aa:	f7fd ffe5 	bl	8005778 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d901      	bls.n	80077bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80077b8:	2303      	movs	r3, #3
 80077ba:	e19b      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077bc:	4b2d      	ldr	r3, [pc, #180]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0f0      	beq.n	80077aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077c8:	4b2a      	ldr	r3, [pc, #168]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	4927      	ldr	r1, [pc, #156]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	600b      	str	r3, [r1, #0]
 80077dc:	e015      	b.n	800780a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077de:	4b26      	ldr	r3, [pc, #152]	; (8007878 <HAL_RCC_OscConfig+0x270>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e4:	f7fd ffc8 	bl	8005778 <HAL_GetTick>
 80077e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077ea:	e008      	b.n	80077fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077ec:	f7fd ffc4 	bl	8005778 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d901      	bls.n	80077fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e17a      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077fe:	4b1d      	ldr	r3, [pc, #116]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1f0      	bne.n	80077ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	2b00      	cmp	r3, #0
 8007814:	d03a      	beq.n	800788c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d019      	beq.n	8007852 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800781e:	4b17      	ldr	r3, [pc, #92]	; (800787c <HAL_RCC_OscConfig+0x274>)
 8007820:	2201      	movs	r2, #1
 8007822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007824:	f7fd ffa8 	bl	8005778 <HAL_GetTick>
 8007828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800782a:	e008      	b.n	800783e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800782c:	f7fd ffa4 	bl	8005778 <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	2b02      	cmp	r3, #2
 8007838:	d901      	bls.n	800783e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e15a      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800783e:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <HAL_RCC_OscConfig+0x26c>)
 8007840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b00      	cmp	r3, #0
 8007848:	d0f0      	beq.n	800782c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800784a:	2001      	movs	r0, #1
 800784c:	f000 fada 	bl	8007e04 <RCC_Delay>
 8007850:	e01c      	b.n	800788c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007852:	4b0a      	ldr	r3, [pc, #40]	; (800787c <HAL_RCC_OscConfig+0x274>)
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007858:	f7fd ff8e 	bl	8005778 <HAL_GetTick>
 800785c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800785e:	e00f      	b.n	8007880 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007860:	f7fd ff8a 	bl	8005778 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d908      	bls.n	8007880 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e140      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
 8007872:	bf00      	nop
 8007874:	40021000 	.word	0x40021000
 8007878:	42420000 	.word	0x42420000
 800787c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007880:	4b9e      	ldr	r3, [pc, #632]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	f003 0302 	and.w	r3, r3, #2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e9      	bne.n	8007860 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 80a6 	beq.w	80079e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800789a:	2300      	movs	r3, #0
 800789c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800789e:	4b97      	ldr	r3, [pc, #604]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10d      	bne.n	80078c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078aa:	4b94      	ldr	r3, [pc, #592]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	4a93      	ldr	r2, [pc, #588]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 80078b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b4:	61d3      	str	r3, [r2, #28]
 80078b6:	4b91      	ldr	r3, [pc, #580]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 80078b8:	69db      	ldr	r3, [r3, #28]
 80078ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078be:	60bb      	str	r3, [r7, #8]
 80078c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078c2:	2301      	movs	r3, #1
 80078c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078c6:	4b8e      	ldr	r3, [pc, #568]	; (8007b00 <HAL_RCC_OscConfig+0x4f8>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d118      	bne.n	8007904 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078d2:	4b8b      	ldr	r3, [pc, #556]	; (8007b00 <HAL_RCC_OscConfig+0x4f8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a8a      	ldr	r2, [pc, #552]	; (8007b00 <HAL_RCC_OscConfig+0x4f8>)
 80078d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078de:	f7fd ff4b 	bl	8005778 <HAL_GetTick>
 80078e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078e4:	e008      	b.n	80078f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078e6:	f7fd ff47 	bl	8005778 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	2b64      	cmp	r3, #100	; 0x64
 80078f2:	d901      	bls.n	80078f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e0fd      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078f8:	4b81      	ldr	r3, [pc, #516]	; (8007b00 <HAL_RCC_OscConfig+0x4f8>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007900:	2b00      	cmp	r3, #0
 8007902:	d0f0      	beq.n	80078e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d106      	bne.n	800791a <HAL_RCC_OscConfig+0x312>
 800790c:	4b7b      	ldr	r3, [pc, #492]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	4a7a      	ldr	r2, [pc, #488]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007912:	f043 0301 	orr.w	r3, r3, #1
 8007916:	6213      	str	r3, [r2, #32]
 8007918:	e02d      	b.n	8007976 <HAL_RCC_OscConfig+0x36e>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10c      	bne.n	800793c <HAL_RCC_OscConfig+0x334>
 8007922:	4b76      	ldr	r3, [pc, #472]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	4a75      	ldr	r2, [pc, #468]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007928:	f023 0301 	bic.w	r3, r3, #1
 800792c:	6213      	str	r3, [r2, #32]
 800792e:	4b73      	ldr	r3, [pc, #460]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	4a72      	ldr	r2, [pc, #456]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007934:	f023 0304 	bic.w	r3, r3, #4
 8007938:	6213      	str	r3, [r2, #32]
 800793a:	e01c      	b.n	8007976 <HAL_RCC_OscConfig+0x36e>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	2b05      	cmp	r3, #5
 8007942:	d10c      	bne.n	800795e <HAL_RCC_OscConfig+0x356>
 8007944:	4b6d      	ldr	r3, [pc, #436]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	4a6c      	ldr	r2, [pc, #432]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 800794a:	f043 0304 	orr.w	r3, r3, #4
 800794e:	6213      	str	r3, [r2, #32]
 8007950:	4b6a      	ldr	r3, [pc, #424]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	4a69      	ldr	r2, [pc, #420]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007956:	f043 0301 	orr.w	r3, r3, #1
 800795a:	6213      	str	r3, [r2, #32]
 800795c:	e00b      	b.n	8007976 <HAL_RCC_OscConfig+0x36e>
 800795e:	4b67      	ldr	r3, [pc, #412]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	4a66      	ldr	r2, [pc, #408]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007964:	f023 0301 	bic.w	r3, r3, #1
 8007968:	6213      	str	r3, [r2, #32]
 800796a:	4b64      	ldr	r3, [pc, #400]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	4a63      	ldr	r2, [pc, #396]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007970:	f023 0304 	bic.w	r3, r3, #4
 8007974:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d015      	beq.n	80079aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800797e:	f7fd fefb 	bl	8005778 <HAL_GetTick>
 8007982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007984:	e00a      	b.n	800799c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007986:	f7fd fef7 	bl	8005778 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	f241 3288 	movw	r2, #5000	; 0x1388
 8007994:	4293      	cmp	r3, r2
 8007996:	d901      	bls.n	800799c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e0ab      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800799c:	4b57      	ldr	r3, [pc, #348]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 800799e:	6a1b      	ldr	r3, [r3, #32]
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d0ee      	beq.n	8007986 <HAL_RCC_OscConfig+0x37e>
 80079a8:	e014      	b.n	80079d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079aa:	f7fd fee5 	bl	8005778 <HAL_GetTick>
 80079ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079b0:	e00a      	b.n	80079c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079b2:	f7fd fee1 	bl	8005778 <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d901      	bls.n	80079c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e095      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079c8:	4b4c      	ldr	r3, [pc, #304]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1ee      	bne.n	80079b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d105      	bne.n	80079e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079da:	4b48      	ldr	r3, [pc, #288]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	4a47      	ldr	r2, [pc, #284]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 80079e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	69db      	ldr	r3, [r3, #28]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 8081 	beq.w	8007af2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079f0:	4b42      	ldr	r3, [pc, #264]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f003 030c 	and.w	r3, r3, #12
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	d061      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	69db      	ldr	r3, [r3, #28]
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d146      	bne.n	8007a92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a04:	4b3f      	ldr	r3, [pc, #252]	; (8007b04 <HAL_RCC_OscConfig+0x4fc>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a0a:	f7fd feb5 	bl	8005778 <HAL_GetTick>
 8007a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a10:	e008      	b.n	8007a24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a12:	f7fd feb1 	bl	8005778 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d901      	bls.n	8007a24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e067      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a24:	4b35      	ldr	r3, [pc, #212]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1f0      	bne.n	8007a12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a1b      	ldr	r3, [r3, #32]
 8007a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a38:	d108      	bne.n	8007a4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007a3a:	4b30      	ldr	r3, [pc, #192]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	492d      	ldr	r1, [pc, #180]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a4c:	4b2b      	ldr	r3, [pc, #172]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a19      	ldr	r1, [r3, #32]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	4927      	ldr	r1, [pc, #156]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a64:	4b27      	ldr	r3, [pc, #156]	; (8007b04 <HAL_RCC_OscConfig+0x4fc>)
 8007a66:	2201      	movs	r2, #1
 8007a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a6a:	f7fd fe85 	bl	8005778 <HAL_GetTick>
 8007a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a70:	e008      	b.n	8007a84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a72:	f7fd fe81 	bl	8005778 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d901      	bls.n	8007a84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e037      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a84:	4b1d      	ldr	r3, [pc, #116]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0f0      	beq.n	8007a72 <HAL_RCC_OscConfig+0x46a>
 8007a90:	e02f      	b.n	8007af2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a92:	4b1c      	ldr	r3, [pc, #112]	; (8007b04 <HAL_RCC_OscConfig+0x4fc>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a98:	f7fd fe6e 	bl	8005778 <HAL_GetTick>
 8007a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a9e:	e008      	b.n	8007ab2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aa0:	f7fd fe6a 	bl	8005778 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d901      	bls.n	8007ab2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e020      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ab2:	4b12      	ldr	r3, [pc, #72]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1f0      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x498>
 8007abe:	e018      	b.n	8007af2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d101      	bne.n	8007acc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e013      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007acc:	4b0b      	ldr	r3, [pc, #44]	; (8007afc <HAL_RCC_OscConfig+0x4f4>)
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d106      	bne.n	8007aee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d001      	beq.n	8007af2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e000      	b.n	8007af4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3718      	adds	r7, #24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	40021000 	.word	0x40021000
 8007b00:	40007000 	.word	0x40007000
 8007b04:	42420060 	.word	0x42420060

08007b08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e0d0      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b1c:	4b6a      	ldr	r3, [pc, #424]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0307 	and.w	r3, r3, #7
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d910      	bls.n	8007b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b2a:	4b67      	ldr	r3, [pc, #412]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f023 0207 	bic.w	r2, r3, #7
 8007b32:	4965      	ldr	r1, [pc, #404]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b3a:	4b63      	ldr	r3, [pc, #396]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d001      	beq.n	8007b4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e0b8      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d020      	beq.n	8007b9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d005      	beq.n	8007b70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b64:	4b59      	ldr	r3, [pc, #356]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	4a58      	ldr	r2, [pc, #352]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007b6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0308 	and.w	r3, r3, #8
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b7c:	4b53      	ldr	r3, [pc, #332]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	4a52      	ldr	r2, [pc, #328]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007b82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007b86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b88:	4b50      	ldr	r3, [pc, #320]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	494d      	ldr	r1, [pc, #308]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d040      	beq.n	8007c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d107      	bne.n	8007bbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bae:	4b47      	ldr	r3, [pc, #284]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d115      	bne.n	8007be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e07f      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d107      	bne.n	8007bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bc6:	4b41      	ldr	r3, [pc, #260]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d109      	bne.n	8007be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e073      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bd6:	4b3d      	ldr	r3, [pc, #244]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e06b      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007be6:	4b39      	ldr	r3, [pc, #228]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f023 0203 	bic.w	r2, r3, #3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	4936      	ldr	r1, [pc, #216]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bf8:	f7fd fdbe 	bl	8005778 <HAL_GetTick>
 8007bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bfe:	e00a      	b.n	8007c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c00:	f7fd fdba 	bl	8005778 <HAL_GetTick>
 8007c04:	4602      	mov	r2, r0
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d901      	bls.n	8007c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e053      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c16:	4b2d      	ldr	r3, [pc, #180]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f003 020c 	and.w	r2, r3, #12
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d1eb      	bne.n	8007c00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c28:	4b27      	ldr	r3, [pc, #156]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0307 	and.w	r3, r3, #7
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d210      	bcs.n	8007c58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c36:	4b24      	ldr	r3, [pc, #144]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f023 0207 	bic.w	r2, r3, #7
 8007c3e:	4922      	ldr	r1, [pc, #136]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c46:	4b20      	ldr	r3, [pc, #128]	; (8007cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d001      	beq.n	8007c58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e032      	b.n	8007cbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0304 	and.w	r3, r3, #4
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d008      	beq.n	8007c76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c64:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	4916      	ldr	r1, [pc, #88]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0308 	and.w	r3, r3, #8
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d009      	beq.n	8007c96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c82:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	490e      	ldr	r1, [pc, #56]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c96:	f000 f821 	bl	8007cdc <HAL_RCC_GetSysClockFreq>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ccc <HAL_RCC_ClockConfig+0x1c4>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	091b      	lsrs	r3, r3, #4
 8007ca2:	f003 030f 	and.w	r3, r3, #15
 8007ca6:	490a      	ldr	r1, [pc, #40]	; (8007cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ca8:	5ccb      	ldrb	r3, [r1, r3]
 8007caa:	fa22 f303 	lsr.w	r3, r2, r3
 8007cae:	4a09      	ldr	r2, [pc, #36]	; (8007cd4 <HAL_RCC_ClockConfig+0x1cc>)
 8007cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007cb2:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <HAL_RCC_ClockConfig+0x1d0>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fd fd2e 	bl	8005718 <HAL_InitTick>

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	40022000 	.word	0x40022000
 8007ccc:	40021000 	.word	0x40021000
 8007cd0:	0800b1e8 	.word	0x0800b1e8
 8007cd4:	20000000 	.word	0x20000000
 8007cd8:	20000004 	.word	0x20000004

08007cdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cdc:	b490      	push	{r4, r7}
 8007cde:	b08a      	sub	sp, #40	; 0x28
 8007ce0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007ce2:	4b2a      	ldr	r3, [pc, #168]	; (8007d8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8007ce4:	1d3c      	adds	r4, r7, #4
 8007ce6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ce8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007cec:	f240 2301 	movw	r3, #513	; 0x201
 8007cf0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8007cfe:	2300      	movs	r3, #0
 8007d00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007d02:	2300      	movs	r3, #0
 8007d04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007d06:	4b22      	ldr	r3, [pc, #136]	; (8007d90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	f003 030c 	and.w	r3, r3, #12
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d002      	beq.n	8007d1c <HAL_RCC_GetSysClockFreq+0x40>
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d003      	beq.n	8007d22 <HAL_RCC_GetSysClockFreq+0x46>
 8007d1a:	e02d      	b.n	8007d78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007d1c:	4b1d      	ldr	r3, [pc, #116]	; (8007d94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d1e:	623b      	str	r3, [r7, #32]
      break;
 8007d20:	e02d      	b.n	8007d7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	0c9b      	lsrs	r3, r3, #18
 8007d26:	f003 030f 	and.w	r3, r3, #15
 8007d2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007d2e:	4413      	add	r3, r2
 8007d30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007d34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d013      	beq.n	8007d68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007d40:	4b13      	ldr	r3, [pc, #76]	; (8007d90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	0c5b      	lsrs	r3, r3, #17
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007d4e:	4413      	add	r3, r2
 8007d50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007d54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	4a0e      	ldr	r2, [pc, #56]	; (8007d94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d5a:	fb02 f203 	mul.w	r2, r2, r3
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d64:	627b      	str	r3, [r7, #36]	; 0x24
 8007d66:	e004      	b.n	8007d72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	4a0b      	ldr	r2, [pc, #44]	; (8007d98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d6c:	fb02 f303 	mul.w	r3, r2, r3
 8007d70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	623b      	str	r3, [r7, #32]
      break;
 8007d76:	e002      	b.n	8007d7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007d78:	4b08      	ldr	r3, [pc, #32]	; (8007d9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007d7a:	623b      	str	r3, [r7, #32]
      break;
 8007d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3728      	adds	r7, #40	; 0x28
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bc90      	pop	{r4, r7}
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	0800b154 	.word	0x0800b154
 8007d90:	40021000 	.word	0x40021000
 8007d94:	00f42400 	.word	0x00f42400
 8007d98:	003d0900 	.word	0x003d0900
 8007d9c:	007a1200 	.word	0x007a1200

08007da0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007da0:	b480      	push	{r7}
 8007da2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007da4:	4b02      	ldr	r3, [pc, #8]	; (8007db0 <HAL_RCC_GetHCLKFreq+0x10>)
 8007da6:	681b      	ldr	r3, [r3, #0]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr
 8007db0:	20000000 	.word	0x20000000

08007db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007db8:	f7ff fff2 	bl	8007da0 <HAL_RCC_GetHCLKFreq>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	4b05      	ldr	r3, [pc, #20]	; (8007dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	0a1b      	lsrs	r3, r3, #8
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	4903      	ldr	r1, [pc, #12]	; (8007dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dca:	5ccb      	ldrb	r3, [r1, r3]
 8007dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	40021000 	.word	0x40021000
 8007dd8:	0800b1f8 	.word	0x0800b1f8

08007ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007de0:	f7ff ffde 	bl	8007da0 <HAL_RCC_GetHCLKFreq>
 8007de4:	4602      	mov	r2, r0
 8007de6:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	0adb      	lsrs	r3, r3, #11
 8007dec:	f003 0307 	and.w	r3, r3, #7
 8007df0:	4903      	ldr	r1, [pc, #12]	; (8007e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007df2:	5ccb      	ldrb	r3, [r1, r3]
 8007df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	40021000 	.word	0x40021000
 8007e00:	0800b1f8 	.word	0x0800b1f8

08007e04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <RCC_Delay+0x34>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a0a      	ldr	r2, [pc, #40]	; (8007e3c <RCC_Delay+0x38>)
 8007e12:	fba2 2303 	umull	r2, r3, r2, r3
 8007e16:	0a5b      	lsrs	r3, r3, #9
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	fb02 f303 	mul.w	r3, r2, r3
 8007e1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007e20:	bf00      	nop
  }
  while (Delay --);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	1e5a      	subs	r2, r3, #1
 8007e26:	60fa      	str	r2, [r7, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1f9      	bne.n	8007e20 <RCC_Delay+0x1c>
}
 8007e2c:	bf00      	nop
 8007e2e:	bf00      	nop
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bc80      	pop	{r7}
 8007e36:	4770      	bx	lr
 8007e38:	20000000 	.word	0x20000000
 8007e3c:	10624dd3 	.word	0x10624dd3

08007e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	613b      	str	r3, [r7, #16]
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d07d      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e60:	4b4f      	ldr	r3, [pc, #316]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e62:	69db      	ldr	r3, [r3, #28]
 8007e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10d      	bne.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e6c:	4b4c      	ldr	r3, [pc, #304]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e6e:	69db      	ldr	r3, [r3, #28]
 8007e70:	4a4b      	ldr	r2, [pc, #300]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e76:	61d3      	str	r3, [r2, #28]
 8007e78:	4b49      	ldr	r3, [pc, #292]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e80:	60bb      	str	r3, [r7, #8]
 8007e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e84:	2301      	movs	r3, #1
 8007e86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e88:	4b46      	ldr	r3, [pc, #280]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d118      	bne.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e94:	4b43      	ldr	r3, [pc, #268]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a42      	ldr	r2, [pc, #264]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ea0:	f7fd fc6a 	bl	8005778 <HAL_GetTick>
 8007ea4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ea6:	e008      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ea8:	f7fd fc66 	bl	8005778 <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	2b64      	cmp	r3, #100	; 0x64
 8007eb4:	d901      	bls.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e06d      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eba:	4b3a      	ldr	r3, [pc, #232]	; (8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d0f0      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ec6:	4b36      	ldr	r3, [pc, #216]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ece:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d02e      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d027      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ee4:	4b2e      	ldr	r3, [pc, #184]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ee6:	6a1b      	ldr	r3, [r3, #32]
 8007ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007eee:	4b2e      	ldr	r3, [pc, #184]	; (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ef4:	4b2c      	ldr	r3, [pc, #176]	; (8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007efa:	4a29      	ldr	r2, [pc, #164]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d014      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f0a:	f7fd fc35 	bl	8005778 <HAL_GetTick>
 8007f0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f10:	e00a      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f12:	f7fd fc31 	bl	8005778 <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d901      	bls.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e036      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f28:	4b1d      	ldr	r3, [pc, #116]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f2a:	6a1b      	ldr	r3, [r3, #32]
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d0ee      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f34:	4b1a      	ldr	r3, [pc, #104]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f36:	6a1b      	ldr	r3, [r3, #32]
 8007f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	4917      	ldr	r1, [pc, #92]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d105      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f4c:	4b14      	ldr	r3, [pc, #80]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	4a13      	ldr	r2, [pc, #76]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0302 	and.w	r3, r3, #2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d008      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f64:	4b0e      	ldr	r3, [pc, #56]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	490b      	ldr	r1, [pc, #44]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0310 	and.w	r3, r3, #16
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d008      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f82:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	4904      	ldr	r1, [pc, #16]	; (8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	40021000 	.word	0x40021000
 8007fa4:	40007000 	.word	0x40007000
 8007fa8:	42420440 	.word	0x42420440

08007fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d001      	beq.n	8007fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e044      	b.n	800804e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f042 0201 	orr.w	r2, r2, #1
 8007fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a1d      	ldr	r2, [pc, #116]	; (8008058 <HAL_TIM_Base_Start_IT+0xac>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d018      	beq.n	8008018 <HAL_TIM_Base_Start_IT+0x6c>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a1c      	ldr	r2, [pc, #112]	; (800805c <HAL_TIM_Base_Start_IT+0xb0>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d013      	beq.n	8008018 <HAL_TIM_Base_Start_IT+0x6c>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff8:	d00e      	beq.n	8008018 <HAL_TIM_Base_Start_IT+0x6c>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a18      	ldr	r2, [pc, #96]	; (8008060 <HAL_TIM_Base_Start_IT+0xb4>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d009      	beq.n	8008018 <HAL_TIM_Base_Start_IT+0x6c>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a16      	ldr	r2, [pc, #88]	; (8008064 <HAL_TIM_Base_Start_IT+0xb8>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d004      	beq.n	8008018 <HAL_TIM_Base_Start_IT+0x6c>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a15      	ldr	r2, [pc, #84]	; (8008068 <HAL_TIM_Base_Start_IT+0xbc>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d111      	bne.n	800803c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f003 0307 	and.w	r3, r3, #7
 8008022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2b06      	cmp	r3, #6
 8008028:	d010      	beq.n	800804c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f042 0201 	orr.w	r2, r2, #1
 8008038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800803a:	e007      	b.n	800804c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0201 	orr.w	r2, r2, #1
 800804a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	bc80      	pop	{r7}
 8008056:	4770      	bx	lr
 8008058:	40012c00 	.word	0x40012c00
 800805c:	40013400 	.word	0x40013400
 8008060:	40000400 	.word	0x40000400
 8008064:	40000800 	.word	0x40000800
 8008068:	40000c00 	.word	0x40000c00

0800806c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68da      	ldr	r2, [r3, #12]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f022 0201 	bic.w	r2, r2, #1
 8008082:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6a1a      	ldr	r2, [r3, #32]
 800808a:	f241 1311 	movw	r3, #4369	; 0x1111
 800808e:	4013      	ands	r3, r2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10f      	bne.n	80080b4 <HAL_TIM_Base_Stop_IT+0x48>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6a1a      	ldr	r2, [r3, #32]
 800809a:	f240 4344 	movw	r3, #1092	; 0x444
 800809e:	4013      	ands	r3, r2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d107      	bne.n	80080b4 <HAL_TIM_Base_Stop_IT+0x48>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0201 	bic.w	r2, r2, #1
 80080b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bc80      	pop	{r7}
 80080c6:	4770      	bx	lr

080080c8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	e041      	b.n	800815e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d106      	bne.n	80080f4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7fd f8f4 	bl	80052dc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2202      	movs	r2, #2
 80080f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3304      	adds	r3, #4
 8008104:	4619      	mov	r1, r3
 8008106:	4610      	mov	r0, r2
 8008108:	f000 fbe8 	bl	80088dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e041      	b.n	80081fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	d106      	bne.n	8008192 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7fd f873 	bl	8005278 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2202      	movs	r2, #2
 8008196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	3304      	adds	r3, #4
 80081a2:	4619      	mov	r1, r3
 80081a4:	4610      	mov	r0, r2
 80081a6:	f000 fb99 	bl	80088dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d109      	bne.n	8008228 <HAL_TIM_PWM_Start+0x24>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b01      	cmp	r3, #1
 800821e:	bf14      	ite	ne
 8008220:	2301      	movne	r3, #1
 8008222:	2300      	moveq	r3, #0
 8008224:	b2db      	uxtb	r3, r3
 8008226:	e022      	b.n	800826e <HAL_TIM_PWM_Start+0x6a>
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b04      	cmp	r3, #4
 800822c:	d109      	bne.n	8008242 <HAL_TIM_PWM_Start+0x3e>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b01      	cmp	r3, #1
 8008238:	bf14      	ite	ne
 800823a:	2301      	movne	r3, #1
 800823c:	2300      	moveq	r3, #0
 800823e:	b2db      	uxtb	r3, r3
 8008240:	e015      	b.n	800826e <HAL_TIM_PWM_Start+0x6a>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b08      	cmp	r3, #8
 8008246:	d109      	bne.n	800825c <HAL_TIM_PWM_Start+0x58>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b01      	cmp	r3, #1
 8008252:	bf14      	ite	ne
 8008254:	2301      	movne	r3, #1
 8008256:	2300      	moveq	r3, #0
 8008258:	b2db      	uxtb	r3, r3
 800825a:	e008      	b.n	800826e <HAL_TIM_PWM_Start+0x6a>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008262:	b2db      	uxtb	r3, r3
 8008264:	2b01      	cmp	r3, #1
 8008266:	bf14      	ite	ne
 8008268:	2301      	movne	r3, #1
 800826a:	2300      	moveq	r3, #0
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e072      	b.n	800835c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d104      	bne.n	8008286 <HAL_TIM_PWM_Start+0x82>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008284:	e013      	b.n	80082ae <HAL_TIM_PWM_Start+0xaa>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b04      	cmp	r3, #4
 800828a:	d104      	bne.n	8008296 <HAL_TIM_PWM_Start+0x92>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2202      	movs	r2, #2
 8008290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008294:	e00b      	b.n	80082ae <HAL_TIM_PWM_Start+0xaa>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b08      	cmp	r3, #8
 800829a:	d104      	bne.n	80082a6 <HAL_TIM_PWM_Start+0xa2>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2202      	movs	r2, #2
 80082a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082a4:	e003      	b.n	80082ae <HAL_TIM_PWM_Start+0xaa>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2202      	movs	r2, #2
 80082aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2201      	movs	r2, #1
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f000 fd36 	bl	8008d28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a28      	ldr	r2, [pc, #160]	; (8008364 <HAL_TIM_PWM_Start+0x160>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d004      	beq.n	80082d0 <HAL_TIM_PWM_Start+0xcc>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a27      	ldr	r2, [pc, #156]	; (8008368 <HAL_TIM_PWM_Start+0x164>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d101      	bne.n	80082d4 <HAL_TIM_PWM_Start+0xd0>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e000      	b.n	80082d6 <HAL_TIM_PWM_Start+0xd2>
 80082d4:	2300      	movs	r3, #0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d007      	beq.n	80082ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a1d      	ldr	r2, [pc, #116]	; (8008364 <HAL_TIM_PWM_Start+0x160>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d018      	beq.n	8008326 <HAL_TIM_PWM_Start+0x122>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a1b      	ldr	r2, [pc, #108]	; (8008368 <HAL_TIM_PWM_Start+0x164>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d013      	beq.n	8008326 <HAL_TIM_PWM_Start+0x122>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008306:	d00e      	beq.n	8008326 <HAL_TIM_PWM_Start+0x122>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a17      	ldr	r2, [pc, #92]	; (800836c <HAL_TIM_PWM_Start+0x168>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d009      	beq.n	8008326 <HAL_TIM_PWM_Start+0x122>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a16      	ldr	r2, [pc, #88]	; (8008370 <HAL_TIM_PWM_Start+0x16c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d004      	beq.n	8008326 <HAL_TIM_PWM_Start+0x122>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a14      	ldr	r2, [pc, #80]	; (8008374 <HAL_TIM_PWM_Start+0x170>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d111      	bne.n	800834a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f003 0307 	and.w	r3, r3, #7
 8008330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b06      	cmp	r3, #6
 8008336:	d010      	beq.n	800835a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f042 0201 	orr.w	r2, r2, #1
 8008346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008348:	e007      	b.n	800835a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f042 0201 	orr.w	r2, r2, #1
 8008358:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	40012c00 	.word	0x40012c00
 8008368:	40013400 	.word	0x40013400
 800836c:	40000400 	.word	0x40000400
 8008370:	40000800 	.word	0x40000800
 8008374:	40000c00 	.word	0x40000c00

08008378 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2200      	movs	r2, #0
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	4618      	mov	r0, r3
 800838c:	f000 fccc 	bl	8008d28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a2e      	ldr	r2, [pc, #184]	; (8008450 <HAL_TIM_PWM_Stop+0xd8>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d004      	beq.n	80083a4 <HAL_TIM_PWM_Stop+0x2c>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a2d      	ldr	r2, [pc, #180]	; (8008454 <HAL_TIM_PWM_Stop+0xdc>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d101      	bne.n	80083a8 <HAL_TIM_PWM_Stop+0x30>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e000      	b.n	80083aa <HAL_TIM_PWM_Stop+0x32>
 80083a8:	2300      	movs	r3, #0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d017      	beq.n	80083de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6a1a      	ldr	r2, [r3, #32]
 80083b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80083b8:	4013      	ands	r3, r2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10f      	bne.n	80083de <HAL_TIM_PWM_Stop+0x66>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6a1a      	ldr	r2, [r3, #32]
 80083c4:	f240 4344 	movw	r3, #1092	; 0x444
 80083c8:	4013      	ands	r3, r2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d107      	bne.n	80083de <HAL_TIM_PWM_Stop+0x66>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80083dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6a1a      	ldr	r2, [r3, #32]
 80083e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80083e8:	4013      	ands	r3, r2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10f      	bne.n	800840e <HAL_TIM_PWM_Stop+0x96>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6a1a      	ldr	r2, [r3, #32]
 80083f4:	f240 4344 	movw	r3, #1092	; 0x444
 80083f8:	4013      	ands	r3, r2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d107      	bne.n	800840e <HAL_TIM_PWM_Stop+0x96>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f022 0201 	bic.w	r2, r2, #1
 800840c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d104      	bne.n	800841e <HAL_TIM_PWM_Stop+0xa6>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800841c:	e013      	b.n	8008446 <HAL_TIM_PWM_Stop+0xce>
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b04      	cmp	r3, #4
 8008422:	d104      	bne.n	800842e <HAL_TIM_PWM_Stop+0xb6>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800842c:	e00b      	b.n	8008446 <HAL_TIM_PWM_Stop+0xce>
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2b08      	cmp	r3, #8
 8008432:	d104      	bne.n	800843e <HAL_TIM_PWM_Stop+0xc6>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800843c:	e003      	b.n	8008446 <HAL_TIM_PWM_Stop+0xce>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	40012c00 	.word	0x40012c00
 8008454:	40013400 	.word	0x40013400

08008458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b02      	cmp	r3, #2
 800846c:	d122      	bne.n	80084b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b02      	cmp	r3, #2
 800847a:	d11b      	bne.n	80084b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f06f 0202 	mvn.w	r2, #2
 8008484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fa03 	bl	80088a6 <HAL_TIM_IC_CaptureCallback>
 80084a0:	e005      	b.n	80084ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f9f6 	bl	8008894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fa05 	bl	80088b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	f003 0304 	and.w	r3, r3, #4
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d122      	bne.n	8008508 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	f003 0304 	and.w	r3, r3, #4
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d11b      	bne.n	8008508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f06f 0204 	mvn.w	r2, #4
 80084d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2202      	movs	r2, #2
 80084de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d003      	beq.n	80084f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f9d9 	bl	80088a6 <HAL_TIM_IC_CaptureCallback>
 80084f4:	e005      	b.n	8008502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f9cc 	bl	8008894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f9db 	bl	80088b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b08      	cmp	r3, #8
 8008514:	d122      	bne.n	800855c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f003 0308 	and.w	r3, r3, #8
 8008520:	2b08      	cmp	r3, #8
 8008522:	d11b      	bne.n	800855c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f06f 0208 	mvn.w	r2, #8
 800852c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2204      	movs	r2, #4
 8008532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f9af 	bl	80088a6 <HAL_TIM_IC_CaptureCallback>
 8008548:	e005      	b.n	8008556 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f9a2 	bl	8008894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 f9b1 	bl	80088b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	f003 0310 	and.w	r3, r3, #16
 8008566:	2b10      	cmp	r3, #16
 8008568:	d122      	bne.n	80085b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f003 0310 	and.w	r3, r3, #16
 8008574:	2b10      	cmp	r3, #16
 8008576:	d11b      	bne.n	80085b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f06f 0210 	mvn.w	r2, #16
 8008580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2208      	movs	r2, #8
 8008586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	69db      	ldr	r3, [r3, #28]
 800858e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f985 	bl	80088a6 <HAL_TIM_IC_CaptureCallback>
 800859c:	e005      	b.n	80085aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f978 	bl	8008894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 f987 	bl	80088b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d10e      	bne.n	80085dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d107      	bne.n	80085dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f06f 0201 	mvn.w	r2, #1
 80085d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7fb fb3e 	bl	8003c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e6:	2b80      	cmp	r3, #128	; 0x80
 80085e8:	d10e      	bne.n	8008608 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f4:	2b80      	cmp	r3, #128	; 0x80
 80085f6:	d107      	bne.n	8008608 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fd84 	bl	8009110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008612:	2b40      	cmp	r3, #64	; 0x40
 8008614:	d10e      	bne.n	8008634 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008620:	2b40      	cmp	r3, #64	; 0x40
 8008622:	d107      	bne.n	8008634 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800862c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f94b 	bl	80088ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	f003 0320 	and.w	r3, r3, #32
 800863e:	2b20      	cmp	r3, #32
 8008640:	d10e      	bne.n	8008660 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b20      	cmp	r3, #32
 800864e:	d107      	bne.n	8008660 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f06f 0220 	mvn.w	r2, #32
 8008658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fd4f 	bl	80090fe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008660:	bf00      	nop
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800867a:	2b01      	cmp	r3, #1
 800867c:	d101      	bne.n	8008682 <HAL_TIM_OC_ConfigChannel+0x1a>
 800867e:	2302      	movs	r3, #2
 8008680:	e046      	b.n	8008710 <HAL_TIM_OC_ConfigChannel+0xa8>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b0c      	cmp	r3, #12
 800868e:	d839      	bhi.n	8008704 <HAL_TIM_OC_ConfigChannel+0x9c>
 8008690:	a201      	add	r2, pc, #4	; (adr r2, 8008698 <HAL_TIM_OC_ConfigChannel+0x30>)
 8008692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008696:	bf00      	nop
 8008698:	080086cd 	.word	0x080086cd
 800869c:	08008705 	.word	0x08008705
 80086a0:	08008705 	.word	0x08008705
 80086a4:	08008705 	.word	0x08008705
 80086a8:	080086db 	.word	0x080086db
 80086ac:	08008705 	.word	0x08008705
 80086b0:	08008705 	.word	0x08008705
 80086b4:	08008705 	.word	0x08008705
 80086b8:	080086e9 	.word	0x080086e9
 80086bc:	08008705 	.word	0x08008705
 80086c0:	08008705 	.word	0x08008705
 80086c4:	08008705 	.word	0x08008705
 80086c8:	080086f7 	.word	0x080086f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68b9      	ldr	r1, [r7, #8]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 f97c 	bl	80089d0 <TIM_OC1_SetConfig>
      break;
 80086d8:	e015      	b.n	8008706 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f000 f9e5 	bl	8008ab0 <TIM_OC2_SetConfig>
      break;
 80086e6:	e00e      	b.n	8008706 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68b9      	ldr	r1, [r7, #8]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fa52 	bl	8008b98 <TIM_OC3_SetConfig>
      break;
 80086f4:	e007      	b.n	8008706 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68b9      	ldr	r1, [r7, #8]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 fabf 	bl	8008c80 <TIM_OC4_SetConfig>
      break;
 8008702:	e000      	b.n	8008706 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8008704:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800872a:	2b01      	cmp	r3, #1
 800872c:	d101      	bne.n	8008732 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800872e:	2302      	movs	r3, #2
 8008730:	e0ac      	b.n	800888c <HAL_TIM_PWM_ConfigChannel+0x174>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b0c      	cmp	r3, #12
 800873e:	f200 809f 	bhi.w	8008880 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008742:	a201      	add	r2, pc, #4	; (adr r2, 8008748 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008748:	0800877d 	.word	0x0800877d
 800874c:	08008881 	.word	0x08008881
 8008750:	08008881 	.word	0x08008881
 8008754:	08008881 	.word	0x08008881
 8008758:	080087bd 	.word	0x080087bd
 800875c:	08008881 	.word	0x08008881
 8008760:	08008881 	.word	0x08008881
 8008764:	08008881 	.word	0x08008881
 8008768:	080087ff 	.word	0x080087ff
 800876c:	08008881 	.word	0x08008881
 8008770:	08008881 	.word	0x08008881
 8008774:	08008881 	.word	0x08008881
 8008778:	0800883f 	.word	0x0800883f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	68b9      	ldr	r1, [r7, #8]
 8008782:	4618      	mov	r0, r3
 8008784:	f000 f924 	bl	80089d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699a      	ldr	r2, [r3, #24]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0208 	orr.w	r2, r2, #8
 8008796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f022 0204 	bic.w	r2, r2, #4
 80087a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6999      	ldr	r1, [r3, #24]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	691a      	ldr	r2, [r3, #16]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	619a      	str	r2, [r3, #24]
      break;
 80087ba:	e062      	b.n	8008882 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68b9      	ldr	r1, [r7, #8]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 f974 	bl	8008ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	699a      	ldr	r2, [r3, #24]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699a      	ldr	r2, [r3, #24]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6999      	ldr	r1, [r3, #24]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	021a      	lsls	r2, r3, #8
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	619a      	str	r2, [r3, #24]
      break;
 80087fc:	e041      	b.n	8008882 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68b9      	ldr	r1, [r7, #8]
 8008804:	4618      	mov	r0, r3
 8008806:	f000 f9c7 	bl	8008b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	69da      	ldr	r2, [r3, #28]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f042 0208 	orr.w	r2, r2, #8
 8008818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	69da      	ldr	r2, [r3, #28]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 0204 	bic.w	r2, r2, #4
 8008828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	69d9      	ldr	r1, [r3, #28]
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	691a      	ldr	r2, [r3, #16]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	430a      	orrs	r2, r1
 800883a:	61da      	str	r2, [r3, #28]
      break;
 800883c:	e021      	b.n	8008882 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68b9      	ldr	r1, [r7, #8]
 8008844:	4618      	mov	r0, r3
 8008846:	f000 fa1b 	bl	8008c80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	69da      	ldr	r2, [r3, #28]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69da      	ldr	r2, [r3, #28]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69d9      	ldr	r1, [r3, #28]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	021a      	lsls	r2, r3, #8
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	61da      	str	r2, [r3, #28]
      break;
 800887e:	e000      	b.n	8008882 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008880:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bc80      	pop	{r7}
 80088a4:	4770      	bx	lr

080088a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b083      	sub	sp, #12
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088ae:	bf00      	nop
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bc80      	pop	{r7}
 80088b6:	4770      	bx	lr

080088b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bc80      	pop	{r7}
 80088c8:	4770      	bx	lr

080088ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088d2:	bf00      	nop
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bc80      	pop	{r7}
 80088da:	4770      	bx	lr

080088dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a33      	ldr	r2, [pc, #204]	; (80089bc <TIM_Base_SetConfig+0xe0>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d013      	beq.n	800891c <TIM_Base_SetConfig+0x40>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a32      	ldr	r2, [pc, #200]	; (80089c0 <TIM_Base_SetConfig+0xe4>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d00f      	beq.n	800891c <TIM_Base_SetConfig+0x40>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008902:	d00b      	beq.n	800891c <TIM_Base_SetConfig+0x40>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a2f      	ldr	r2, [pc, #188]	; (80089c4 <TIM_Base_SetConfig+0xe8>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d007      	beq.n	800891c <TIM_Base_SetConfig+0x40>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a2e      	ldr	r2, [pc, #184]	; (80089c8 <TIM_Base_SetConfig+0xec>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d003      	beq.n	800891c <TIM_Base_SetConfig+0x40>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a2d      	ldr	r2, [pc, #180]	; (80089cc <TIM_Base_SetConfig+0xf0>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d108      	bne.n	800892e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	4313      	orrs	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a22      	ldr	r2, [pc, #136]	; (80089bc <TIM_Base_SetConfig+0xe0>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d013      	beq.n	800895e <TIM_Base_SetConfig+0x82>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a21      	ldr	r2, [pc, #132]	; (80089c0 <TIM_Base_SetConfig+0xe4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d00f      	beq.n	800895e <TIM_Base_SetConfig+0x82>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008944:	d00b      	beq.n	800895e <TIM_Base_SetConfig+0x82>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a1e      	ldr	r2, [pc, #120]	; (80089c4 <TIM_Base_SetConfig+0xe8>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d007      	beq.n	800895e <TIM_Base_SetConfig+0x82>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a1d      	ldr	r2, [pc, #116]	; (80089c8 <TIM_Base_SetConfig+0xec>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d003      	beq.n	800895e <TIM_Base_SetConfig+0x82>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a1c      	ldr	r2, [pc, #112]	; (80089cc <TIM_Base_SetConfig+0xf0>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d108      	bne.n	8008970 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	689a      	ldr	r2, [r3, #8]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a09      	ldr	r2, [pc, #36]	; (80089bc <TIM_Base_SetConfig+0xe0>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d003      	beq.n	80089a4 <TIM_Base_SetConfig+0xc8>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a08      	ldr	r2, [pc, #32]	; (80089c0 <TIM_Base_SetConfig+0xe4>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d103      	bne.n	80089ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	691a      	ldr	r2, [r3, #16]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	615a      	str	r2, [r3, #20]
}
 80089b2:	bf00      	nop
 80089b4:	3714      	adds	r7, #20
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bc80      	pop	{r7}
 80089ba:	4770      	bx	lr
 80089bc:	40012c00 	.word	0x40012c00
 80089c0:	40013400 	.word	0x40013400
 80089c4:	40000400 	.word	0x40000400
 80089c8:	40000800 	.word	0x40000800
 80089cc:	40000c00 	.word	0x40000c00

080089d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b087      	sub	sp, #28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	f023 0201 	bic.w	r2, r3, #1
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f023 0303 	bic.w	r3, r3, #3
 8008a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f023 0302 	bic.w	r3, r3, #2
 8008a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a20      	ldr	r2, [pc, #128]	; (8008aa8 <TIM_OC1_SetConfig+0xd8>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d003      	beq.n	8008a34 <TIM_OC1_SetConfig+0x64>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a1f      	ldr	r2, [pc, #124]	; (8008aac <TIM_OC1_SetConfig+0xdc>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d10c      	bne.n	8008a4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f023 0308 	bic.w	r3, r3, #8
 8008a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f023 0304 	bic.w	r3, r3, #4
 8008a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a15      	ldr	r2, [pc, #84]	; (8008aa8 <TIM_OC1_SetConfig+0xd8>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d003      	beq.n	8008a5e <TIM_OC1_SetConfig+0x8e>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a14      	ldr	r2, [pc, #80]	; (8008aac <TIM_OC1_SetConfig+0xdc>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d111      	bne.n	8008a82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	621a      	str	r2, [r3, #32]
}
 8008a9c:	bf00      	nop
 8008a9e:	371c      	adds	r7, #28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bc80      	pop	{r7}
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	40012c00 	.word	0x40012c00
 8008aac:	40013400 	.word	0x40013400

08008ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	f023 0210 	bic.w	r2, r3, #16
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	021b      	lsls	r3, r3, #8
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f023 0320 	bic.w	r3, r3, #32
 8008afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a21      	ldr	r2, [pc, #132]	; (8008b90 <TIM_OC2_SetConfig+0xe0>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d003      	beq.n	8008b18 <TIM_OC2_SetConfig+0x68>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a20      	ldr	r2, [pc, #128]	; (8008b94 <TIM_OC2_SetConfig+0xe4>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d10d      	bne.n	8008b34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	011b      	lsls	r3, r3, #4
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a16      	ldr	r2, [pc, #88]	; (8008b90 <TIM_OC2_SetConfig+0xe0>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d003      	beq.n	8008b44 <TIM_OC2_SetConfig+0x94>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a15      	ldr	r2, [pc, #84]	; (8008b94 <TIM_OC2_SetConfig+0xe4>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d113      	bne.n	8008b6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	699b      	ldr	r3, [r3, #24]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	693a      	ldr	r2, [r7, #16]
 8008b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	621a      	str	r2, [r3, #32]
}
 8008b86:	bf00      	nop
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bc80      	pop	{r7}
 8008b8e:	4770      	bx	lr
 8008b90:	40012c00 	.word	0x40012c00
 8008b94:	40013400 	.word	0x40013400

08008b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 0303 	bic.w	r3, r3, #3
 8008bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	021b      	lsls	r3, r3, #8
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a21      	ldr	r2, [pc, #132]	; (8008c78 <TIM_OC3_SetConfig+0xe0>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d003      	beq.n	8008bfe <TIM_OC3_SetConfig+0x66>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a20      	ldr	r2, [pc, #128]	; (8008c7c <TIM_OC3_SetConfig+0xe4>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d10d      	bne.n	8008c1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	021b      	lsls	r3, r3, #8
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a16      	ldr	r2, [pc, #88]	; (8008c78 <TIM_OC3_SetConfig+0xe0>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d003      	beq.n	8008c2a <TIM_OC3_SetConfig+0x92>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a15      	ldr	r2, [pc, #84]	; (8008c7c <TIM_OC3_SetConfig+0xe4>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d113      	bne.n	8008c52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	011b      	lsls	r3, r3, #4
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	011b      	lsls	r3, r3, #4
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	621a      	str	r2, [r3, #32]
}
 8008c6c:	bf00      	nop
 8008c6e:	371c      	adds	r7, #28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bc80      	pop	{r7}
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	40012c00 	.word	0x40012c00
 8008c7c:	40013400 	.word	0x40013400

08008c80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	021b      	lsls	r3, r3, #8
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	031b      	lsls	r3, r3, #12
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a11      	ldr	r2, [pc, #68]	; (8008d20 <TIM_OC4_SetConfig+0xa0>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d003      	beq.n	8008ce8 <TIM_OC4_SetConfig+0x68>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a10      	ldr	r2, [pc, #64]	; (8008d24 <TIM_OC4_SetConfig+0xa4>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d109      	bne.n	8008cfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	695b      	ldr	r3, [r3, #20]
 8008cf4:	019b      	lsls	r3, r3, #6
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	621a      	str	r2, [r3, #32]
}
 8008d16:	bf00      	nop
 8008d18:	371c      	adds	r7, #28
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bc80      	pop	{r7}
 8008d1e:	4770      	bx	lr
 8008d20:	40012c00 	.word	0x40012c00
 8008d24:	40013400 	.word	0x40013400

08008d28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	f003 031f 	and.w	r3, r3, #31
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6a1a      	ldr	r2, [r3, #32]
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	43db      	mvns	r3, r3
 8008d4a:	401a      	ands	r2, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6a1a      	ldr	r2, [r3, #32]
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f003 031f 	and.w	r3, r3, #31
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d60:	431a      	orrs	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	621a      	str	r2, [r3, #32]
}
 8008d66:	bf00      	nop
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bc80      	pop	{r7}
 8008d6e:	4770      	bx	lr

08008d70 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d109      	bne.n	8008d94 <HAL_TIMEx_PWMN_Start+0x24>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	bf14      	ite	ne
 8008d8c:	2301      	movne	r3, #1
 8008d8e:	2300      	moveq	r3, #0
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	e022      	b.n	8008dda <HAL_TIMEx_PWMN_Start+0x6a>
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b04      	cmp	r3, #4
 8008d98:	d109      	bne.n	8008dae <HAL_TIMEx_PWMN_Start+0x3e>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	bf14      	ite	ne
 8008da6:	2301      	movne	r3, #1
 8008da8:	2300      	moveq	r3, #0
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	e015      	b.n	8008dda <HAL_TIMEx_PWMN_Start+0x6a>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d109      	bne.n	8008dc8 <HAL_TIMEx_PWMN_Start+0x58>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	bf14      	ite	ne
 8008dc0:	2301      	movne	r3, #1
 8008dc2:	2300      	moveq	r3, #0
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	e008      	b.n	8008dda <HAL_TIMEx_PWMN_Start+0x6a>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	bf14      	ite	ne
 8008dd4:	2301      	movne	r3, #1
 8008dd6:	2300      	moveq	r3, #0
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e063      	b.n	8008eaa <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d104      	bne.n	8008df2 <HAL_TIMEx_PWMN_Start+0x82>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008df0:	e013      	b.n	8008e1a <HAL_TIMEx_PWMN_Start+0xaa>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d104      	bne.n	8008e02 <HAL_TIMEx_PWMN_Start+0x92>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e00:	e00b      	b.n	8008e1a <HAL_TIMEx_PWMN_Start+0xaa>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d104      	bne.n	8008e12 <HAL_TIMEx_PWMN_Start+0xa2>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e10:	e003      	b.n	8008e1a <HAL_TIMEx_PWMN_Start+0xaa>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2202      	movs	r2, #2
 8008e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2204      	movs	r2, #4
 8008e20:	6839      	ldr	r1, [r7, #0]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 f97d 	bl	8009122 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a1d      	ldr	r2, [pc, #116]	; (8008eb4 <HAL_TIMEx_PWMN_Start+0x144>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d018      	beq.n	8008e74 <HAL_TIMEx_PWMN_Start+0x104>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a1c      	ldr	r2, [pc, #112]	; (8008eb8 <HAL_TIMEx_PWMN_Start+0x148>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d013      	beq.n	8008e74 <HAL_TIMEx_PWMN_Start+0x104>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e54:	d00e      	beq.n	8008e74 <HAL_TIMEx_PWMN_Start+0x104>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a18      	ldr	r2, [pc, #96]	; (8008ebc <HAL_TIMEx_PWMN_Start+0x14c>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d009      	beq.n	8008e74 <HAL_TIMEx_PWMN_Start+0x104>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a16      	ldr	r2, [pc, #88]	; (8008ec0 <HAL_TIMEx_PWMN_Start+0x150>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d004      	beq.n	8008e74 <HAL_TIMEx_PWMN_Start+0x104>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a15      	ldr	r2, [pc, #84]	; (8008ec4 <HAL_TIMEx_PWMN_Start+0x154>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d111      	bne.n	8008e98 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f003 0307 	and.w	r3, r3, #7
 8008e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2b06      	cmp	r3, #6
 8008e84:	d010      	beq.n	8008ea8 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f042 0201 	orr.w	r2, r2, #1
 8008e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e96:	e007      	b.n	8008ea8 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f042 0201 	orr.w	r2, r2, #1
 8008ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	40012c00 	.word	0x40012c00
 8008eb8:	40013400 	.word	0x40013400
 8008ebc:	40000400 	.word	0x40000400
 8008ec0:	40000800 	.word	0x40000800
 8008ec4:	40000c00 	.word	0x40000c00

08008ec8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f000 f921 	bl	8009122 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6a1a      	ldr	r2, [r3, #32]
 8008ee6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008eea:	4013      	ands	r3, r2
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10f      	bne.n	8008f10 <HAL_TIMEx_PWMN_Stop+0x48>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6a1a      	ldr	r2, [r3, #32]
 8008ef6:	f240 4344 	movw	r3, #1092	; 0x444
 8008efa:	4013      	ands	r3, r2
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d107      	bne.n	8008f10 <HAL_TIMEx_PWMN_Stop+0x48>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6a1a      	ldr	r2, [r3, #32]
 8008f16:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10f      	bne.n	8008f40 <HAL_TIMEx_PWMN_Stop+0x78>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6a1a      	ldr	r2, [r3, #32]
 8008f26:	f240 4344 	movw	r3, #1092	; 0x444
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d107      	bne.n	8008f40 <HAL_TIMEx_PWMN_Stop+0x78>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f022 0201 	bic.w	r2, r2, #1
 8008f3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d104      	bne.n	8008f50 <HAL_TIMEx_PWMN_Stop+0x88>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f4e:	e013      	b.n	8008f78 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2b04      	cmp	r3, #4
 8008f54:	d104      	bne.n	8008f60 <HAL_TIMEx_PWMN_Stop+0x98>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f5e:	e00b      	b.n	8008f78 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2b08      	cmp	r3, #8
 8008f64:	d104      	bne.n	8008f70 <HAL_TIMEx_PWMN_Stop+0xa8>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f6e:	e003      	b.n	8008f78 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
	...

08008f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d101      	bne.n	8008f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e050      	b.n	800903e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a1b      	ldr	r2, [pc, #108]	; (8009048 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d018      	beq.n	8009012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a19      	ldr	r2, [pc, #100]	; (800904c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d013      	beq.n	8009012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ff2:	d00e      	beq.n	8009012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a15      	ldr	r2, [pc, #84]	; (8009050 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d009      	beq.n	8009012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a14      	ldr	r2, [pc, #80]	; (8009054 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d004      	beq.n	8009012 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a12      	ldr	r2, [pc, #72]	; (8009058 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d10c      	bne.n	800902c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	4313      	orrs	r3, r2
 8009022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	bc80      	pop	{r7}
 8009046:	4770      	bx	lr
 8009048:	40012c00 	.word	0x40012c00
 800904c:	40013400 	.word	0x40013400
 8009050:	40000400 	.word	0x40000400
 8009054:	40000800 	.word	0x40000800
 8009058:	40000c00 	.word	0x40000c00

0800905c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009066:	2300      	movs	r3, #0
 8009068:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009070:	2b01      	cmp	r3, #1
 8009072:	d101      	bne.n	8009078 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009074:	2302      	movs	r3, #2
 8009076:	e03d      	b.n	80090f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	4313      	orrs	r3, r2
 800908c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	4313      	orrs	r3, r2
 800909a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	4313      	orrs	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bc80      	pop	{r7}
 80090fc:	4770      	bx	lr

080090fe <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090fe:	b480      	push	{r7}
 8009100:	b083      	sub	sp, #12
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009106:	bf00      	nop
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	bc80      	pop	{r7}
 800910e:	4770      	bx	lr

08009110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	bc80      	pop	{r7}
 8009120:	4770      	bx	lr

08009122 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009122:	b480      	push	{r7}
 8009124:	b087      	sub	sp, #28
 8009126:	af00      	add	r7, sp, #0
 8009128:	60f8      	str	r0, [r7, #12]
 800912a:	60b9      	str	r1, [r7, #8]
 800912c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f003 031f 	and.w	r3, r3, #31
 8009134:	2204      	movs	r2, #4
 8009136:	fa02 f303 	lsl.w	r3, r2, r3
 800913a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6a1a      	ldr	r2, [r3, #32]
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	43db      	mvns	r3, r3
 8009144:	401a      	ands	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6a1a      	ldr	r2, [r3, #32]
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	f003 031f 	and.w	r3, r3, #31
 8009154:	6879      	ldr	r1, [r7, #4]
 8009156:	fa01 f303 	lsl.w	r3, r1, r3
 800915a:	431a      	orrs	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	621a      	str	r2, [r3, #32]
}
 8009160:	bf00      	nop
 8009162:	371c      	adds	r7, #28
 8009164:	46bd      	mov	sp, r7
 8009166:	bc80      	pop	{r7}
 8009168:	4770      	bx	lr

0800916a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b082      	sub	sp, #8
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e03f      	b.n	80091fc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	d106      	bne.n	8009196 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7fc f937 	bl	8005404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2224      	movs	r2, #36	; 0x24
 800919a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68da      	ldr	r2, [r3, #12]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fd64 	bl	8009c7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	691a      	ldr	r2, [r3, #16]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	695a      	ldr	r2, [r3, #20]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68da      	ldr	r2, [r3, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2220      	movs	r2, #32
 80091ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2220      	movs	r2, #32
 80091f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	4613      	mov	r3, r2
 8009210:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b20      	cmp	r3, #32
 800921c:	d153      	bne.n	80092c6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <HAL_UART_Transmit_DMA+0x26>
 8009224:	88fb      	ldrh	r3, [r7, #6]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d101      	bne.n	800922e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e04c      	b.n	80092c8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009234:	2b01      	cmp	r3, #1
 8009236:	d101      	bne.n	800923c <HAL_UART_Transmit_DMA+0x38>
 8009238:	2302      	movs	r3, #2
 800923a:	e045      	b.n	80092c8 <HAL_UART_Transmit_DMA+0xc4>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	88fa      	ldrh	r2, [r7, #6]
 800924e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	88fa      	ldrh	r2, [r7, #6]
 8009254:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2221      	movs	r2, #33	; 0x21
 8009260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009268:	4a19      	ldr	r2, [pc, #100]	; (80092d0 <HAL_UART_Transmit_DMA+0xcc>)
 800926a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009270:	4a18      	ldr	r2, [pc, #96]	; (80092d4 <HAL_UART_Transmit_DMA+0xd0>)
 8009272:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009278:	4a17      	ldr	r2, [pc, #92]	; (80092d8 <HAL_UART_Transmit_DMA+0xd4>)
 800927a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009280:	2200      	movs	r2, #0
 8009282:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8009284:	f107 0308 	add.w	r3, r7, #8
 8009288:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	6819      	ldr	r1, [r3, #0]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3304      	adds	r3, #4
 8009298:	461a      	mov	r2, r3
 800929a:	88fb      	ldrh	r3, [r7, #6]
 800929c:	f7fd fbe4 	bl	8006a68 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092a8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	695a      	ldr	r2, [r3, #20]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80092c0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	e000      	b.n	80092c8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80092c6:	2302      	movs	r3, #2
  }
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3718      	adds	r7, #24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	08009719 	.word	0x08009719
 80092d4:	0800976b 	.word	0x0800976b
 80092d8:	08009853 	.word	0x08009853

080092dc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	4613      	mov	r3, r2
 80092e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b20      	cmp	r3, #32
 80092f4:	d13c      	bne.n	8009370 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d002      	beq.n	8009302 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80092fc:	88fb      	ldrh	r3, [r7, #6]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e035      	b.n	8009372 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800930c:	2b01      	cmp	r3, #1
 800930e:	d101      	bne.n	8009314 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009310:	2302      	movs	r3, #2
 8009312:	e02e      	b.n	8009372 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2201      	movs	r2, #1
 8009320:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009322:	88fb      	ldrh	r3, [r7, #6]
 8009324:	461a      	mov	r2, r3
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 fadd 	bl	80098e8 <UART_Start_Receive_DMA>
 800932e:	4603      	mov	r3, r0
 8009330:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009332:	7dfb      	ldrb	r3, [r7, #23]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d119      	bne.n	800936c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933c:	2b01      	cmp	r3, #1
 800933e:	d113      	bne.n	8009368 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009340:	2300      	movs	r3, #0
 8009342:	613b      	str	r3, [r7, #16]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	613b      	str	r3, [r7, #16]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	613b      	str	r3, [r7, #16]
 8009354:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68da      	ldr	r2, [r3, #12]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f042 0210 	orr.w	r2, r2, #16
 8009364:	60da      	str	r2, [r3, #12]
 8009366:	e001      	b.n	800936c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	e000      	b.n	8009372 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8009370:	2302      	movs	r3, #2
  }
}
 8009372:	4618      	mov	r0, r3
 8009374:	3718      	adds	r7, #24
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
	...

0800937c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08a      	sub	sp, #40	; 0x28
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800939c:	2300      	movs	r3, #0
 800939e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80093a0:	2300      	movs	r3, #0
 80093a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	f003 030f 	and.w	r3, r3, #15
 80093aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10d      	bne.n	80093ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80093b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b4:	f003 0320 	and.w	r3, r3, #32
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d008      	beq.n	80093ce <HAL_UART_IRQHandler+0x52>
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	f003 0320 	and.w	r3, r3, #32
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d003      	beq.n	80093ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fbae 	bl	8009b28 <UART_Receive_IT>
      return;
 80093cc:	e17b      	b.n	80096c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 80b1 	beq.w	8009538 <HAL_UART_IRQHandler+0x1bc>
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d105      	bne.n	80093ec <HAL_UART_IRQHandler+0x70>
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f000 80a6 	beq.w	8009538 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00a      	beq.n	800940c <HAL_UART_IRQHandler+0x90>
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d005      	beq.n	800940c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009404:	f043 0201 	orr.w	r2, r3, #1
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	f003 0304 	and.w	r3, r3, #4
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <HAL_UART_IRQHandler+0xb0>
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	2b00      	cmp	r3, #0
 800941e:	d005      	beq.n	800942c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009424:	f043 0202 	orr.w	r2, r3, #2
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800942c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <HAL_UART_IRQHandler+0xd0>
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	2b00      	cmp	r3, #0
 800943e:	d005      	beq.n	800944c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009444:	f043 0204 	orr.w	r2, r3, #4
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	f003 0308 	and.w	r3, r3, #8
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00f      	beq.n	8009476 <HAL_UART_IRQHandler+0xfa>
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	f003 0320 	and.w	r3, r3, #32
 800945c:	2b00      	cmp	r3, #0
 800945e:	d104      	bne.n	800946a <HAL_UART_IRQHandler+0xee>
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d005      	beq.n	8009476 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946e:	f043 0208 	orr.w	r2, r3, #8
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 811e 	beq.w	80096bc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	f003 0320 	and.w	r3, r3, #32
 8009486:	2b00      	cmp	r3, #0
 8009488:	d007      	beq.n	800949a <HAL_UART_IRQHandler+0x11e>
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	f003 0320 	and.w	r3, r3, #32
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fb47 	bl	8009b28 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	bf14      	ite	ne
 80094a8:	2301      	movne	r3, #1
 80094aa:	2300      	moveq	r3, #0
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b4:	f003 0308 	and.w	r3, r3, #8
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d102      	bne.n	80094c2 <HAL_UART_IRQHandler+0x146>
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d031      	beq.n	8009526 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fa89 	bl	80099da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d023      	beq.n	800951e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	695a      	ldr	r2, [r3, #20]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d013      	beq.n	8009516 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f2:	4a76      	ldr	r2, [pc, #472]	; (80096cc <HAL_UART_IRQHandler+0x350>)
 80094f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7fd fb4e 	bl	8006b9c <HAL_DMA_Abort_IT>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d016      	beq.n	8009534 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009510:	4610      	mov	r0, r2
 8009512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009514:	e00e      	b.n	8009534 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f8f5 	bl	8009706 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800951c:	e00a      	b.n	8009534 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f8f1 	bl	8009706 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009524:	e006      	b.n	8009534 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f8ed 	bl	8009706 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009532:	e0c3      	b.n	80096bc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009534:	bf00      	nop
    return;
 8009536:	e0c1      	b.n	80096bc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953c:	2b01      	cmp	r3, #1
 800953e:	f040 80a1 	bne.w	8009684 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8009542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009544:	f003 0310 	and.w	r3, r3, #16
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 809b 	beq.w	8009684 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800954e:	6a3b      	ldr	r3, [r7, #32]
 8009550:	f003 0310 	and.w	r3, r3, #16
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 8095 	beq.w	8009684 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	60fb      	str	r3, [r7, #12]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	60fb      	str	r3, [r7, #12]
 800956e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800957a:	2b00      	cmp	r3, #0
 800957c:	d04e      	beq.n	800961c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	685b      	ldr	r3, [r3, #4]
 8009586:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009588:	8a3b      	ldrh	r3, [r7, #16]
 800958a:	2b00      	cmp	r3, #0
 800958c:	f000 8098 	beq.w	80096c0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009594:	8a3a      	ldrh	r2, [r7, #16]
 8009596:	429a      	cmp	r2, r3
 8009598:	f080 8092 	bcs.w	80096c0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	8a3a      	ldrh	r2, [r7, #16]
 80095a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	2b20      	cmp	r3, #32
 80095aa:	d02b      	beq.n	8009604 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68da      	ldr	r2, [r3, #12]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	695a      	ldr	r2, [r3, #20]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f022 0201 	bic.w	r2, r2, #1
 80095ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	695a      	ldr	r2, [r3, #20]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2220      	movs	r2, #32
 80095e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68da      	ldr	r2, [r3, #12]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f022 0210 	bic.w	r2, r2, #16
 80095f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fd fa91 	bl	8006b26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800960c:	b29b      	uxth	r3, r3
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	b29b      	uxth	r3, r3
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7f8 fec3 	bl	80023a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800961a:	e051      	b.n	80096c0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009624:	b29b      	uxth	r3, r3
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800962e:	b29b      	uxth	r3, r3
 8009630:	2b00      	cmp	r3, #0
 8009632:	d047      	beq.n	80096c4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8009634:	8a7b      	ldrh	r3, [r7, #18]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d044      	beq.n	80096c4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68da      	ldr	r2, [r3, #12]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009648:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	695a      	ldr	r2, [r3, #20]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f022 0201 	bic.w	r2, r2, #1
 8009658:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2220      	movs	r2, #32
 800965e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f022 0210 	bic.w	r2, r2, #16
 8009676:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009678:	8a7b      	ldrh	r3, [r7, #18]
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7f8 fe8f 	bl	80023a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009682:	e01f      	b.n	80096c4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800968a:	2b00      	cmp	r3, #0
 800968c:	d008      	beq.n	80096a0 <HAL_UART_IRQHandler+0x324>
 800968e:	6a3b      	ldr	r3, [r7, #32]
 8009690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009694:	2b00      	cmp	r3, #0
 8009696:	d003      	beq.n	80096a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f9de 	bl	8009a5a <UART_Transmit_IT>
    return;
 800969e:	e012      	b.n	80096c6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00d      	beq.n	80096c6 <HAL_UART_IRQHandler+0x34a>
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d008      	beq.n	80096c6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fa1f 	bl	8009af8 <UART_EndTransmit_IT>
    return;
 80096ba:	e004      	b.n	80096c6 <HAL_UART_IRQHandler+0x34a>
    return;
 80096bc:	bf00      	nop
 80096be:	e002      	b.n	80096c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80096c0:	bf00      	nop
 80096c2:	e000      	b.n	80096c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80096c4:	bf00      	nop
  }
}
 80096c6:	3728      	adds	r7, #40	; 0x28
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	08009a33 	.word	0x08009a33

080096d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	bc80      	pop	{r7}
 80096e0:	4770      	bx	lr

080096e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80096e2:	b480      	push	{r7}
 80096e4:	b083      	sub	sp, #12
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80096ea:	bf00      	nop
 80096ec:	370c      	adds	r7, #12
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bc80      	pop	{r7}
 80096f2:	4770      	bx	lr

080096f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	bc80      	pop	{r7}
 8009704:	4770      	bx	lr

08009706 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009706:	b480      	push	{r7}
 8009708:	b083      	sub	sp, #12
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800970e:	bf00      	nop
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	bc80      	pop	{r7}
 8009716:	4770      	bx	lr

08009718 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009724:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0320 	and.w	r3, r3, #32
 8009730:	2b00      	cmp	r3, #0
 8009732:	d113      	bne.n	800975c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	695a      	ldr	r2, [r3, #20]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009748:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68da      	ldr	r2, [r3, #12]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009758:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800975a:	e002      	b.n	8009762 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f7f8 fe0b 	bl	8002378 <HAL_UART_TxCpltCallback>
}
 8009762:	bf00      	nop
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b084      	sub	sp, #16
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009776:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f7ff ffa9 	bl	80096d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800977e:	bf00      	nop
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b084      	sub	sp, #16
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009792:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0320 	and.w	r3, r3, #32
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d12a      	bne.n	80097f8 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68da      	ldr	r2, [r3, #12]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097b6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	695a      	ldr	r2, [r3, #20]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f022 0201 	bic.w	r2, r2, #1
 80097c6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	695a      	ldr	r2, [r3, #20]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097d6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2220      	movs	r2, #32
 80097dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d107      	bne.n	80097f8 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68da      	ldr	r2, [r3, #12]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f022 0210 	bic.w	r2, r2, #16
 80097f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d106      	bne.n	800980e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009804:	4619      	mov	r1, r3
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f7f8 fdca 	bl	80023a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800980c:	e002      	b.n	8009814 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f7ff ff67 	bl	80096e2 <HAL_UART_RxCpltCallback>
}
 8009814:	bf00      	nop
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009828:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982e:	2b01      	cmp	r3, #1
 8009830:	d108      	bne.n	8009844 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009836:	085b      	lsrs	r3, r3, #1
 8009838:	b29b      	uxth	r3, r3
 800983a:	4619      	mov	r1, r3
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f7f8 fdaf 	bl	80023a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009842:	e002      	b.n	800984a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f7ff ff55 	bl	80096f4 <HAL_UART_RxHalfCpltCallback>
}
 800984a:	bf00      	nop
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800985a:	2300      	movs	r3, #0
 800985c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009862:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	695b      	ldr	r3, [r3, #20]
 800986a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800986e:	2b00      	cmp	r3, #0
 8009870:	bf14      	ite	ne
 8009872:	2301      	movne	r3, #1
 8009874:	2300      	moveq	r3, #0
 8009876:	b2db      	uxtb	r3, r3
 8009878:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b21      	cmp	r3, #33	; 0x21
 8009884:	d108      	bne.n	8009898 <UART_DMAError+0x46>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d005      	beq.n	8009898 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	2200      	movs	r2, #0
 8009890:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009892:	68b8      	ldr	r0, [r7, #8]
 8009894:	f000 f88c 	bl	80099b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	bf14      	ite	ne
 80098a6:	2301      	movne	r3, #1
 80098a8:	2300      	moveq	r3, #0
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b22      	cmp	r3, #34	; 0x22
 80098b8:	d108      	bne.n	80098cc <UART_DMAError+0x7a>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d005      	beq.n	80098cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	2200      	movs	r2, #0
 80098c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80098c6:	68b8      	ldr	r0, [r7, #8]
 80098c8:	f000 f887 	bl	80099da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d0:	f043 0210 	orr.w	r2, r3, #16
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098d8:	68b8      	ldr	r0, [r7, #8]
 80098da:	f7ff ff14 	bl	8009706 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098de:	bf00      	nop
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
	...

080098e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4613      	mov	r3, r2
 80098f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	88fa      	ldrh	r2, [r7, #6]
 8009900:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2222      	movs	r2, #34	; 0x22
 800990c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009914:	4a23      	ldr	r2, [pc, #140]	; (80099a4 <UART_Start_Receive_DMA+0xbc>)
 8009916:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991c:	4a22      	ldr	r2, [pc, #136]	; (80099a8 <UART_Start_Receive_DMA+0xc0>)
 800991e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009924:	4a21      	ldr	r2, [pc, #132]	; (80099ac <UART_Start_Receive_DMA+0xc4>)
 8009926:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992c:	2200      	movs	r2, #0
 800992e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009930:	f107 0308 	add.w	r3, r7, #8
 8009934:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	3304      	adds	r3, #4
 8009940:	4619      	mov	r1, r3
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	88fb      	ldrh	r3, [r7, #6]
 8009948:	f7fd f88e 	bl	8006a68 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800994c:	2300      	movs	r3, #0
 800994e:	613b      	str	r3, [r7, #16]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	613b      	str	r3, [r7, #16]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	613b      	str	r3, [r7, #16]
 8009960:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68da      	ldr	r2, [r3, #12]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009978:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	695a      	ldr	r2, [r3, #20]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f042 0201 	orr.w	r2, r2, #1
 8009988:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	695a      	ldr	r2, [r3, #20]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009998:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	08009787 	.word	0x08009787
 80099a8:	0800981d 	.word	0x0800981d
 80099ac:	08009853 	.word	0x08009853

080099b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68da      	ldr	r2, [r3, #12]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80099c6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2220      	movs	r2, #32
 80099cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bc80      	pop	{r7}
 80099d8:	4770      	bx	lr

080099da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099da:	b480      	push	{r7}
 80099dc:	b083      	sub	sp, #12
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68da      	ldr	r2, [r3, #12]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80099f0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	695a      	ldr	r2, [r3, #20]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f022 0201 	bic.w	r2, r2, #1
 8009a00:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d107      	bne.n	8009a1a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68da      	ldr	r2, [r3, #12]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f022 0210 	bic.w	r2, r2, #16
 8009a18:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bc80      	pop	{r7}
 8009a30:	4770      	bx	lr

08009a32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2200      	movs	r2, #0
 8009a44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f7ff fe5a 	bl	8009706 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a52:	bf00      	nop
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}

08009a5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b085      	sub	sp, #20
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b21      	cmp	r3, #33	; 0x21
 8009a6c:	d13e      	bne.n	8009aec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a76:	d114      	bne.n	8009aa2 <UART_Transmit_IT+0x48>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d110      	bne.n	8009aa2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a1b      	ldr	r3, [r3, #32]
 8009a84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	881b      	ldrh	r3, [r3, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	1c9a      	adds	r2, r3, #2
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	621a      	str	r2, [r3, #32]
 8009aa0:	e008      	b.n	8009ab4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	1c59      	adds	r1, r3, #1
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	6211      	str	r1, [r2, #32]
 8009aac:	781a      	ldrb	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	3b01      	subs	r3, #1
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10f      	bne.n	8009ae8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68da      	ldr	r2, [r3, #12]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ad6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68da      	ldr	r2, [r3, #12]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ae6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	e000      	b.n	8009aee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009aec:	2302      	movs	r3, #2
  }
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bc80      	pop	{r7}
 8009af6:	4770      	bx	lr

08009af8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68da      	ldr	r2, [r3, #12]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2220      	movs	r2, #32
 8009b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f7f8 fc2d 	bl	8002378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b22      	cmp	r3, #34	; 0x22
 8009b3a:	f040 8099 	bne.w	8009c70 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b46:	d117      	bne.n	8009b78 <UART_Receive_IT+0x50>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d113      	bne.n	8009b78 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009b50:	2300      	movs	r3, #0
 8009b52:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b58:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b70:	1c9a      	adds	r2, r3, #2
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	629a      	str	r2, [r3, #40]	; 0x28
 8009b76:	e026      	b.n	8009bc6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b8a:	d007      	beq.n	8009b9c <UART_Receive_IT+0x74>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10a      	bne.n	8009baa <UART_Receive_IT+0x82>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d106      	bne.n	8009baa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	701a      	strb	r2, [r3, #0]
 8009ba8:	e008      	b.n	8009bbc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bb6:	b2da      	uxtb	r2, r3
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc0:	1c5a      	adds	r2, r3, #1
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d148      	bne.n	8009c6c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68da      	ldr	r2, [r3, #12]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f022 0220 	bic.w	r2, r2, #32
 8009be8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68da      	ldr	r2, [r3, #12]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009bf8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	695a      	ldr	r2, [r3, #20]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f022 0201 	bic.w	r2, r2, #1
 8009c08:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2220      	movs	r2, #32
 8009c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d123      	bne.n	8009c62 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68da      	ldr	r2, [r3, #12]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f022 0210 	bic.w	r2, r2, #16
 8009c2e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f003 0310 	and.w	r3, r3, #16
 8009c3a:	2b10      	cmp	r3, #16
 8009c3c:	d10a      	bne.n	8009c54 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009c3e:	2300      	movs	r3, #0
 8009c40:	60fb      	str	r3, [r7, #12]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	60fb      	str	r3, [r7, #12]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	60fb      	str	r3, [r7, #12]
 8009c52:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7f8 fba0 	bl	80023a0 <HAL_UARTEx_RxEventCallback>
 8009c60:	e002      	b.n	8009c68 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7ff fd3d 	bl	80096e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	e002      	b.n	8009c72 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	e000      	b.n	8009c72 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009c70:	2302      	movs	r3, #2
  }
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3718      	adds	r7, #24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68da      	ldr	r2, [r3, #12]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	430a      	orrs	r2, r1
 8009c98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	689a      	ldr	r2, [r3, #8]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	431a      	orrs	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	695b      	ldr	r3, [r3, #20]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009cb6:	f023 030c 	bic.w	r3, r3, #12
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	6812      	ldr	r2, [r2, #0]
 8009cbe:	68b9      	ldr	r1, [r7, #8]
 8009cc0:	430b      	orrs	r3, r1
 8009cc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	699a      	ldr	r2, [r3, #24]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	430a      	orrs	r2, r1
 8009cd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a2c      	ldr	r2, [pc, #176]	; (8009d90 <UART_SetConfig+0x114>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d103      	bne.n	8009cec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009ce4:	f7fe f87a 	bl	8007ddc <HAL_RCC_GetPCLK2Freq>
 8009ce8:	60f8      	str	r0, [r7, #12]
 8009cea:	e002      	b.n	8009cf2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009cec:	f7fe f862 	bl	8007db4 <HAL_RCC_GetPCLK1Freq>
 8009cf0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	009a      	lsls	r2, r3, #2
 8009cfc:	441a      	add	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d08:	4a22      	ldr	r2, [pc, #136]	; (8009d94 <UART_SetConfig+0x118>)
 8009d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d0e:	095b      	lsrs	r3, r3, #5
 8009d10:	0119      	lsls	r1, r3, #4
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	4613      	mov	r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	009a      	lsls	r2, r3, #2
 8009d1c:	441a      	add	r2, r3
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d28:	4b1a      	ldr	r3, [pc, #104]	; (8009d94 <UART_SetConfig+0x118>)
 8009d2a:	fba3 0302 	umull	r0, r3, r3, r2
 8009d2e:	095b      	lsrs	r3, r3, #5
 8009d30:	2064      	movs	r0, #100	; 0x64
 8009d32:	fb00 f303 	mul.w	r3, r0, r3
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	011b      	lsls	r3, r3, #4
 8009d3a:	3332      	adds	r3, #50	; 0x32
 8009d3c:	4a15      	ldr	r2, [pc, #84]	; (8009d94 <UART_SetConfig+0x118>)
 8009d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d42:	095b      	lsrs	r3, r3, #5
 8009d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d48:	4419      	add	r1, r3
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	4413      	add	r3, r2
 8009d52:	009a      	lsls	r2, r3, #2
 8009d54:	441a      	add	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d60:	4b0c      	ldr	r3, [pc, #48]	; (8009d94 <UART_SetConfig+0x118>)
 8009d62:	fba3 0302 	umull	r0, r3, r3, r2
 8009d66:	095b      	lsrs	r3, r3, #5
 8009d68:	2064      	movs	r0, #100	; 0x64
 8009d6a:	fb00 f303 	mul.w	r3, r0, r3
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	011b      	lsls	r3, r3, #4
 8009d72:	3332      	adds	r3, #50	; 0x32
 8009d74:	4a07      	ldr	r2, [pc, #28]	; (8009d94 <UART_SetConfig+0x118>)
 8009d76:	fba2 2303 	umull	r2, r3, r2, r3
 8009d7a:	095b      	lsrs	r3, r3, #5
 8009d7c:	f003 020f 	and.w	r2, r3, #15
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	440a      	add	r2, r1
 8009d86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009d88:	bf00      	nop
 8009d8a:	3710      	adds	r7, #16
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	40013800 	.word	0x40013800
 8009d94:	51eb851f 	.word	0x51eb851f

08009d98 <__cxa_pure_virtual>:
 8009d98:	b508      	push	{r3, lr}
 8009d9a:	f000 f80d 	bl	8009db8 <_ZSt9terminatev>

08009d9e <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009d9e:	b508      	push	{r3, lr}
 8009da0:	4780      	blx	r0
 8009da2:	f001 f93b 	bl	800b01c <abort>
	...

08009da8 <_ZSt13get_terminatev>:
 8009da8:	4b02      	ldr	r3, [pc, #8]	; (8009db4 <_ZSt13get_terminatev+0xc>)
 8009daa:	6818      	ldr	r0, [r3, #0]
 8009dac:	f3bf 8f5b 	dmb	ish
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	2000000c 	.word	0x2000000c

08009db8 <_ZSt9terminatev>:
 8009db8:	b508      	push	{r3, lr}
 8009dba:	f7ff fff5 	bl	8009da8 <_ZSt13get_terminatev>
 8009dbe:	f7ff ffee 	bl	8009d9e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08009dc4 <log1pf>:
 8009dc4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dcc:	4604      	mov	r4, r0
 8009dce:	4605      	mov	r5, r0
 8009dd0:	db06      	blt.n	8009de0 <log1pf+0x1c>
 8009dd2:	4601      	mov	r1, r0
 8009dd4:	f7f6 fec2 	bl	8000b5c <__addsf3>
 8009dd8:	4604      	mov	r4, r0
 8009dda:	4620      	mov	r0, r4
 8009ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009de0:	4b8b      	ldr	r3, [pc, #556]	; (800a010 <log1pf+0x24c>)
 8009de2:	4298      	cmp	r0, r3
 8009de4:	dc7d      	bgt.n	8009ee2 <log1pf+0x11e>
 8009de6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009dea:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8009dee:	db0d      	blt.n	8009e0c <log1pf+0x48>
 8009df0:	4988      	ldr	r1, [pc, #544]	; (800a014 <log1pf+0x250>)
 8009df2:	f7f7 f94f 	bl	8001094 <__aeabi_fcmpeq>
 8009df6:	b120      	cbz	r0, 8009e02 <log1pf+0x3e>
 8009df8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dfc:	2001      	movs	r0, #1
 8009dfe:	f000 bfc5 	b.w	800ad8c <__math_divzerof>
 8009e02:	4620      	mov	r0, r4
 8009e04:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e08:	f000 bfd0 	b.w	800adac <__math_invalidf>
 8009e0c:	f1b6 5f44 	cmp.w	r6, #822083584	; 0x31000000
 8009e10:	da14      	bge.n	8009e3c <log1pf+0x78>
 8009e12:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009e16:	f7f6 fea1 	bl	8000b5c <__addsf3>
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	f7f7 f962 	bl	80010e4 <__aeabi_fcmpgt>
 8009e20:	b110      	cbz	r0, 8009e28 <log1pf+0x64>
 8009e22:	f1b6 5f12 	cmp.w	r6, #612368384	; 0x24800000
 8009e26:	dbd8      	blt.n	8009dda <log1pf+0x16>
 8009e28:	4621      	mov	r1, r4
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	f7f6 ff9e 	bl	8000d6c <__aeabi_fmul>
 8009e30:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009e34:	f7f6 ff9a 	bl	8000d6c <__aeabi_fmul>
 8009e38:	4601      	mov	r1, r0
 8009e3a:	e072      	b.n	8009f22 <log1pf+0x15e>
 8009e3c:	4b76      	ldr	r3, [pc, #472]	; (800a018 <log1pf+0x254>)
 8009e3e:	441d      	add	r5, r3
 8009e40:	429d      	cmp	r5, r3
 8009e42:	d85c      	bhi.n	8009efe <log1pf+0x13a>
 8009e44:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f7f6 fe87 	bl	8000b5c <__addsf3>
 8009e4e:	15c6      	asrs	r6, r0, #23
 8009e50:	3e7f      	subs	r6, #127	; 0x7f
 8009e52:	2e00      	cmp	r6, #0
 8009e54:	4607      	mov	r7, r0
 8009e56:	4605      	mov	r5, r0
 8009e58:	dd4a      	ble.n	8009ef0 <log1pf+0x12c>
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	f7f6 fe7c 	bl	8000b58 <__aeabi_fsub>
 8009e60:	4601      	mov	r1, r0
 8009e62:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009e66:	f7f6 fe77 	bl	8000b58 <__aeabi_fsub>
 8009e6a:	4639      	mov	r1, r7
 8009e6c:	f7f7 f832 	bl	8000ed4 <__aeabi_fdiv>
 8009e70:	4607      	mov	r7, r0
 8009e72:	4b6a      	ldr	r3, [pc, #424]	; (800a01c <log1pf+0x258>)
 8009e74:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8009e78:	429d      	cmp	r5, r3
 8009e7a:	bfc8      	it	gt
 8009e7c:	f045 507c 	orrgt.w	r0, r5, #1056964608	; 0x3f000000
 8009e80:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009e84:	bfc9      	itett	gt
 8009e86:	f5c5 0500 	rsbgt	r5, r5, #8388608	; 0x800000
 8009e8a:	f045 507e 	orrle.w	r0, r5, #1065353216	; 0x3f800000
 8009e8e:	3601      	addgt	r6, #1
 8009e90:	10ad      	asrgt	r5, r5, #2
 8009e92:	f7f6 fe61 	bl	8000b58 <__aeabi_fsub>
 8009e96:	4604      	mov	r4, r0
 8009e98:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f7f6 ff65 	bl	8000d6c <__aeabi_fmul>
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	f7f6 ff62 	bl	8000d6c <__aeabi_fmul>
 8009ea8:	4680      	mov	r8, r0
 8009eaa:	2d00      	cmp	r5, #0
 8009eac:	d156      	bne.n	8009f5c <log1pf+0x198>
 8009eae:	2100      	movs	r1, #0
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f7f7 f8ef 	bl	8001094 <__aeabi_fcmpeq>
 8009eb6:	b328      	cbz	r0, 8009f04 <log1pf+0x140>
 8009eb8:	2e00      	cmp	r6, #0
 8009eba:	f000 80a6 	beq.w	800a00a <log1pf+0x246>
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	f7f6 ff00 	bl	8000cc4 <__aeabi_i2f>
 8009ec4:	4956      	ldr	r1, [pc, #344]	; (800a020 <log1pf+0x25c>)
 8009ec6:	4605      	mov	r5, r0
 8009ec8:	f7f6 ff50 	bl	8000d6c <__aeabi_fmul>
 8009ecc:	4639      	mov	r1, r7
 8009ece:	f7f6 fe45 	bl	8000b5c <__addsf3>
 8009ed2:	4954      	ldr	r1, [pc, #336]	; (800a024 <log1pf+0x260>)
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	f7f6 ff48 	bl	8000d6c <__aeabi_fmul>
 8009edc:	4601      	mov	r1, r0
 8009ede:	4620      	mov	r0, r4
 8009ee0:	e778      	b.n	8009dd4 <log1pf+0x10>
 8009ee2:	f1b0 4fb4 	cmp.w	r0, #1509949440	; 0x5a000000
 8009ee6:	dbad      	blt.n	8009e44 <log1pf+0x80>
 8009ee8:	15c6      	asrs	r6, r0, #23
 8009eea:	2700      	movs	r7, #0
 8009eec:	3e7f      	subs	r6, #127	; 0x7f
 8009eee:	e7c0      	b.n	8009e72 <log1pf+0xae>
 8009ef0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009ef4:	f7f6 fe30 	bl	8000b58 <__aeabi_fsub>
 8009ef8:	4601      	mov	r1, r0
 8009efa:	4620      	mov	r0, r4
 8009efc:	e7b3      	b.n	8009e66 <log1pf+0xa2>
 8009efe:	2501      	movs	r5, #1
 8009f00:	2600      	movs	r6, #0
 8009f02:	e7c9      	b.n	8009e98 <log1pf+0xd4>
 8009f04:	4948      	ldr	r1, [pc, #288]	; (800a028 <log1pf+0x264>)
 8009f06:	4620      	mov	r0, r4
 8009f08:	f7f6 ff30 	bl	8000d6c <__aeabi_fmul>
 8009f0c:	4601      	mov	r1, r0
 8009f0e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009f12:	f7f6 fe21 	bl	8000b58 <__aeabi_fsub>
 8009f16:	4641      	mov	r1, r8
 8009f18:	f7f6 ff28 	bl	8000d6c <__aeabi_fmul>
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	b926      	cbnz	r6, 8009f2a <log1pf+0x166>
 8009f20:	4601      	mov	r1, r0
 8009f22:	4620      	mov	r0, r4
 8009f24:	f7f6 fe18 	bl	8000b58 <__aeabi_fsub>
 8009f28:	e756      	b.n	8009dd8 <log1pf+0x14>
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f7f6 feca 	bl	8000cc4 <__aeabi_i2f>
 8009f30:	493c      	ldr	r1, [pc, #240]	; (800a024 <log1pf+0x260>)
 8009f32:	4680      	mov	r8, r0
 8009f34:	f7f6 ff1a 	bl	8000d6c <__aeabi_fmul>
 8009f38:	4939      	ldr	r1, [pc, #228]	; (800a020 <log1pf+0x25c>)
 8009f3a:	4606      	mov	r6, r0
 8009f3c:	4640      	mov	r0, r8
 8009f3e:	f7f6 ff15 	bl	8000d6c <__aeabi_fmul>
 8009f42:	4639      	mov	r1, r7
 8009f44:	f7f6 fe0a 	bl	8000b5c <__addsf3>
 8009f48:	4601      	mov	r1, r0
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	f7f6 fe04 	bl	8000b58 <__aeabi_fsub>
 8009f50:	4621      	mov	r1, r4
 8009f52:	f7f6 fe01 	bl	8000b58 <__aeabi_fsub>
 8009f56:	4601      	mov	r1, r0
 8009f58:	4630      	mov	r0, r6
 8009f5a:	e7e3      	b.n	8009f24 <log1pf+0x160>
 8009f5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009f60:	4620      	mov	r0, r4
 8009f62:	f7f6 fdfb 	bl	8000b5c <__addsf3>
 8009f66:	4601      	mov	r1, r0
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f7f6 ffb3 	bl	8000ed4 <__aeabi_fdiv>
 8009f6e:	4601      	mov	r1, r0
 8009f70:	4681      	mov	r9, r0
 8009f72:	f7f6 fefb 	bl	8000d6c <__aeabi_fmul>
 8009f76:	4605      	mov	r5, r0
 8009f78:	492c      	ldr	r1, [pc, #176]	; (800a02c <log1pf+0x268>)
 8009f7a:	f7f6 fef7 	bl	8000d6c <__aeabi_fmul>
 8009f7e:	492c      	ldr	r1, [pc, #176]	; (800a030 <log1pf+0x26c>)
 8009f80:	f7f6 fdec 	bl	8000b5c <__addsf3>
 8009f84:	4629      	mov	r1, r5
 8009f86:	f7f6 fef1 	bl	8000d6c <__aeabi_fmul>
 8009f8a:	492a      	ldr	r1, [pc, #168]	; (800a034 <log1pf+0x270>)
 8009f8c:	f7f6 fde6 	bl	8000b5c <__addsf3>
 8009f90:	4629      	mov	r1, r5
 8009f92:	f7f6 feeb 	bl	8000d6c <__aeabi_fmul>
 8009f96:	4928      	ldr	r1, [pc, #160]	; (800a038 <log1pf+0x274>)
 8009f98:	f7f6 fde0 	bl	8000b5c <__addsf3>
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	f7f6 fee5 	bl	8000d6c <__aeabi_fmul>
 8009fa2:	4926      	ldr	r1, [pc, #152]	; (800a03c <log1pf+0x278>)
 8009fa4:	f7f6 fdda 	bl	8000b5c <__addsf3>
 8009fa8:	4629      	mov	r1, r5
 8009faa:	f7f6 fedf 	bl	8000d6c <__aeabi_fmul>
 8009fae:	4924      	ldr	r1, [pc, #144]	; (800a040 <log1pf+0x27c>)
 8009fb0:	f7f6 fdd4 	bl	8000b5c <__addsf3>
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	f7f6 fed9 	bl	8000d6c <__aeabi_fmul>
 8009fba:	491b      	ldr	r1, [pc, #108]	; (800a028 <log1pf+0x264>)
 8009fbc:	f7f6 fdce 	bl	8000b5c <__addsf3>
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	f7f6 fed3 	bl	8000d6c <__aeabi_fmul>
 8009fc6:	4641      	mov	r1, r8
 8009fc8:	f7f6 fdc8 	bl	8000b5c <__addsf3>
 8009fcc:	4649      	mov	r1, r9
 8009fce:	f7f6 fecd 	bl	8000d6c <__aeabi_fmul>
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	b926      	cbnz	r6, 8009fe0 <log1pf+0x21c>
 8009fd6:	4601      	mov	r1, r0
 8009fd8:	4640      	mov	r0, r8
 8009fda:	f7f6 fdbd 	bl	8000b58 <__aeabi_fsub>
 8009fde:	e72b      	b.n	8009e38 <log1pf+0x74>
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f7f6 fe6f 	bl	8000cc4 <__aeabi_i2f>
 8009fe6:	490f      	ldr	r1, [pc, #60]	; (800a024 <log1pf+0x260>)
 8009fe8:	4681      	mov	r9, r0
 8009fea:	f7f6 febf 	bl	8000d6c <__aeabi_fmul>
 8009fee:	490c      	ldr	r1, [pc, #48]	; (800a020 <log1pf+0x25c>)
 8009ff0:	4606      	mov	r6, r0
 8009ff2:	4648      	mov	r0, r9
 8009ff4:	f7f6 feba 	bl	8000d6c <__aeabi_fmul>
 8009ff8:	4639      	mov	r1, r7
 8009ffa:	f7f6 fdaf 	bl	8000b5c <__addsf3>
 8009ffe:	4629      	mov	r1, r5
 800a000:	f7f6 fdac 	bl	8000b5c <__addsf3>
 800a004:	4601      	mov	r1, r0
 800a006:	4640      	mov	r0, r8
 800a008:	e7a0      	b.n	8009f4c <log1pf+0x188>
 800a00a:	2400      	movs	r4, #0
 800a00c:	e6e5      	b.n	8009dda <log1pf+0x16>
 800a00e:	bf00      	nop
 800a010:	3ed413d6 	.word	0x3ed413d6
 800a014:	bf800000 	.word	0xbf800000
 800a018:	416a09e0 	.word	0x416a09e0
 800a01c:	003504f6 	.word	0x003504f6
 800a020:	3717f7d1 	.word	0x3717f7d1
 800a024:	3f317180 	.word	0x3f317180
 800a028:	3f2aaaab 	.word	0x3f2aaaab
 800a02c:	3e178897 	.word	0x3e178897
 800a030:	3e1cd04f 	.word	0x3e1cd04f
 800a034:	3e3a3325 	.word	0x3e3a3325
 800a038:	3e638e29 	.word	0x3e638e29
 800a03c:	3e924925 	.word	0x3e924925
 800a040:	3ecccccd 	.word	0x3ecccccd

0800a044 <pow>:
 800a044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a048:	461f      	mov	r7, r3
 800a04a:	4680      	mov	r8, r0
 800a04c:	4689      	mov	r9, r1
 800a04e:	4616      	mov	r6, r2
 800a050:	f000 f8d2 	bl	800a1f8 <__ieee754_pow>
 800a054:	4b4d      	ldr	r3, [pc, #308]	; (800a18c <pow+0x148>)
 800a056:	4604      	mov	r4, r0
 800a058:	f993 3000 	ldrsb.w	r3, [r3]
 800a05c:	460d      	mov	r5, r1
 800a05e:	3301      	adds	r3, #1
 800a060:	d015      	beq.n	800a08e <pow+0x4a>
 800a062:	4632      	mov	r2, r6
 800a064:	463b      	mov	r3, r7
 800a066:	4630      	mov	r0, r6
 800a068:	4639      	mov	r1, r7
 800a06a:	f7f6 fd33 	bl	8000ad4 <__aeabi_dcmpun>
 800a06e:	b970      	cbnz	r0, 800a08e <pow+0x4a>
 800a070:	4642      	mov	r2, r8
 800a072:	464b      	mov	r3, r9
 800a074:	4640      	mov	r0, r8
 800a076:	4649      	mov	r1, r9
 800a078:	f7f6 fd2c 	bl	8000ad4 <__aeabi_dcmpun>
 800a07c:	2200      	movs	r2, #0
 800a07e:	2300      	movs	r3, #0
 800a080:	b148      	cbz	r0, 800a096 <pow+0x52>
 800a082:	4630      	mov	r0, r6
 800a084:	4639      	mov	r1, r7
 800a086:	f7f6 fcf3 	bl	8000a70 <__aeabi_dcmpeq>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d17b      	bne.n	800a186 <pow+0x142>
 800a08e:	4620      	mov	r0, r4
 800a090:	4629      	mov	r1, r5
 800a092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a096:	4640      	mov	r0, r8
 800a098:	4649      	mov	r1, r9
 800a09a:	f7f6 fce9 	bl	8000a70 <__aeabi_dcmpeq>
 800a09e:	b1e0      	cbz	r0, 800a0da <pow+0x96>
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	4639      	mov	r1, r7
 800a0a8:	f7f6 fce2 	bl	8000a70 <__aeabi_dcmpeq>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d16a      	bne.n	800a186 <pow+0x142>
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	4639      	mov	r1, r7
 800a0b4:	f000 fe93 	bl	800adde <finite>
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d0e8      	beq.n	800a08e <pow+0x4a>
 800a0bc:	2200      	movs	r2, #0
 800a0be:	2300      	movs	r3, #0
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	4639      	mov	r1, r7
 800a0c4:	f7f6 fcde 	bl	8000a84 <__aeabi_dcmplt>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d0e0      	beq.n	800a08e <pow+0x4a>
 800a0cc:	f000 ffae 	bl	800b02c <__errno>
 800a0d0:	2321      	movs	r3, #33	; 0x21
 800a0d2:	2400      	movs	r4, #0
 800a0d4:	6003      	str	r3, [r0, #0]
 800a0d6:	4d2e      	ldr	r5, [pc, #184]	; (800a190 <pow+0x14c>)
 800a0d8:	e7d9      	b.n	800a08e <pow+0x4a>
 800a0da:	4620      	mov	r0, r4
 800a0dc:	4629      	mov	r1, r5
 800a0de:	f000 fe7e 	bl	800adde <finite>
 800a0e2:	bba8      	cbnz	r0, 800a150 <pow+0x10c>
 800a0e4:	4640      	mov	r0, r8
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	f000 fe79 	bl	800adde <finite>
 800a0ec:	b380      	cbz	r0, 800a150 <pow+0x10c>
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	4639      	mov	r1, r7
 800a0f2:	f000 fe74 	bl	800adde <finite>
 800a0f6:	b358      	cbz	r0, 800a150 <pow+0x10c>
 800a0f8:	4622      	mov	r2, r4
 800a0fa:	462b      	mov	r3, r5
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	4629      	mov	r1, r5
 800a100:	f7f6 fce8 	bl	8000ad4 <__aeabi_dcmpun>
 800a104:	b160      	cbz	r0, 800a120 <pow+0xdc>
 800a106:	f000 ff91 	bl	800b02c <__errno>
 800a10a:	2321      	movs	r3, #33	; 0x21
 800a10c:	2200      	movs	r2, #0
 800a10e:	6003      	str	r3, [r0, #0]
 800a110:	2300      	movs	r3, #0
 800a112:	4610      	mov	r0, r2
 800a114:	4619      	mov	r1, r3
 800a116:	f7f6 fb6d 	bl	80007f4 <__aeabi_ddiv>
 800a11a:	4604      	mov	r4, r0
 800a11c:	460d      	mov	r5, r1
 800a11e:	e7b6      	b.n	800a08e <pow+0x4a>
 800a120:	f000 ff84 	bl	800b02c <__errno>
 800a124:	2322      	movs	r3, #34	; 0x22
 800a126:	2200      	movs	r2, #0
 800a128:	6003      	str	r3, [r0, #0]
 800a12a:	4649      	mov	r1, r9
 800a12c:	2300      	movs	r3, #0
 800a12e:	4640      	mov	r0, r8
 800a130:	f7f6 fca8 	bl	8000a84 <__aeabi_dcmplt>
 800a134:	2400      	movs	r4, #0
 800a136:	b148      	cbz	r0, 800a14c <pow+0x108>
 800a138:	4630      	mov	r0, r6
 800a13a:	4639      	mov	r1, r7
 800a13c:	f000 fe5c 	bl	800adf8 <rint>
 800a140:	4632      	mov	r2, r6
 800a142:	463b      	mov	r3, r7
 800a144:	f7f6 fc94 	bl	8000a70 <__aeabi_dcmpeq>
 800a148:	2800      	cmp	r0, #0
 800a14a:	d0c4      	beq.n	800a0d6 <pow+0x92>
 800a14c:	4d11      	ldr	r5, [pc, #68]	; (800a194 <pow+0x150>)
 800a14e:	e79e      	b.n	800a08e <pow+0x4a>
 800a150:	2200      	movs	r2, #0
 800a152:	2300      	movs	r3, #0
 800a154:	4620      	mov	r0, r4
 800a156:	4629      	mov	r1, r5
 800a158:	f7f6 fc8a 	bl	8000a70 <__aeabi_dcmpeq>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d096      	beq.n	800a08e <pow+0x4a>
 800a160:	4640      	mov	r0, r8
 800a162:	4649      	mov	r1, r9
 800a164:	f000 fe3b 	bl	800adde <finite>
 800a168:	2800      	cmp	r0, #0
 800a16a:	d090      	beq.n	800a08e <pow+0x4a>
 800a16c:	4630      	mov	r0, r6
 800a16e:	4639      	mov	r1, r7
 800a170:	f000 fe35 	bl	800adde <finite>
 800a174:	2800      	cmp	r0, #0
 800a176:	d08a      	beq.n	800a08e <pow+0x4a>
 800a178:	f000 ff58 	bl	800b02c <__errno>
 800a17c:	2322      	movs	r3, #34	; 0x22
 800a17e:	2400      	movs	r4, #0
 800a180:	2500      	movs	r5, #0
 800a182:	6003      	str	r3, [r0, #0]
 800a184:	e783      	b.n	800a08e <pow+0x4a>
 800a186:	2400      	movs	r4, #0
 800a188:	4d03      	ldr	r5, [pc, #12]	; (800a198 <pow+0x154>)
 800a18a:	e780      	b.n	800a08e <pow+0x4a>
 800a18c:	20000010 	.word	0x20000010
 800a190:	fff00000 	.word	0xfff00000
 800a194:	7ff00000 	.word	0x7ff00000
 800a198:	3ff00000 	.word	0x3ff00000

0800a19c <sqrt>:
 800a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19e:	4606      	mov	r6, r0
 800a1a0:	460f      	mov	r7, r1
 800a1a2:	f000 fd3f 	bl	800ac24 <__ieee754_sqrt>
 800a1a6:	4b12      	ldr	r3, [pc, #72]	; (800a1f0 <sqrt+0x54>)
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	f993 3000 	ldrsb.w	r3, [r3]
 800a1ae:	460d      	mov	r5, r1
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	d019      	beq.n	800a1e8 <sqrt+0x4c>
 800a1b4:	4632      	mov	r2, r6
 800a1b6:	463b      	mov	r3, r7
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	4639      	mov	r1, r7
 800a1bc:	f7f6 fc8a 	bl	8000ad4 <__aeabi_dcmpun>
 800a1c0:	b990      	cbnz	r0, 800a1e8 <sqrt+0x4c>
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	f7f6 fc5b 	bl	8000a84 <__aeabi_dcmplt>
 800a1ce:	b158      	cbz	r0, 800a1e8 <sqrt+0x4c>
 800a1d0:	f000 ff2c 	bl	800b02c <__errno>
 800a1d4:	2321      	movs	r3, #33	; 0x21
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	6003      	str	r3, [r0, #0]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4619      	mov	r1, r3
 800a1e0:	f7f6 fb08 	bl	80007f4 <__aeabi_ddiv>
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	460d      	mov	r5, r1
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	20000010 	.word	0x20000010
 800a1f4:	00000000 	.word	0x00000000

0800a1f8 <__ieee754_pow>:
 800a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fc:	b093      	sub	sp, #76	; 0x4c
 800a1fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a202:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800a206:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a20a:	ea55 0302 	orrs.w	r3, r5, r2
 800a20e:	4607      	mov	r7, r0
 800a210:	4688      	mov	r8, r1
 800a212:	f000 84bf 	beq.w	800ab94 <__ieee754_pow+0x99c>
 800a216:	4b7e      	ldr	r3, [pc, #504]	; (800a410 <__ieee754_pow+0x218>)
 800a218:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a21c:	429c      	cmp	r4, r3
 800a21e:	4689      	mov	r9, r1
 800a220:	4682      	mov	sl, r0
 800a222:	dc09      	bgt.n	800a238 <__ieee754_pow+0x40>
 800a224:	d103      	bne.n	800a22e <__ieee754_pow+0x36>
 800a226:	b978      	cbnz	r0, 800a248 <__ieee754_pow+0x50>
 800a228:	42a5      	cmp	r5, r4
 800a22a:	dd02      	ble.n	800a232 <__ieee754_pow+0x3a>
 800a22c:	e00c      	b.n	800a248 <__ieee754_pow+0x50>
 800a22e:	429d      	cmp	r5, r3
 800a230:	dc02      	bgt.n	800a238 <__ieee754_pow+0x40>
 800a232:	429d      	cmp	r5, r3
 800a234:	d10e      	bne.n	800a254 <__ieee754_pow+0x5c>
 800a236:	b16a      	cbz	r2, 800a254 <__ieee754_pow+0x5c>
 800a238:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a23c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a240:	ea54 030a 	orrs.w	r3, r4, sl
 800a244:	f000 84a6 	beq.w	800ab94 <__ieee754_pow+0x99c>
 800a248:	4872      	ldr	r0, [pc, #456]	; (800a414 <__ieee754_pow+0x21c>)
 800a24a:	b013      	add	sp, #76	; 0x4c
 800a24c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a250:	f000 bdcc 	b.w	800adec <nan>
 800a254:	f1b9 0f00 	cmp.w	r9, #0
 800a258:	da39      	bge.n	800a2ce <__ieee754_pow+0xd6>
 800a25a:	4b6f      	ldr	r3, [pc, #444]	; (800a418 <__ieee754_pow+0x220>)
 800a25c:	429d      	cmp	r5, r3
 800a25e:	dc54      	bgt.n	800a30a <__ieee754_pow+0x112>
 800a260:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a264:	429d      	cmp	r5, r3
 800a266:	f340 84a6 	ble.w	800abb6 <__ieee754_pow+0x9be>
 800a26a:	152b      	asrs	r3, r5, #20
 800a26c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a270:	2b14      	cmp	r3, #20
 800a272:	dd0f      	ble.n	800a294 <__ieee754_pow+0x9c>
 800a274:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a278:	fa22 f103 	lsr.w	r1, r2, r3
 800a27c:	fa01 f303 	lsl.w	r3, r1, r3
 800a280:	4293      	cmp	r3, r2
 800a282:	f040 8498 	bne.w	800abb6 <__ieee754_pow+0x9be>
 800a286:	f001 0101 	and.w	r1, r1, #1
 800a28a:	f1c1 0302 	rsb	r3, r1, #2
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	b182      	cbz	r2, 800a2b4 <__ieee754_pow+0xbc>
 800a292:	e05e      	b.n	800a352 <__ieee754_pow+0x15a>
 800a294:	2a00      	cmp	r2, #0
 800a296:	d15a      	bne.n	800a34e <__ieee754_pow+0x156>
 800a298:	f1c3 0314 	rsb	r3, r3, #20
 800a29c:	fa45 f103 	asr.w	r1, r5, r3
 800a2a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a4:	42ab      	cmp	r3, r5
 800a2a6:	f040 8483 	bne.w	800abb0 <__ieee754_pow+0x9b8>
 800a2aa:	f001 0101 	and.w	r1, r1, #1
 800a2ae:	f1c1 0302 	rsb	r3, r1, #2
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	4b59      	ldr	r3, [pc, #356]	; (800a41c <__ieee754_pow+0x224>)
 800a2b6:	429d      	cmp	r5, r3
 800a2b8:	d130      	bne.n	800a31c <__ieee754_pow+0x124>
 800a2ba:	2e00      	cmp	r6, #0
 800a2bc:	f280 8474 	bge.w	800aba8 <__ieee754_pow+0x9b0>
 800a2c0:	463a      	mov	r2, r7
 800a2c2:	4643      	mov	r3, r8
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	4955      	ldr	r1, [pc, #340]	; (800a41c <__ieee754_pow+0x224>)
 800a2c8:	f7f6 fa94 	bl	80007f4 <__aeabi_ddiv>
 800a2cc:	e02f      	b.n	800a32e <__ieee754_pow+0x136>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	2a00      	cmp	r2, #0
 800a2d4:	d13d      	bne.n	800a352 <__ieee754_pow+0x15a>
 800a2d6:	4b4e      	ldr	r3, [pc, #312]	; (800a410 <__ieee754_pow+0x218>)
 800a2d8:	429d      	cmp	r5, r3
 800a2da:	d1eb      	bne.n	800a2b4 <__ieee754_pow+0xbc>
 800a2dc:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a2e0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a2e4:	ea53 030a 	orrs.w	r3, r3, sl
 800a2e8:	f000 8454 	beq.w	800ab94 <__ieee754_pow+0x99c>
 800a2ec:	4b4c      	ldr	r3, [pc, #304]	; (800a420 <__ieee754_pow+0x228>)
 800a2ee:	429c      	cmp	r4, r3
 800a2f0:	dd0d      	ble.n	800a30e <__ieee754_pow+0x116>
 800a2f2:	2e00      	cmp	r6, #0
 800a2f4:	f280 8454 	bge.w	800aba0 <__ieee754_pow+0x9a8>
 800a2f8:	f04f 0b00 	mov.w	fp, #0
 800a2fc:	f04f 0c00 	mov.w	ip, #0
 800a300:	4658      	mov	r0, fp
 800a302:	4661      	mov	r1, ip
 800a304:	b013      	add	sp, #76	; 0x4c
 800a306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30a:	2302      	movs	r3, #2
 800a30c:	e7e0      	b.n	800a2d0 <__ieee754_pow+0xd8>
 800a30e:	2e00      	cmp	r6, #0
 800a310:	daf2      	bge.n	800a2f8 <__ieee754_pow+0x100>
 800a312:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a316:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a31a:	e7f1      	b.n	800a300 <__ieee754_pow+0x108>
 800a31c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800a320:	d108      	bne.n	800a334 <__ieee754_pow+0x13c>
 800a322:	463a      	mov	r2, r7
 800a324:	4643      	mov	r3, r8
 800a326:	4638      	mov	r0, r7
 800a328:	4641      	mov	r1, r8
 800a32a:	f7f6 f939 	bl	80005a0 <__aeabi_dmul>
 800a32e:	4683      	mov	fp, r0
 800a330:	468c      	mov	ip, r1
 800a332:	e7e5      	b.n	800a300 <__ieee754_pow+0x108>
 800a334:	4b3b      	ldr	r3, [pc, #236]	; (800a424 <__ieee754_pow+0x22c>)
 800a336:	429e      	cmp	r6, r3
 800a338:	d10b      	bne.n	800a352 <__ieee754_pow+0x15a>
 800a33a:	f1b9 0f00 	cmp.w	r9, #0
 800a33e:	db08      	blt.n	800a352 <__ieee754_pow+0x15a>
 800a340:	4638      	mov	r0, r7
 800a342:	4641      	mov	r1, r8
 800a344:	b013      	add	sp, #76	; 0x4c
 800a346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34a:	f000 bc6b 	b.w	800ac24 <__ieee754_sqrt>
 800a34e:	2300      	movs	r3, #0
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	4638      	mov	r0, r7
 800a354:	4641      	mov	r1, r8
 800a356:	f000 fd3f 	bl	800add8 <fabs>
 800a35a:	4683      	mov	fp, r0
 800a35c:	468c      	mov	ip, r1
 800a35e:	f1ba 0f00 	cmp.w	sl, #0
 800a362:	d129      	bne.n	800a3b8 <__ieee754_pow+0x1c0>
 800a364:	b124      	cbz	r4, 800a370 <__ieee754_pow+0x178>
 800a366:	4b2d      	ldr	r3, [pc, #180]	; (800a41c <__ieee754_pow+0x224>)
 800a368:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d123      	bne.n	800a3b8 <__ieee754_pow+0x1c0>
 800a370:	2e00      	cmp	r6, #0
 800a372:	da07      	bge.n	800a384 <__ieee754_pow+0x18c>
 800a374:	465a      	mov	r2, fp
 800a376:	4663      	mov	r3, ip
 800a378:	2000      	movs	r0, #0
 800a37a:	4928      	ldr	r1, [pc, #160]	; (800a41c <__ieee754_pow+0x224>)
 800a37c:	f7f6 fa3a 	bl	80007f4 <__aeabi_ddiv>
 800a380:	4683      	mov	fp, r0
 800a382:	468c      	mov	ip, r1
 800a384:	f1b9 0f00 	cmp.w	r9, #0
 800a388:	daba      	bge.n	800a300 <__ieee754_pow+0x108>
 800a38a:	9b00      	ldr	r3, [sp, #0]
 800a38c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a390:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a394:	4323      	orrs	r3, r4
 800a396:	d108      	bne.n	800a3aa <__ieee754_pow+0x1b2>
 800a398:	465a      	mov	r2, fp
 800a39a:	4663      	mov	r3, ip
 800a39c:	4658      	mov	r0, fp
 800a39e:	4661      	mov	r1, ip
 800a3a0:	f7f5 ff46 	bl	8000230 <__aeabi_dsub>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	e78e      	b.n	800a2c8 <__ieee754_pow+0xd0>
 800a3aa:	9b00      	ldr	r3, [sp, #0]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d1a7      	bne.n	800a300 <__ieee754_pow+0x108>
 800a3b0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a3b4:	469c      	mov	ip, r3
 800a3b6:	e7a3      	b.n	800a300 <__ieee754_pow+0x108>
 800a3b8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	930c      	str	r3, [sp, #48]	; 0x30
 800a3c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3c2:	9b00      	ldr	r3, [sp, #0]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	d104      	bne.n	800a3d2 <__ieee754_pow+0x1da>
 800a3c8:	463a      	mov	r2, r7
 800a3ca:	4643      	mov	r3, r8
 800a3cc:	4638      	mov	r0, r7
 800a3ce:	4641      	mov	r1, r8
 800a3d0:	e7e6      	b.n	800a3a0 <__ieee754_pow+0x1a8>
 800a3d2:	4b15      	ldr	r3, [pc, #84]	; (800a428 <__ieee754_pow+0x230>)
 800a3d4:	429d      	cmp	r5, r3
 800a3d6:	f340 80f9 	ble.w	800a5cc <__ieee754_pow+0x3d4>
 800a3da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a3de:	429d      	cmp	r5, r3
 800a3e0:	4b0f      	ldr	r3, [pc, #60]	; (800a420 <__ieee754_pow+0x228>)
 800a3e2:	dd09      	ble.n	800a3f8 <__ieee754_pow+0x200>
 800a3e4:	429c      	cmp	r4, r3
 800a3e6:	dc0c      	bgt.n	800a402 <__ieee754_pow+0x20a>
 800a3e8:	2e00      	cmp	r6, #0
 800a3ea:	da85      	bge.n	800a2f8 <__ieee754_pow+0x100>
 800a3ec:	a306      	add	r3, pc, #24	; (adr r3, 800a408 <__ieee754_pow+0x210>)
 800a3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f2:	4610      	mov	r0, r2
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	e798      	b.n	800a32a <__ieee754_pow+0x132>
 800a3f8:	429c      	cmp	r4, r3
 800a3fa:	dbf5      	blt.n	800a3e8 <__ieee754_pow+0x1f0>
 800a3fc:	4b07      	ldr	r3, [pc, #28]	; (800a41c <__ieee754_pow+0x224>)
 800a3fe:	429c      	cmp	r4, r3
 800a400:	dd14      	ble.n	800a42c <__ieee754_pow+0x234>
 800a402:	2e00      	cmp	r6, #0
 800a404:	dcf2      	bgt.n	800a3ec <__ieee754_pow+0x1f4>
 800a406:	e777      	b.n	800a2f8 <__ieee754_pow+0x100>
 800a408:	8800759c 	.word	0x8800759c
 800a40c:	7e37e43c 	.word	0x7e37e43c
 800a410:	7ff00000 	.word	0x7ff00000
 800a414:	0800b200 	.word	0x0800b200
 800a418:	433fffff 	.word	0x433fffff
 800a41c:	3ff00000 	.word	0x3ff00000
 800a420:	3fefffff 	.word	0x3fefffff
 800a424:	3fe00000 	.word	0x3fe00000
 800a428:	41e00000 	.word	0x41e00000
 800a42c:	4661      	mov	r1, ip
 800a42e:	2200      	movs	r2, #0
 800a430:	4658      	mov	r0, fp
 800a432:	4b61      	ldr	r3, [pc, #388]	; (800a5b8 <__ieee754_pow+0x3c0>)
 800a434:	f7f5 fefc 	bl	8000230 <__aeabi_dsub>
 800a438:	a355      	add	r3, pc, #340	; (adr r3, 800a590 <__ieee754_pow+0x398>)
 800a43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43e:	4604      	mov	r4, r0
 800a440:	460d      	mov	r5, r1
 800a442:	f7f6 f8ad 	bl	80005a0 <__aeabi_dmul>
 800a446:	a354      	add	r3, pc, #336	; (adr r3, 800a598 <__ieee754_pow+0x3a0>)
 800a448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44c:	4606      	mov	r6, r0
 800a44e:	460f      	mov	r7, r1
 800a450:	4620      	mov	r0, r4
 800a452:	4629      	mov	r1, r5
 800a454:	f7f6 f8a4 	bl	80005a0 <__aeabi_dmul>
 800a458:	2200      	movs	r2, #0
 800a45a:	4682      	mov	sl, r0
 800a45c:	468b      	mov	fp, r1
 800a45e:	4620      	mov	r0, r4
 800a460:	4629      	mov	r1, r5
 800a462:	4b56      	ldr	r3, [pc, #344]	; (800a5bc <__ieee754_pow+0x3c4>)
 800a464:	f7f6 f89c 	bl	80005a0 <__aeabi_dmul>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	a14c      	add	r1, pc, #304	; (adr r1, 800a5a0 <__ieee754_pow+0x3a8>)
 800a46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a472:	f7f5 fedd 	bl	8000230 <__aeabi_dsub>
 800a476:	4622      	mov	r2, r4
 800a478:	462b      	mov	r3, r5
 800a47a:	f7f6 f891 	bl	80005a0 <__aeabi_dmul>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	2000      	movs	r0, #0
 800a484:	494e      	ldr	r1, [pc, #312]	; (800a5c0 <__ieee754_pow+0x3c8>)
 800a486:	f7f5 fed3 	bl	8000230 <__aeabi_dsub>
 800a48a:	4622      	mov	r2, r4
 800a48c:	462b      	mov	r3, r5
 800a48e:	4680      	mov	r8, r0
 800a490:	4689      	mov	r9, r1
 800a492:	4620      	mov	r0, r4
 800a494:	4629      	mov	r1, r5
 800a496:	f7f6 f883 	bl	80005a0 <__aeabi_dmul>
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	4640      	mov	r0, r8
 800a4a0:	4649      	mov	r1, r9
 800a4a2:	f7f6 f87d 	bl	80005a0 <__aeabi_dmul>
 800a4a6:	a340      	add	r3, pc, #256	; (adr r3, 800a5a8 <__ieee754_pow+0x3b0>)
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	f7f6 f878 	bl	80005a0 <__aeabi_dmul>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4650      	mov	r0, sl
 800a4b6:	4659      	mov	r1, fp
 800a4b8:	f7f5 feba 	bl	8000230 <__aeabi_dsub>
 800a4bc:	f04f 0a00 	mov.w	sl, #0
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	460d      	mov	r5, r1
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	f7f5 feb2 	bl	8000234 <__adddf3>
 800a4d0:	4632      	mov	r2, r6
 800a4d2:	463b      	mov	r3, r7
 800a4d4:	4650      	mov	r0, sl
 800a4d6:	468b      	mov	fp, r1
 800a4d8:	f7f5 feaa 	bl	8000230 <__aeabi_dsub>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	f7f5 fea4 	bl	8000230 <__aeabi_dsub>
 800a4e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4ec:	9b00      	ldr	r3, [sp, #0]
 800a4ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	f04f 0600 	mov.w	r6, #0
 800a4f8:	f04f 0200 	mov.w	r2, #0
 800a4fc:	bf0c      	ite	eq
 800a4fe:	4b31      	ldreq	r3, [pc, #196]	; (800a5c4 <__ieee754_pow+0x3cc>)
 800a500:	4b2d      	ldrne	r3, [pc, #180]	; (800a5b8 <__ieee754_pow+0x3c0>)
 800a502:	4604      	mov	r4, r0
 800a504:	460d      	mov	r5, r1
 800a506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a50a:	e9cd 2300 	strd	r2, r3, [sp]
 800a50e:	4632      	mov	r2, r6
 800a510:	463b      	mov	r3, r7
 800a512:	f7f5 fe8d 	bl	8000230 <__aeabi_dsub>
 800a516:	4652      	mov	r2, sl
 800a518:	465b      	mov	r3, fp
 800a51a:	f7f6 f841 	bl	80005a0 <__aeabi_dmul>
 800a51e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a522:	4680      	mov	r8, r0
 800a524:	4689      	mov	r9, r1
 800a526:	4620      	mov	r0, r4
 800a528:	4629      	mov	r1, r5
 800a52a:	f7f6 f839 	bl	80005a0 <__aeabi_dmul>
 800a52e:	4602      	mov	r2, r0
 800a530:	460b      	mov	r3, r1
 800a532:	4640      	mov	r0, r8
 800a534:	4649      	mov	r1, r9
 800a536:	f7f5 fe7d 	bl	8000234 <__adddf3>
 800a53a:	4632      	mov	r2, r6
 800a53c:	463b      	mov	r3, r7
 800a53e:	4680      	mov	r8, r0
 800a540:	4689      	mov	r9, r1
 800a542:	4650      	mov	r0, sl
 800a544:	4659      	mov	r1, fp
 800a546:	f7f6 f82b 	bl	80005a0 <__aeabi_dmul>
 800a54a:	4604      	mov	r4, r0
 800a54c:	460d      	mov	r5, r1
 800a54e:	460b      	mov	r3, r1
 800a550:	4602      	mov	r2, r0
 800a552:	4649      	mov	r1, r9
 800a554:	4640      	mov	r0, r8
 800a556:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a55a:	f7f5 fe6b 	bl	8000234 <__adddf3>
 800a55e:	4b1a      	ldr	r3, [pc, #104]	; (800a5c8 <__ieee754_pow+0x3d0>)
 800a560:	4682      	mov	sl, r0
 800a562:	4299      	cmp	r1, r3
 800a564:	460f      	mov	r7, r1
 800a566:	460e      	mov	r6, r1
 800a568:	f340 82ed 	ble.w	800ab46 <__ieee754_pow+0x94e>
 800a56c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a570:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a574:	4303      	orrs	r3, r0
 800a576:	f000 81e7 	beq.w	800a948 <__ieee754_pow+0x750>
 800a57a:	a30d      	add	r3, pc, #52	; (adr r3, 800a5b0 <__ieee754_pow+0x3b8>)
 800a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a580:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a584:	f7f6 f80c 	bl	80005a0 <__aeabi_dmul>
 800a588:	a309      	add	r3, pc, #36	; (adr r3, 800a5b0 <__ieee754_pow+0x3b8>)
 800a58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58e:	e6cc      	b.n	800a32a <__ieee754_pow+0x132>
 800a590:	60000000 	.word	0x60000000
 800a594:	3ff71547 	.word	0x3ff71547
 800a598:	f85ddf44 	.word	0xf85ddf44
 800a59c:	3e54ae0b 	.word	0x3e54ae0b
 800a5a0:	55555555 	.word	0x55555555
 800a5a4:	3fd55555 	.word	0x3fd55555
 800a5a8:	652b82fe 	.word	0x652b82fe
 800a5ac:	3ff71547 	.word	0x3ff71547
 800a5b0:	8800759c 	.word	0x8800759c
 800a5b4:	7e37e43c 	.word	0x7e37e43c
 800a5b8:	3ff00000 	.word	0x3ff00000
 800a5bc:	3fd00000 	.word	0x3fd00000
 800a5c0:	3fe00000 	.word	0x3fe00000
 800a5c4:	bff00000 	.word	0xbff00000
 800a5c8:	408fffff 	.word	0x408fffff
 800a5cc:	4bd4      	ldr	r3, [pc, #848]	; (800a920 <__ieee754_pow+0x728>)
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	ea09 0303 	and.w	r3, r9, r3
 800a5d4:	b943      	cbnz	r3, 800a5e8 <__ieee754_pow+0x3f0>
 800a5d6:	4658      	mov	r0, fp
 800a5d8:	4661      	mov	r1, ip
 800a5da:	4bd2      	ldr	r3, [pc, #840]	; (800a924 <__ieee754_pow+0x72c>)
 800a5dc:	f7f5 ffe0 	bl	80005a0 <__aeabi_dmul>
 800a5e0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a5e4:	4683      	mov	fp, r0
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	1523      	asrs	r3, r4, #20
 800a5ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a5ee:	4413      	add	r3, r2
 800a5f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5f2:	4bcd      	ldr	r3, [pc, #820]	; (800a928 <__ieee754_pow+0x730>)
 800a5f4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a5f8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a5fc:	429c      	cmp	r4, r3
 800a5fe:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a602:	dd08      	ble.n	800a616 <__ieee754_pow+0x41e>
 800a604:	4bc9      	ldr	r3, [pc, #804]	; (800a92c <__ieee754_pow+0x734>)
 800a606:	429c      	cmp	r4, r3
 800a608:	f340 819c 	ble.w	800a944 <__ieee754_pow+0x74c>
 800a60c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a60e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a612:	3301      	adds	r3, #1
 800a614:	930b      	str	r3, [sp, #44]	; 0x2c
 800a616:	2600      	movs	r6, #0
 800a618:	00f3      	lsls	r3, r6, #3
 800a61a:	930d      	str	r3, [sp, #52]	; 0x34
 800a61c:	4bc4      	ldr	r3, [pc, #784]	; (800a930 <__ieee754_pow+0x738>)
 800a61e:	4658      	mov	r0, fp
 800a620:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a624:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a628:	4629      	mov	r1, r5
 800a62a:	461a      	mov	r2, r3
 800a62c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a630:	4623      	mov	r3, r4
 800a632:	f7f5 fdfd 	bl	8000230 <__aeabi_dsub>
 800a636:	46da      	mov	sl, fp
 800a638:	462b      	mov	r3, r5
 800a63a:	4652      	mov	r2, sl
 800a63c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a640:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a644:	f7f5 fdf6 	bl	8000234 <__adddf3>
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	2000      	movs	r0, #0
 800a64e:	49b9      	ldr	r1, [pc, #740]	; (800a934 <__ieee754_pow+0x73c>)
 800a650:	f7f6 f8d0 	bl	80007f4 <__aeabi_ddiv>
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a65c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a660:	f7f5 ff9e 	bl	80005a0 <__aeabi_dmul>
 800a664:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a668:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a66c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a670:	2300      	movs	r3, #0
 800a672:	2200      	movs	r2, #0
 800a674:	46ab      	mov	fp, r5
 800a676:	106d      	asrs	r5, r5, #1
 800a678:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a67c:	9304      	str	r3, [sp, #16]
 800a67e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a682:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a686:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a68a:	4640      	mov	r0, r8
 800a68c:	4649      	mov	r1, r9
 800a68e:	4614      	mov	r4, r2
 800a690:	461d      	mov	r5, r3
 800a692:	f7f5 ff85 	bl	80005a0 <__aeabi_dmul>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a69e:	f7f5 fdc7 	bl	8000230 <__aeabi_dsub>
 800a6a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	460f      	mov	r7, r1
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	4629      	mov	r1, r5
 800a6ae:	f7f5 fdbf 	bl	8000230 <__aeabi_dsub>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	4650      	mov	r0, sl
 800a6b8:	4659      	mov	r1, fp
 800a6ba:	f7f5 fdb9 	bl	8000230 <__aeabi_dsub>
 800a6be:	4642      	mov	r2, r8
 800a6c0:	464b      	mov	r3, r9
 800a6c2:	f7f5 ff6d 	bl	80005a0 <__aeabi_dmul>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	4639      	mov	r1, r7
 800a6ce:	f7f5 fdaf 	bl	8000230 <__aeabi_dsub>
 800a6d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a6d6:	f7f5 ff63 	bl	80005a0 <__aeabi_dmul>
 800a6da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a6e2:	4610      	mov	r0, r2
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	f7f5 ff5b 	bl	80005a0 <__aeabi_dmul>
 800a6ea:	a37b      	add	r3, pc, #492	; (adr r3, 800a8d8 <__ieee754_pow+0x6e0>)
 800a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	460d      	mov	r5, r1
 800a6f4:	f7f5 ff54 	bl	80005a0 <__aeabi_dmul>
 800a6f8:	a379      	add	r3, pc, #484	; (adr r3, 800a8e0 <__ieee754_pow+0x6e8>)
 800a6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fe:	f7f5 fd99 	bl	8000234 <__adddf3>
 800a702:	4622      	mov	r2, r4
 800a704:	462b      	mov	r3, r5
 800a706:	f7f5 ff4b 	bl	80005a0 <__aeabi_dmul>
 800a70a:	a377      	add	r3, pc, #476	; (adr r3, 800a8e8 <__ieee754_pow+0x6f0>)
 800a70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a710:	f7f5 fd90 	bl	8000234 <__adddf3>
 800a714:	4622      	mov	r2, r4
 800a716:	462b      	mov	r3, r5
 800a718:	f7f5 ff42 	bl	80005a0 <__aeabi_dmul>
 800a71c:	a374      	add	r3, pc, #464	; (adr r3, 800a8f0 <__ieee754_pow+0x6f8>)
 800a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a722:	f7f5 fd87 	bl	8000234 <__adddf3>
 800a726:	4622      	mov	r2, r4
 800a728:	462b      	mov	r3, r5
 800a72a:	f7f5 ff39 	bl	80005a0 <__aeabi_dmul>
 800a72e:	a372      	add	r3, pc, #456	; (adr r3, 800a8f8 <__ieee754_pow+0x700>)
 800a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a734:	f7f5 fd7e 	bl	8000234 <__adddf3>
 800a738:	4622      	mov	r2, r4
 800a73a:	462b      	mov	r3, r5
 800a73c:	f7f5 ff30 	bl	80005a0 <__aeabi_dmul>
 800a740:	a36f      	add	r3, pc, #444	; (adr r3, 800a900 <__ieee754_pow+0x708>)
 800a742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a746:	f7f5 fd75 	bl	8000234 <__adddf3>
 800a74a:	4622      	mov	r2, r4
 800a74c:	4606      	mov	r6, r0
 800a74e:	460f      	mov	r7, r1
 800a750:	462b      	mov	r3, r5
 800a752:	4620      	mov	r0, r4
 800a754:	4629      	mov	r1, r5
 800a756:	f7f5 ff23 	bl	80005a0 <__aeabi_dmul>
 800a75a:	4602      	mov	r2, r0
 800a75c:	460b      	mov	r3, r1
 800a75e:	4630      	mov	r0, r6
 800a760:	4639      	mov	r1, r7
 800a762:	f7f5 ff1d 	bl	80005a0 <__aeabi_dmul>
 800a766:	4604      	mov	r4, r0
 800a768:	460d      	mov	r5, r1
 800a76a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a76e:	4642      	mov	r2, r8
 800a770:	464b      	mov	r3, r9
 800a772:	f7f5 fd5f 	bl	8000234 <__adddf3>
 800a776:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a77a:	f7f5 ff11 	bl	80005a0 <__aeabi_dmul>
 800a77e:	4622      	mov	r2, r4
 800a780:	462b      	mov	r3, r5
 800a782:	f7f5 fd57 	bl	8000234 <__adddf3>
 800a786:	4642      	mov	r2, r8
 800a788:	4606      	mov	r6, r0
 800a78a:	460f      	mov	r7, r1
 800a78c:	464b      	mov	r3, r9
 800a78e:	4640      	mov	r0, r8
 800a790:	4649      	mov	r1, r9
 800a792:	f7f5 ff05 	bl	80005a0 <__aeabi_dmul>
 800a796:	2200      	movs	r2, #0
 800a798:	4b67      	ldr	r3, [pc, #412]	; (800a938 <__ieee754_pow+0x740>)
 800a79a:	4682      	mov	sl, r0
 800a79c:	468b      	mov	fp, r1
 800a79e:	f7f5 fd49 	bl	8000234 <__adddf3>
 800a7a2:	4632      	mov	r2, r6
 800a7a4:	463b      	mov	r3, r7
 800a7a6:	f7f5 fd45 	bl	8000234 <__adddf3>
 800a7aa:	9c04      	ldr	r4, [sp, #16]
 800a7ac:	460d      	mov	r5, r1
 800a7ae:	4622      	mov	r2, r4
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	f7f5 fef3 	bl	80005a0 <__aeabi_dmul>
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	4680      	mov	r8, r0
 800a7be:	4689      	mov	r9, r1
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	4b5c      	ldr	r3, [pc, #368]	; (800a938 <__ieee754_pow+0x740>)
 800a7c6:	f7f5 fd33 	bl	8000230 <__aeabi_dsub>
 800a7ca:	4652      	mov	r2, sl
 800a7cc:	465b      	mov	r3, fp
 800a7ce:	f7f5 fd2f 	bl	8000230 <__aeabi_dsub>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	4639      	mov	r1, r7
 800a7da:	f7f5 fd29 	bl	8000230 <__aeabi_dsub>
 800a7de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7e2:	f7f5 fedd 	bl	80005a0 <__aeabi_dmul>
 800a7e6:	4622      	mov	r2, r4
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	460f      	mov	r7, r1
 800a7ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a7f0:	462b      	mov	r3, r5
 800a7f2:	f7f5 fed5 	bl	80005a0 <__aeabi_dmul>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	4639      	mov	r1, r7
 800a7fe:	f7f5 fd19 	bl	8000234 <__adddf3>
 800a802:	4606      	mov	r6, r0
 800a804:	460f      	mov	r7, r1
 800a806:	4602      	mov	r2, r0
 800a808:	460b      	mov	r3, r1
 800a80a:	4640      	mov	r0, r8
 800a80c:	4649      	mov	r1, r9
 800a80e:	f7f5 fd11 	bl	8000234 <__adddf3>
 800a812:	a33d      	add	r3, pc, #244	; (adr r3, 800a908 <__ieee754_pow+0x710>)
 800a814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a818:	9c04      	ldr	r4, [sp, #16]
 800a81a:	460d      	mov	r5, r1
 800a81c:	4620      	mov	r0, r4
 800a81e:	f7f5 febf 	bl	80005a0 <__aeabi_dmul>
 800a822:	4642      	mov	r2, r8
 800a824:	464b      	mov	r3, r9
 800a826:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a82a:	4620      	mov	r0, r4
 800a82c:	4629      	mov	r1, r5
 800a82e:	f7f5 fcff 	bl	8000230 <__aeabi_dsub>
 800a832:	4602      	mov	r2, r0
 800a834:	460b      	mov	r3, r1
 800a836:	4630      	mov	r0, r6
 800a838:	4639      	mov	r1, r7
 800a83a:	f7f5 fcf9 	bl	8000230 <__aeabi_dsub>
 800a83e:	a334      	add	r3, pc, #208	; (adr r3, 800a910 <__ieee754_pow+0x718>)
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	f7f5 feac 	bl	80005a0 <__aeabi_dmul>
 800a848:	a333      	add	r3, pc, #204	; (adr r3, 800a918 <__ieee754_pow+0x720>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	4606      	mov	r6, r0
 800a850:	460f      	mov	r7, r1
 800a852:	4620      	mov	r0, r4
 800a854:	4629      	mov	r1, r5
 800a856:	f7f5 fea3 	bl	80005a0 <__aeabi_dmul>
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	4630      	mov	r0, r6
 800a860:	4639      	mov	r1, r7
 800a862:	f7f5 fce7 	bl	8000234 <__adddf3>
 800a866:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a868:	4b34      	ldr	r3, [pc, #208]	; (800a93c <__ieee754_pow+0x744>)
 800a86a:	4413      	add	r3, r2
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f7f5 fce0 	bl	8000234 <__adddf3>
 800a874:	4680      	mov	r8, r0
 800a876:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a878:	4689      	mov	r9, r1
 800a87a:	f7f5 fe27 	bl	80004cc <__aeabi_i2d>
 800a87e:	4604      	mov	r4, r0
 800a880:	460d      	mov	r5, r1
 800a882:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a884:	4b2e      	ldr	r3, [pc, #184]	; (800a940 <__ieee754_pow+0x748>)
 800a886:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a88a:	4413      	add	r3, r2
 800a88c:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a890:	4642      	mov	r2, r8
 800a892:	464b      	mov	r3, r9
 800a894:	f7f5 fcce 	bl	8000234 <__adddf3>
 800a898:	4632      	mov	r2, r6
 800a89a:	463b      	mov	r3, r7
 800a89c:	f7f5 fcca 	bl	8000234 <__adddf3>
 800a8a0:	4622      	mov	r2, r4
 800a8a2:	462b      	mov	r3, r5
 800a8a4:	f7f5 fcc6 	bl	8000234 <__adddf3>
 800a8a8:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a8ac:	4622      	mov	r2, r4
 800a8ae:	462b      	mov	r3, r5
 800a8b0:	4650      	mov	r0, sl
 800a8b2:	468b      	mov	fp, r1
 800a8b4:	f7f5 fcbc 	bl	8000230 <__aeabi_dsub>
 800a8b8:	4632      	mov	r2, r6
 800a8ba:	463b      	mov	r3, r7
 800a8bc:	f7f5 fcb8 	bl	8000230 <__aeabi_dsub>
 800a8c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8c4:	f7f5 fcb4 	bl	8000230 <__aeabi_dsub>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4640      	mov	r0, r8
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	e608      	b.n	800a4e4 <__ieee754_pow+0x2ec>
 800a8d2:	bf00      	nop
 800a8d4:	f3af 8000 	nop.w
 800a8d8:	4a454eef 	.word	0x4a454eef
 800a8dc:	3fca7e28 	.word	0x3fca7e28
 800a8e0:	93c9db65 	.word	0x93c9db65
 800a8e4:	3fcd864a 	.word	0x3fcd864a
 800a8e8:	a91d4101 	.word	0xa91d4101
 800a8ec:	3fd17460 	.word	0x3fd17460
 800a8f0:	518f264d 	.word	0x518f264d
 800a8f4:	3fd55555 	.word	0x3fd55555
 800a8f8:	db6fabff 	.word	0xdb6fabff
 800a8fc:	3fdb6db6 	.word	0x3fdb6db6
 800a900:	33333303 	.word	0x33333303
 800a904:	3fe33333 	.word	0x3fe33333
 800a908:	e0000000 	.word	0xe0000000
 800a90c:	3feec709 	.word	0x3feec709
 800a910:	dc3a03fd 	.word	0xdc3a03fd
 800a914:	3feec709 	.word	0x3feec709
 800a918:	145b01f5 	.word	0x145b01f5
 800a91c:	be3e2fe0 	.word	0xbe3e2fe0
 800a920:	7ff00000 	.word	0x7ff00000
 800a924:	43400000 	.word	0x43400000
 800a928:	0003988e 	.word	0x0003988e
 800a92c:	000bb679 	.word	0x000bb679
 800a930:	0800b208 	.word	0x0800b208
 800a934:	3ff00000 	.word	0x3ff00000
 800a938:	40080000 	.word	0x40080000
 800a93c:	0800b228 	.word	0x0800b228
 800a940:	0800b218 	.word	0x0800b218
 800a944:	2601      	movs	r6, #1
 800a946:	e667      	b.n	800a618 <__ieee754_pow+0x420>
 800a948:	a39d      	add	r3, pc, #628	; (adr r3, 800abc0 <__ieee754_pow+0x9c8>)
 800a94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94e:	4640      	mov	r0, r8
 800a950:	4649      	mov	r1, r9
 800a952:	f7f5 fc6f 	bl	8000234 <__adddf3>
 800a956:	4622      	mov	r2, r4
 800a958:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a95c:	462b      	mov	r3, r5
 800a95e:	4650      	mov	r0, sl
 800a960:	4639      	mov	r1, r7
 800a962:	f7f5 fc65 	bl	8000230 <__aeabi_dsub>
 800a966:	4602      	mov	r2, r0
 800a968:	460b      	mov	r3, r1
 800a96a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a96e:	f7f6 f8a7 	bl	8000ac0 <__aeabi_dcmpgt>
 800a972:	2800      	cmp	r0, #0
 800a974:	f47f ae01 	bne.w	800a57a <__ieee754_pow+0x382>
 800a978:	4aa5      	ldr	r2, [pc, #660]	; (800ac10 <__ieee754_pow+0xa18>)
 800a97a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a97e:	4293      	cmp	r3, r2
 800a980:	f340 8103 	ble.w	800ab8a <__ieee754_pow+0x992>
 800a984:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a988:	2000      	movs	r0, #0
 800a98a:	151b      	asrs	r3, r3, #20
 800a98c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a990:	fa4a f303 	asr.w	r3, sl, r3
 800a994:	4433      	add	r3, r6
 800a996:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a99a:	4f9e      	ldr	r7, [pc, #632]	; (800ac14 <__ieee754_pow+0xa1c>)
 800a99c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a9a0:	4117      	asrs	r7, r2
 800a9a2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a9a6:	ea23 0107 	bic.w	r1, r3, r7
 800a9aa:	f1c2 0214 	rsb	r2, r2, #20
 800a9ae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	fa4a fa02 	asr.w	sl, sl, r2
 800a9b8:	2e00      	cmp	r6, #0
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	4629      	mov	r1, r5
 800a9be:	4620      	mov	r0, r4
 800a9c0:	bfb8      	it	lt
 800a9c2:	f1ca 0a00 	rsblt	sl, sl, #0
 800a9c6:	f7f5 fc33 	bl	8000230 <__aeabi_dsub>
 800a9ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9d2:	2400      	movs	r4, #0
 800a9d4:	4642      	mov	r2, r8
 800a9d6:	464b      	mov	r3, r9
 800a9d8:	f7f5 fc2c 	bl	8000234 <__adddf3>
 800a9dc:	a37a      	add	r3, pc, #488	; (adr r3, 800abc8 <__ieee754_pow+0x9d0>)
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	460d      	mov	r5, r1
 800a9e6:	f7f5 fddb 	bl	80005a0 <__aeabi_dmul>
 800a9ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	460f      	mov	r7, r1
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	4629      	mov	r1, r5
 800a9f6:	f7f5 fc1b 	bl	8000230 <__aeabi_dsub>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4640      	mov	r0, r8
 800aa00:	4649      	mov	r1, r9
 800aa02:	f7f5 fc15 	bl	8000230 <__aeabi_dsub>
 800aa06:	a372      	add	r3, pc, #456	; (adr r3, 800abd0 <__ieee754_pow+0x9d8>)
 800aa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0c:	f7f5 fdc8 	bl	80005a0 <__aeabi_dmul>
 800aa10:	a371      	add	r3, pc, #452	; (adr r3, 800abd8 <__ieee754_pow+0x9e0>)
 800aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa16:	4680      	mov	r8, r0
 800aa18:	4689      	mov	r9, r1
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	4629      	mov	r1, r5
 800aa1e:	f7f5 fdbf 	bl	80005a0 <__aeabi_dmul>
 800aa22:	4602      	mov	r2, r0
 800aa24:	460b      	mov	r3, r1
 800aa26:	4640      	mov	r0, r8
 800aa28:	4649      	mov	r1, r9
 800aa2a:	f7f5 fc03 	bl	8000234 <__adddf3>
 800aa2e:	4604      	mov	r4, r0
 800aa30:	460d      	mov	r5, r1
 800aa32:	4602      	mov	r2, r0
 800aa34:	460b      	mov	r3, r1
 800aa36:	4630      	mov	r0, r6
 800aa38:	4639      	mov	r1, r7
 800aa3a:	f7f5 fbfb 	bl	8000234 <__adddf3>
 800aa3e:	4632      	mov	r2, r6
 800aa40:	463b      	mov	r3, r7
 800aa42:	4680      	mov	r8, r0
 800aa44:	4689      	mov	r9, r1
 800aa46:	f7f5 fbf3 	bl	8000230 <__aeabi_dsub>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	4620      	mov	r0, r4
 800aa50:	4629      	mov	r1, r5
 800aa52:	f7f5 fbed 	bl	8000230 <__aeabi_dsub>
 800aa56:	4642      	mov	r2, r8
 800aa58:	4606      	mov	r6, r0
 800aa5a:	460f      	mov	r7, r1
 800aa5c:	464b      	mov	r3, r9
 800aa5e:	4640      	mov	r0, r8
 800aa60:	4649      	mov	r1, r9
 800aa62:	f7f5 fd9d 	bl	80005a0 <__aeabi_dmul>
 800aa66:	a35e      	add	r3, pc, #376	; (adr r3, 800abe0 <__ieee754_pow+0x9e8>)
 800aa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	460d      	mov	r5, r1
 800aa70:	f7f5 fd96 	bl	80005a0 <__aeabi_dmul>
 800aa74:	a35c      	add	r3, pc, #368	; (adr r3, 800abe8 <__ieee754_pow+0x9f0>)
 800aa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7a:	f7f5 fbd9 	bl	8000230 <__aeabi_dsub>
 800aa7e:	4622      	mov	r2, r4
 800aa80:	462b      	mov	r3, r5
 800aa82:	f7f5 fd8d 	bl	80005a0 <__aeabi_dmul>
 800aa86:	a35a      	add	r3, pc, #360	; (adr r3, 800abf0 <__ieee754_pow+0x9f8>)
 800aa88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8c:	f7f5 fbd2 	bl	8000234 <__adddf3>
 800aa90:	4622      	mov	r2, r4
 800aa92:	462b      	mov	r3, r5
 800aa94:	f7f5 fd84 	bl	80005a0 <__aeabi_dmul>
 800aa98:	a357      	add	r3, pc, #348	; (adr r3, 800abf8 <__ieee754_pow+0xa00>)
 800aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9e:	f7f5 fbc7 	bl	8000230 <__aeabi_dsub>
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	462b      	mov	r3, r5
 800aaa6:	f7f5 fd7b 	bl	80005a0 <__aeabi_dmul>
 800aaaa:	a355      	add	r3, pc, #340	; (adr r3, 800ac00 <__ieee754_pow+0xa08>)
 800aaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab0:	f7f5 fbc0 	bl	8000234 <__adddf3>
 800aab4:	4622      	mov	r2, r4
 800aab6:	462b      	mov	r3, r5
 800aab8:	f7f5 fd72 	bl	80005a0 <__aeabi_dmul>
 800aabc:	4602      	mov	r2, r0
 800aabe:	460b      	mov	r3, r1
 800aac0:	4640      	mov	r0, r8
 800aac2:	4649      	mov	r1, r9
 800aac4:	f7f5 fbb4 	bl	8000230 <__aeabi_dsub>
 800aac8:	4604      	mov	r4, r0
 800aaca:	460d      	mov	r5, r1
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	4640      	mov	r0, r8
 800aad2:	4649      	mov	r1, r9
 800aad4:	f7f5 fd64 	bl	80005a0 <__aeabi_dmul>
 800aad8:	2200      	movs	r2, #0
 800aada:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aae2:	4620      	mov	r0, r4
 800aae4:	4629      	mov	r1, r5
 800aae6:	f7f5 fba3 	bl	8000230 <__aeabi_dsub>
 800aaea:	4602      	mov	r2, r0
 800aaec:	460b      	mov	r3, r1
 800aaee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaf2:	f7f5 fe7f 	bl	80007f4 <__aeabi_ddiv>
 800aaf6:	4632      	mov	r2, r6
 800aaf8:	4604      	mov	r4, r0
 800aafa:	460d      	mov	r5, r1
 800aafc:	463b      	mov	r3, r7
 800aafe:	4640      	mov	r0, r8
 800ab00:	4649      	mov	r1, r9
 800ab02:	f7f5 fd4d 	bl	80005a0 <__aeabi_dmul>
 800ab06:	4632      	mov	r2, r6
 800ab08:	463b      	mov	r3, r7
 800ab0a:	f7f5 fb93 	bl	8000234 <__adddf3>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	4620      	mov	r0, r4
 800ab14:	4629      	mov	r1, r5
 800ab16:	f7f5 fb8b 	bl	8000230 <__aeabi_dsub>
 800ab1a:	4642      	mov	r2, r8
 800ab1c:	464b      	mov	r3, r9
 800ab1e:	f7f5 fb87 	bl	8000230 <__aeabi_dsub>
 800ab22:	4602      	mov	r2, r0
 800ab24:	460b      	mov	r3, r1
 800ab26:	2000      	movs	r0, #0
 800ab28:	493b      	ldr	r1, [pc, #236]	; (800ac18 <__ieee754_pow+0xa20>)
 800ab2a:	f7f5 fb81 	bl	8000230 <__aeabi_dsub>
 800ab2e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800ab32:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ab36:	da2b      	bge.n	800ab90 <__ieee754_pow+0x998>
 800ab38:	4652      	mov	r2, sl
 800ab3a:	f000 f9e9 	bl	800af10 <scalbn>
 800ab3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab42:	f7ff bbf2 	b.w	800a32a <__ieee754_pow+0x132>
 800ab46:	4b35      	ldr	r3, [pc, #212]	; (800ac1c <__ieee754_pow+0xa24>)
 800ab48:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800ab4c:	429f      	cmp	r7, r3
 800ab4e:	f77f af13 	ble.w	800a978 <__ieee754_pow+0x780>
 800ab52:	4b33      	ldr	r3, [pc, #204]	; (800ac20 <__ieee754_pow+0xa28>)
 800ab54:	440b      	add	r3, r1
 800ab56:	4303      	orrs	r3, r0
 800ab58:	d00b      	beq.n	800ab72 <__ieee754_pow+0x97a>
 800ab5a:	a32b      	add	r3, pc, #172	; (adr r3, 800ac08 <__ieee754_pow+0xa10>)
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab64:	f7f5 fd1c 	bl	80005a0 <__aeabi_dmul>
 800ab68:	a327      	add	r3, pc, #156	; (adr r3, 800ac08 <__ieee754_pow+0xa10>)
 800ab6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6e:	f7ff bbdc 	b.w	800a32a <__ieee754_pow+0x132>
 800ab72:	4622      	mov	r2, r4
 800ab74:	462b      	mov	r3, r5
 800ab76:	f7f5 fb5b 	bl	8000230 <__aeabi_dsub>
 800ab7a:	4642      	mov	r2, r8
 800ab7c:	464b      	mov	r3, r9
 800ab7e:	f7f5 ff95 	bl	8000aac <__aeabi_dcmpge>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	f43f aef8 	beq.w	800a978 <__ieee754_pow+0x780>
 800ab88:	e7e7      	b.n	800ab5a <__ieee754_pow+0x962>
 800ab8a:	f04f 0a00 	mov.w	sl, #0
 800ab8e:	e71e      	b.n	800a9ce <__ieee754_pow+0x7d6>
 800ab90:	4621      	mov	r1, r4
 800ab92:	e7d4      	b.n	800ab3e <__ieee754_pow+0x946>
 800ab94:	f04f 0b00 	mov.w	fp, #0
 800ab98:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ac18 <__ieee754_pow+0xa20>
 800ab9c:	f7ff bbb0 	b.w	800a300 <__ieee754_pow+0x108>
 800aba0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800aba4:	f7ff bbac 	b.w	800a300 <__ieee754_pow+0x108>
 800aba8:	4638      	mov	r0, r7
 800abaa:	4641      	mov	r1, r8
 800abac:	f7ff bbbf 	b.w	800a32e <__ieee754_pow+0x136>
 800abb0:	9200      	str	r2, [sp, #0]
 800abb2:	f7ff bb7f 	b.w	800a2b4 <__ieee754_pow+0xbc>
 800abb6:	2300      	movs	r3, #0
 800abb8:	f7ff bb69 	b.w	800a28e <__ieee754_pow+0x96>
 800abbc:	f3af 8000 	nop.w
 800abc0:	652b82fe 	.word	0x652b82fe
 800abc4:	3c971547 	.word	0x3c971547
 800abc8:	00000000 	.word	0x00000000
 800abcc:	3fe62e43 	.word	0x3fe62e43
 800abd0:	fefa39ef 	.word	0xfefa39ef
 800abd4:	3fe62e42 	.word	0x3fe62e42
 800abd8:	0ca86c39 	.word	0x0ca86c39
 800abdc:	be205c61 	.word	0xbe205c61
 800abe0:	72bea4d0 	.word	0x72bea4d0
 800abe4:	3e663769 	.word	0x3e663769
 800abe8:	c5d26bf1 	.word	0xc5d26bf1
 800abec:	3ebbbd41 	.word	0x3ebbbd41
 800abf0:	af25de2c 	.word	0xaf25de2c
 800abf4:	3f11566a 	.word	0x3f11566a
 800abf8:	16bebd93 	.word	0x16bebd93
 800abfc:	3f66c16c 	.word	0x3f66c16c
 800ac00:	5555553e 	.word	0x5555553e
 800ac04:	3fc55555 	.word	0x3fc55555
 800ac08:	c2f8f359 	.word	0xc2f8f359
 800ac0c:	01a56e1f 	.word	0x01a56e1f
 800ac10:	3fe00000 	.word	0x3fe00000
 800ac14:	000fffff 	.word	0x000fffff
 800ac18:	3ff00000 	.word	0x3ff00000
 800ac1c:	4090cbff 	.word	0x4090cbff
 800ac20:	3f6f3400 	.word	0x3f6f3400

0800ac24 <__ieee754_sqrt>:
 800ac24:	f8df c150 	ldr.w	ip, [pc, #336]	; 800ad78 <__ieee754_sqrt+0x154>
 800ac28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2c:	ea3c 0c01 	bics.w	ip, ip, r1
 800ac30:	460b      	mov	r3, r1
 800ac32:	4606      	mov	r6, r0
 800ac34:	460d      	mov	r5, r1
 800ac36:	460a      	mov	r2, r1
 800ac38:	4607      	mov	r7, r0
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	d10e      	bne.n	800ac5c <__ieee754_sqrt+0x38>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	f7f5 fcae 	bl	80005a0 <__aeabi_dmul>
 800ac44:	4602      	mov	r2, r0
 800ac46:	460b      	mov	r3, r1
 800ac48:	4630      	mov	r0, r6
 800ac4a:	4629      	mov	r1, r5
 800ac4c:	f7f5 faf2 	bl	8000234 <__adddf3>
 800ac50:	4606      	mov	r6, r0
 800ac52:	460d      	mov	r5, r1
 800ac54:	4630      	mov	r0, r6
 800ac56:	4629      	mov	r1, r5
 800ac58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac5c:	2900      	cmp	r1, #0
 800ac5e:	dc0d      	bgt.n	800ac7c <__ieee754_sqrt+0x58>
 800ac60:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ac64:	ea5c 0707 	orrs.w	r7, ip, r7
 800ac68:	d0f4      	beq.n	800ac54 <__ieee754_sqrt+0x30>
 800ac6a:	b139      	cbz	r1, 800ac7c <__ieee754_sqrt+0x58>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	f7f5 fadf 	bl	8000230 <__aeabi_dsub>
 800ac72:	4602      	mov	r2, r0
 800ac74:	460b      	mov	r3, r1
 800ac76:	f7f5 fdbd 	bl	80007f4 <__aeabi_ddiv>
 800ac7a:	e7e9      	b.n	800ac50 <__ieee754_sqrt+0x2c>
 800ac7c:	1512      	asrs	r2, r2, #20
 800ac7e:	d074      	beq.n	800ad6a <__ieee754_sqrt+0x146>
 800ac80:	2000      	movs	r0, #0
 800ac82:	07d5      	lsls	r5, r2, #31
 800ac84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac88:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800ac8c:	bf5e      	ittt	pl
 800ac8e:	0fe3      	lsrpl	r3, r4, #31
 800ac90:	0064      	lslpl	r4, r4, #1
 800ac92:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800ac96:	0fe3      	lsrs	r3, r4, #31
 800ac98:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ac9c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800aca0:	2516      	movs	r5, #22
 800aca2:	4601      	mov	r1, r0
 800aca4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800aca8:	1076      	asrs	r6, r6, #1
 800acaa:	0064      	lsls	r4, r4, #1
 800acac:	188f      	adds	r7, r1, r2
 800acae:	429f      	cmp	r7, r3
 800acb0:	bfde      	ittt	le
 800acb2:	1bdb      	suble	r3, r3, r7
 800acb4:	18b9      	addle	r1, r7, r2
 800acb6:	1880      	addle	r0, r0, r2
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	3d01      	subs	r5, #1
 800acbc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800acc0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800acc4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800acc8:	d1f0      	bne.n	800acac <__ieee754_sqrt+0x88>
 800acca:	462a      	mov	r2, r5
 800accc:	f04f 0e20 	mov.w	lr, #32
 800acd0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800acd4:	428b      	cmp	r3, r1
 800acd6:	eb07 0c05 	add.w	ip, r7, r5
 800acda:	dc02      	bgt.n	800ace2 <__ieee754_sqrt+0xbe>
 800acdc:	d113      	bne.n	800ad06 <__ieee754_sqrt+0xe2>
 800acde:	45a4      	cmp	ip, r4
 800ace0:	d811      	bhi.n	800ad06 <__ieee754_sqrt+0xe2>
 800ace2:	f1bc 0f00 	cmp.w	ip, #0
 800ace6:	eb0c 0507 	add.w	r5, ip, r7
 800acea:	da43      	bge.n	800ad74 <__ieee754_sqrt+0x150>
 800acec:	2d00      	cmp	r5, #0
 800acee:	db41      	blt.n	800ad74 <__ieee754_sqrt+0x150>
 800acf0:	f101 0801 	add.w	r8, r1, #1
 800acf4:	1a5b      	subs	r3, r3, r1
 800acf6:	4641      	mov	r1, r8
 800acf8:	45a4      	cmp	ip, r4
 800acfa:	bf88      	it	hi
 800acfc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ad00:	eba4 040c 	sub.w	r4, r4, ip
 800ad04:	443a      	add	r2, r7
 800ad06:	005b      	lsls	r3, r3, #1
 800ad08:	f1be 0e01 	subs.w	lr, lr, #1
 800ad0c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ad10:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800ad14:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ad18:	d1dc      	bne.n	800acd4 <__ieee754_sqrt+0xb0>
 800ad1a:	4323      	orrs	r3, r4
 800ad1c:	d006      	beq.n	800ad2c <__ieee754_sqrt+0x108>
 800ad1e:	1c54      	adds	r4, r2, #1
 800ad20:	bf0b      	itete	eq
 800ad22:	4672      	moveq	r2, lr
 800ad24:	3201      	addne	r2, #1
 800ad26:	3001      	addeq	r0, #1
 800ad28:	f022 0201 	bicne.w	r2, r2, #1
 800ad2c:	1043      	asrs	r3, r0, #1
 800ad2e:	07c1      	lsls	r1, r0, #31
 800ad30:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ad34:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ad38:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ad3c:	bf48      	it	mi
 800ad3e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ad42:	4610      	mov	r0, r2
 800ad44:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800ad48:	e782      	b.n	800ac50 <__ieee754_sqrt+0x2c>
 800ad4a:	0ae3      	lsrs	r3, r4, #11
 800ad4c:	3915      	subs	r1, #21
 800ad4e:	0564      	lsls	r4, r4, #21
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d0fa      	beq.n	800ad4a <__ieee754_sqrt+0x126>
 800ad54:	02de      	lsls	r6, r3, #11
 800ad56:	d50a      	bpl.n	800ad6e <__ieee754_sqrt+0x14a>
 800ad58:	f1c2 0020 	rsb	r0, r2, #32
 800ad5c:	fa24 f000 	lsr.w	r0, r4, r0
 800ad60:	1e55      	subs	r5, r2, #1
 800ad62:	4094      	lsls	r4, r2
 800ad64:	4303      	orrs	r3, r0
 800ad66:	1b4a      	subs	r2, r1, r5
 800ad68:	e78a      	b.n	800ac80 <__ieee754_sqrt+0x5c>
 800ad6a:	4611      	mov	r1, r2
 800ad6c:	e7f0      	b.n	800ad50 <__ieee754_sqrt+0x12c>
 800ad6e:	005b      	lsls	r3, r3, #1
 800ad70:	3201      	adds	r2, #1
 800ad72:	e7ef      	b.n	800ad54 <__ieee754_sqrt+0x130>
 800ad74:	4688      	mov	r8, r1
 800ad76:	e7bd      	b.n	800acf4 <__ieee754_sqrt+0xd0>
 800ad78:	7ff00000 	.word	0x7ff00000

0800ad7c <with_errnof>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4604      	mov	r4, r0
 800ad80:	460d      	mov	r5, r1
 800ad82:	f000 f953 	bl	800b02c <__errno>
 800ad86:	6005      	str	r5, [r0, #0]
 800ad88:	4620      	mov	r0, r4
 800ad8a:	bd38      	pop	{r3, r4, r5, pc}

0800ad8c <__math_divzerof>:
 800ad8c:	b508      	push	{r3, lr}
 800ad8e:	b948      	cbnz	r0, 800ada4 <__math_divzerof+0x18>
 800ad90:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ad94:	2100      	movs	r1, #0
 800ad96:	f7f6 f89d 	bl	8000ed4 <__aeabi_fdiv>
 800ad9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ad9e:	2122      	movs	r1, #34	; 0x22
 800ada0:	f7ff bfec 	b.w	800ad7c <with_errnof>
 800ada4:	4800      	ldr	r0, [pc, #0]	; (800ada8 <__math_divzerof+0x1c>)
 800ada6:	e7f5      	b.n	800ad94 <__math_divzerof+0x8>
 800ada8:	bf800000 	.word	0xbf800000

0800adac <__math_invalidf>:
 800adac:	b538      	push	{r3, r4, r5, lr}
 800adae:	4601      	mov	r1, r0
 800adb0:	4605      	mov	r5, r0
 800adb2:	f7f5 fed1 	bl	8000b58 <__aeabi_fsub>
 800adb6:	4601      	mov	r1, r0
 800adb8:	f7f6 f88c 	bl	8000ed4 <__aeabi_fdiv>
 800adbc:	4629      	mov	r1, r5
 800adbe:	4604      	mov	r4, r0
 800adc0:	4628      	mov	r0, r5
 800adc2:	f7f6 f999 	bl	80010f8 <__aeabi_fcmpun>
 800adc6:	b928      	cbnz	r0, 800add4 <__math_invalidf+0x28>
 800adc8:	4620      	mov	r0, r4
 800adca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adce:	2121      	movs	r1, #33	; 0x21
 800add0:	f7ff bfd4 	b.w	800ad7c <with_errnof>
 800add4:	4620      	mov	r0, r4
 800add6:	bd38      	pop	{r3, r4, r5, pc}

0800add8 <fabs>:
 800add8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800addc:	4770      	bx	lr

0800adde <finite>:
 800adde:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800ade2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ade6:	0fc0      	lsrs	r0, r0, #31
 800ade8:	4770      	bx	lr
	...

0800adec <nan>:
 800adec:	2000      	movs	r0, #0
 800adee:	4901      	ldr	r1, [pc, #4]	; (800adf4 <nan+0x8>)
 800adf0:	4770      	bx	lr
 800adf2:	bf00      	nop
 800adf4:	7ff80000 	.word	0x7ff80000

0800adf8 <rint>:
 800adf8:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800adfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adfe:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800ae02:	2f13      	cmp	r7, #19
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	460c      	mov	r4, r1
 800ae0a:	4605      	mov	r5, r0
 800ae0c:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800ae10:	dc59      	bgt.n	800aec6 <rint+0xce>
 800ae12:	2f00      	cmp	r7, #0
 800ae14:	da2a      	bge.n	800ae6c <rint+0x74>
 800ae16:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ae1a:	4301      	orrs	r1, r0
 800ae1c:	d022      	beq.n	800ae64 <rint+0x6c>
 800ae1e:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800ae22:	4301      	orrs	r1, r0
 800ae24:	424d      	negs	r5, r1
 800ae26:	430d      	orrs	r5, r1
 800ae28:	4936      	ldr	r1, [pc, #216]	; (800af04 <rint+0x10c>)
 800ae2a:	0c5c      	lsrs	r4, r3, #17
 800ae2c:	0b2d      	lsrs	r5, r5, #12
 800ae2e:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800ae32:	0464      	lsls	r4, r4, #17
 800ae34:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ae38:	ea45 0304 	orr.w	r3, r5, r4
 800ae3c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ae40:	4620      	mov	r0, r4
 800ae42:	4629      	mov	r1, r5
 800ae44:	f7f5 f9f6 	bl	8000234 <__adddf3>
 800ae48:	e9cd 0100 	strd	r0, r1, [sp]
 800ae4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae50:	462b      	mov	r3, r5
 800ae52:	4622      	mov	r2, r4
 800ae54:	f7f5 f9ec 	bl	8000230 <__aeabi_dsub>
 800ae58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae5c:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800ae60:	4602      	mov	r2, r0
 800ae62:	460b      	mov	r3, r1
 800ae64:	4610      	mov	r0, r2
 800ae66:	4619      	mov	r1, r3
 800ae68:	b003      	add	sp, #12
 800ae6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae6c:	4926      	ldr	r1, [pc, #152]	; (800af08 <rint+0x110>)
 800ae6e:	4139      	asrs	r1, r7
 800ae70:	ea03 0001 	and.w	r0, r3, r1
 800ae74:	4310      	orrs	r0, r2
 800ae76:	d0f5      	beq.n	800ae64 <rint+0x6c>
 800ae78:	084b      	lsrs	r3, r1, #1
 800ae7a:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800ae7e:	ea52 0501 	orrs.w	r5, r2, r1
 800ae82:	d00c      	beq.n	800ae9e <rint+0xa6>
 800ae84:	ea24 0303 	bic.w	r3, r4, r3
 800ae88:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800ae8c:	2f13      	cmp	r7, #19
 800ae8e:	bf0c      	ite	eq
 800ae90:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800ae94:	2500      	movne	r5, #0
 800ae96:	fa44 f707 	asr.w	r7, r4, r7
 800ae9a:	ea43 0407 	orr.w	r4, r3, r7
 800ae9e:	4919      	ldr	r1, [pc, #100]	; (800af04 <rint+0x10c>)
 800aea0:	4623      	mov	r3, r4
 800aea2:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800aea6:	462a      	mov	r2, r5
 800aea8:	e9d6 4500 	ldrd	r4, r5, [r6]
 800aeac:	4620      	mov	r0, r4
 800aeae:	4629      	mov	r1, r5
 800aeb0:	f7f5 f9c0 	bl	8000234 <__adddf3>
 800aeb4:	e9cd 0100 	strd	r0, r1, [sp]
 800aeb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aebc:	4622      	mov	r2, r4
 800aebe:	462b      	mov	r3, r5
 800aec0:	f7f5 f9b6 	bl	8000230 <__aeabi_dsub>
 800aec4:	e7cc      	b.n	800ae60 <rint+0x68>
 800aec6:	2f33      	cmp	r7, #51	; 0x33
 800aec8:	dd05      	ble.n	800aed6 <rint+0xde>
 800aeca:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800aece:	d1c9      	bne.n	800ae64 <rint+0x6c>
 800aed0:	f7f5 f9b0 	bl	8000234 <__adddf3>
 800aed4:	e7c4      	b.n	800ae60 <rint+0x68>
 800aed6:	f04f 31ff 	mov.w	r1, #4294967295
 800aeda:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800aede:	fa21 f10c 	lsr.w	r1, r1, ip
 800aee2:	4208      	tst	r0, r1
 800aee4:	d0be      	beq.n	800ae64 <rint+0x6c>
 800aee6:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800aeea:	bf18      	it	ne
 800aeec:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800aef0:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800aef4:	bf1e      	ittt	ne
 800aef6:	ea20 0303 	bicne.w	r3, r0, r3
 800aefa:	fa45 fc0c 	asrne.w	ip, r5, ip
 800aefe:	ea43 050c 	orrne.w	r5, r3, ip
 800af02:	e7cc      	b.n	800ae9e <rint+0xa6>
 800af04:	0800b238 	.word	0x0800b238
 800af08:	000fffff 	.word	0x000fffff
 800af0c:	00000000 	.word	0x00000000

0800af10 <scalbn>:
 800af10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af12:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800af16:	4604      	mov	r4, r0
 800af18:	460d      	mov	r5, r1
 800af1a:	4617      	mov	r7, r2
 800af1c:	460b      	mov	r3, r1
 800af1e:	b996      	cbnz	r6, 800af46 <scalbn+0x36>
 800af20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af24:	4303      	orrs	r3, r0
 800af26:	d039      	beq.n	800af9c <scalbn+0x8c>
 800af28:	4b35      	ldr	r3, [pc, #212]	; (800b000 <scalbn+0xf0>)
 800af2a:	2200      	movs	r2, #0
 800af2c:	f7f5 fb38 	bl	80005a0 <__aeabi_dmul>
 800af30:	4b34      	ldr	r3, [pc, #208]	; (800b004 <scalbn+0xf4>)
 800af32:	4604      	mov	r4, r0
 800af34:	429f      	cmp	r7, r3
 800af36:	460d      	mov	r5, r1
 800af38:	da0f      	bge.n	800af5a <scalbn+0x4a>
 800af3a:	a32d      	add	r3, pc, #180	; (adr r3, 800aff0 <scalbn+0xe0>)
 800af3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af40:	f7f5 fb2e 	bl	80005a0 <__aeabi_dmul>
 800af44:	e006      	b.n	800af54 <scalbn+0x44>
 800af46:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800af4a:	4296      	cmp	r6, r2
 800af4c:	d10a      	bne.n	800af64 <scalbn+0x54>
 800af4e:	4602      	mov	r2, r0
 800af50:	f7f5 f970 	bl	8000234 <__adddf3>
 800af54:	4604      	mov	r4, r0
 800af56:	460d      	mov	r5, r1
 800af58:	e020      	b.n	800af9c <scalbn+0x8c>
 800af5a:	460b      	mov	r3, r1
 800af5c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800af60:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800af64:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800af68:	19b9      	adds	r1, r7, r6
 800af6a:	4291      	cmp	r1, r2
 800af6c:	dd0e      	ble.n	800af8c <scalbn+0x7c>
 800af6e:	a322      	add	r3, pc, #136	; (adr r3, 800aff8 <scalbn+0xe8>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800af78:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800af7c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800af80:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800af84:	4820      	ldr	r0, [pc, #128]	; (800b008 <scalbn+0xf8>)
 800af86:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800af8a:	e7d9      	b.n	800af40 <scalbn+0x30>
 800af8c:	2900      	cmp	r1, #0
 800af8e:	dd08      	ble.n	800afa2 <scalbn+0x92>
 800af90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af98:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800af9c:	4620      	mov	r0, r4
 800af9e:	4629      	mov	r1, r5
 800afa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afa2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800afa6:	da16      	bge.n	800afd6 <scalbn+0xc6>
 800afa8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800afac:	429f      	cmp	r7, r3
 800afae:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800afb2:	dd08      	ble.n	800afc6 <scalbn+0xb6>
 800afb4:	4c15      	ldr	r4, [pc, #84]	; (800b00c <scalbn+0xfc>)
 800afb6:	4814      	ldr	r0, [pc, #80]	; (800b008 <scalbn+0xf8>)
 800afb8:	f363 74df 	bfi	r4, r3, #31, #1
 800afbc:	a30e      	add	r3, pc, #56	; (adr r3, 800aff8 <scalbn+0xe8>)
 800afbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc2:	4621      	mov	r1, r4
 800afc4:	e7bc      	b.n	800af40 <scalbn+0x30>
 800afc6:	4c12      	ldr	r4, [pc, #72]	; (800b010 <scalbn+0x100>)
 800afc8:	4812      	ldr	r0, [pc, #72]	; (800b014 <scalbn+0x104>)
 800afca:	f363 74df 	bfi	r4, r3, #31, #1
 800afce:	a308      	add	r3, pc, #32	; (adr r3, 800aff0 <scalbn+0xe0>)
 800afd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd4:	e7f5      	b.n	800afc2 <scalbn+0xb2>
 800afd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800afda:	3136      	adds	r1, #54	; 0x36
 800afdc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800afe0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800afe4:	4620      	mov	r0, r4
 800afe6:	4629      	mov	r1, r5
 800afe8:	2200      	movs	r2, #0
 800afea:	4b0b      	ldr	r3, [pc, #44]	; (800b018 <scalbn+0x108>)
 800afec:	e7a8      	b.n	800af40 <scalbn+0x30>
 800afee:	bf00      	nop
 800aff0:	c2f8f359 	.word	0xc2f8f359
 800aff4:	01a56e1f 	.word	0x01a56e1f
 800aff8:	8800759c 	.word	0x8800759c
 800affc:	7e37e43c 	.word	0x7e37e43c
 800b000:	43500000 	.word	0x43500000
 800b004:	ffff3cb0 	.word	0xffff3cb0
 800b008:	8800759c 	.word	0x8800759c
 800b00c:	7e37e43c 	.word	0x7e37e43c
 800b010:	01a56e1f 	.word	0x01a56e1f
 800b014:	c2f8f359 	.word	0xc2f8f359
 800b018:	3c900000 	.word	0x3c900000

0800b01c <abort>:
 800b01c:	2006      	movs	r0, #6
 800b01e:	b508      	push	{r3, lr}
 800b020:	f000 f85e 	bl	800b0e0 <raise>
 800b024:	2001      	movs	r0, #1
 800b026:	f7fa fb2a 	bl	800567e <_exit>
	...

0800b02c <__errno>:
 800b02c:	4b01      	ldr	r3, [pc, #4]	; (800b034 <__errno+0x8>)
 800b02e:	6818      	ldr	r0, [r3, #0]
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	20000014 	.word	0x20000014

0800b038 <__libc_init_array>:
 800b038:	b570      	push	{r4, r5, r6, lr}
 800b03a:	2600      	movs	r6, #0
 800b03c:	4d0c      	ldr	r5, [pc, #48]	; (800b070 <__libc_init_array+0x38>)
 800b03e:	4c0d      	ldr	r4, [pc, #52]	; (800b074 <__libc_init_array+0x3c>)
 800b040:	1b64      	subs	r4, r4, r5
 800b042:	10a4      	asrs	r4, r4, #2
 800b044:	42a6      	cmp	r6, r4
 800b046:	d109      	bne.n	800b05c <__libc_init_array+0x24>
 800b048:	f000 f866 	bl	800b118 <_init>
 800b04c:	2600      	movs	r6, #0
 800b04e:	4d0a      	ldr	r5, [pc, #40]	; (800b078 <__libc_init_array+0x40>)
 800b050:	4c0a      	ldr	r4, [pc, #40]	; (800b07c <__libc_init_array+0x44>)
 800b052:	1b64      	subs	r4, r4, r5
 800b054:	10a4      	asrs	r4, r4, #2
 800b056:	42a6      	cmp	r6, r4
 800b058:	d105      	bne.n	800b066 <__libc_init_array+0x2e>
 800b05a:	bd70      	pop	{r4, r5, r6, pc}
 800b05c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b060:	4798      	blx	r3
 800b062:	3601      	adds	r6, #1
 800b064:	e7ee      	b.n	800b044 <__libc_init_array+0xc>
 800b066:	f855 3b04 	ldr.w	r3, [r5], #4
 800b06a:	4798      	blx	r3
 800b06c:	3601      	adds	r6, #1
 800b06e:	e7f2      	b.n	800b056 <__libc_init_array+0x1e>
 800b070:	0800b248 	.word	0x0800b248
 800b074:	0800b248 	.word	0x0800b248
 800b078:	0800b248 	.word	0x0800b248
 800b07c:	0800b250 	.word	0x0800b250

0800b080 <memset>:
 800b080:	4603      	mov	r3, r0
 800b082:	4402      	add	r2, r0
 800b084:	4293      	cmp	r3, r2
 800b086:	d100      	bne.n	800b08a <memset+0xa>
 800b088:	4770      	bx	lr
 800b08a:	f803 1b01 	strb.w	r1, [r3], #1
 800b08e:	e7f9      	b.n	800b084 <memset+0x4>

0800b090 <_raise_r>:
 800b090:	291f      	cmp	r1, #31
 800b092:	b538      	push	{r3, r4, r5, lr}
 800b094:	4604      	mov	r4, r0
 800b096:	460d      	mov	r5, r1
 800b098:	d904      	bls.n	800b0a4 <_raise_r+0x14>
 800b09a:	2316      	movs	r3, #22
 800b09c:	6003      	str	r3, [r0, #0]
 800b09e:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
 800b0a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0a6:	b112      	cbz	r2, 800b0ae <_raise_r+0x1e>
 800b0a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0ac:	b94b      	cbnz	r3, 800b0c2 <_raise_r+0x32>
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f000 f830 	bl	800b114 <_getpid_r>
 800b0b4:	462a      	mov	r2, r5
 800b0b6:	4601      	mov	r1, r0
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0be:	f000 b817 	b.w	800b0f0 <_kill_r>
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d00a      	beq.n	800b0dc <_raise_r+0x4c>
 800b0c6:	1c59      	adds	r1, r3, #1
 800b0c8:	d103      	bne.n	800b0d2 <_raise_r+0x42>
 800b0ca:	2316      	movs	r3, #22
 800b0cc:	6003      	str	r3, [r0, #0]
 800b0ce:	2001      	movs	r0, #1
 800b0d0:	e7e7      	b.n	800b0a2 <_raise_r+0x12>
 800b0d2:	2400      	movs	r4, #0
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0da:	4798      	blx	r3
 800b0dc:	2000      	movs	r0, #0
 800b0de:	e7e0      	b.n	800b0a2 <_raise_r+0x12>

0800b0e0 <raise>:
 800b0e0:	4b02      	ldr	r3, [pc, #8]	; (800b0ec <raise+0xc>)
 800b0e2:	4601      	mov	r1, r0
 800b0e4:	6818      	ldr	r0, [r3, #0]
 800b0e6:	f7ff bfd3 	b.w	800b090 <_raise_r>
 800b0ea:	bf00      	nop
 800b0ec:	20000014 	.word	0x20000014

0800b0f0 <_kill_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	4d06      	ldr	r5, [pc, #24]	; (800b110 <_kill_r+0x20>)
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	4608      	mov	r0, r1
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	602b      	str	r3, [r5, #0]
 800b0fe:	f7fa faae 	bl	800565e <_kill>
 800b102:	1c43      	adds	r3, r0, #1
 800b104:	d102      	bne.n	800b10c <_kill_r+0x1c>
 800b106:	682b      	ldr	r3, [r5, #0]
 800b108:	b103      	cbz	r3, 800b10c <_kill_r+0x1c>
 800b10a:	6023      	str	r3, [r4, #0]
 800b10c:	bd38      	pop	{r3, r4, r5, pc}
 800b10e:	bf00      	nop
 800b110:	2000036c 	.word	0x2000036c

0800b114 <_getpid_r>:
 800b114:	f7fa ba9c 	b.w	8005650 <_getpid>

0800b118 <_init>:
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	bf00      	nop
 800b11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11e:	bc08      	pop	{r3}
 800b120:	469e      	mov	lr, r3
 800b122:	4770      	bx	lr

0800b124 <_fini>:
 800b124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b126:	bf00      	nop
 800b128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b12a:	bc08      	pop	{r3}
 800b12c:	469e      	mov	lr, r3
 800b12e:	4770      	bx	lr
