
FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae1c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800b008  0800b008  0001b008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b138  0800b138  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800b138  0800b138  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b138  0800b138  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b138  0800b138  0001b138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b140  0800b140  0001b140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000078  0800b1bc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  0800b1bc  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199e6  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cef  00000000  00000000  00039a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0003c778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  0003d988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e5c1  00000000  00000000  0003eac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000d046  00000000  00000000  0004d081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0005a0c7  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005670  00000000  00000000  0005a11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000078 	.word	0x20000078
 8000204:	00000000 	.word	0x00000000
 8000208:	0800afec 	.word	0x0800afec

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000007c 	.word	0x2000007c
 8000224:	0800afec 	.word	0x0800afec

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fmul>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d06f      	beq.n	8000e64 <__aeabi_fmul+0xf8>
 8000d84:	441a      	add	r2, r3
 8000d86:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8a:	0240      	lsls	r0, r0, #9
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d92:	d01e      	beq.n	8000dd2 <__aeabi_fmul+0x66>
 8000d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da0:	fba0 3101 	umull	r3, r1, r0, r1
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dac:	bf3e      	ittt	cc
 8000dae:	0049      	lslcc	r1, r1, #1
 8000db0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	ea40 0001 	orr.w	r0, r0, r1
 8000dba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dbe:	2afd      	cmp	r2, #253	; 0xfd
 8000dc0:	d81d      	bhi.n	8000dfe <__aeabi_fmul+0x92>
 8000dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dca:	bf08      	it	eq
 8000dcc:	f020 0001 	biceq.w	r0, r0, #1
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	0249      	lsleq	r1, r1, #9
 8000dde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de6:	3a7f      	subs	r2, #127	; 0x7f
 8000de8:	bfc2      	ittt	gt
 8000dea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df2:	4770      	bxgt	lr
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	dc5d      	bgt.n	8000ebc <__aeabi_fmul+0x150>
 8000e00:	f112 0f19 	cmn.w	r2, #25
 8000e04:	bfdc      	itt	le
 8000e06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e0a:	4770      	bxle	lr
 8000e0c:	f1c2 0200 	rsb	r2, r2, #0
 8000e10:	0041      	lsls	r1, r0, #1
 8000e12:	fa21 f102 	lsr.w	r1, r1, r2
 8000e16:	f1c2 0220 	rsb	r2, r2, #32
 8000e1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e22:	f140 0000 	adc.w	r0, r0, #0
 8000e26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e2a:	bf08      	it	eq
 8000e2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e30:	4770      	bx	lr
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xce>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xe6>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e78f      	b.n	8000d84 <__aeabi_fmul+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	bf18      	it	ne
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d00a      	beq.n	8000e8a <__aeabi_fmul+0x11e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1d8      	bne.n	8000e32 <__aeabi_fmul+0xc6>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	bf17      	itett	ne
 8000e90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e94:	4608      	moveq	r0, r1
 8000e96:	f091 0f00 	teqne	r1, #0
 8000e9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9e:	d014      	beq.n	8000eca <__aeabi_fmul+0x15e>
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_fmul+0x13e>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d10f      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eaa:	ea93 0f0c 	teq	r3, ip
 8000eae:	d103      	bne.n	8000eb8 <__aeabi_fmul+0x14c>
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	bf18      	it	ne
 8000eb4:	4608      	movne	r0, r1
 8000eb6:	d108      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec8:	4770      	bx	lr
 8000eca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ece:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fdiv>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d069      	beq.n	8000fc0 <__aeabi_fdiv+0xec>
 8000eec:	eba2 0203 	sub.w	r2, r2, r3
 8000ef0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000efa:	d037      	beq.n	8000f6c <__aeabi_fdiv+0x98>
 8000efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf38      	it	cc
 8000f10:	005b      	lslcc	r3, r3, #1
 8000f12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	bf24      	itt	cs
 8000f1e:	1a5b      	subcs	r3, r3, r1
 8000f20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f36:	bf24      	itt	cs
 8000f38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	bf18      	it	ne
 8000f52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f56:	d1e0      	bne.n	8000f1a <__aeabi_fdiv+0x46>
 8000f58:	2afd      	cmp	r2, #253	; 0xfd
 8000f5a:	f63f af50 	bhi.w	8000dfe <__aeabi_fmul+0x92>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f64:	bf08      	it	eq
 8000f66:	f020 0001 	biceq.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f74:	327f      	adds	r2, #127	; 0x7f
 8000f76:	bfc2      	ittt	gt
 8000f78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f80:	4770      	bxgt	lr
 8000f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	e737      	b.n	8000dfe <__aeabi_fmul+0x92>
 8000f8e:	f092 0f00 	teq	r2, #0
 8000f92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0040      	lsleq	r0, r0, #1
 8000f9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9e:	3a01      	subeq	r2, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xc2>
 8000fa2:	ea40 000c 	orr.w	r0, r0, ip
 8000fa6:	f093 0f00 	teq	r3, #0
 8000faa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0049      	lsleq	r1, r1, #1
 8000fb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb6:	3b01      	subeq	r3, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xda>
 8000fba:	ea41 010c 	orr.w	r1, r1, ip
 8000fbe:	e795      	b.n	8000eec <__aeabi_fdiv+0x18>
 8000fc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc4:	ea92 0f0c 	teq	r2, ip
 8000fc8:	d108      	bne.n	8000fdc <__aeabi_fdiv+0x108>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	f47f af7d 	bne.w	8000eca <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	f47f af70 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e776      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fdc:	ea93 0f0c 	teq	r3, ip
 8000fe0:	d104      	bne.n	8000fec <__aeabi_fdiv+0x118>
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	f43f af4c 	beq.w	8000e80 <__aeabi_fmul+0x114>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e76e      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	d1ca      	bne.n	8000f8e <__aeabi_fdiv+0xba>
 8000ff8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ffc:	f47f af5c 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8001000:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001004:	f47f af3c 	bne.w	8000e80 <__aeabi_fmul+0x114>
 8001008:	e75f      	b.n	8000eca <__aeabi_fmul+0x15e>
 800100a:	bf00      	nop

0800100c <__gesf2>:
 800100c:	f04f 3cff 	mov.w	ip, #4294967295
 8001010:	e006      	b.n	8001020 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__lesf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	e002      	b.n	8001020 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__cmpsf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	bf18      	it	ne
 8001032:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001036:	d011      	beq.n	800105c <__cmpsf2+0x40>
 8001038:	b001      	add	sp, #4
 800103a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800103e:	bf18      	it	ne
 8001040:	ea90 0f01 	teqne	r0, r1
 8001044:	bf58      	it	pl
 8001046:	ebb2 0003 	subspl.w	r0, r2, r3
 800104a:	bf88      	it	hi
 800104c:	17c8      	asrhi	r0, r1, #31
 800104e:	bf38      	it	cc
 8001050:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001054:	bf18      	it	ne
 8001056:	f040 0001 	orrne.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001060:	d102      	bne.n	8001068 <__cmpsf2+0x4c>
 8001062:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001066:	d105      	bne.n	8001074 <__cmpsf2+0x58>
 8001068:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800106c:	d1e4      	bne.n	8001038 <__cmpsf2+0x1c>
 800106e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001072:	d0e1      	beq.n	8001038 <__cmpsf2+0x1c>
 8001074:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <__aeabi_cfrcmple>:
 800107c:	4684      	mov	ip, r0
 800107e:	4608      	mov	r0, r1
 8001080:	4661      	mov	r1, ip
 8001082:	e7ff      	b.n	8001084 <__aeabi_cfcmpeq>

08001084 <__aeabi_cfcmpeq>:
 8001084:	b50f      	push	{r0, r1, r2, r3, lr}
 8001086:	f7ff ffc9 	bl	800101c <__cmpsf2>
 800108a:	2800      	cmp	r0, #0
 800108c:	bf48      	it	mi
 800108e:	f110 0f00 	cmnmi.w	r0, #0
 8001092:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001094 <__aeabi_fcmpeq>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff fff4 	bl	8001084 <__aeabi_cfcmpeq>
 800109c:	bf0c      	ite	eq
 800109e:	2001      	moveq	r0, #1
 80010a0:	2000      	movne	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmplt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffea 	bl	8001084 <__aeabi_cfcmpeq>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmple>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffe0 	bl	8001084 <__aeabi_cfcmpeq>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpge>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffd2 	bl	800107c <__aeabi_cfrcmple>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpgt>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffc8 	bl	800107c <__aeabi_cfrcmple>
 80010ec:	bf34      	ite	cc
 80010ee:	2001      	movcc	r0, #1
 80010f0:	2000      	movcs	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpun>:
 80010f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001100:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001104:	d102      	bne.n	800110c <__aeabi_fcmpun+0x14>
 8001106:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110a:	d108      	bne.n	800111e <__aeabi_fcmpun+0x26>
 800110c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001110:	d102      	bne.n	8001118 <__aeabi_fcmpun+0x20>
 8001112:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001116:	d102      	bne.n	800111e <__aeabi_fcmpun+0x26>
 8001118:	f04f 0000 	mov.w	r0, #0
 800111c:	4770      	bx	lr
 800111e:	f04f 0001 	mov.w	r0, #1
 8001122:	4770      	bx	lr

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_f2uiz>:
 8001170:	0042      	lsls	r2, r0, #1
 8001172:	d20e      	bcs.n	8001192 <__aeabi_f2uiz+0x22>
 8001174:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001178:	d30b      	bcc.n	8001192 <__aeabi_f2uiz+0x22>
 800117a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001182:	d409      	bmi.n	8001198 <__aeabi_f2uiz+0x28>
 8001184:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800118c:	fa23 f002 	lsr.w	r0, r3, r2
 8001190:	4770      	bx	lr
 8001192:	f04f 0000 	mov.w	r0, #0
 8001196:	4770      	bx	lr
 8001198:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800119c:	d101      	bne.n	80011a2 <__aeabi_f2uiz+0x32>
 800119e:	0242      	lsls	r2, r0, #9
 80011a0:	d102      	bne.n	80011a8 <__aeabi_f2uiz+0x38>
 80011a2:	f04f 30ff 	mov.w	r0, #4294967295
 80011a6:	4770      	bx	lr
 80011a8:	f04f 0000 	mov.w	r0, #0
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6839      	ldr	r1, [r7, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 f9f3 	bl	80045aa <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6839      	ldr	r1, [r7, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 f9fc 	bl	80045d8 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_ZN9Publisher6notifyEv>:
    void notify() {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fa28 	bl	800464c <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	4293      	cmp	r3, r2
 8001204:	bf34      	ite	cc
 8001206:	2301      	movcc	r3, #1
 8001208:	2300      	movcs	r3, #0
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d01d      	beq.n	800124c <_ZN9Publisher6notifyEv+0x64>
          if( subscriber[i] != 0)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f003 fa24 	bl	8004664 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	bf14      	ite	ne
 8001222:	2301      	movne	r3, #1
 8001224:	2300      	moveq	r3, #0
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00e      	beq.n	800124a <_ZN9Publisher6notifyEv+0x62>
    	  	  subscriber[i]->notify();
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f003 fa16 	bl	8004664 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 8001238:	4603      	mov	r3, r0
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	6812      	ldr	r2, [r2, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	4790      	blx	r2
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	3301      	adds	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e7d4      	b.n	80011f4 <_ZN9Publisher6notifyEv+0xc>
          else
        	  break;
 800124a:	bf00      	nop
      }
    }
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN9PublisherC1Ev>:
struct Publisher
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fa0e 	bl	8004680 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ffeb 	bl	8001254 <_ZN9PublisherC1Ev>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ffde 	bl	8001254 <_ZN9PublisherC1Ev>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3334      	adds	r3, #52	; 0x34
 800129c:	2234      	movs	r2, #52	; 0x34
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f009 fe57 	bl	800af54 <memset>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3334      	adds	r3, #52	; 0x34
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ffdf 	bl	800126e <_ZN11TickUpdater7SubtickC1Ev>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	669a      	str	r2, [r3, #104]	; 0x68
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <_ZN11TickUpdaterC1Ev+0x44>)
 80012be:	f003 f9e9 	bl	8004694 <_ZN10SystemTick13initInterruptILt1000EEEvv>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000094 	.word	0x20000094

080012d0 <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <HAL_IncTick+0x10>)
 80012d6:	f000 f89b 	bl	8001410 <_ZN11TickUpdater9interruptEv>
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000098 	.word	0x20000098

080012e4 <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	791b      	ldrb	r3, [r3, #4]
 80012f0:	f083 0301 	eor.w	r3, r3, #1
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4619      	mov	r1, r3
 8001304:	4803      	ldr	r0, [pc, #12]	; (8001314 <_ZN14TickSubscriber9subscribeEv+0x30>)
 8001306:	f7ff ff53 	bl	80011b0 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000098 	.word	0x20000098

08001318 <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	791b      	ldrb	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d007      	beq.n	8001338 <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4619      	mov	r1, r3
 8001332:	4803      	ldr	r0, [pc, #12]	; (8001340 <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 8001334:	f7ff ff4a 	bl	80011cc <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000098 	.word	0x20000098

08001344 <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <_ZN10SubscriberC1Ev+0x1c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4618      	mov	r0, r3
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	0800b0d4 	.word	0x0800b0d4

08001364 <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ffe8 	bl	8001344 <_ZN10SubscriberC1Ev>
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <_ZN14TickSubscriberC1Ev+0x20>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	0800b0c8 	.word	0x0800b0c8

08001388 <_ZN5TimerC1Ev>:

class Timer : TickSubscriber
{
  volatile uint32_t time_passed;
public:
  Timer(){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ffe6 	bl	8001364 <_ZN14TickSubscriberC1Ev>
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <_ZN5TimerC1Ev+0x2c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
    subscribed = false;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	711a      	strb	r2, [r3, #4]
  };
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	0800b0bc 	.word	0x0800b0bc

080013b8 <_ZN5TimerC1Em>:
  Timer(uint32_t ms){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ffcd 	bl	8001364 <_ZN14TickSubscriberC1Ev>
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <_ZN5TimerC1Em+0x38>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
    subscribed = false;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	711a      	strb	r2, [r3, #4]
    start(ms);
 80013dc:	6839      	ldr	r1, [r7, #0]
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f822 	bl	8001428 <_ZN5Timer5startEm>
  }
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	0800b0bc 	.word	0x0800b0bc

080013f4 <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    time_passed++;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	1c5a      	adds	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	609a      	str	r2, [r3, #8]
  }
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <_ZN11TickUpdater9interruptEv>:
    if (not(cnt++ % qty))
        call();
}

void TickUpdater::interrupt()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
//    subtick.notify();
//    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
        notify();
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fee4 	bl	80011e8 <_ZN9Publisher6notifyEv>
//    });
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
   time_set = ms;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	60da      	str	r2, [r3, #12]
   subscribe();
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff4f 	bl	80012e4 <_ZN14TickSubscriber9subscribeEv>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_ZN5Timer5eventEv>:

bool Timer::event()
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	429a      	cmp	r2, r3
 8001460:	bf2c      	ite	cs
 8001462:	2301      	movcs	r3, #1
 8001464:	2300      	movcc	r3, #0
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
      return (true);
 8001472:	2301      	movs	r3, #1
 8001474:	e000      	b.n	8001478 <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 8001476:	2300      	movs	r3, #0
  }
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
   unsubscribe();
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff40 	bl	8001318 <_ZN14TickSubscriber11unsubscribeEv>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_ZN5Timer4doneEv>:

bool     Timer::done()       { return time_passed >= time_set; }
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	bf2c      	ite	cs
 80014b4:	2301      	movcs	r3, #1
 80014b6:	2300      	movcc	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <_ZN5Timer5startEv>:
void     Timer::pause()      { unsubscribe(); }
void     Timer::start()      { subscribe();  }
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff08 	bl	80012e4 <_ZN14TickSubscriber9subscribeEv>
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <_ZN5Timer7isCountEv>:
bool     Timer::isCount()    { return subscribed; }
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	791b      	ldrb	r3, [r3, #4]
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr

080014f2 <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	601a      	str	r2, [r3, #0]
    }
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4610      	mov	r0, r2
 8001522:	4798      	blx	r3
    }
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <_ZN4ADC_13adc_interruptEv>:

	uint16_t max_current_phase{20};
	uint8_t over_current_a{0};
	uint8_t over_current_c{0};

	void adc_interrupt() {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop_DMA (&hadc1);
 8001534:	480e      	ldr	r0, [pc, #56]	; (8001570 <_ZN4ADC_13adc_interruptEv+0x44>)
 8001536:	f004 fa45 	bl	80059c4 <HAL_ADC_Stop_DMA>
		if (new_hv > 2200) {  // 250 ~= 96V
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001540:	f640 0298 	movw	r2, #2200	; 0x898
 8001544:	4293      	cmp	r3, r2
 8001546:	d903      	bls.n	8001550 <_ZN4ADC_13adc_interruptEv+0x24>
			error_HV = true;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		}
		new_hv = buffer[HV];
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	8b9a      	ldrh	r2, [r3, #28]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
//		h_voltage += (new_hv - h_voltage) * 1 / 4;
		h_voltage = new_hv;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000108 	.word	0x20000108

08001574 <_ZN4ADC_22adc_injected_interruptEv>:

	void adc_injected_interrupt() {
 8001574:	b5b0      	push	{r4, r5, r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 800157c:	4862      	ldr	r0, [pc, #392]	; (8001708 <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 800157e:	f004 fe29 	bl	80061d4 <HAL_ADCEx_InjectedStop_IT>
		arr_current_S[j] = HAL_ADCEx_InjectedGetValue(&hadc2, PS);
 8001582:	2101      	movs	r1, #1
 8001584:	4860      	ldr	r0, [pc, #384]	; (8001708 <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 8001586:	f004 fe6f 	bl	8006268 <HAL_ADCEx_InjectedGetValue>
 800158a:	4602      	mov	r2, r0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001592:	b211      	sxth	r1, r2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	330c      	adds	r3, #12
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	4413      	add	r3, r2
 800159c:	460a      	mov	r2, r1
 800159e:	80da      	strh	r2, [r3, #6]
		arr_current_A[j] = HAL_ADCEx_InjectedGetValue(&hadc2, phase_A);
 80015a0:	2102      	movs	r1, #2
 80015a2:	4859      	ldr	r0, [pc, #356]	; (8001708 <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 80015a4:	f004 fe60 	bl	8006268 <HAL_ADCEx_InjectedGetValue>
 80015a8:	4601      	mov	r1, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80015b0:	461a      	mov	r2, r3
 80015b2:	b209      	sxth	r1, r1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3218      	adds	r2, #24
 80015b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		arr_current_C[j] = HAL_ADCEx_InjectedGetValue(&hadc2, phase_C);
 80015bc:	2103      	movs	r1, #3
 80015be:	4852      	ldr	r0, [pc, #328]	; (8001708 <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 80015c0:	f004 fe52 	bl	8006268 <HAL_ADCEx_InjectedGetValue>
 80015c4:	4602      	mov	r2, r0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80015cc:	b211      	sxth	r1, r2
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	3320      	adds	r3, #32
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	460a      	mov	r2, r1
 80015d8:	805a      	strh	r2, [r3, #2]
//		if(abs(new_hv - h_voltage) > 150) {  // 250 ~= 96V
//			error_HV = true;
//		}
//		h_voltage += (new_hv - h_voltage) * 10 / 30;

		measure = true;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87

		if(not work) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80015e8:	f083 0301 	eor.w	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 808e 	beq.w	8001710 <_ZN4ADC_22adc_injected_interruptEv+0x19c>
			offset_I_S = 0;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
			offset_I_A = 0;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
			offset_I_C = 0;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
			for (auto i = 0; i < 9; i++) {
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b08      	cmp	r3, #8
 8001614:	dc37      	bgt.n	8001686 <_ZN4ADC_22adc_injected_interruptEv+0x112>
				offset_I_S += arr_current_S[i];
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 800161c:	b29a      	uxth	r2, r3
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	330c      	adds	r3, #12
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	440b      	add	r3, r1
 8001628:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800162c:	b29b      	uxth	r3, r3
 800162e:	4413      	add	r3, r2
 8001630:	b29b      	uxth	r3, r3
 8001632:	b21a      	sxth	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
				offset_I_A += arr_current_A[i];
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 8001640:	b29a      	uxth	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68f9      	ldr	r1, [r7, #12]
 8001646:	3118      	adds	r1, #24
 8001648:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 800164c:	b29b      	uxth	r3, r3
 800164e:	4413      	add	r3, r2
 8001650:	b29b      	uxth	r3, r3
 8001652:	b21a      	sxth	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
				offset_I_C += arr_current_C[i];
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 8001660:	b29a      	uxth	r2, r3
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	3320      	adds	r3, #32
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	440b      	add	r3, r1
 800166c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001670:	b29b      	uxth	r3, r3
 8001672:	4413      	add	r3, r2
 8001674:	b29b      	uxth	r3, r3
 8001676:	b21a      	sxth	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
			for (auto i = 0; i < 9; i++) {
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3301      	adds	r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	e7c4      	b.n	8001610 <_ZN4ADC_22adc_injected_interruptEv+0x9c>
			}
			offset_I_S /= (9);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 800168c:	4a1f      	ldr	r2, [pc, #124]	; (800170c <_ZN4ADC_22adc_injected_interruptEv+0x198>)
 800168e:	fb82 1203 	smull	r1, r2, r2, r3
 8001692:	1052      	asrs	r2, r2, #1
 8001694:	17db      	asrs	r3, r3, #31
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	b21a      	sxth	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
			offset_I_A /= (9);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 80016a6:	4a19      	ldr	r2, [pc, #100]	; (800170c <_ZN4ADC_22adc_injected_interruptEv+0x198>)
 80016a8:	fb82 1203 	smull	r1, r2, r2, r3
 80016ac:	1052      	asrs	r2, r2, #1
 80016ae:	17db      	asrs	r3, r3, #31
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
			offset_I_C /= (9);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 80016c0:	4a12      	ldr	r2, [pc, #72]	; (800170c <_ZN4ADC_22adc_injected_interruptEv+0x198>)
 80016c2:	fb82 1203 	smull	r1, r2, r2, r3
 80016c6:	1052      	asrs	r2, r2, #1
 80016c8:	17db      	asrs	r3, r3, #31
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8

			error_a = 0;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
			error_b = 0;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
			error_c = 0;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8

			over_current_s = 0;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
			over_current_a = 0;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
			over_current_c = 0;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 8001704:	e261      	b.n	8001bca <_ZN4ADC_22adc_injected_interruptEv+0x656>
 8001706:	bf00      	nop
 8001708:	20000138 	.word	0x20000138
 800170c:	38e38e39 	.word	0x38e38e39

		} else if (work) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8257 	beq.w	8001bca <_ZN4ADC_22adc_injected_interruptEv+0x656>

			arr_S[j] = abs(arr_current_S[j] - offset_I_S);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	330c      	adds	r3, #12
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800172e:	461a      	mov	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800173c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001746:	b211      	sxth	r1, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	3344      	adds	r3, #68	; 0x44
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	460a      	mov	r2, r1
 8001752:	80da      	strh	r2, [r3, #6]
			arr_A[j] = abs(arr_current_A[j] - offset_I_A);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800175a:	461a      	mov	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3218      	adds	r2, #24
 8001760:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001764:	461a      	mov	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001772:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800177c:	b211      	sxth	r1, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	3358      	adds	r3, #88	; 0x58
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	460a      	mov	r2, r1
 8001788:	805a      	strh	r2, [r3, #2]
			arr_B[j] = abs(abs(arr_current_A[j] - offset_I_A) - abs(arr_current_C[j] - offset_I_C));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001790:	461a      	mov	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3218      	adds	r2, #24
 8001796:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800179a:	461a      	mov	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017a8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	3320      	adds	r3, #32
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	440b      	add	r3, r1
 80017ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017be:	4619      	mov	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 80017c6:	1acb      	subs	r3, r1, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	bfb8      	it	lt
 80017cc:	425b      	neglt	r3, r3
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017d4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80017de:	b211      	sxth	r1, r2
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	3360      	adds	r3, #96	; 0x60
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	460a      	mov	r2, r1
 80017ea:	809a      	strh	r2, [r3, #4]
			arr_C[j] = abs(arr_current_C[j] - offset_I_C);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	3320      	adds	r3, #32
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	4413      	add	r3, r2
 80017fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017fe:	461a      	mov	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800180c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001816:	461a      	mov	r2, r3
 8001818:	b209      	sxth	r1, r1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3250      	adds	r2, #80	; 0x50
 800181e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			a = (arr_current_A[j] - offset_I_A) * 10 / 21;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001828:	461a      	mov	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3218      	adds	r2, #24
 800182e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001832:	461a      	mov	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 800183a:	1ad2      	subs	r2, r2, r3
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4ac4      	ldr	r2, [pc, #784]	; (8001b58 <_ZN4ADC_22adc_injected_interruptEv+0x5e4>)
 8001846:	fb82 1203 	smull	r1, r2, r2, r3
 800184a:	1092      	asrs	r2, r2, #2
 800184c:	17db      	asrs	r3, r3, #31
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	b21a      	sxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
			c = (arr_current_C[j] - offset_I_C) * 10 / 21;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	3320      	adds	r3, #32
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800186a:	461a      	mov	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 8001872:	1ad2      	subs	r2, r2, r3
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4ab6      	ldr	r2, [pc, #728]	; (8001b58 <_ZN4ADC_22adc_injected_interruptEv+0x5e4>)
 800187e:	fb82 1203 	smull	r1, r2, r2, r3
 8001882:	1092      	asrs	r2, r2, #2
 8001884:	17db      	asrs	r3, r3, #31
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	b21a      	sxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
			b = -1 * (a + c);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 8001896:	b29a      	uxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4413      	add	r3, r2
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	425b      	negs	r3, r3
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

//			if(abs(new_hv - h_voltage) > 250) {  // 250 ~= 96V
//				error_HV = true;
//			}

			if(arr_B[j] <= abs(offset_I_A - offset_I_C) and Km_check) {
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	3360      	adds	r3, #96	; 0x60
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018c2:	461a      	mov	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 80018ca:	4619      	mov	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 80018d2:	1acb      	subs	r3, r1, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bfb8      	it	lt
 80018d8:	425b      	neglt	r3, r3
 80018da:	429a      	cmp	r2, r3
 80018dc:	dc15      	bgt.n	800190a <_ZN4ADC_22adc_injected_interruptEv+0x396>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d010      	beq.n	800190a <_ZN4ADC_22adc_injected_interruptEv+0x396>
				error_b++;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 80018ee:	3301      	adds	r3, #1
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
				if(error_b > 6)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d903      	bls.n	800190a <_ZN4ADC_22adc_injected_interruptEv+0x396>
					error = true;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			}

			if (arr_A[j] <= 5 and Km_check) {
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	3358      	adds	r3, #88	; 0x58
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800191c:	2b05      	cmp	r3, #5
 800191e:	dc15      	bgt.n	800194c <_ZN4ADC_22adc_injected_interruptEv+0x3d8>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001926:	2b00      	cmp	r3, #0
 8001928:	d010      	beq.n	800194c <_ZN4ADC_22adc_injected_interruptEv+0x3d8>
				error_a++;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8001930:	3301      	adds	r3, #1
 8001932:	b2da      	uxtb	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
				if (error_a > 6)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8001940:	2b06      	cmp	r3, #6
 8001942:	d903      	bls.n	800194c <_ZN4ADC_22adc_injected_interruptEv+0x3d8>
					error = true;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			}

			if (arr_C[j] <= 5 and Km_check) {
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001952:	461a      	mov	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3250      	adds	r2, #80	; 0x50
 8001958:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800195c:	2b05      	cmp	r3, #5
 800195e:	dc15      	bgt.n	800198c <_ZN4ADC_22adc_injected_interruptEv+0x418>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001966:	2b00      	cmp	r3, #0
 8001968:	d010      	beq.n	800198c <_ZN4ADC_22adc_injected_interruptEv+0x418>
				error_c++;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001970:	3301      	adds	r3, #1
 8001972:	b2da      	uxtb	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
				if (error_c > 6)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001980:	2b06      	cmp	r3, #6
 8001982:	d903      	bls.n	800198c <_ZN4ADC_22adc_injected_interruptEv+0x418>
					error = true;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			}

			if (arr_S[j] / 21 >= max_current and Km_check) {
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	3344      	adds	r3, #68	; 0x44
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800199e:	4a6e      	ldr	r2, [pc, #440]	; (8001b58 <_ZN4ADC_22adc_injected_interruptEv+0x5e4>)
 80019a0:	fb82 1203 	smull	r1, r2, r2, r3
 80019a4:	1092      	asrs	r2, r2, #2
 80019a6:	17db      	asrs	r3, r3, #31
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 80019b4:	429a      	cmp	r2, r3
 80019b6:	db15      	blt.n	80019e4 <_ZN4ADC_22adc_injected_interruptEv+0x470>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d010      	beq.n	80019e4 <_ZN4ADC_22adc_injected_interruptEv+0x470>
				over_current_s++;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80019c8:	3301      	adds	r3, #1
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
				if (over_current_s >= 4)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d903      	bls.n	80019e4 <_ZN4ADC_22adc_injected_interruptEv+0x470>
					over_cur_s = true;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			}

			if (arr_A[j] / 21 >= max_current_phase and Km_check) {
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	3358      	adds	r3, #88	; 0x58
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019f6:	4a58      	ldr	r2, [pc, #352]	; (8001b58 <_ZN4ADC_22adc_injected_interruptEv+0x5e4>)
 80019f8:	fb82 1203 	smull	r1, r2, r2, r3
 80019fc:	1092      	asrs	r2, r2, #2
 80019fe:	17db      	asrs	r3, r3, #31
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	db26      	blt.n	8001a5e <_ZN4ADC_22adc_injected_interruptEv+0x4ea>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d021      	beq.n	8001a5e <_ZN4ADC_22adc_injected_interruptEv+0x4ea>
				over_current_a++;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001a20:	3301      	adds	r3, #1
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
				if (over_current_a >= 3) {
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d914      	bls.n	8001a5e <_ZN4ADC_22adc_injected_interruptEv+0x4ea>
					over_cur_phase++;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
					over_current_a = 0;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
					if(over_cur_phase >= 2) {
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d903      	bls.n	8001a5e <_ZN4ADC_22adc_injected_interruptEv+0x4ea>
						over_cur_a = true;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
					}
				}
			}

			if (arr_C[j] / 21 >= max_current_phase and Km_check) {
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001a64:	461a      	mov	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3250      	adds	r2, #80	; 0x50
 8001a6a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001a6e:	4a3a      	ldr	r2, [pc, #232]	; (8001b58 <_ZN4ADC_22adc_injected_interruptEv+0x5e4>)
 8001a70:	fb82 1203 	smull	r1, r2, r2, r3
 8001a74:	1092      	asrs	r2, r2, #2
 8001a76:	17db      	asrs	r3, r3, #31
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 8001a84:	429a      	cmp	r2, r3
 8001a86:	db26      	blt.n	8001ad6 <_ZN4ADC_22adc_injected_interruptEv+0x562>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d021      	beq.n	8001ad6 <_ZN4ADC_22adc_injected_interruptEv+0x562>
				over_current_c++;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
				if (over_current_c >= 3) {
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d914      	bls.n	8001ad6 <_ZN4ADC_22adc_injected_interruptEv+0x562>
					over_cur_phase++;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
					over_current_c = 0;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
					if(over_cur_phase >= 2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d903      	bls.n	8001ad6 <_ZN4ADC_22adc_injected_interruptEv+0x562>
						over_cur_c = true;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
				}
			}

			new_r = (std::sqrt( std::pow((a - b / 2 - c / 2), 2) + std::pow( (b * 17 / 20 - c * 17 / 20), 2) ) * 2) / 3;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 8001adc:	4619      	mov	r1, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8001ae4:	0fda      	lsrs	r2, r3, #31
 8001ae6:	4413      	add	r3, r2
 8001ae8:	105b      	asrs	r3, r3, #1
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	1aca      	subs	r2, r1, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8001af4:	0fd9      	lsrs	r1, r3, #31
 8001af6:	440b      	add	r3, r1
 8001af8:	105b      	asrs	r3, r3, #1
 8001afa:	b21b      	sxth	r3, r3
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2102      	movs	r1, #2
 8001b00:	4618      	mov	r0, r3
 8001b02:	f002 fddd 	bl	80046c0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b06:	4604      	mov	r4, r0
 8001b08:	460d      	mov	r5, r1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8001b10:	461a      	mov	r2, r3
 8001b12:	4613      	mov	r3, r2
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	4413      	add	r3, r2
 8001b18:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <_ZN4ADC_22adc_injected_interruptEv+0x5e8>)
 8001b1a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b1e:	10d2      	asrs	r2, r2, #3
 8001b20:	17db      	asrs	r3, r3, #31
 8001b22:	1ad2      	subs	r2, r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	440b      	add	r3, r1
 8001b32:	490a      	ldr	r1, [pc, #40]	; (8001b5c <_ZN4ADC_22adc_injected_interruptEv+0x5e8>)
 8001b34:	fb81 0103 	smull	r0, r1, r1, r3
 8001b38:	10c9      	asrs	r1, r1, #3
 8001b3a:	17db      	asrs	r3, r3, #31
 8001b3c:	1a5b      	subs	r3, r3, r1
 8001b3e:	4413      	add	r3, r2
 8001b40:	2102      	movs	r1, #2
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fdbc 	bl	80046c0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	4629      	mov	r1, r5
 8001b50:	f7fe fb70 	bl	8000234 <__adddf3>
 8001b54:	e004      	b.n	8001b60 <_ZN4ADC_22adc_injected_interruptEv+0x5ec>
 8001b56:	bf00      	nop
 8001b58:	30c30c31 	.word	0x30c30c31
 8001b5c:	66666667 	.word	0x66666667
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f008 fa76 	bl	800a058 <sqrt>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	f7fe fb60 	bl	8000234 <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <_ZN4ADC_22adc_injected_interruptEv+0x6bc>)
 8001b82:	f7fe fe37 	bl	80007f4 <__aeabi_ddiv>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7fe ffb7 	bl	8000b00 <__aeabi_d2iz>
 8001b92:	4603      	mov	r3, r0
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

			r += (new_r - r) / 4;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8001baa:	4619      	mov	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001bb2:	1acb      	subs	r3, r1, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	da00      	bge.n	8001bba <_ZN4ADC_22adc_injected_interruptEv+0x646>
 8001bb8:	3303      	adds	r3, #3
 8001bba:	109b      	asrs	r3, r3, #2
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		}

		if (j < 8) j++;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001bd0:	2b07      	cmp	r3, #7
 8001bd2:	d808      	bhi.n	8001be6 <_ZN4ADC_22adc_injected_interruptEv+0x672>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001bda:	3301      	adds	r3, #1
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
//			} else
//				second_half = true;
		}
//		if(m < 15) m++;
//		else m = 0;
	}
 8001be4:	e01f      	b.n	8001c26 <_ZN4ADC_22adc_injected_interruptEv+0x6b2>
			j = 0;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			error_a = 0;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
			error_b = 0;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
			error_c = 0;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			over_current_s = 0;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
			over_current_a = 0;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
			over_current_c = 0;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
				over_cur_phase = 0;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
	}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40080000 	.word	0x40080000

08001c34 <_ZN12InterruptingC1Ev>:
struct Interrupting
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <_ZN12InterruptingC1Ev+0x1c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	0800b0b0 	.word	0x0800b0b0

08001c54 <_ZN4ADC_13ADC_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_interrupt : Interrupting {
		Parent &parent;
		ADC_interrupt(Parent &parent) :
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ffe7 	bl	8001c34 <_ZN12InterruptingC1Ev>
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <_ZN4ADC_13ADC_interruptC1ERS_+0x38>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	605a      	str	r2, [r3, #4]
			parent.adc_callback.subscribe(this);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fc39 	bl	80014f2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	0800b0a4 	.word	0x0800b0a4

08001c90 <_ZN4ADC_13ADC_interrupt9interruptEv>:
		void interrupt() override {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
			parent.adc_interrupt();
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fc45 	bl	800152c <_ZN4ADC_13adc_interruptEv>
		}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:
	} adc_ { *this };

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ffbb 	bl	8001c34 <_ZN12InterruptingC1Ev>
 8001cbe:	4a09      	ldr	r2, [pc, #36]	; (8001ce4 <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fc0d 	bl	80014f2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	0800b098 	.word	0x0800b098

08001ce8 <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fc3d 	bl	8001574 <_ZN4ADC_22adc_injected_interruptEv>
		}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <_ZN4ADC_C1ER9InterruptS1_ht>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_callback, Interrupt& adc_injected_callback, uint8_t qty_channel, uint16_t time_refresh)
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	70fb      	strb	r3, [r7, #3]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , qty_channel  {qty_channel}
    , time_refresh {time_refresh}
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fb25 	bl	8001364 <_ZN14TickSubscriberC1Ev>
 8001d1a:	4a74      	ldr	r2, [pc, #464]	; (8001eec <_ZN4ADC_C1ER9InterruptS1_ht+0x1e8>)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	60da      	str	r2, [r3, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	741a      	strb	r2, [r3, #16]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8b3a      	ldrh	r2, [r7, #24]
 8001d36:	825a      	strh	r2, [r3, #18]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	829a      	strh	r2, [r3, #20]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	331e      	adds	r3, #30
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
 8001d4c:	821a      	strh	r2, [r3, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	3330      	adds	r3, #48	; 0x30
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	821a      	strh	r2, [r3, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3342      	adds	r3, #66	; 0x42
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	821a      	strh	r2, [r3, #16]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3354      	adds	r3, #84	; 0x54
 8001d72:	2220      	movs	r2, #32
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f009 f8ec 	bl	800af54 <memset>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	338e      	adds	r3, #142	; 0x8e
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	821a      	strh	r2, [r3, #16]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	33a0      	adds	r3, #160	; 0xa0
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	821a      	strh	r2, [r3, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	33b2      	adds	r3, #178	; 0xb2
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	821a      	strh	r2, [r3, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	33c4      	adds	r3, #196	; 0xc4
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	821a      	strh	r2, [r3, #16]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2214      	movs	r2, #20
 8001e68:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2214      	movs	r2, #20
 8001e88:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	33e4      	adds	r3, #228	; 0xe4
 8001ea0:	68f9      	ldr	r1, [r7, #12]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fed6 	bl	8001c54 <_ZN4ADC_13ADC_interruptC1ERS_>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	33ec      	adds	r3, #236	; 0xec
 8001eac:	68f9      	ldr	r1, [r7, #12]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fefc 	bl	8001cac <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
	{
		subscribed = false;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8001ed2:	8b3b      	ldrh	r3, [r7, #24]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <_ZN4ADC_C1ER9InterruptS1_ht+0x1dc>
		  subscribe();
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fa02 	bl	80012e4 <_ZN14TickSubscriber9subscribeEv>
	}
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	0800b08c 	.word	0x0800b08c

08001ef0 <_ZN4ADC_14measure_offsetEv>:

	int16_t offset_I_S{0};
	int16_t offset_I_A{0};
	int16_t offset_I_C{0};

	void measure_offset() {
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
		work = false;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <_ZN4ADC_13measure_valueEv>:

	void measure_value() {
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
		work = true;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <_ZN4ADC_ixEh>:

	uint16_t operator[](uint8_t i) {
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	70fb      	strb	r3, [r7, #3]
		return buffer[i];
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	3308      	adds	r3, #8
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	88db      	ldrh	r3, [r3, #6]
	}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <_ZN4ADC_5valueEh>:

	uint16_t value(uint8_t i) {
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	70fb      	strb	r3, [r7, #3]
		if (i == PS)
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10a      	bne.n	8001f6e <_ZN4ADC_5valueEh+0x28>
			return arr_current_S[j];
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	330c      	adds	r3, #12
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	e01b      	b.n	8001fa6 <_ZN4ADC_5valueEh+0x60>
		if (i == phase_A)
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d109      	bne.n	8001f88 <_ZN4ADC_5valueEh+0x42>
			return arr_current_A[j];
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3218      	adds	r2, #24
 8001f80:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	e00e      	b.n	8001fa6 <_ZN4ADC_5valueEh+0x60>
		if (i == phase_C)
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d10a      	bne.n	8001fa4 <_ZN4ADC_5valueEh+0x5e>
			return arr_current_C[j];
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	3320      	adds	r3, #32
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	e000      	b.n	8001fa6 <_ZN4ADC_5valueEh+0x60>
		return 0;
 8001fa4:	2300      	movs	r3, #0
//		if (i == HV)
//			return h_voltage;
	}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <_ZN4ADC_7currentEv>:

	uint16_t current(){
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
		return r;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001fbe:	b29b      	uxth	r3, r3
	}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr

08001fca <_ZN4ADC_8value_HVEv>:

	uint16_t value_HV() {
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
		return h_voltage;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
	}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <_ZN4ADC_13reset_measureEv>:

	bool is_measure() { return measure; }
	void reset_measure() { measure = false; }
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <_ZN4ADC_11reset_errorEv>:
	bool is_error(){return error;}
	void reset_error(){error = false;}
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <_ZN4ADC_9is_over_sEv>:
	bool is_over_s(){return over_cur_s;}
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <_ZN4ADC_12reset_over_sEv>:
	void reset_over_s(){over_cur_s = false;}
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <_ZN4ADC_9is_over_aEv>:
	bool is_over_a(){return over_cur_a;}
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <_ZN4ADC_12reset_over_aEv>:
	void reset_over_a(){over_cur_a = false;}
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <_ZN4ADC_9is_over_cEv>:
	bool is_over_c(){return over_cur_c;}
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <_ZN4ADC_12reset_over_cEv>:
	void reset_over_c(){over_cur_c = false;}
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <_ZN4ADC_11is_error_HVEv>:
	bool is_error_HV(){return error_HV;}
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <_ZN4ADC_14reset_error_HVEv>:
	void reset_error_HV(){error_HV = false;}
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <_ZN4ADC_7what_KmEt>:
	void what_Km(uint16_t k) {Km_check = k > 50 ? true : false;}
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	807b      	strh	r3, [r7, #2]
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	2b32      	cmp	r3, #50	; 0x32
 80020ee:	bf8c      	ite	hi
 80020f0:	2301      	movhi	r3, #1
 80020f2:	2300      	movls	r3, #0
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
	...

08002108 <_ZN4ADC_6notifyEv>:

	void notify(){
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	8a9b      	ldrh	r3, [r3, #20]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	b291      	uxth	r1, r2
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	8291      	strh	r1, [r2, #20]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	8a52      	ldrh	r2, [r2, #18]
 8002120:	4293      	cmp	r3, r2
 8002122:	bf2c      	ite	cs
 8002124:	2301      	movcs	r3, #1
 8002126:	2300      	movcc	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00b      	beq.n	8002146 <_ZN4ADC_6notifyEv+0x3e>
		   time = 0;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	829a      	strh	r2, [r3, #20]
		   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, qty_channel);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f103 0116 	add.w	r1, r3, #22
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7c1b      	ldrb	r3, [r3, #16]
 800213e:	461a      	mov	r2, r3
 8002140:	480d      	ldr	r0, [pc, #52]	; (8002178 <_ZN4ADC_6notifyEv+0x70>)
 8002142:	f003 fb61 	bl	8005808 <HAL_ADC_Start_DMA>
		}
		if( not time % 100 and not work)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	8a9b      	ldrh	r3, [r3, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	bf0c      	ite	eq
 800214e:	2301      	moveq	r3, #1
 8002150:	2300      	movne	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <_ZN4ADC_6notifyEv+0x66>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800215e:	f083 0301 	eor.w	r3, r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <_ZN4ADC_6notifyEv+0x66>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <_ZN4ADC_6notifyEv+0x74>)
 800216a:	f003 ffa5 	bl	80060b8 <HAL_ADCEx_InjectedStart_IT>
	}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000108 	.word	0x20000108
 800217c:	20000138 	.word	0x20000138

08002180 <_ZN4ADC_15set_max_currentEt>:

	void set_max_current(uint16_t v){
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	807b      	strh	r3, [r7, #2]
		max_current = v;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <_ZN4ADC_21set_max_current_phaseEt>:

	void set_max_current_phase(uint16_t v){
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	807b      	strh	r3, [r7, #2]
		max_current_phase = v;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	887a      	ldrh	r2, [r7, #2]
 80021ae:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
	}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <HAL_ADC_ConvCpltCallback>:
};

Interrupt adc_callback;
Interrupt adc_injected_callback;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <HAL_ADC_ConvCpltCallback+0x20>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d102      	bne.n	80021d4 <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_callback.interrupt();
 80021ce:	4804      	ldr	r0, [pc, #16]	; (80021e0 <HAL_ADC_ConvCpltCallback+0x24>)
 80021d0:	f7ff f99c 	bl	800150c <_ZN9Interrupt9interruptEv>
	}
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40012400 	.word	0x40012400
 80021e0:	20000350 	.word	0x20000350

080021e4 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a04      	ldr	r2, [pc, #16]	; (8002204 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d102      	bne.n	80021fc <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 80021f6:	4804      	ldr	r0, [pc, #16]	; (8002208 <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 80021f8:	f7ff f988 	bl	800150c <_ZN9Interrupt9interruptEv>
	}
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40012800 	.word	0x40012800
 8002208:	20000354 	.word	0x20000354

0800220c <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	4613      	mov	r3, r2
 8002218:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	88fa      	ldrh	r2, [r7, #6]
 8002224:	809a      	strh	r2, [r3, #4]
	  }
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr

08002232 <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	889b      	ldrh	r3, [r3, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	4619      	mov	r1, r3
 8002246:	f005 f924 	bl	8007492 <HAL_GPIO_WritePin>
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	889b      	ldrh	r3, [r3, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	4619      	mov	r1, r3
 8002266:	f005 f914 	bl	8007492 <HAL_GPIO_WritePin>
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <_ZN3Pin6is_setEv>:
	  bool is_set(){return HAL_GPIO_ReadPin(port, n);}
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	889b      	ldrh	r3, [r3, #4]
 8002282:	4619      	mov	r1, r3
 8002284:	4610      	mov	r0, r2
 8002286:	f005 f8ed 	bl	8007464 <HAL_GPIO_ReadPin>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf14      	ite	ne
 8002290:	2301      	movne	r3, #1
 8002292:	2300      	moveq	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_ZN3PinaSEb>:

	  void toggle() {
		  HAL_GPIO_TogglePin(port, n);
	  }

	  bool operator=(bool v)
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <_ZN3PinaSEb+0x1a>
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ffbe 	bl	8002232 <_ZN3Pin3setEv>
 80022b6:	e002      	b.n	80022be <_ZN3PinaSEb+0x20>
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ffca 	bl	8002252 <_ZN3Pin5clearEv>
	      return v;
 80022be:	78fb      	ldrb	r3, [r7, #3]
	  }
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <_ZN3PincvbEv>:
	  {
	     if (v)
	        toggle();
	  }

	  operator bool() {return is_set();}
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ffce 	bl	8002272 <_ZN3Pin6is_setEv>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <_ZN3NTCC1Ev>:
    float T_formula; //25 градусов в Кельвин.
    float Temp_formula;

public:

    NTC()
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
    {
      R_formula = 10000;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a05      	ldr	r2, [pc, #20]	; (8002300 <_ZN3NTCC1Ev+0x20>)
 80022ec:	605a      	str	r2, [r3, #4]
      T_formula  =298.15;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <_ZN3NTCC1Ev+0x24>)
 80022f2:	609a      	str	r2, [r3, #8]
    }
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	461c4000 	.word	0x461c4000
 8002304:	43951333 	.word	0x43951333

08002308 <_ZN3NTCclEt>:

    uint16_t operator() (uint16_t adc)
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
    {
      //Вычисление температуры в К датчика
        Om_float = (float)4095 - adc;
 8002314:	887b      	ldrh	r3, [r7, #2]
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe fcd4 	bl	8000cc4 <__aeabi_i2f>
 800231c:	4603      	mov	r3, r0
 800231e:	4619      	mov	r1, r3
 8002320:	482d      	ldr	r0, [pc, #180]	; (80023d8 <_ZN3NTCclEt+0xd0>)
 8002322:	f7fe fc19 	bl	8000b58 <__aeabi_fsub>
 8002326:	4603      	mov	r3, r0
 8002328:	461a      	mov	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	601a      	str	r2, [r3, #0]
        Om_float = adc / Om_float;
 800232e:	887b      	ldrh	r3, [r7, #2]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe fcc7 	bl	8000cc4 <__aeabi_i2f>
 8002336:	4602      	mov	r2, r0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4619      	mov	r1, r3
 800233e:	4610      	mov	r0, r2
 8002340:	f7fe fdc8 	bl	8000ed4 <__aeabi_fdiv>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	601a      	str	r2, [r3, #0]
        Om_float = Om_float * RESESTIVE_TEMPERATUR_SCHOULDER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4922      	ldr	r1, [pc, #136]	; (80023dc <_ZN3NTCclEt+0xd4>)
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fd0a 	bl	8000d6c <__aeabi_fmul>
 8002358:	4603      	mov	r3, r0
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	601a      	str	r2, [r3, #0]
        //Вычисляем по формуле T1 = 1 / ((ln(R1) – ln(R2)) / B + 1 / T2) температуру.
        Temp_formula = (1 / ( (log1pf(Om_float) - log1pf(R_formula)) / B_T_1_2 + 1 / T_formula));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f007 fc8b 	bl	8009c80 <log1pf>
 800236a:	4604      	mov	r4, r0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4618      	mov	r0, r3
 8002372:	f007 fc85 	bl	8009c80 <log1pf>
 8002376:	4603      	mov	r3, r0
 8002378:	4619      	mov	r1, r3
 800237a:	4620      	mov	r0, r4
 800237c:	f7fe fbec 	bl	8000b58 <__aeabi_fsub>
 8002380:	4603      	mov	r3, r0
 8002382:	4917      	ldr	r1, [pc, #92]	; (80023e0 <_ZN3NTCclEt+0xd8>)
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fda5 	bl	8000ed4 <__aeabi_fdiv>
 800238a:	4603      	mov	r3, r0
 800238c:	461c      	mov	r4, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	4619      	mov	r1, r3
 8002394:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002398:	f7fe fd9c 	bl	8000ed4 <__aeabi_fdiv>
 800239c:	4603      	mov	r3, r0
 800239e:	4619      	mov	r1, r3
 80023a0:	4620      	mov	r0, r4
 80023a2:	f7fe fbdb 	bl	8000b5c <__addsf3>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4619      	mov	r1, r3
 80023aa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80023ae:	f7fe fd91 	bl	8000ed4 <__aeabi_fdiv>
 80023b2:	4603      	mov	r3, r0
 80023b4:	461a      	mov	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60da      	str	r2, [r3, #12]
        return (int16_t)Temp_formula - 273;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe feb0 	bl	8001124 <__aeabi_f2iz>
 80023c4:	4603      	mov	r3, r0
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80023ce:	b29b      	uxth	r3, r3
    }
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd90      	pop	{r4, r7, pc}
 80023d8:	457ff000 	.word	0x457ff000
 80023dc:	461c4000 	.word	0x461c4000
 80023e0:	45790000 	.word	0x45790000

080023e4 <HAL_UART_TxCpltCallback>:

Interrupt interrupt_dma;
Interrupt interrupt_uart;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_UART_TxCpltCallback+0x20>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d102      	bne.n	80023fc <HAL_UART_TxCpltCallback+0x18>
		interrupt_dma.interrupt();
 80023f6:	4804      	ldr	r0, [pc, #16]	; (8002408 <HAL_UART_TxCpltCallback+0x24>)
 80023f8:	f7ff f888 	bl	800150c <_ZN9Interrupt9interruptEv>
	}
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40004800 	.word	0x40004800
 8002408:	20000358 	.word	0x20000358

0800240c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a04      	ldr	r2, [pc, #16]	; (8002430 <HAL_UARTEx_RxEventCallback+0x24>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d102      	bne.n	8002428 <HAL_UARTEx_RxEventCallback+0x1c>
		interrupt_uart.interrupt();
 8002422:	4804      	ldr	r0, [pc, #16]	; (8002434 <HAL_UARTEx_RxEventCallback+0x28>)
 8002424:	f7ff f872 	bl	800150c <_ZN9Interrupt9interruptEv>
	}
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40004800 	.word	0x40004800
 8002434:	2000035c 	.word	0x2000035c

08002438 <_ZN9ContactorC1ER4ADC_R7ServiceI7In_data8Out_dataE>:
	bool on_off{false};
	bool enable{false};

public:

	Contactor(ADC_& adc, Service<In_data, Out_data>& service) : adc{adc}, service{service} {}
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	3308      	adds	r3, #8
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe ff97 	bl	8001388 <_ZN5TimerC1Ev>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	761a      	strb	r2, [r3, #24]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	765a      	strb	r2, [r3, #25]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	769a      	strb	r2, [r3, #26]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <_ZN9Contactor5startEv>:

	void start(){
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
		on_off = true;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	765a      	strb	r2, [r3, #25]
		enable = false;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	769a      	strb	r2, [r3, #26]
		timer.stop();
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3308      	adds	r3, #8
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fff7 	bl	8001482 <_ZN5Timer4stopEv>
	}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <_ZN9Contactor4stopEv>:

	void stop(){
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
		TIM4->CCR1 = 0;
 80024a4:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <_ZN9Contactor4stopEv+0x34>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80024aa:	2100      	movs	r1, #0
 80024ac:	4809      	ldr	r0, [pc, #36]	; (80024d4 <_ZN9Contactor4stopEv+0x38>)
 80024ae:	f005 fec1 	bl	8008234 <HAL_TIM_PWM_Stop>
		enable = false;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	769a      	strb	r2, [r3, #26]
		on_off = false;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	765a      	strb	r2, [r3, #25]
		timer.stop();
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3308      	adds	r3, #8
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe ffdd 	bl	8001482 <_ZN5Timer4stopEv>
	}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40000800 	.word	0x40000800
 80024d4:	2000023c 	.word	0x2000023c

080024d8 <_ZN9Contactor5is_onEv>:

	bool is_on() {
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
		return on;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7e1b      	ldrb	r3, [r3, #24]
	}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
	...

080024f0 <_ZN9ContactorclEv>:

	void operator()(){
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
		if(on_off and not enable and service.outData.high_voltage >= 300) {
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7e5b      	ldrb	r3, [r3, #25]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d042      	beq.n	8002586 <_ZN9ContactorclEv+0x96>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7e9b      	ldrb	r3, [r3, #26]
 8002504:	f083 0301 	eor.w	r3, r3, #1
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d03b      	beq.n	8002586 <_ZN9ContactorclEv+0x96>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002516:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800251a:	d334      	bcc.n	8002586 <_ZN9ContactorclEv+0x96>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800251c:	2100      	movs	r1, #0
 800251e:	4836      	ldr	r0, [pc, #216]	; (80025f8 <_ZN9ContactorclEv+0x108>)
 8002520:	f005 fdce 	bl	80080c0 <HAL_TIM_PWM_Start>
			TIM4->CCR1 = 1799;
 8002524:	4b35      	ldr	r3, [pc, #212]	; (80025fc <_ZN9ContactorclEv+0x10c>)
 8002526:	f240 7207 	movw	r2, #1799	; 0x707
 800252a:	635a      	str	r2, [r3, #52]	; 0x34
			if(is_on() and not timer.isCount()) {
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ffd3 	bl	80024d8 <_ZN9Contactor5is_onEv>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00c      	beq.n	8002552 <_ZN9ContactorclEv+0x62>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3308      	adds	r3, #8
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe ffcd 	bl	80014dc <_ZN5Timer7isCountEv>
 8002542:	4603      	mov	r3, r0
 8002544:	f083 0301 	eor.w	r3, r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <_ZN9ContactorclEv+0x62>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <_ZN9ContactorclEv+0x64>
 8002552:	2300      	movs	r3, #0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <_ZN9ContactorclEv+0x76>
				timer.start(1000);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3308      	adds	r3, #8
 800255c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002560:	4618      	mov	r0, r3
 8002562:	f7fe ff61 	bl	8001428 <_ZN5Timer5startEm>
			}

			if(timer.done()){
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3308      	adds	r3, #8
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe ff98 	bl	80014a0 <_ZN5Timer4doneEv>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <_ZN9ContactorclEv+0x96>
				timer.stop();
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3308      	adds	r3, #8
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe ff81 	bl	8001482 <_ZN5Timer4stopEv>
				enable = true;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	769a      	strb	r2, [r3, #26]
			}
		}

		if(enable){
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	7e9b      	ldrb	r3, [r3, #26]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d023      	beq.n	80025d6 <_ZN9ContactorclEv+0xe6>
			if(service.outData.voltage_board > 240) TIM4->CCR1 = 900;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002596:	2bf0      	cmp	r3, #240	; 0xf0
 8002598:	d904      	bls.n	80025a4 <_ZN9ContactorclEv+0xb4>
 800259a:	4b18      	ldr	r3, [pc, #96]	; (80025fc <_ZN9ContactorclEv+0x10c>)
 800259c:	f44f 7261 	mov.w	r2, #900	; 0x384
 80025a0:	635a      	str	r2, [r3, #52]	; 0x34
 80025a2:	e018      	b.n	80025d6 <_ZN9ContactorclEv+0xe6>
			else if (service.outData.voltage_board < 200) TIM4->CCR1 = 1799;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80025ac:	2bc7      	cmp	r3, #199	; 0xc7
 80025ae:	d804      	bhi.n	80025ba <_ZN9ContactorclEv+0xca>
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <_ZN9ContactorclEv+0x10c>)
 80025b2:	f240 7207 	movw	r2, #1799	; 0x707
 80025b6:	635a      	str	r2, [r3, #52]	; 0x34
 80025b8:	e00d      	b.n	80025d6 <_ZN9ContactorclEv+0xe6>
			else
				TIM4->CCR1 = 5220 - 18 * service.outData.voltage_board;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80025c2:	461a      	mov	r2, r3
 80025c4:	f06f 0311 	mvn.w	r3, #17
 80025c8:	fb03 f302 	mul.w	r3, r3, r2
 80025cc:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 80025d0:	3304      	adds	r3, #4
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <_ZN9ContactorclEv+0x10c>)
 80025d4:	6353      	str	r3, [r2, #52]	; 0x34
		}

		on = HAL_GPIO_ReadPin(GPIOD, Contactor_Pin);
 80025d6:	2104      	movs	r1, #4
 80025d8:	4809      	ldr	r0, [pc, #36]	; (8002600 <_ZN9ContactorclEv+0x110>)
 80025da:	f004 ff43 	bl	8007464 <HAL_GPIO_ReadPin>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	761a      	strb	r2, [r3, #24]
	}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	2000023c 	.word	0x2000023c
 80025fc:	40000800 	.word	0x40000800
 8002600:	40011400 	.word	0x40011400

08002604 <_ZN9Convertor14TIM3_interruptC1ERS_>:

	using Parent = Convertor;

	struct TIM3_interrupt: Interrupting {
		Parent &parent;
		TIM3_interrupt(Parent &parent) :
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
				parent(parent) {
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fb0f 	bl	8001c34 <_ZN12InterruptingC1Ev>
 8002616:	4a09      	ldr	r2, [pc, #36]	; (800263c <_ZN9Convertor14TIM3_interruptC1ERS_+0x38>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	605a      	str	r2, [r3, #4]
			parent.period_callback.subscribe(this);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe ff61 	bl	80014f2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	0800b068 	.word	0x0800b068

08002640 <_ZN9Convertor14TIM3_interrupt9interruptEv>:
		void interrupt() override {
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
			parent.period_interrupt();
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	4618      	mov	r0, r3
 800264e:	f000 f805 	bl	800265c <_ZN9Convertor16period_interruptEv>
		}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <_ZN9Convertor16period_interruptEv>:
//		void interrupt() override {
//			parent.comparator_interrupt();
//		}
//	} adc_comparator_ { *this };

	void period_interrupt(){
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]

		if (Km >= 990) {
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800266a:	f240 32dd 	movw	r2, #989	; 0x3dd
 800266e:	4293      	cmp	r3, r2
 8002670:	d904      	bls.n	800267c <_ZN9Convertor16period_interruptEv+0x20>
			Km = 990;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f240 32de 	movw	r2, #990	; 0x3de
 8002678:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		}

		TIM1->CCR1 = Km * sin_table[m++] / 1000;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8002688:	1c59      	adds	r1, r3, #1
 800268a:	b2c8      	uxtb	r0, r1
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	f881 00c2 	strb.w	r0, [r1, #194]	; 0xc2
 8002692:	4619      	mov	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	313c      	adds	r1, #60	; 0x3c
 8002698:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800269c:	fb03 f302 	mul.w	r3, r3, r2
 80026a0:	4a35      	ldr	r2, [pc, #212]	; (8002778 <_ZN9Convertor16period_interruptEv+0x11c>)
 80026a2:	4936      	ldr	r1, [pc, #216]	; (800277c <_ZN9Convertor16period_interruptEv+0x120>)
 80026a4:	fba1 1303 	umull	r1, r3, r1, r3
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = Km * sin_table[k++] / 1000;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80026b8:	1c59      	adds	r1, r3, #1
 80026ba:	b2c8      	uxtb	r0, r1
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
 80026c2:	4619      	mov	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	313c      	adds	r1, #60	; 0x3c
 80026c8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80026cc:	fb03 f302 	mul.w	r3, r3, r2
 80026d0:	4a29      	ldr	r2, [pc, #164]	; (8002778 <_ZN9Convertor16period_interruptEv+0x11c>)
 80026d2:	492a      	ldr	r1, [pc, #168]	; (800277c <_ZN9Convertor16period_interruptEv+0x120>)
 80026d4:	fba1 1303 	umull	r1, r3, r1, r3
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = Km * sin_table[n++] / 1000;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80026e8:	1c59      	adds	r1, r3, #1
 80026ea:	b2c8      	uxtb	r0, r1
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	f881 00c3 	strb.w	r0, [r1, #195]	; 0xc3
 80026f2:	4619      	mov	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	313c      	adds	r1, #60	; 0x3c
 80026f8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80026fc:	fb03 f302 	mul.w	r3, r3, r2
 8002700:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <_ZN9Convertor16period_interruptEv+0x11c>)
 8002702:	491e      	ldr	r1, [pc, #120]	; (800277c <_ZN9Convertor16period_interruptEv+0x120>)
 8002704:	fba1 1303 	umull	r1, r3, r1, r3
 8002708:	099b      	lsrs	r3, r3, #6
 800270a:	63d3      	str	r3, [r2, #60]	; 0x3c

		if (k >= qty_point) {k = 0;}
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8002712:	2b23      	cmp	r3, #35	; 0x23
 8002714:	d903      	bls.n	800271e <_ZN9Convertor16period_interruptEv+0xc2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		if (m >= qty_point) {m = 0;}
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8002724:	2b23      	cmp	r3, #35	; 0x23
 8002726:	d903      	bls.n	8002730 <_ZN9Convertor16period_interruptEv+0xd4>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		if (n >= qty_point) {n = 0;}
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8002736:	2b23      	cmp	r3, #35	; 0x23
 8002738:	d903      	bls.n	8002742 <_ZN9Convertor16period_interruptEv+0xe6>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

		switcher ^= 1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8002748:	f083 0301 	eor.w	r3, r3, #1
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf14      	ite	ne
 8002752:	2301      	movne	r3, #1
 8002754:	2300      	moveq	r3, #0
 8002756:	b2da      	uxtb	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea

		if(switcher) HAL_ADCEx_InjectedStart_IT(&hadc2);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 30ea 	ldrb.w	r3, [r3, #234]	; 0xea
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <_ZN9Convertor16period_interruptEv+0x112>
 8002768:	4805      	ldr	r0, [pc, #20]	; (8002780 <_ZN9Convertor16period_interruptEv+0x124>)
 800276a:	f003 fca5 	bl	80060b8 <HAL_ADCEx_InjectedStart_IT>

	}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40012c00 	.word	0x40012c00
 800277c:	10624dd3 	.word	0x10624dd3
 8002780:	20000138 	.word	0x20000138

08002784 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptR3PinSC_SC_SC_SC_SC_SC_SC_SC_>:
//
//	}

public:

	Convertor(ADC_& adc, Service<In_data, Out_data>& service, Contactor& contactor, Interrupt& period_callback/*, Interrupt& adc_comparator_callback*/
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
			, Pin& led_red, Pin& led_green, Pin& ventilator, Pin& unload, Pin& condens, Pin& TD_DM, Pin& SP, Pin& Start, Pin& Motor)
	: adc{adc}, service{service}, contactor{contactor}, period_callback{period_callback}/*, adc_comparator_callback{adc_comparator_callback}*/
	, led_red{led_red}, led_green{led_green}, ventilator{ventilator}, unload{unload}, condens{condens}, TD_DM{TD_DM}, SP{SP}, Start{Start}, Motor{Motor}
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	611a      	str	r2, [r3, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	615a      	str	r2, [r3, #20]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a3a      	ldr	r2, [r7, #32]
 80027ba:	619a      	str	r2, [r3, #24]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c0:	61da      	str	r2, [r3, #28]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027c6:	621a      	str	r2, [r3, #32]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027e4:	635a      	str	r2, [r3, #52]	; 0x34
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	3338      	adds	r3, #56	; 0x38
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fdcc 	bl	8001388 <_ZN5TimerC1Ev>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3348      	adds	r3, #72	; 0x48
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fdc7 	bl	8001388 <_ZN5TimerC1Ev>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3358      	adds	r3, #88	; 0x58
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fdc2 	bl	8001388 <_ZN5TimerC1Ev>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3368      	adds	r3, #104	; 0x68
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fdbd 	bl	8001388 <_ZN5TimerC1Ev>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a57      	ldr	r2, [pc, #348]	; (8002970 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptR3PinSC_SC_SC_SC_SC_SC_SC_SC_+0x1ec>)
 8002812:	3378      	adds	r3, #120	; 0x78
 8002814:	4611      	mov	r1, r2
 8002816:	2248      	movs	r2, #72	; 0x48
 8002818:	4618      	mov	r0, r3
 800281a:	f008 fb8d 	bl	800af38 <memcpy>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	220c      	movs	r2, #12
 8002832:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2218      	movs	r2, #24
 800283a:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2205      	movs	r2, #5
 8002842:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f240 427e 	movw	r2, #1150	; 0x47e
 800284c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2264      	movs	r2, #100	; 0x64
 8002854:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2219      	movs	r2, #25
 800285c:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002866:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2202      	movs	r2, #2
 8002876:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2219      	movs	r2, #25
 800289e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80028d0:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f44f 72be 	mov.w	r2, #380	; 0x17c
 80028da:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80028e4:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a18      	ldr	r2, [pc, #96]	; (8002974 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptR3PinSC_SC_SC_SC_SC_SC_SC_SC_+0x1f0>)
 8002914:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	33f0      	adds	r3, #240	; 0xf0
 800291c:	68f9      	ldr	r1, [r7, #12]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fe70 	bl	8002604 <_ZN9Convertor14TIM3_interruptC1ERS_>
	{rerun.time_set = 0; timer_stop.time_set = 0; clump_timer.time_set = 0;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	655a      	str	r2, [r3, #84]	; 0x54
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	665a      	str	r2, [r3, #100]	; 0x64
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	675a      	str	r2, [r3, #116]	; 0x74
		if(motor == SYNCHRON) {
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptR3PinSC_SC_SC_SC_SC_SC_SC_SC_+0x1d2>
			unload = true;
 8002940:	2101      	movs	r1, #1
 8002942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002944:	f7ff fcab 	bl	800229e <_ZN3PinaSEb>
			clump_timer.start(15000);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3368      	adds	r3, #104	; 0x68
 800294c:	f643 2198 	movw	r1, #15000	; 0x3a98
 8002950:	4618      	mov	r0, r3
 8002952:	f7fe fd69 	bl	8001428 <_ZN5Timer5startEm>
		}
		motor = Motor;
 8002956:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002958:	f7ff fcb6 	bl	80022c8 <_ZN3PincvbEv>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	}
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	0800b008 	.word	0x0800b008
 8002974:	000186a0 	.word	0x000186a0

08002978 <_ZN9ConvertorclEv>:

	void operator() (){
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

		service();
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4618      	mov	r0, r3
 8002986:	f001 feb5 	bl	80046f4 <_ZN7ServiceI7In_data8Out_dataEclEv>
		contactor();
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fdae 	bl	80024f0 <_ZN9ContactorclEv>

		service.outData.PWM = Km;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	b212      	sxth	r2, r2
 80029a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		service.outData.error.on = Start;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689c      	ldr	r4, [r3, #8]
 80029ac:	4610      	mov	r0, r2
 80029ae:	f7ff fc8b 	bl	80022c8 <_ZN3PincvbEv>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
 80029ba:	f362 1304 	bfi	r3, r2, #4, #1
 80029be:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		service.outData.U_phase = U_phase;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	f8b2 20d4 	ldrh.w	r2, [r2, #212]	; 0xd4
 80029cc:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		service.outData.error.overheat_c = not bool(TD_DM);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fc77 	bl	80022c8 <_ZN3PincvbEv>
 80029da:	4603      	mov	r3, r0
 80029dc:	4619      	mov	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	f081 0301 	eor.w	r3, r1, #1
 80029e6:	b2d9      	uxtb	r1, r3
 80029e8:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 80029ec:	f361 1386 	bfi	r3, r1, #6, #1
 80029f0:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		service.outData.error.HV_low = U_stop;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 10d6 	ldrb.w	r1, [r3, #214]	; 0xd6
 80029fe:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8002a02:	f361 1345 	bfi	r3, r1, #5, #1
 8002a06:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		service.outData.error.voltage_board_low = (service.outData.voltage_board < 180);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6892      	ldr	r2, [r2, #8]
 8002a16:	2bb3      	cmp	r3, #179	; 0xb3
 8002a18:	bf94      	ite	ls
 8002a1a:	2301      	movls	r3, #1
 8002a1c:	2300      	movhi	r3, #0
 8002a1e:	b2d9      	uxtb	r1, r3
 8002a20:	f892 307b 	ldrb.w	r3, [r2, #123]	; 0x7b
 8002a24:	f361 0341 	bfi	r3, r1, #1, #1
 8002a28:	f882 307b 	strb.w	r3, [r2, #123]	; 0x7b
		service.outData.error.voltage_board_high = (service.outData.voltage_board > 300);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6892      	ldr	r2, [r2, #8]
 8002a38:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002a3c:	bf8c      	ite	hi
 8002a3e:	2301      	movhi	r3, #1
 8002a40:	2300      	movls	r3, #0
 8002a42:	b2d9      	uxtb	r1, r3
 8002a44:	f892 307b 	ldrb.w	r3, [r2, #123]	; 0x7b
 8002a48:	f361 0382 	bfi	r3, r1, #2, #1
 8002a4c:	f882 307b 	strb.w	r3, [r2, #123]	; 0x7b

		service.outData.max_current_A = min_ARR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	f8b2 20e0 	ldrh.w	r2, [r2, #224]	; 0xe0
 8002a5a:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
		service.outData.max_current_C = U_phase_max;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	f8b2 20d8 	ldrh.w	r2, [r2, #216]	; 0xd8
 8002a68:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
		service.outData.current_C = Kp;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	f8b2 20c8 	ldrh.w	r2, [r2, #200]	; 0xc8
 8002a76:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
		service.outData.max_current = TIM3->ARR;
 8002a7a:	4bb3      	ldr	r3, [pc, #716]	; (8002d48 <_ZN9ConvertorclEv+0x3d0>)
 8002a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	b292      	uxth	r2, r2
 8002a84:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

		if(service.outData.high_voltage <= 300) U_stop = true;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002a90:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002a94:	d804      	bhi.n	8002aa0 <_ZN9ConvertorclEv+0x128>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8002a9e:	e00f      	b.n	8002ac0 <_ZN9ConvertorclEv+0x148>
		else if(service.outData.high_voltage > 310) {U_stop = false; adc.reset_error_HV();}
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002aa8:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8002aac:	d908      	bls.n	8002ac0 <_ZN9ConvertorclEv+0x148>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fb02 	bl	80020c4 <_ZN4ADC_14reset_error_HVEv>

		if (service.outData.error.overheat_fc |= service.outData.convertor_temp >= 80) {
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002ac8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8002ad8:	2b4f      	cmp	r3, #79	; 0x4f
 8002ada:	bfcc      	ite	gt
 8002adc:	2301      	movgt	r3, #1
 8002ade:	2300      	movle	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2a00      	cmp	r2, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2201      	movne	r2, #1
 8002aee:	2200      	moveq	r2, #0
 8002af0:	b2d1      	uxtb	r1, r2
 8002af2:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8002af6:	f361 12c7 	bfi	r2, r1, #7, #1
 8002afa:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
 8002afe:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002b02:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d010      	beq.n	8002b2e <_ZN9ConvertorclEv+0x1b6>
			service.outData.error.overheat_fc = service.outData.convertor_temp >= 70;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6892      	ldr	r2, [r2, #8]
 8002b18:	2b45      	cmp	r3, #69	; 0x45
 8002b1a:	bfcc      	ite	gt
 8002b1c:	2301      	movgt	r3, #1
 8002b1e:	2300      	movle	r3, #0
 8002b20:	b2d9      	uxtb	r1, r3
 8002b22:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8002b26:	f361 13c7 	bfi	r3, r1, #7, #1
 8002b2a:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
//			ventilator = cool;
//		else
//			ventilator = false;
/////////////////CONDITIONER

		if(contactor.is_on() and enable) alarm();
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fcd0 	bl	80024d8 <_ZN9Contactor5is_onEv>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d006      	beq.n	8002b4c <_ZN9ConvertorclEv+0x1d4>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <_ZN9ConvertorclEv+0x1d4>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <_ZN9ConvertorclEv+0x1d6>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <_ZN9ConvertorclEv+0x1e0>
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fdec 	bl	8003730 <_ZN9Convertor5alarmEv>

		switch(state) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d004      	beq.n	8002b6a <_ZN9ConvertorclEv+0x1f2>
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	f000 81a4 	beq.w	8002eae <_ZN9ConvertorclEv+0x536>
							}
				} // else if(motor == SYNCHRON) {
			}
			break;
		} // switch
	} //void operator() (){
 8002b66:	f000 bcdf 	b.w	8003528 <_ZN9ConvertorclEv+0xbb0>
if(motor == ASYNCHRON) {
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d172      	bne.n	8002c5a <_ZN9ConvertorclEv+0x2e2>
	adc.set_max_current(16);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2110      	movs	r1, #16
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fb00 	bl	8002180 <_ZN4ADC_15set_max_currentEt>
	adc.set_max_current_phase(20);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2114      	movs	r1, #20
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fb09 	bl	800219e <_ZN4ADC_21set_max_current_phaseEt>
	unload = false;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fb83 	bl	800229e <_ZN3PinaSEb>
	if (service.outData.high_voltage > 300 and service.outData.high_voltage < 540) {
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002ba0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002ba4:	d94e      	bls.n	8002c44 <_ZN9ConvertorclEv+0x2cc>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002bae:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8002bb2:	d247      	bcs.n	8002c44 <_ZN9ConvertorclEv+0x2cc>
		U_phase_max = ((((service.outData.high_voltage / 20) * 990) / 141) * 115) / 100;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002bbc:	4a63      	ldr	r2, [pc, #396]	; (8002d4c <_ZN9ConvertorclEv+0x3d4>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f240 33de 	movw	r3, #990	; 0x3de
 8002bcc:	fb03 f302 	mul.w	r3, r3, r2
 8002bd0:	4a5f      	ldr	r2, [pc, #380]	; (8002d50 <_ZN9ConvertorclEv+0x3d8>)
 8002bd2:	fb82 1203 	smull	r1, r2, r2, r3
 8002bd6:	1152      	asrs	r2, r2, #5
 8002bd8:	17db      	asrs	r3, r3, #31
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2273      	movs	r2, #115	; 0x73
 8002bde:	fb02 f303 	mul.w	r3, r2, r3
 8002be2:	4a5c      	ldr	r2, [pc, #368]	; (8002d54 <_ZN9ConvertorclEv+0x3dc>)
 8002be4:	fb82 1203 	smull	r1, r2, r2, r3
 8002be8:	1152      	asrs	r2, r2, #5
 8002bea:	17db      	asrs	r3, r3, #31
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		min_ARR = (div_f / ((U_phase_max) * 5)) * 22; // 5/22 = 50/220
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 8002c02:	4619      	mov	r1, r3
 8002c04:	460b      	mov	r3, r1
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	0092      	lsls	r2, r2, #2
 8002c14:	441a      	add	r2, r3
 8002c16:	0052      	lsls	r2, r2, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		if(min_ARR <= ARR_ASIN) min_ARR = ARR_ASIN;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 30e4 	ldrh.w	r3, [r3, #228]	; 0xe4
 8002c30:	429a      	cmp	r2, r3
 8002c32:	f200 809d 	bhi.w	8002d70 <_ZN9ConvertorclEv+0x3f8>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	; 0xe4
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8002c42:	e095      	b.n	8002d70 <_ZN9ConvertorclEv+0x3f8>
		U_phase_max = 220;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	22dc      	movs	r2, #220	; 0xdc
 8002c48:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		min_ARR = ARR_ASIN;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	; 0xe4
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8002c58:	e08a      	b.n	8002d70 <_ZN9ConvertorclEv+0x3f8>
} else if (motor == SYNCHRON) {
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f040 8085 	bne.w	8002d70 <_ZN9ConvertorclEv+0x3f8>
	adc.set_max_current(16);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2110      	movs	r1, #16
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fa87 	bl	8002180 <_ZN4ADC_15set_max_currentEt>
	adc.set_max_current_phase(20);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2114      	movs	r1, #20
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fa90 	bl	800219e <_ZN4ADC_21set_max_current_phaseEt>
	if(clump_timer.done()) {
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3368      	adds	r3, #104	; 0x68
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe fc0c 	bl	80014a0 <_ZN5Timer4doneEv>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <_ZN9ConvertorclEv+0x32c>
		clump_timer.stop(); unload = false;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3368      	adds	r3, #104	; 0x68
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fbf5 	bl	8001482 <_ZN5Timer4stopEv>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fafd 	bl	800229e <_ZN3PinaSEb>
 	if(service.outData.high_voltage > 300 and service.outData.high_voltage < 540) {
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002cac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002cb0:	d954      	bls.n	8002d5c <_ZN9ConvertorclEv+0x3e4>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002cba:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8002cbe:	d24d      	bcs.n	8002d5c <_ZN9ConvertorclEv+0x3e4>
		U_phase_max = ((((service.outData.high_voltage / 20) * 940) / 141) * 115) / 100;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002cc8:	4a20      	ldr	r2, [pc, #128]	; (8002d4c <_ZN9ConvertorclEv+0x3d4>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f44f 736b 	mov.w	r3, #940	; 0x3ac
 8002cd8:	fb03 f302 	mul.w	r3, r3, r2
 8002cdc:	4a1c      	ldr	r2, [pc, #112]	; (8002d50 <_ZN9ConvertorclEv+0x3d8>)
 8002cde:	fb82 1203 	smull	r1, r2, r2, r3
 8002ce2:	1152      	asrs	r2, r2, #5
 8002ce4:	17db      	asrs	r3, r3, #31
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2273      	movs	r2, #115	; 0x73
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	4a19      	ldr	r2, [pc, #100]	; (8002d54 <_ZN9ConvertorclEv+0x3dc>)
 8002cf0:	fb82 1203 	smull	r1, r2, r2, r3
 8002cf4:	1152      	asrs	r2, r2, #5
 8002cf6:	17db      	asrs	r3, r3, #31
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		min_ARR = ( (div_f / (U_phase_max)) * 50) / 70; // 70/53 = 280/212
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	f8b2 20d8 	ldrh.w	r2, [r2, #216]	; 0xd8
 8002d0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d12:	2232      	movs	r2, #50	; 0x32
 8002d14:	fb02 f303 	mul.w	r3, r2, r3
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	4a0f      	ldr	r2, [pc, #60]	; (8002d58 <_ZN9ConvertorclEv+0x3e0>)
 8002d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		if(min_ARR < value_ARR) min_ARR = value_ARR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	; 0xe2
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d21a      	bcs.n	8002d70 <_ZN9ConvertorclEv+0x3f8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8002d46:	e013      	b.n	8002d70 <_ZN9ConvertorclEv+0x3f8>
 8002d48:	40000400 	.word	0x40000400
 8002d4c:	cccccccd 	.word	0xcccccccd
 8002d50:	3a196b1f 	.word	0x3a196b1f
 8002d54:	51eb851f 	.word	0x51eb851f
 8002d58:	ea0ea0eb 	.word	0xea0ea0eb
		U_phase_max = 212;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	22d4      	movs	r2, #212	; 0xd4
 8002d60:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		min_ARR = value_ARR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
			enable = Start
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
					 and not rerun.isCount()
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff faa7 	bl	80022c8 <_ZN3PincvbEv>
 8002d7a:	4603      	mov	r3, r0
					 and not U_stop;
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d044      	beq.n	8002e0a <_ZN9ConvertorclEv+0x492>
					 and not rerun.isCount()
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3348      	adds	r3, #72	; 0x48
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe fba9 	bl	80014dc <_ZN5Timer7isCountEv>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	f083 0301 	eor.w	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d039      	beq.n	8002e0a <_ZN9ConvertorclEv+0x492>
					 and not service.outData.error.overheat_fc and not service.outData.error.overheat_c
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002d9e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f083 0301 	eor.w	r3, r3, #1
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d02d      	beq.n	8002e0a <_ZN9ConvertorclEv+0x492>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002db6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f083 0301 	eor.w	r3, r3, #1
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d021      	beq.n	8002e0a <_ZN9ConvertorclEv+0x492>
					 and not service.outData.error.voltage_board_low and not service.outData.error.voltage_board_high
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002dce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f083 0301 	eor.w	r3, r3, #1
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d015      	beq.n	8002e0a <_ZN9ConvertorclEv+0x492>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002de6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f083 0301 	eor.w	r3, r3, #1
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <_ZN9ConvertorclEv+0x492>
					 and not U_stop;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8002dfc:	f083 0301 	eor.w	r3, r3, #1
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <_ZN9ConvertorclEv+0x492>
 8002e06:	2201      	movs	r2, #1
 8002e08:	e000      	b.n	8002e0c <_ZN9ConvertorclEv+0x494>
 8002e0a:	2200      	movs	r2, #0
			enable = Start
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
			if(rerun.done()) rerun.stop();
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3348      	adds	r3, #72	; 0x48
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fb42 	bl	80014a0 <_ZN5Timer4doneEv>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <_ZN9ConvertorclEv+0x4b4>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3348      	adds	r3, #72	; 0x48
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe fb2b 	bl	8001482 <_ZN5Timer4stopEv>
			if (enable){
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d017      	beq.n	8002e66 <_ZN9ConvertorclEv+0x4ee>
				rerun.stop();
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3348      	adds	r3, #72	; 0x48
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe fb21 	bl	8001482 <_ZN5Timer4stopEv>
				contactor.start();
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fb16 	bl	8002476 <_ZN9Contactor5startEv>
				if(contactor.is_on()) {
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fb42 	bl	80024d8 <_ZN9Contactor5is_onEv>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <_ZN9ConvertorclEv+0x4ee>
					pusk();
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fb6a 	bl	8003534 <_ZN9Convertor4puskEv>
					state = State::starting;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
			if (not Start) {
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fa2c 	bl	80022c8 <_ZN3PincvbEv>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f083 0301 	eor.w	r3, r3, #1
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8352 	beq.w	8003522 <_ZN9ConvertorclEv+0xbaa>
				rerun.stop();
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3348      	adds	r3, #72	; 0x48
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fafd 	bl	8001482 <_ZN5Timer4stopEv>
				rerun.time_set = 0;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54
				led_red = false;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2100      	movs	r1, #0
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fa02 	bl	800229e <_ZN3PinaSEb>
				adc.reset_error();
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff f8ac 	bl	8001ffc <_ZN4ADC_11reset_errorEv>
				phase = false;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
			break;
 8002eac:	e339      	b.n	8003522 <_ZN9ConvertorclEv+0xbaa>
			adc.what_Km(Km);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	f7ff f90e 	bl	80020de <_ZN4ADC_7what_KmEt>
if(motor == ASYNCHRON) {
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	f040 8133 	bne.w	8003134 <_ZN9ConvertorclEv+0x7bc>
	if (service.outData.high_voltage > 300 and service.outData.high_voltage < 540) {
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002ed6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002eda:	d94d      	bls.n	8002f78 <_ZN9ConvertorclEv+0x600>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002ee4:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8002ee8:	d246      	bcs.n	8002f78 <_ZN9ConvertorclEv+0x600>
		U_phase_max = ((((service.outData.high_voltage / 20) * 990) / 141) * 115) / 100;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002ef2:	4abc      	ldr	r2, [pc, #752]	; (80031e4 <_ZN9ConvertorclEv+0x86c>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	f240 33de 	movw	r3, #990	; 0x3de
 8002f02:	fb03 f302 	mul.w	r3, r3, r2
 8002f06:	4ab8      	ldr	r2, [pc, #736]	; (80031e8 <_ZN9ConvertorclEv+0x870>)
 8002f08:	fb82 1203 	smull	r1, r2, r2, r3
 8002f0c:	1152      	asrs	r2, r2, #5
 8002f0e:	17db      	asrs	r3, r3, #31
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2273      	movs	r2, #115	; 0x73
 8002f14:	fb02 f303 	mul.w	r3, r2, r3
 8002f18:	4ab4      	ldr	r2, [pc, #720]	; (80031ec <_ZN9ConvertorclEv+0x874>)
 8002f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8002f1e:	1152      	asrs	r2, r2, #5
 8002f20:	17db      	asrs	r3, r3, #31
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		min_ARR = (div_f / ((U_phase_max) * 5)) * 22; // 5/22 = 50/220
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 8002f38:	4619      	mov	r1, r3
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	461a      	mov	r2, r3
 8002f48:	0092      	lsls	r2, r2, #2
 8002f4a:	441a      	add	r2, r3
 8002f4c:	0052      	lsls	r2, r2, #1
 8002f4e:	4413      	add	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		if(min_ARR <= ARR_ASIN) min_ARR = ARR_ASIN;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8b3 30e4 	ldrh.w	r3, [r3, #228]	; 0xe4
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d810      	bhi.n	8002f8c <_ZN9ConvertorclEv+0x614>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	; 0xe4
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 8002f76:	e009      	b.n	8002f8c <_ZN9ConvertorclEv+0x614>
		U_phase_max = 220;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	22dc      	movs	r2, #220	; 0xdc
 8002f7c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		min_ARR = ARR_ASIN;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8b3 20e4 	ldrh.w	r2, [r3, #228]	; 0xe4
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
	U_phase = ((((service.outData.high_voltage / 20) * Km) / 141) * 112) / 100; // 31 = 620 / 20; 141 = sqrt(2) * 100; 115 = добавочный
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8002f94:	4a93      	ldr	r2, [pc, #588]	; (80031e4 <_ZN9ConvertorclEv+0x86c>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002fa6:	fb03 f302 	mul.w	r3, r3, r2
 8002faa:	4a8f      	ldr	r2, [pc, #572]	; (80031e8 <_ZN9ConvertorclEv+0x870>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	095a      	lsrs	r2, r3, #5
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4b8b      	ldr	r3, [pc, #556]	; (80031ec <_ZN9ConvertorclEv+0x874>)
 8002fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	Km = offset + ( (Kp * (div_f / TIM3->ARR) / service.outData.high_voltage ) * 4 )/ 3;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8002fda:	4618      	mov	r0, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8002fe2:	4b83      	ldr	r3, [pc, #524]	; (80031f0 <_ZN9ConvertorclEv+0x878>)
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fea:	fb03 f300 	mul.w	r3, r3, r0
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6892      	ldr	r2, [r2, #8]
 8002ff2:	f8b2 2070 	ldrh.w	r2, [r2, #112]	; 0x70
 8002ff6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4a7d      	ldr	r2, [pc, #500]	; (80031f4 <_ZN9ConvertorclEv+0x87c>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	18ca      	adds	r2, r1, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	if (TIM3->ARR <= uint32_t(min_ARR + 5)) {
 800300c:	4b78      	ldr	r3, [pc, #480]	; (80031f0 <_ZN9ConvertorclEv+0x878>)
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	f8b2 20e0 	ldrh.w	r2, [r2, #224]	; 0xe0
 8003016:	3205      	adds	r2, #5
 8003018:	4293      	cmp	r3, r2
 800301a:	bf94      	ite	ls
 800301c:	2301      	movls	r3, #1
 800301e:	2300      	movhi	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <_ZN9ConvertorclEv+0x6c2>
		unload = true;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	2101      	movs	r1, #1
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff f936 	bl	800229e <_ZN3PinaSEb>
		error = 0;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
	if (Kp > 12000) {
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8003040:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8003044:	4293      	cmp	r3, r2
 8003046:	d904      	bls.n	8003052 <_ZN9ConvertorclEv+0x6da>
		Kp = 12000;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800304e:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	if (TIM3->ARR <= min_ARR) {
 8003052:	4b67      	ldr	r3, [pc, #412]	; (80031f0 <_ZN9ConvertorclEv+0x878>)
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	f8b2 20e0 	ldrh.w	r2, [r2, #224]	; 0xe0
 800305c:	4293      	cmp	r3, r2
 800305e:	bf94      	ite	ls
 8003060:	2301      	movls	r3, #1
 8003062:	2300      	movhi	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d01b      	beq.n	80030a2 <_ZN9ConvertorclEv+0x72a>
		if (adc.current() > 160) {
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe ff9e 	bl	8001fb0 <_ZN4ADC_7currentEv>
 8003074:	4603      	mov	r3, r0
 8003076:	2ba0      	cmp	r3, #160	; 0xa0
 8003078:	bf8c      	ite	hi
 800307a:	2301      	movhi	r3, #1
 800307c:	2300      	movls	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00e      	beq.n	80030a2 <_ZN9ConvertorclEv+0x72a>
			if (Kp > 5000) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d907      	bls.n	80030a2 <_ZN9ConvertorclEv+0x72a>
				Kp -= 4;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8003098:	3b04      	subs	r3, #4
 800309a:	b29a      	uxth	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	if (adc.current() < 35) {
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe ff82 	bl	8001fb0 <_ZN4ADC_7currentEv>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b22      	cmp	r3, #34	; 0x22
 80030b0:	bf94      	ite	ls
 80030b2:	2301      	movls	r3, #1
 80030b4:	2300      	movhi	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00e      	beq.n	80030da <_ZN9ConvertorclEv+0x762>
		if (Kp < 12000) {
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80030c2:	f642 62df 	movw	r2, #11999	; 0x2edf
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d807      	bhi.n	80030da <_ZN9ConvertorclEv+0x762>
			Kp++;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80030d0:	3301      	adds	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	if (TIM3->ARR > uint32_t(min_ARR + 5)) {
 80030da:	4b45      	ldr	r3, [pc, #276]	; (80031f0 <_ZN9ConvertorclEv+0x878>)
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	f8b2 20e0 	ldrh.w	r2, [r2, #224]	; 0xe0
 80030e4:	3205      	adds	r2, #5
 80030e6:	4293      	cmp	r3, r2
 80030e8:	bf8c      	ite	hi
 80030ea:	2301      	movhi	r3, #1
 80030ec:	2300      	movls	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 812e 	beq.w	8003352 <_ZN9ConvertorclEv+0x9da>
		if (adc.current() > 75) {
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe ff58 	bl	8001fb0 <_ZN4ADC_7currentEv>
 8003100:	4603      	mov	r3, r0
 8003102:	2b4b      	cmp	r3, #75	; 0x4b
 8003104:	bf8c      	ite	hi
 8003106:	2301      	movhi	r3, #1
 8003108:	2300      	movls	r3, #0
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8120 	beq.w	8003352 <_ZN9ConvertorclEv+0x9da>
			if (Kp >= 6000) {
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8003118:	f241 726f 	movw	r2, #5999	; 0x176f
 800311c:	4293      	cmp	r3, r2
 800311e:	f240 8118 	bls.w	8003352 <_ZN9ConvertorclEv+0x9da>
				Kp--;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8003132:	e10e      	b.n	8003352 <_ZN9ConvertorclEv+0x9da>
} else if(motor == SYNCHRON) {
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 800313a:	2b00      	cmp	r3, #0
 800313c:	f040 8109 	bne.w	8003352 <_ZN9ConvertorclEv+0x9da>
				if (service.outData.high_voltage > 300 and service.outData.high_voltage < 540) {
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8003148:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800314c:	d956      	bls.n	80031fc <_ZN9ConvertorclEv+0x884>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8003156:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 800315a:	d24f      	bcs.n	80031fc <_ZN9ConvertorclEv+0x884>
					U_phase_max = ((((service.outData.high_voltage / 20) * 980) / 141) * 115) / 100;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8003164:	4a1f      	ldr	r2, [pc, #124]	; (80031e4 <_ZN9ConvertorclEv+0x86c>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	091b      	lsrs	r3, r3, #4
 800316c:	b29b      	uxth	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 8003174:	fb03 f302 	mul.w	r3, r3, r2
 8003178:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <_ZN9ConvertorclEv+0x870>)
 800317a:	fb82 1203 	smull	r1, r2, r2, r3
 800317e:	1152      	asrs	r2, r2, #5
 8003180:	17db      	asrs	r3, r3, #31
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2273      	movs	r2, #115	; 0x73
 8003186:	fb02 f303 	mul.w	r3, r2, r3
 800318a:	4a18      	ldr	r2, [pc, #96]	; (80031ec <_ZN9ConvertorclEv+0x874>)
 800318c:	fb82 1203 	smull	r1, r2, r2, r3
 8003190:	1152      	asrs	r2, r2, #5
 8003192:	17db      	asrs	r3, r3, #31
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	b29a      	uxth	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					min_ARR = ((div_f / (U_phase_max)) * 50) / 70; // 70/53 = 280/212
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	f8b2 20d8 	ldrh.w	r2, [r2, #216]	; 0xd8
 80031aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031ae:	2232      	movs	r2, #50	; 0x32
 80031b0:	fb02 f303 	mul.w	r3, r2, r3
 80031b4:	085b      	lsrs	r3, r3, #1
 80031b6:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <_ZN9ConvertorclEv+0x880>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	b29a      	uxth	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
					if(min_ARR < value_ARR) min_ARR = value_ARR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8b3 20e0 	ldrh.w	r2, [r3, #224]	; 0xe0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8b3 30e2 	ldrh.w	r3, [r3, #226]	; 0xe2
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d21c      	bcs.n	8003210 <_ZN9ConvertorclEv+0x898>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
 80031e2:	e015      	b.n	8003210 <_ZN9ConvertorclEv+0x898>
 80031e4:	cccccccd 	.word	0xcccccccd
 80031e8:	3a196b1f 	.word	0x3a196b1f
 80031ec:	51eb851f 	.word	0x51eb851f
 80031f0:	40000400 	.word	0x40000400
 80031f4:	aaaaaaab 	.word	0xaaaaaaab
 80031f8:	ea0ea0eb 	.word	0xea0ea0eb
					min_ARR = value_ARR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8b3 20e2 	ldrh.w	r2, [r3, #226]	; 0xe2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
					U_phase_max = 212;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	22d4      	movs	r2, #212	; 0xd4
 800320c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				U_phase = ((((service.outData.high_voltage / 20) * Km) / 141) * 115) / 100; // 31 = 620 / 20; 141 = sqrt(2) * 100; 115 = добавочный
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8003218:	4aa4      	ldr	r2, [pc, #656]	; (80034ac <_ZN9ConvertorclEv+0xb34>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	b29b      	uxth	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800322a:	fb03 f302 	mul.w	r3, r3, r2
 800322e:	4aa0      	ldr	r2, [pc, #640]	; (80034b0 <_ZN9ConvertorclEv+0xb38>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	2273      	movs	r2, #115	; 0x73
 8003238:	fb02 f303 	mul.w	r3, r2, r3
 800323c:	4a9d      	ldr	r2, [pc, #628]	; (80034b4 <_ZN9ConvertorclEv+0xb3c>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	b29a      	uxth	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
				Km = offset + Kp * (div_f / TIM3->ARR) / (service.outData.high_voltage);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003252:	4619      	mov	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800325a:	4618      	mov	r0, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8003262:	4b95      	ldr	r3, [pc, #596]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	fb03 f300 	mul.w	r3, r3, r0
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6892      	ldr	r2, [r2, #8]
 8003272:	f8b2 2070 	ldrh.w	r2, [r2, #112]	; 0x70
 8003276:	fbb3 f3f2 	udiv	r3, r3, r2
 800327a:	18ca      	adds	r2, r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
				if (TIM3->ARR <= uint32_t(min_ARR + 5)) {
 8003282:	4b8d      	ldr	r3, [pc, #564]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	f8b2 20e0 	ldrh.w	r2, [r2, #224]	; 0xe0
 800328c:	3205      	adds	r2, #5
 800328e:	4293      	cmp	r3, r2
 8003290:	bf94      	ite	ls
 8003292:	2301      	movls	r3, #1
 8003294:	2300      	movhi	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <_ZN9ConvertorclEv+0x938>
					unload = false;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fffb 	bl	800229e <_ZN3PinaSEb>
					error = 0;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
				if (adc.current() < 35) {
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fe fe7b 	bl	8001fb0 <_ZN4ADC_7currentEv>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b22      	cmp	r3, #34	; 0x22
 80032be:	bf94      	ite	ls
 80032c0:	2301      	movls	r3, #1
 80032c2:	2300      	movhi	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00e      	beq.n	80032e8 <_ZN9ConvertorclEv+0x970>
					if (Kp < 2200) {
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80032d0:	f640 0297 	movw	r2, #2199	; 0x897
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d807      	bhi.n	80032e8 <_ZN9ConvertorclEv+0x970>
						Kp++;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80032de:	3301      	adds	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
				if (TIM3->ARR > uint32_t(min_ARR + 5)) {
 80032e8:	4b73      	ldr	r3, [pc, #460]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	f8b2 20e0 	ldrh.w	r2, [r2, #224]	; 0xe0
 80032f2:	3205      	adds	r2, #5
 80032f4:	4293      	cmp	r3, r2
 80032f6:	bf8c      	ite	hi
 80032f8:	2301      	movhi	r3, #1
 80032fa:	2300      	movls	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01b      	beq.n	800333a <_ZN9ConvertorclEv+0x9c2>
					if (adc.current() > 110) {
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fe52 	bl	8001fb0 <_ZN4ADC_7currentEv>
 800330c:	4603      	mov	r3, r0
 800330e:	2b6e      	cmp	r3, #110	; 0x6e
 8003310:	bf8c      	ite	hi
 8003312:	2301      	movhi	r3, #1
 8003314:	2300      	movls	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00e      	beq.n	800333a <_ZN9ConvertorclEv+0x9c2>
						if(Kp > 1250) {
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8003322:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8003326:	4293      	cmp	r3, r2
 8003328:	d907      	bls.n	800333a <_ZN9ConvertorclEv+0x9c2>
							Kp--;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
				if (Kp >= 2200) {
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8003340:	f640 0297 	movw	r2, #2199	; 0x897
 8003344:	4293      	cmp	r3, r2
 8003346:	d904      	bls.n	8003352 <_ZN9ConvertorclEv+0x9da>
					Kp = 2200;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f640 0298 	movw	r2, #2200	; 0x898
 800334e:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
			if (Km >= 990) {
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003358:	f240 32dd 	movw	r2, #989	; 0x3dd
 800335c:	4293      	cmp	r3, r2
 800335e:	d904      	bls.n	800336a <_ZN9ConvertorclEv+0x9f2>
				Km = 990;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f240 32de 	movw	r2, #990	; 0x3de
 8003366:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
			if (timer.done() and TIM3->ARR != min_ARR) {
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3338      	adds	r3, #56	; 0x38
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe f896 	bl	80014a0 <_ZN5Timer4doneEv>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <_ZN9ConvertorclEv+0xa14>
 800337a:	4b4f      	ldr	r3, [pc, #316]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	f8b2 20e0 	ldrh.w	r2, [r2, #224]	; 0xe0
 8003384:	4293      	cmp	r3, r2
 8003386:	d001      	beq.n	800338c <_ZN9ConvertorclEv+0xa14>
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <_ZN9ConvertorclEv+0xa16>
 800338c:	2300      	movs	r3, #0
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 80c9 	beq.w	8003526 <_ZN9ConvertorclEv+0xbae>
				timer.stop();
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3338      	adds	r3, #56	; 0x38
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe f872 	bl	8001482 <_ZN5Timer4stopEv>
				timer.start(time);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80033aa:	4619      	mov	r1, r3
 80033ac:	4610      	mov	r0, r2
 80033ae:	f7fe f83b 	bl	8001428 <_ZN5Timer5startEm>
				if(motor == ASYNCHRON) {
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d133      	bne.n	8003424 <_ZN9ConvertorclEv+0xaac>
					if (TIM3->ARR != min_ARR) {
 80033bc:	4b3e      	ldr	r3, [pc, #248]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	f8b2 20e0 	ldrh.w	r2, [r2, #224]	; 0xe0
 80033c6:	4293      	cmp	r3, r2
 80033c8:	bf14      	ite	ne
 80033ca:	2301      	movne	r3, #1
 80033cc:	2300      	moveq	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80a8 	beq.w	8003526 <_ZN9ConvertorclEv+0xbae>
						if (TIM3->ARR > uint16_t(4000)) {
 80033d6:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80033de:	bf8c      	ite	hi
 80033e0:	2301      	movhi	r3, #1
 80033e2:	2300      	movls	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <_ZN9ConvertorclEv+0xa7e>
							TIM3->ARR -= uint16_t(40);
 80033ea:	4b33      	ldr	r3, [pc, #204]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	4a32      	ldr	r2, [pc, #200]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 80033f0:	3b28      	subs	r3, #40	; 0x28
 80033f2:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
 80033f4:	e097      	b.n	8003526 <_ZN9ConvertorclEv+0xbae>
						} else if (TIM3->ARR > min_ARR) {
 80033f6:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	f8b2 20e0 	ldrh.w	r2, [r2, #224]	; 0xe0
 8003400:	4293      	cmp	r3, r2
 8003402:	bf8c      	ite	hi
 8003404:	2301      	movhi	r3, #1
 8003406:	2300      	movls	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d005      	beq.n	800341a <_ZN9ConvertorclEv+0xaa2>
							TIM3->ARR -= uint16_t(10);
 800340e:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	4a29      	ldr	r2, [pc, #164]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 8003414:	3b0a      	subs	r3, #10
 8003416:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
 8003418:	e085      	b.n	8003526 <_ZN9ConvertorclEv+0xbae>
							TIM3->ARR++;
 800341a:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 800341c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341e:	3201      	adds	r2, #1
 8003420:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8003422:	e080      	b.n	8003526 <_ZN9ConvertorclEv+0xbae>
				} else if(motor == SYNCHRON) {
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 800342a:	2b00      	cmp	r3, #0
 800342c:	d17b      	bne.n	8003526 <_ZN9ConvertorclEv+0xbae>
							if(TIM3->ARR != min_ARR) {
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	f8b2 20e0 	ldrh.w	r2, [r2, #224]	; 0xe0
 8003438:	4293      	cmp	r3, r2
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d06f      	beq.n	8003526 <_ZN9ConvertorclEv+0xbae>
								if(TIM3->ARR > min_ARR) {
 8003446:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 8003448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	f8b2 20e0 	ldrh.w	r2, [r2, #224]	; 0xe0
 8003450:	4293      	cmp	r3, r2
 8003452:	bf8c      	ite	hi
 8003454:	2301      	movhi	r3, #1
 8003456:	2300      	movls	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d02e      	beq.n	80034bc <_ZN9ConvertorclEv+0xb44>
									if(TIM3->ARR > uint16_t(624)) {
 800345e:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8003466:	bf8c      	ite	hi
 8003468:	2301      	movhi	r3, #1
 800346a:	2300      	movls	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d016      	beq.n	80034a0 <_ZN9ConvertorclEv+0xb28>
										if(TIM3->ARR > uint16_t(1500)) {
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800347a:	4293      	cmp	r3, r2
 800347c:	bf8c      	ite	hi
 800347e:	2301      	movhi	r3, #1
 8003480:	2300      	movls	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <_ZN9ConvertorclEv+0xb1c>
											TIM3->ARR -= uint16_t(32);
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 800348e:	3b20      	subs	r3, #32
 8003490:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003492:	e017      	b.n	80034c4 <_ZN9ConvertorclEv+0xb4c>
											TIM3->ARR -= uint16_t(3);
 8003494:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	4a07      	ldr	r2, [pc, #28]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 800349a:	3b03      	subs	r3, #3
 800349c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800349e:	e011      	b.n	80034c4 <_ZN9ConvertorclEv+0xb4c>
										TIM3->ARR-= uint16_t(1);
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <_ZN9ConvertorclEv+0xb40>)
 80034a6:	3b01      	subs	r3, #1
 80034a8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80034aa:	e00b      	b.n	80034c4 <_ZN9ConvertorclEv+0xb4c>
 80034ac:	cccccccd 	.word	0xcccccccd
 80034b0:	3a196b1f 	.word	0x3a196b1f
 80034b4:	51eb851f 	.word	0x51eb851f
 80034b8:	40000400 	.word	0x40000400
									TIM3->ARR++;
 80034bc:	4b1c      	ldr	r3, [pc, #112]	; (8003530 <_ZN9ConvertorclEv+0xbb8>)
 80034be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c0:	3201      	adds	r2, #1
 80034c2:	62da      	str	r2, [r3, #44]	; 0x2c
								if(TIM3->ARR > uint16_t(624)) {
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <_ZN9ConvertorclEv+0xbb8>)
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80034cc:	bf8c      	ite	hi
 80034ce:	2301      	movhi	r3, #1
 80034d0:	2300      	movls	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d004      	beq.n	80034e2 <_ZN9ConvertorclEv+0xb6a>
									time = 2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
			break;
 80034e0:	e021      	b.n	8003526 <_ZN9ConvertorclEv+0xbae>
								} else if (TIM3->ARR >= uint16_t(558)) {
 80034e2:	4b13      	ldr	r3, [pc, #76]	; (8003530 <_ZN9ConvertorclEv+0xbb8>)
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	f240 222d 	movw	r2, #557	; 0x22d
 80034ea:	4293      	cmp	r3, r2
 80034ec:	bf8c      	ite	hi
 80034ee:	2301      	movhi	r3, #1
 80034f0:	2300      	movls	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d004      	beq.n	8003502 <_ZN9ConvertorclEv+0xb8a>
									time = 5;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2205      	movs	r2, #5
 80034fc:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
			break;
 8003500:	e011      	b.n	8003526 <_ZN9ConvertorclEv+0xbae>
								} else if (TIM3->ARR < uint16_t(558)) {
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <_ZN9ConvertorclEv+0xbb8>)
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	f240 222d 	movw	r2, #557	; 0x22d
 800350a:	4293      	cmp	r3, r2
 800350c:	bf94      	ite	ls
 800350e:	2301      	movls	r3, #1
 8003510:	2300      	movhi	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d006      	beq.n	8003526 <_ZN9ConvertorclEv+0xbae>
									time = 7;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2207      	movs	r2, #7
 800351c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
			break;
 8003520:	e001      	b.n	8003526 <_ZN9ConvertorclEv+0xbae>
			break;
 8003522:	bf00      	nop
 8003524:	e000      	b.n	8003528 <_ZN9ConvertorclEv+0xbb0>
			break;
 8003526:	bf00      	nop
	} //void operator() (){
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bd90      	pop	{r4, r7, pc}
 8003530:	40000400 	.word	0x40000400

08003534 <_ZN9Convertor4puskEv>:

	void pusk() {
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

		if(motor == ASYNCHRON) {
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 8003542:	2b01      	cmp	r3, #1
 8003544:	d111      	bne.n	800356a <_ZN9Convertor4puskEv+0x36>
				frequency = 5;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2205      	movs	r2, #5
 800354a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
				Kp = 6000;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f241 7270 	movw	r2, #6000	; 0x1770
 8003554:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
				time = 3;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2203      	movs	r2, #3
 800355c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
				offset = 30;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	221e      	movs	r2, #30
 8003564:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
 8003568:	e015      	b.n	8003596 <_ZN9Convertor4puskEv+0x62>

		} else if(motor == SYNCHRON) {
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 8003570:	2b00      	cmp	r3, #0
 8003572:	d110      	bne.n	8003596 <_ZN9Convertor4puskEv+0x62>
				frequency = 5;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2205      	movs	r2, #5
 8003578:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
				Kp = 1140;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f240 4274 	movw	r2, #1140	; 0x474
 8003582:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
				time = 2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2202      	movs	r2, #2
 800358a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
				offset = 40;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2228      	movs	r2, #40	; 0x28
 8003592:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
		}
		Km = 5;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2205      	movs	r2, #5
 800359a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		TIM3->ARR = (div_f / (frequency)) - 1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	f8b2 20ca 	ldrh.w	r2, [r2, #202]	; 0xca
 80035aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80035ae:	4a35      	ldr	r2, [pc, #212]	; (8003684 <_ZN9Convertor4puskEv+0x150>)
 80035b0:	3b01      	subs	r3, #1
 80035b2:	62d3      	str	r3, [r2, #44]	; 0x2c

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80035b4:	2100      	movs	r1, #0
 80035b6:	4834      	ldr	r0, [pc, #208]	; (8003688 <_ZN9Convertor4puskEv+0x154>)
 80035b8:	f004 fd82 	bl	80080c0 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80035bc:	2100      	movs	r1, #0
 80035be:	4832      	ldr	r0, [pc, #200]	; (8003688 <_ZN9Convertor4puskEv+0x154>)
 80035c0:	f005 fb34 	bl	8008c2c <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80035c4:	2104      	movs	r1, #4
 80035c6:	4830      	ldr	r0, [pc, #192]	; (8003688 <_ZN9Convertor4puskEv+0x154>)
 80035c8:	f004 fd7a 	bl	80080c0 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80035cc:	2104      	movs	r1, #4
 80035ce:	482e      	ldr	r0, [pc, #184]	; (8003688 <_ZN9Convertor4puskEv+0x154>)
 80035d0:	f005 fb2c 	bl	8008c2c <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80035d4:	2108      	movs	r1, #8
 80035d6:	482c      	ldr	r0, [pc, #176]	; (8003688 <_ZN9Convertor4puskEv+0x154>)
 80035d8:	f004 fd72 	bl	80080c0 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80035dc:	2108      	movs	r1, #8
 80035de:	482a      	ldr	r0, [pc, #168]	; (8003688 <_ZN9Convertor4puskEv+0x154>)
 80035e0:	f005 fb24 	bl	8008c2c <HAL_TIMEx_PWMN_Start>

		HAL_TIM_Base_Start_IT(&htim3);
 80035e4:	4829      	ldr	r0, [pc, #164]	; (800368c <_ZN9Convertor4puskEv+0x158>)
 80035e6:	f004 fc3f 	bl	8007e68 <HAL_TIM_Base_Start_IT>

		timer.start(time);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f7fd ff15 	bl	8001428 <_ZN5Timer5startEm>
		adc.measure_value();
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fe fc81 	bl	8001f0a <_ZN4ADC_13measure_valueEv>

		service.outData.error.current_S = false;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8003610:	f36f 0300 	bfc	r3, #0, #1
 8003614:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		service.outData.error.current_A = false;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8003620:	f36f 0341 	bfc	r3, #1, #1
 8003624:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		service.outData.error.current_C = false;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8003630:	f36f 0382 	bfc	r3, #2, #1
 8003634:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		service.outData.error.phase_break = false;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	f892 307b 	ldrb.w	r3, [r2, #123]	; 0x7b
 8003640:	f36f 0300 	bfc	r3, #0, #1
 8003644:	f882 307b 	strb.w	r3, [r2, #123]	; 0x7b
		service.outData.error.HV = false;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8003650:	f36f 03c3 	bfc	r3, #3, #1
 8003654:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a

		led_red = false;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe fe1d 	bl	800229e <_ZN3PinaSEb>
		if(motor == SYNCHRON)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <_ZN9Convertor4puskEv+0x146>
			unload = true;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	2101      	movs	r1, #1
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe fe12 	bl	800229e <_ZN3PinaSEb>
	}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40000400 	.word	0x40000400
 8003688:	200001ac 	.word	0x200001ac
 800368c:	200001f4 	.word	0x200001f4

08003690 <_ZN9Convertor4stopEv>:

	void stop() {
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]

		TIM1->CCR1 = 0;
 8003698:	4b22      	ldr	r3, [pc, #136]	; (8003724 <_ZN9Convertor4stopEv+0x94>)
 800369a:	2200      	movs	r2, #0
 800369c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 0;
 800369e:	4b21      	ldr	r3, [pc, #132]	; (8003724 <_ZN9Convertor4stopEv+0x94>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = 0;
 80036a4:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <_ZN9Convertor4stopEv+0x94>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80036aa:	2100      	movs	r1, #0
 80036ac:	481e      	ldr	r0, [pc, #120]	; (8003728 <_ZN9Convertor4stopEv+0x98>)
 80036ae:	f004 fdc1 	bl	8008234 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80036b2:	2100      	movs	r1, #0
 80036b4:	481c      	ldr	r0, [pc, #112]	; (8003728 <_ZN9Convertor4stopEv+0x98>)
 80036b6:	f005 fb65 	bl	8008d84 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80036ba:	2104      	movs	r1, #4
 80036bc:	481a      	ldr	r0, [pc, #104]	; (8003728 <_ZN9Convertor4stopEv+0x98>)
 80036be:	f004 fdb9 	bl	8008234 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80036c2:	2104      	movs	r1, #4
 80036c4:	4818      	ldr	r0, [pc, #96]	; (8003728 <_ZN9Convertor4stopEv+0x98>)
 80036c6:	f005 fb5d 	bl	8008d84 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80036ca:	2108      	movs	r1, #8
 80036cc:	4816      	ldr	r0, [pc, #88]	; (8003728 <_ZN9Convertor4stopEv+0x98>)
 80036ce:	f004 fdb1 	bl	8008234 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 80036d2:	2108      	movs	r1, #8
 80036d4:	4814      	ldr	r0, [pc, #80]	; (8003728 <_ZN9Convertor4stopEv+0x98>)
 80036d6:	f005 fb55 	bl	8008d84 <HAL_TIMEx_PWMN_Stop>

		HAL_TIM_Base_Stop_IT(&htim3);
 80036da:	4814      	ldr	r0, [pc, #80]	; (800372c <_ZN9Convertor4stopEv+0x9c>)
 80036dc:	f004 fc24 	bl	8007f28 <HAL_TIM_Base_Stop_IT>
		timer.stop();
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3338      	adds	r3, #56	; 0x38
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fd fecc 	bl	8001482 <_ZN5Timer4stopEv>
		contactor.stop();
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe fed4 	bl	800249c <_ZN9Contactor4stopEv>

		k = 0;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
		m = 12;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	220c      	movs	r2, #12
 8003700:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		n = 24;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2218      	movs	r2, #24
 8003708:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

		state = State::wait;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	701a      	strb	r2, [r3, #0]
		adc.measure_offset();
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fbea 	bl	8001ef0 <_ZN4ADC_14measure_offsetEv>

	}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40012c00 	.word	0x40012c00
 8003728:	200001ac 	.word	0x200001ac
 800372c:	200001f4 	.word	0x200001f4

08003730 <_ZN9Convertor5alarmEv>:

	void alarm() {
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
		if((not Start or timer_stop.done()) or not contactor.is_on()
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	4618      	mov	r0, r3
 800373e:	f7fe fdc3 	bl	80022c8 <_ZN3PincvbEv>
 8003742:	4603      	mov	r3, r0
 8003744:	f083 0301 	eor.w	r3, r3, #1
 8003748:	b2db      	uxtb	r3, r3
				      or service.outData.error.overheat_fc or service.outData.error.overheat_c or service.outData.error.HV_low
					  or service.outData.error.voltage_board_low or service.outData.error.voltage_board_high
 800374a:	2b00      	cmp	r3, #0
 800374c:	d13f      	bne.n	80037ce <_ZN9Convertor5alarmEv+0x9e>
		if((not Start or timer_stop.done()) or not contactor.is_on()
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3358      	adds	r3, #88	; 0x58
 8003752:	4618      	mov	r0, r3
 8003754:	f7fd fea4 	bl	80014a0 <_ZN5Timer4doneEv>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d137      	bne.n	80037ce <_ZN9Convertor5alarmEv+0x9e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe feb8 	bl	80024d8 <_ZN9Contactor5is_onEv>
 8003768:	4603      	mov	r3, r0
 800376a:	f083 0301 	eor.w	r3, r3, #1
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d12c      	bne.n	80037ce <_ZN9Convertor5alarmEv+0x9e>
				      or service.outData.error.overheat_fc or service.outData.error.overheat_c or service.outData.error.HV_low
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800377c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d123      	bne.n	80037ce <_ZN9Convertor5alarmEv+0x9e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800378e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d11a      	bne.n	80037ce <_ZN9Convertor5alarmEv+0x9e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80037a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d111      	bne.n	80037ce <_ZN9Convertor5alarmEv+0x9e>
					  or service.outData.error.voltage_board_low or service.outData.error.voltage_board_high
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80037b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d108      	bne.n	80037ce <_ZN9Convertor5alarmEv+0x9e>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80037c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <_ZN9Convertor5alarmEv+0xa2>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <_ZN9Convertor5alarmEv+0xa4>
 80037d2:	2300      	movs	r3, #0
		if((not Start or timer_stop.done()) or not contactor.is_on()
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80cb 	beq.w	8003970 <_ZN9Convertor5alarmEv+0x240>
		  )
		{
			if(not Start and not timer_stop.isCount()) {
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fe fd72 	bl	80022c8 <_ZN3PincvbEv>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f083 0301 	eor.w	r3, r3, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00c      	beq.n	800380a <_ZN9Convertor5alarmEv+0xda>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3358      	adds	r3, #88	; 0x58
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fd fe71 	bl	80014dc <_ZN5Timer7isCountEv>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f083 0301 	eor.w	r3, r3, #1
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <_ZN9Convertor5alarmEv+0xda>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <_ZN9Convertor5alarmEv+0xdc>
 800380a:	2300      	movs	r3, #0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d019      	beq.n	8003844 <_ZN9Convertor5alarmEv+0x114>
//				timer_stop.start(1000);
				stop();
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ff3d 	bl	8003690 <_ZN9Convertor4stopEv>
				timer_stop.stop();
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3358      	adds	r3, #88	; 0x58
 800381a:	4618      	mov	r0, r3
 800381c:	f7fd fe31 	bl	8001482 <_ZN5Timer4stopEv>
				if (motor == SYNCHRON) {
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10c      	bne.n	8003844 <_ZN9Convertor5alarmEv+0x114>
					unload = true;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	2101      	movs	r1, #1
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe fd34 	bl	800229e <_ZN3PinaSEb>
					clump_timer.start(15000);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3368      	adds	r3, #104	; 0x68
 800383a:	f643 2198 	movw	r1, #15000	; 0x3a98
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd fdf2 	bl	8001428 <_ZN5Timer5startEm>
				}
			}

			if(timer_stop.done() and not Start) {
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3358      	adds	r3, #88	; 0x58
 8003848:	4618      	mov	r0, r3
 800384a:	f7fd fe29 	bl	80014a0 <_ZN5Timer4doneEv>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00c      	beq.n	800386e <_ZN9Convertor5alarmEv+0x13e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe fd35 	bl	80022c8 <_ZN3PincvbEv>
 800385e:	4603      	mov	r3, r0
 8003860:	f083 0301 	eor.w	r3, r3, #1
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <_ZN9Convertor5alarmEv+0x13e>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <_ZN9Convertor5alarmEv+0x140>
 800386e:	2300      	movs	r3, #0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d019      	beq.n	80038a8 <_ZN9Convertor5alarmEv+0x178>
				stop();
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff ff0b 	bl	8003690 <_ZN9Convertor4stopEv>
				timer_stop.stop();
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3358      	adds	r3, #88	; 0x58
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd fdff 	bl	8001482 <_ZN5Timer4stopEv>
				if (motor == SYNCHRON) {
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10c      	bne.n	80038a8 <_ZN9Convertor5alarmEv+0x178>
					unload = true;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	2101      	movs	r1, #1
 8003894:	4618      	mov	r0, r3
 8003896:	f7fe fd02 	bl	800229e <_ZN3PinaSEb>
					clump_timer.start(15000);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3368      	adds	r3, #104	; 0x68
 800389e:	f643 2198 	movw	r1, #15000	; 0x3a98
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd fdc0 	bl	8001428 <_ZN5Timer5startEm>
				}
			}

			if(not contactor.is_on()
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fe fe13 	bl	80024d8 <_ZN9Contactor5is_onEv>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f083 0301 	eor.w	r3, r3, #1
 80038b8:	b2db      	uxtb	r3, r3
				     or service.outData.error.overheat_fc or service.outData.error.overheat_c
				     or service.outData.error.HV_low or service.outData.error.voltage_board_low or service.outData.error.voltage_board_high) {
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d12c      	bne.n	8003918 <_ZN9Convertor5alarmEv+0x1e8>
				     or service.outData.error.overheat_fc or service.outData.error.overheat_c
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80038c6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d123      	bne.n	8003918 <_ZN9Convertor5alarmEv+0x1e8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80038d8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d11a      	bne.n	8003918 <_ZN9Convertor5alarmEv+0x1e8>
				     or service.outData.error.HV_low or service.outData.error.voltage_board_low or service.outData.error.voltage_board_high) {
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80038ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d111      	bne.n	8003918 <_ZN9Convertor5alarmEv+0x1e8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80038fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d108      	bne.n	8003918 <_ZN9Convertor5alarmEv+0x1e8>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800390e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <_ZN9Convertor5alarmEv+0x1ec>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <_ZN9Convertor5alarmEv+0x1ee>
 800391c:	2300      	movs	r3, #0
			if(not contactor.is_on()
 800391e:	2b00      	cmp	r3, #0
 8003920:	d026      	beq.n	8003970 <_ZN9Convertor5alarmEv+0x240>
				stop();
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff feb4 	bl	8003690 <_ZN9Convertor4stopEv>
				timer_stop.stop();
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3358      	adds	r3, #88	; 0x58
 800392c:	4618      	mov	r0, r3
 800392e:	f7fd fda8 	bl	8001482 <_ZN5Timer4stopEv>
				rerun.start(5000);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3348      	adds	r3, #72	; 0x48
 8003936:	f241 3188 	movw	r1, #5000	; 0x1388
 800393a:	4618      	mov	r0, r3
 800393c:	f7fd fd74 	bl	8001428 <_ZN5Timer5startEm>
				led_red = true;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe fca9 	bl	800229e <_ZN3PinaSEb>
				if (motor == SYNCHRON) {
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10c      	bne.n	8003970 <_ZN9Convertor5alarmEv+0x240>
					unload = true;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	2101      	movs	r1, #1
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe fc9e 	bl	800229e <_ZN3PinaSEb>
					clump_timer.start(15000);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3368      	adds	r3, #104	; 0x68
 8003966:	f643 2198 	movw	r1, #15000	; 0x3a98
 800396a:	4618      	mov	r0, r3
 800396c:	f7fd fd5c 	bl	8001428 <_ZN5Timer5startEm>
//		}
//	}
//
//}

		if(adc.is_error_HV()) {
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe fb99 	bl	80020ac <_ZN4ADC_11is_error_HVEv>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d02e      	beq.n	80039de <_ZN9Convertor5alarmEv+0x2ae>
			adc.reset_error_HV();
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe fb9d 	bl	80020c4 <_ZN4ADC_14reset_error_HVEv>
			led_red = true;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	2101      	movs	r1, #1
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe fc84 	bl	800229e <_ZN3PinaSEb>
			stop();
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fe7a 	bl	8003690 <_ZN9Convertor4stopEv>
			service.outData.error.HV = true;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 80039a4:	f043 0308 	orr.w	r3, r3, #8
 80039a8:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
			rerun.start(5000);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3348      	adds	r3, #72	; 0x48
 80039b0:	f241 3188 	movw	r1, #5000	; 0x1388
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fd fd37 	bl	8001428 <_ZN5Timer5startEm>
			if (motor == SYNCHRON) {
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10c      	bne.n	80039de <_ZN9Convertor5alarmEv+0x2ae>
				unload = true;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	2101      	movs	r1, #1
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fe fc67 	bl	800229e <_ZN3PinaSEb>
				clump_timer.start(15000);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3368      	adds	r3, #104	; 0x68
 80039d4:	f643 2198 	movw	r1, #15000	; 0x3a98
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fd fd25 	bl	8001428 <_ZN5Timer5startEm>
			}
		}

		if(adc.is_over_s() and not service.outData.error.current_S) {
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe fb17 	bl	8002016 <_ZN4ADC_9is_over_sEv>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00d      	beq.n	8003a0a <_ZN9Convertor5alarmEv+0x2da>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80039f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f083 0301 	eor.w	r3, r3, #1
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <_ZN9Convertor5alarmEv+0x2da>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <_ZN9Convertor5alarmEv+0x2dc>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d02e      	beq.n	8003a6e <_ZN9Convertor5alarmEv+0x33e>
			adc.reset_over_s();
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7fe fb0a 	bl	800202e <_ZN4ADC_12reset_over_sEv>
			led_red = true;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe fc3c 	bl	800229e <_ZN3PinaSEb>
			stop();
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff fe32 	bl	8003690 <_ZN9Convertor4stopEv>
			service.outData.error.current_S = true;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
			rerun.start(5000);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3348      	adds	r3, #72	; 0x48
 8003a40:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fd fcef 	bl	8001428 <_ZN5Timer5startEm>
			if (motor == SYNCHRON) {
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10c      	bne.n	8003a6e <_ZN9Convertor5alarmEv+0x33e>
				unload = true;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	2101      	movs	r1, #1
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe fc1f 	bl	800229e <_ZN3PinaSEb>
				clump_timer.start(15000);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3368      	adds	r3, #104	; 0x68
 8003a64:	f643 2198 	movw	r1, #15000	; 0x3a98
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fd fcdd 	bl	8001428 <_ZN5Timer5startEm>
			}
		}

		if(adc.is_over_a() and not service.outData.error.current_A) {
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe fae8 	bl	8002048 <_ZN4ADC_9is_over_aEv>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00d      	beq.n	8003a9a <_ZN9Convertor5alarmEv+0x36a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8003a86:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f083 0301 	eor.w	r3, r3, #1
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <_ZN9Convertor5alarmEv+0x36a>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <_ZN9Convertor5alarmEv+0x36c>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d02e      	beq.n	8003afe <_ZN9Convertor5alarmEv+0x3ce>
			adc.reset_over_a();
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe fadb 	bl	8002060 <_ZN4ADC_12reset_over_aEv>
			led_red = true;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe fbf4 	bl	800229e <_ZN3PinaSEb>
			stop();
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fdea 	bl	8003690 <_ZN9Convertor4stopEv>
			service.outData.error.current_A = true;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8003ac4:	f043 0302 	orr.w	r3, r3, #2
 8003ac8:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
			rerun.start(5000);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3348      	adds	r3, #72	; 0x48
 8003ad0:	f241 3188 	movw	r1, #5000	; 0x1388
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fd fca7 	bl	8001428 <_ZN5Timer5startEm>
			if (motor == SYNCHRON) {
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10c      	bne.n	8003afe <_ZN9Convertor5alarmEv+0x3ce>
				unload = true;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe fbd7 	bl	800229e <_ZN3PinaSEb>
				clump_timer.start(15000);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3368      	adds	r3, #104	; 0x68
 8003af4:	f643 2198 	movw	r1, #15000	; 0x3a98
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fd fc95 	bl	8001428 <_ZN5Timer5startEm>
			}
		}

		if(adc.is_over_c() and not service.outData.error.current_C) {
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fab9 	bl	800207a <_ZN4ADC_9is_over_cEv>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <_ZN9Convertor5alarmEv+0x3fa>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8003b16:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f083 0301 	eor.w	r3, r3, #1
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <_ZN9Convertor5alarmEv+0x3fa>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <_ZN9Convertor5alarmEv+0x3fc>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d02e      	beq.n	8003b8e <_ZN9Convertor5alarmEv+0x45e>
			adc.reset_over_c();
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe faac 	bl	8002092 <_ZN4ADC_12reset_over_cEv>
			led_red = true;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	2101      	movs	r1, #1
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fe fbac 	bl	800229e <_ZN3PinaSEb>
			stop();
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff fda2 	bl	8003690 <_ZN9Convertor4stopEv>
			service.outData.error.current_C = true;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	f892 307a 	ldrb.w	r3, [r2, #122]	; 0x7a
 8003b54:	f043 0304 	orr.w	r3, r3, #4
 8003b58:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
			rerun.start(5000);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3348      	adds	r3, #72	; 0x48
 8003b60:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fd fc5f 	bl	8001428 <_ZN5Timer5startEm>
			if (motor == SYNCHRON) {
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10c      	bne.n	8003b8e <_ZN9Convertor5alarmEv+0x45e>
				unload = true;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fb8f 	bl	800229e <_ZN3PinaSEb>
				clump_timer.start(15000);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3368      	adds	r3, #104	; 0x68
 8003b84:	f643 2198 	movw	r1, #15000	; 0x3a98
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fd fc4d 	bl	8001428 <_ZN5Timer5startEm>
			}
		}

		adc.reset_measure();
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fa25 	bl	8001fe2 <_ZN4ADC_13reset_measureEv>
	}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_TIM_PeriodElapsedCallback>:
};

Interrupt period_callback;
//Interrupt adc_comparator_callback;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from ACD2
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a04      	ldr	r2, [pc, #16]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d102      	bne.n	8003bb8 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		period_callback.interrupt();
 8003bb2:	4804      	ldr	r0, [pc, #16]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003bb4:	f7fd fcaa 	bl	800150c <_ZN9Interrupt9interruptEv>
	}
}
 8003bb8:	bf00      	nop
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	20000360 	.word	0x20000360

08003bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 8003bce:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bd0:	f001 fce0 	bl	8005594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bd4:	f000 f8c4 	bl	8003d60 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bd8:	f000 fc38 	bl	800444c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003bdc:	f000 fc08 	bl	80043f0 <_ZL11MX_DMA_Initv>
//  MX_CAN_Init();
  MX_TIM1_Init();
 8003be0:	f000 fa50 	bl	8004084 <_ZL12MX_TIM1_Initv>
  MX_USART3_UART_Init();
 8003be4:	f000 fbd6 	bl	8004394 <_ZL19MX_USART3_UART_Initv>
  MX_TIM4_Init();
 8003be8:	f000 fb6c 	bl	80042c4 <_ZL12MX_TIM4_Initv>

  MX_ADC1_Init();
 8003bec:	f000 f926 	bl	8003e3c <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8003bf0:	f000 f9a6 	bl	8003f40 <_ZL12MX_ADC2_Initv>
  MX_TIM3_Init();
 8003bf4:	f000 fb00 	bl	80041f8 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

  decltype(auto) led_red    = Pin{GPIOC, LED_RED_Pin  };
 8003bf8:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	4950      	ldr	r1, [pc, #320]	; (8003d40 <main+0x178>)
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fe fb03 	bl	800220c <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green  = Pin{GPIOB, LED_GREEN_Pin};
 8003c06:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	494d      	ldr	r1, [pc, #308]	; (8003d44 <main+0x17c>)
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe fafc 	bl	800220c <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can    = Pin{GPIOC, LED_CAN_Pin  };
 8003c14:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8003c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c1c:	4948      	ldr	r1, [pc, #288]	; (8003d40 <main+0x178>)
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe faf4 	bl	800220c <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) ventilator = Pin{GPIOB, VENT_Pin     };
 8003c24:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c28:	2210      	movs	r2, #16
 8003c2a:	4946      	ldr	r1, [pc, #280]	; (8003d44 <main+0x17c>)
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe faed 	bl	800220c <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) unload     = Pin{GPIOA, UNLOAD_Pin   };
 8003c32:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8003c36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c3a:	4943      	ldr	r1, [pc, #268]	; (8003d48 <main+0x180>)
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe fae5 	bl	800220c <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) condens    = Pin{GPIOC, CONDENS_Pin  };
 8003c42:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003c46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c4a:	493d      	ldr	r1, [pc, #244]	; (8003d40 <main+0x178>)
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fe fadd 	bl	800220c <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) TD_DM      = Pin{GPIOB, TD_DM_Pin    };
 8003c52:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	493a      	ldr	r1, [pc, #232]	; (8003d44 <main+0x17c>)
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe fad6 	bl	800220c <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) SP         = Pin{GPIOB, SP_Pin       };
 8003c60:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c68:	4936      	ldr	r1, [pc, #216]	; (8003d44 <main+0x17c>)
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fe face 	bl	800220c <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) Start      = Pin{GPIOB, START_Pin    };
 8003c70:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c78:	4932      	ldr	r1, [pc, #200]	; (8003d44 <main+0x17c>)
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe fac6 	bl	800220c <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) Motor      = Pin{GPIOA, ASYNC_Pin    };
 8003c80:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003c84:	2204      	movs	r2, #4
 8003c86:	4930      	ldr	r1, [pc, #192]	; (8003d48 <main+0x180>)
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fe fabf 	bl	800220c <_ZN3PinC1EP12GPIO_TypeDeft>

  decltype(auto) adc = ADC_ {adc_callback, adc_injected_callback, 4, 5};
 8003c8e:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8003c92:	2305      	movs	r3, #5
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	2304      	movs	r3, #4
 8003c98:	4a2c      	ldr	r2, [pc, #176]	; (8003d4c <main+0x184>)
 8003c9a:	492d      	ldr	r1, [pc, #180]	; (8003d50 <main+0x188>)
 8003c9c:	f7fe f832 	bl	8001d04 <_ZN4ADC_C1ER9InterruptS1_ht>

  decltype(auto) uart = UART_<>{led_can};
 8003ca0:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8003ca4:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 ff06 	bl	8004abc <_ZN5UART_ILj26EEC1ER3Pin>

  decltype(auto) ntc = NTC{};
 8003cb0:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe fb13 	bl	80022e0 <_ZN3NTCC1Ev>
  decltype(auto) service = Service<In_data, Out_data>{adc, ntc, uart, interrupt_dma, interrupt_uart};
 8003cba:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8003cbe:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8003cc2:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8003cc6:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8003cca:	4c22      	ldr	r4, [pc, #136]	; (8003d54 <main+0x18c>)
 8003ccc:	9401      	str	r4, [sp, #4]
 8003cce:	4c22      	ldr	r4, [pc, #136]	; (8003d58 <main+0x190>)
 8003cd0:	9400      	str	r4, [sp, #0]
 8003cd2:	f000 ff05 	bl	8004ae0 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R3NTCR5UART_ILj26EER9InterruptSB_>
  decltype(auto) contactor = Contactor{adc, service};
 8003cd6:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8003cda:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8003cde:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe fba8 	bl	8002438 <_ZN9ContactorC1ER4ADC_R7ServiceI7In_data8Out_dataE>
//  decltype(auto) cooler = Cooler{service};

  decltype(auto) convertor = Convertor{adc, service, contactor, period_callback/*, adc_comparator_callback*/, led_red, led_green, ventilator, unload, condens, TD_DM, SP, Start, Motor};
 8003ce8:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8003cec:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8003cf0:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8003cfc:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003d00:	9308      	str	r3, [sp, #32]
 8003d02:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003d06:	9307      	str	r3, [sp, #28]
 8003d08:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003d0c:	9306      	str	r3, [sp, #24]
 8003d0e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003d12:	9305      	str	r3, [sp, #20]
 8003d14:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8003d18:	9304      	str	r3, [sp, #16]
 8003d1a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003d1e:	9303      	str	r3, [sp, #12]
 8003d20:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8003d24:	9302      	str	r3, [sp, #8]
 8003d26:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003d2a:	9301      	str	r3, [sp, #4]
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <main+0x194>)
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	4623      	mov	r3, r4
 8003d32:	f7fe fd27 	bl	8002784 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptR3PinSC_SC_SC_SC_SC_SC_SC_SC_>
  /* USER CODE BEGIN WHILE */

//  contactor.start();
  while (1)
  {
	  convertor();
 8003d36:	463b      	mov	r3, r7
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fe fe1d 	bl	8002978 <_ZN9ConvertorclEv>
 8003d3e:	e7fa      	b.n	8003d36 <main+0x16e>
 8003d40:	40011000 	.word	0x40011000
 8003d44:	40010c00 	.word	0x40010c00
 8003d48:	40010800 	.word	0x40010800
 8003d4c:	20000354 	.word	0x20000354
 8003d50:	20000350 	.word	0x20000350
 8003d54:	2000035c 	.word	0x2000035c
 8003d58:	20000358 	.word	0x20000358
 8003d5c:	20000360 	.word	0x20000360

08003d60 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b096      	sub	sp, #88	; 0x58
 8003d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d6a:	2228      	movs	r2, #40	; 0x28
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f007 f8f0 	bl	800af54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d74:	f107 031c 	add.w	r3, r7, #28
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
 8003d8c:	609a      	str	r2, [r3, #8]
 8003d8e:	60da      	str	r2, [r3, #12]
 8003d90:	611a      	str	r2, [r3, #16]
 8003d92:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d94:	2301      	movs	r3, #1
 8003d96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003d9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003da2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003da4:	2301      	movs	r3, #1
 8003da6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003da8:	2302      	movs	r3, #2
 8003daa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003db0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003db2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003db6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003db8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f003 fb81 	bl	80074c4 <HAL_RCC_OscConfig>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8003dd2:	f000 fbe5 	bl	80045a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dd6:	230f      	movs	r3, #15
 8003dd8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dde:	2300      	movs	r3, #0
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003de6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003de8:	2300      	movs	r3, #0
 8003dea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003dec:	f107 031c 	add.w	r3, r7, #28
 8003df0:	2102      	movs	r1, #2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f003 fde6 	bl	80079c4 <HAL_RCC_ClockConfig>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	bf14      	ite	ne
 8003dfe:	2301      	movne	r3, #1
 8003e00:	2300      	moveq	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8003e08:	f000 fbca 	bl	80045a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003e10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e14:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e16:	1d3b      	adds	r3, r7, #4
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f003 ff6f 	bl	8007cfc <HAL_RCCEx_PeriphCLKConfig>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf14      	ite	ne
 8003e24:	2301      	movne	r3, #1
 8003e26:	2300      	moveq	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8003e2e:	f000 fbb7 	bl	80045a0 <Error_Handler>
  }
}
 8003e32:	bf00      	nop
 8003e34:	3758      	adds	r7, #88	; 0x58
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003e4c:	4b3a      	ldr	r3, [pc, #232]	; (8003f38 <_ZL12MX_ADC1_Initv+0xfc>)
 8003e4e:	4a3b      	ldr	r2, [pc, #236]	; (8003f3c <_ZL12MX_ADC1_Initv+0x100>)
 8003e50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003e52:	4b39      	ldr	r3, [pc, #228]	; (8003f38 <_ZL12MX_ADC1_Initv+0xfc>)
 8003e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003e5a:	4b37      	ldr	r3, [pc, #220]	; (8003f38 <_ZL12MX_ADC1_Initv+0xfc>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003e60:	4b35      	ldr	r3, [pc, #212]	; (8003f38 <_ZL12MX_ADC1_Initv+0xfc>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e66:	4b34      	ldr	r3, [pc, #208]	; (8003f38 <_ZL12MX_ADC1_Initv+0xfc>)
 8003e68:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003e6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e6e:	4b32      	ldr	r3, [pc, #200]	; (8003f38 <_ZL12MX_ADC1_Initv+0xfc>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8003e74:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <_ZL12MX_ADC1_Initv+0xfc>)
 8003e76:	2204      	movs	r2, #4
 8003e78:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e7a:	482f      	ldr	r0, [pc, #188]	; (8003f38 <_ZL12MX_ADC1_Initv+0xfc>)
 8003e7c:	f001 fbda 	bl	8005634 <HAL_ADC_Init>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bf14      	ite	ne
 8003e86:	2301      	movne	r3, #1
 8003e88:	2300      	moveq	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 8003e90:	f000 fb86 	bl	80045a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ea0:	1d3b      	adds	r3, r7, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4824      	ldr	r0, [pc, #144]	; (8003f38 <_ZL12MX_ADC1_Initv+0xfc>)
 8003ea6:	f001 feb7 	bl	8005c18 <HAL_ADC_ConfigChannel>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 8003eba:	f000 fb71 	bl	80045a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	4619      	mov	r1, r3
 8003eca:	481b      	ldr	r0, [pc, #108]	; (8003f38 <_ZL12MX_ADC1_Initv+0xfc>)
 8003ecc:	f001 fea4 	bl	8005c18 <HAL_ADC_ConfigChannel>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bf14      	ite	ne
 8003ed6:	2301      	movne	r3, #1
 8003ed8:	2300      	moveq	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8003ee0:	f000 fb5e 	bl	80045a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003eec:	1d3b      	adds	r3, r7, #4
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4811      	ldr	r0, [pc, #68]	; (8003f38 <_ZL12MX_ADC1_Initv+0xfc>)
 8003ef2:	f001 fe91 	bl	8005c18 <HAL_ADC_ConfigChannel>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf14      	ite	ne
 8003efc:	2301      	movne	r3, #1
 8003efe:	2300      	moveq	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 8003f06:	f000 fb4b 	bl	80045a0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003f0a:	2307      	movs	r3, #7
 8003f0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003f0e:	2304      	movs	r3, #4
 8003f10:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f12:	1d3b      	adds	r3, r7, #4
 8003f14:	4619      	mov	r1, r3
 8003f16:	4808      	ldr	r0, [pc, #32]	; (8003f38 <_ZL12MX_ADC1_Initv+0xfc>)
 8003f18:	f001 fe7e 	bl	8005c18 <HAL_ADC_ConfigChannel>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	bf14      	ite	ne
 8003f22:	2301      	movne	r3, #1
 8003f24:	2300      	moveq	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <_ZL12MX_ADC1_Initv+0xf4>
  {
    Error_Handler();
 8003f2c:	f000 fb38 	bl	80045a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20000108 	.word	0x20000108
 8003f3c:	40012400 	.word	0x40012400

08003f40 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08e      	sub	sp, #56	; 0x38
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003f46:	f107 0320 	add.w	r3, r7, #32
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	605a      	str	r2, [r3, #4]
 8003f50:	609a      	str	r2, [r3, #8]
 8003f52:	60da      	str	r2, [r3, #12]
 8003f54:	611a      	str	r2, [r3, #16]
 8003f56:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003f58:	1d3b      	adds	r3, r7, #4
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	609a      	str	r2, [r3, #8]
 8003f62:	60da      	str	r2, [r3, #12]
 8003f64:	611a      	str	r2, [r3, #16]
 8003f66:	615a      	str	r2, [r3, #20]
 8003f68:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8003f6a:	4b44      	ldr	r3, [pc, #272]	; (800407c <_ZL12MX_ADC2_Initv+0x13c>)
 8003f6c:	4a44      	ldr	r2, [pc, #272]	; (8004080 <_ZL12MX_ADC2_Initv+0x140>)
 8003f6e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003f70:	4b42      	ldr	r3, [pc, #264]	; (800407c <_ZL12MX_ADC2_Initv+0x13c>)
 8003f72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f76:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003f78:	4b40      	ldr	r3, [pc, #256]	; (800407c <_ZL12MX_ADC2_Initv+0x13c>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003f7e:	4b3f      	ldr	r3, [pc, #252]	; (800407c <_ZL12MX_ADC2_Initv+0x13c>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f84:	4b3d      	ldr	r3, [pc, #244]	; (800407c <_ZL12MX_ADC2_Initv+0x13c>)
 8003f86:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003f8a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f8c:	4b3b      	ldr	r3, [pc, #236]	; (800407c <_ZL12MX_ADC2_Initv+0x13c>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8003f92:	4b3a      	ldr	r3, [pc, #232]	; (800407c <_ZL12MX_ADC2_Initv+0x13c>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003f98:	4838      	ldr	r0, [pc, #224]	; (800407c <_ZL12MX_ADC2_Initv+0x13c>)
 8003f9a:	f001 fb4b 	bl	8005634 <HAL_ADC_Init>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf14      	ite	ne
 8003fa4:	2301      	movne	r3, #1
 8003fa6:	2300      	moveq	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <_ZL12MX_ADC2_Initv+0x72>
  {
    Error_Handler();
 8003fae:	f000 faf7 	bl	80045a0 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_ALL_INJEC;
 8003fb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fb6:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.HighThreshold = 2700;
 8003fb8:	f640 238c 	movw	r3, #2700	; 0xa8c
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.LowThreshold = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.ITMode = ENABLE;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8003fc8:	f107 0320 	add.w	r3, r7, #32
 8003fcc:	4619      	mov	r1, r3
 8003fce:	482b      	ldr	r0, [pc, #172]	; (800407c <_ZL12MX_ADC2_Initv+0x13c>)
 8003fd0:	f001 ff1a 	bl	8005e08 <HAL_ADC_AnalogWDGConfig>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	bf14      	ite	ne
 8003fda:	2301      	movne	r3, #1
 8003fdc:	2300      	moveq	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <_ZL12MX_ADC2_Initv+0xa8>
  {
    Error_Handler();
 8003fe4:	f000 fadc 	bl	80045a0 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8003fe8:	2304      	movs	r3, #4
 8003fea:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8003fec:	2301      	movs	r3, #1
 8003fee:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8003ff8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003ffc:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8004002:	2300      	movs	r3, #0
 8004004:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800400a:	1d3b      	adds	r3, r7, #4
 800400c:	4619      	mov	r1, r3
 800400e:	481b      	ldr	r0, [pc, #108]	; (800407c <_ZL12MX_ADC2_Initv+0x13c>)
 8004010:	f002 f958 	bl	80062c4 <HAL_ADCEx_InjectedConfigChannel>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	bf14      	ite	ne
 800401a:	2301      	movne	r3, #1
 800401c:	2300      	moveq	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <_ZL12MX_ADC2_Initv+0xe8>
  {
    Error_Handler();
 8004024:	f000 fabc 	bl	80045a0 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8004028:	2305      	movs	r3, #5
 800402a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800402c:	2302      	movs	r3, #2
 800402e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8004030:	1d3b      	adds	r3, r7, #4
 8004032:	4619      	mov	r1, r3
 8004034:	4811      	ldr	r0, [pc, #68]	; (800407c <_ZL12MX_ADC2_Initv+0x13c>)
 8004036:	f002 f945 	bl	80062c4 <HAL_ADCEx_InjectedConfigChannel>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <_ZL12MX_ADC2_Initv+0x10e>
  {
    Error_Handler();
 800404a:	f000 faa9 	bl	80045a0 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 800404e:	2306      	movs	r3, #6
 8004050:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8004052:	2303      	movs	r3, #3
 8004054:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8004056:	1d3b      	adds	r3, r7, #4
 8004058:	4619      	mov	r1, r3
 800405a:	4808      	ldr	r0, [pc, #32]	; (800407c <_ZL12MX_ADC2_Initv+0x13c>)
 800405c:	f002 f932 	bl	80062c4 <HAL_ADCEx_InjectedConfigChannel>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	bf14      	ite	ne
 8004066:	2301      	movne	r3, #1
 8004068:	2300      	moveq	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <_ZL12MX_ADC2_Initv+0x134>
  {
    Error_Handler();
 8004070:	f000 fa96 	bl	80045a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004074:	bf00      	nop
 8004076:	3738      	adds	r7, #56	; 0x38
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000138 	.word	0x20000138
 8004080:	40012800 	.word	0x40012800

08004084 <_ZL12MX_TIM1_Initv>:
//  * @brief TIM1 Initialization Function
//  * @param None
//  * @retval None
//  */
static void MX_TIM1_Init(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b092      	sub	sp, #72	; 0x48
 8004088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800408a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	609a      	str	r2, [r3, #8]
 80040a0:	60da      	str	r2, [r3, #12]
 80040a2:	611a      	str	r2, [r3, #16]
 80040a4:	615a      	str	r2, [r3, #20]
 80040a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	2220      	movs	r2, #32
 80040ac:	2100      	movs	r1, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	f006 ff50 	bl	800af54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80040b4:	4b4e      	ldr	r3, [pc, #312]	; (80041f0 <_ZL12MX_TIM1_Initv+0x16c>)
 80040b6:	4a4f      	ldr	r2, [pc, #316]	; (80041f4 <_ZL12MX_TIM1_Initv+0x170>)
 80040b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80040ba:	4b4d      	ldr	r3, [pc, #308]	; (80041f0 <_ZL12MX_TIM1_Initv+0x16c>)
 80040bc:	2200      	movs	r2, #0
 80040be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80040c0:	4b4b      	ldr	r3, [pc, #300]	; (80041f0 <_ZL12MX_TIM1_Initv+0x16c>)
 80040c2:	2220      	movs	r2, #32
 80040c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80040c6:	4b4a      	ldr	r3, [pc, #296]	; (80041f0 <_ZL12MX_TIM1_Initv+0x16c>)
 80040c8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80040cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040ce:	4b48      	ldr	r3, [pc, #288]	; (80041f0 <_ZL12MX_TIM1_Initv+0x16c>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80040d4:	4b46      	ldr	r3, [pc, #280]	; (80041f0 <_ZL12MX_TIM1_Initv+0x16c>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040da:	4b45      	ldr	r3, [pc, #276]	; (80041f0 <_ZL12MX_TIM1_Initv+0x16c>)
 80040dc:	2200      	movs	r2, #0
 80040de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80040e0:	4843      	ldr	r0, [pc, #268]	; (80041f0 <_ZL12MX_TIM1_Initv+0x16c>)
 80040e2:	f003 ff9e 	bl	8008022 <HAL_TIM_PWM_Init>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf14      	ite	ne
 80040ec:	2301      	movne	r3, #1
 80040ee:	2300      	moveq	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80040f6:	f000 fa53 	bl	80045a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040fa:	2300      	movs	r3, #0
 80040fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040fe:	2300      	movs	r3, #0
 8004100:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004102:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004106:	4619      	mov	r1, r3
 8004108:	4839      	ldr	r0, [pc, #228]	; (80041f0 <_ZL12MX_TIM1_Initv+0x16c>)
 800410a:	f004 fe99 	bl	8008e40 <HAL_TIMEx_MasterConfigSynchronization>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf14      	ite	ne
 8004114:	2301      	movne	r3, #1
 8004116:	2300      	moveq	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 800411e:	f000 fa3f 	bl	80045a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004122:	2360      	movs	r3, #96	; 0x60
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800412a:	2300      	movs	r3, #0
 800412c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800412e:	2300      	movs	r3, #0
 8004130:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004132:	2300      	movs	r3, #0
 8004134:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004136:	2300      	movs	r3, #0
 8004138:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800413a:	2300      	movs	r3, #0
 800413c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800413e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004142:	2200      	movs	r2, #0
 8004144:	4619      	mov	r1, r3
 8004146:	482a      	ldr	r0, [pc, #168]	; (80041f0 <_ZL12MX_TIM1_Initv+0x16c>)
 8004148:	f004 fa44 	bl	80085d4 <HAL_TIM_PWM_ConfigChannel>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	bf14      	ite	ne
 8004152:	2301      	movne	r3, #1
 8004154:	2300      	moveq	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 800415c:	f000 fa20 	bl	80045a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004164:	2204      	movs	r2, #4
 8004166:	4619      	mov	r1, r3
 8004168:	4821      	ldr	r0, [pc, #132]	; (80041f0 <_ZL12MX_TIM1_Initv+0x16c>)
 800416a:	f004 fa33 	bl	80085d4 <HAL_TIM_PWM_ConfigChannel>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf14      	ite	ne
 8004174:	2301      	movne	r3, #1
 8004176:	2300      	moveq	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 800417e:	f000 fa0f 	bl	80045a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004186:	2208      	movs	r2, #8
 8004188:	4619      	mov	r1, r3
 800418a:	4819      	ldr	r0, [pc, #100]	; (80041f0 <_ZL12MX_TIM1_Initv+0x16c>)
 800418c:	f004 fa22 	bl	80085d4 <HAL_TIM_PWM_ConfigChannel>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	bf14      	ite	ne
 8004196:	2301      	movne	r3, #1
 8004198:	2300      	moveq	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 80041a0:	f000 f9fe 	bl	80045a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 115;
 80041b0:	2373      	movs	r3, #115	; 0x73
 80041b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041be:	2300      	movs	r3, #0
 80041c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80041c2:	1d3b      	adds	r3, r7, #4
 80041c4:	4619      	mov	r1, r3
 80041c6:	480a      	ldr	r0, [pc, #40]	; (80041f0 <_ZL12MX_TIM1_Initv+0x16c>)
 80041c8:	f004 fea6 	bl	8008f18 <HAL_TIMEx_ConfigBreakDeadTime>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 80041dc:	f000 f9e0 	bl	80045a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80041e0:	4803      	ldr	r0, [pc, #12]	; (80041f0 <_ZL12MX_TIM1_Initv+0x16c>)
 80041e2:	f000 ffb1 	bl	8005148 <HAL_TIM_MspPostInit>

}
 80041e6:	bf00      	nop
 80041e8:	3748      	adds	r7, #72	; 0x48
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	200001ac 	.word	0x200001ac
 80041f4:	40012c00 	.word	0x40012c00

080041f8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08a      	sub	sp, #40	; 0x28
 80041fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041fe:	f107 0320 	add.w	r3, r7, #32
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004208:	1d3b      	adds	r3, r7, #4
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	605a      	str	r2, [r3, #4]
 8004210:	609a      	str	r2, [r3, #8]
 8004212:	60da      	str	r2, [r3, #12]
 8004214:	611a      	str	r2, [r3, #16]
 8004216:	615a      	str	r2, [r3, #20]
 8004218:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800421a:	4b28      	ldr	r3, [pc, #160]	; (80042bc <_ZL12MX_TIM3_Initv+0xc4>)
 800421c:	4a28      	ldr	r2, [pc, #160]	; (80042c0 <_ZL12MX_TIM3_Initv+0xc8>)
 800421e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 8004220:	4b26      	ldr	r3, [pc, #152]	; (80042bc <_ZL12MX_TIM3_Initv+0xc4>)
 8004222:	2213      	movs	r2, #19
 8004224:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004226:	4b25      	ldr	r3, [pc, #148]	; (80042bc <_ZL12MX_TIM3_Initv+0xc4>)
 8004228:	2200      	movs	r2, #0
 800422a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 800422c:	4b23      	ldr	r3, [pc, #140]	; (80042bc <_ZL12MX_TIM3_Initv+0xc4>)
 800422e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8004232:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004234:	4b21      	ldr	r3, [pc, #132]	; (80042bc <_ZL12MX_TIM3_Initv+0xc4>)
 8004236:	2200      	movs	r2, #0
 8004238:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800423a:	4b20      	ldr	r3, [pc, #128]	; (80042bc <_ZL12MX_TIM3_Initv+0xc4>)
 800423c:	2280      	movs	r2, #128	; 0x80
 800423e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8004240:	481e      	ldr	r0, [pc, #120]	; (80042bc <_ZL12MX_TIM3_Initv+0xc4>)
 8004242:	f003 fe9f 	bl	8007f84 <HAL_TIM_OC_Init>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8004256:	f000 f9a3 	bl	80045a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800425a:	2300      	movs	r3, #0
 800425c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800425e:	2300      	movs	r3, #0
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004262:	f107 0320 	add.w	r3, r7, #32
 8004266:	4619      	mov	r1, r3
 8004268:	4814      	ldr	r0, [pc, #80]	; (80042bc <_ZL12MX_TIM3_Initv+0xc4>)
 800426a:	f004 fde9 	bl	8008e40 <HAL_TIMEx_MasterConfigSynchronization>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 800427e:	f000 f98f 	bl	80045a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004282:	2300      	movs	r3, #0
 8004284:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004286:	2300      	movs	r3, #0
 8004288:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800428a:	2300      	movs	r3, #0
 800428c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004292:	1d3b      	adds	r3, r7, #4
 8004294:	2200      	movs	r2, #0
 8004296:	4619      	mov	r1, r3
 8004298:	4808      	ldr	r0, [pc, #32]	; (80042bc <_ZL12MX_TIM3_Initv+0xc4>)
 800429a:	f004 f943 	bl	8008524 <HAL_TIM_OC_ConfigChannel>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 80042ae:	f000 f977 	bl	80045a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80042b2:	bf00      	nop
 80042b4:	3728      	adds	r7, #40	; 0x28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	200001f4 	.word	0x200001f4
 80042c0:	40000400 	.word	0x40000400

080042c4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	; 0x28
 80042c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042ca:	f107 0320 	add.w	r3, r7, #32
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042d4:	1d3b      	adds	r3, r7, #4
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	609a      	str	r2, [r3, #8]
 80042de:	60da      	str	r2, [r3, #12]
 80042e0:	611a      	str	r2, [r3, #16]
 80042e2:	615a      	str	r2, [r3, #20]
 80042e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80042e6:	4b29      	ldr	r3, [pc, #164]	; (800438c <_ZL12MX_TIM4_Initv+0xc8>)
 80042e8:	4a29      	ldr	r2, [pc, #164]	; (8004390 <_ZL12MX_TIM4_Initv+0xcc>)
 80042ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80042ec:	4b27      	ldr	r3, [pc, #156]	; (800438c <_ZL12MX_TIM4_Initv+0xc8>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042f2:	4b26      	ldr	r3, [pc, #152]	; (800438c <_ZL12MX_TIM4_Initv+0xc8>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80042f8:	4b24      	ldr	r3, [pc, #144]	; (800438c <_ZL12MX_TIM4_Initv+0xc8>)
 80042fa:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80042fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004300:	4b22      	ldr	r3, [pc, #136]	; (800438c <_ZL12MX_TIM4_Initv+0xc8>)
 8004302:	2200      	movs	r2, #0
 8004304:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004306:	4b21      	ldr	r3, [pc, #132]	; (800438c <_ZL12MX_TIM4_Initv+0xc8>)
 8004308:	2200      	movs	r2, #0
 800430a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800430c:	481f      	ldr	r0, [pc, #124]	; (800438c <_ZL12MX_TIM4_Initv+0xc8>)
 800430e:	f003 fe88 	bl	8008022 <HAL_TIM_PWM_Init>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf14      	ite	ne
 8004318:	2301      	movne	r3, #1
 800431a:	2300      	moveq	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 8004322:	f000 f93d 	bl	80045a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004326:	2300      	movs	r3, #0
 8004328:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800432a:	2300      	movs	r3, #0
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800432e:	f107 0320 	add.w	r3, r7, #32
 8004332:	4619      	mov	r1, r3
 8004334:	4815      	ldr	r0, [pc, #84]	; (800438c <_ZL12MX_TIM4_Initv+0xc8>)
 8004336:	f004 fd83 	bl	8008e40 <HAL_TIMEx_MasterConfigSynchronization>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	bf14      	ite	ne
 8004340:	2301      	movne	r3, #1
 8004342:	2300      	moveq	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 800434a:	f000 f929 	bl	80045a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800434e:	2360      	movs	r3, #96	; 0x60
 8004350:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800435e:	1d3b      	adds	r3, r7, #4
 8004360:	2200      	movs	r2, #0
 8004362:	4619      	mov	r1, r3
 8004364:	4809      	ldr	r0, [pc, #36]	; (800438c <_ZL12MX_TIM4_Initv+0xc8>)
 8004366:	f004 f935 	bl	80085d4 <HAL_TIM_PWM_ConfigChannel>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	bf14      	ite	ne
 8004370:	2301      	movne	r3, #1
 8004372:	2300      	moveq	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 800437a:	f000 f911 	bl	80045a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800437e:	4803      	ldr	r0, [pc, #12]	; (800438c <_ZL12MX_TIM4_Initv+0xc8>)
 8004380:	f000 fee2 	bl	8005148 <HAL_TIM_MspPostInit>

}
 8004384:	bf00      	nop
 8004386:	3728      	adds	r7, #40	; 0x28
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	2000023c 	.word	0x2000023c
 8004390:	40000800 	.word	0x40000800

08004394 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004398:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 800439a:	4a14      	ldr	r2, [pc, #80]	; (80043ec <_ZL19MX_USART3_UART_Initv+0x58>)
 800439c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80043a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80043ac:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80043b2:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80043ba:	220c      	movs	r2, #12
 80043bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043be:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80043c4:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80043ca:	4807      	ldr	r0, [pc, #28]	; (80043e8 <_ZL19MX_USART3_UART_Initv+0x54>)
 80043cc:	f004 fe2b 	bl	8009026 <HAL_UART_Init>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bf14      	ite	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	2300      	moveq	r3, #0
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80043e0:	f000 f8de 	bl	80045a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80043e4:	bf00      	nop
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000284 	.word	0x20000284
 80043ec:	40004800 	.word	0x40004800

080043f0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80043f6:	4b14      	ldr	r3, [pc, #80]	; (8004448 <_ZL11MX_DMA_Initv+0x58>)
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	4a13      	ldr	r2, [pc, #76]	; (8004448 <_ZL11MX_DMA_Initv+0x58>)
 80043fc:	f043 0301 	orr.w	r3, r3, #1
 8004400:	6153      	str	r3, [r2, #20]
 8004402:	4b11      	ldr	r3, [pc, #68]	; (8004448 <_ZL11MX_DMA_Initv+0x58>)
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	607b      	str	r3, [r7, #4]
 800440c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800440e:	2200      	movs	r2, #0
 8004410:	2100      	movs	r1, #0
 8004412:	200b      	movs	r0, #11
 8004414:	f002 f9d9 	bl	80067ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004418:	200b      	movs	r0, #11
 800441a:	f002 f9f2 	bl	8006802 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800441e:	2200      	movs	r2, #0
 8004420:	2100      	movs	r1, #0
 8004422:	200c      	movs	r0, #12
 8004424:	f002 f9d1 	bl	80067ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004428:	200c      	movs	r0, #12
 800442a:	f002 f9ea 	bl	8006802 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800442e:	2200      	movs	r2, #0
 8004430:	2100      	movs	r1, #0
 8004432:	200d      	movs	r0, #13
 8004434:	f002 f9c9 	bl	80067ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004438:	200d      	movs	r0, #13
 800443a:	f002 f9e2 	bl	8006802 <HAL_NVIC_EnableIRQ>

}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40021000 	.word	0x40021000

0800444c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004452:	f107 0310 	add.w	r3, r7, #16
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	605a      	str	r2, [r3, #4]
 800445c:	609a      	str	r2, [r3, #8]
 800445e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004460:	4b4a      	ldr	r3, [pc, #296]	; (800458c <_ZL12MX_GPIO_Initv+0x140>)
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	4a49      	ldr	r2, [pc, #292]	; (800458c <_ZL12MX_GPIO_Initv+0x140>)
 8004466:	f043 0320 	orr.w	r3, r3, #32
 800446a:	6193      	str	r3, [r2, #24]
 800446c:	4b47      	ldr	r3, [pc, #284]	; (800458c <_ZL12MX_GPIO_Initv+0x140>)
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004478:	4b44      	ldr	r3, [pc, #272]	; (800458c <_ZL12MX_GPIO_Initv+0x140>)
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	4a43      	ldr	r2, [pc, #268]	; (800458c <_ZL12MX_GPIO_Initv+0x140>)
 800447e:	f043 0310 	orr.w	r3, r3, #16
 8004482:	6193      	str	r3, [r2, #24]
 8004484:	4b41      	ldr	r3, [pc, #260]	; (800458c <_ZL12MX_GPIO_Initv+0x140>)
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004490:	4b3e      	ldr	r3, [pc, #248]	; (800458c <_ZL12MX_GPIO_Initv+0x140>)
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	4a3d      	ldr	r2, [pc, #244]	; (800458c <_ZL12MX_GPIO_Initv+0x140>)
 8004496:	f043 0304 	orr.w	r3, r3, #4
 800449a:	6193      	str	r3, [r2, #24]
 800449c:	4b3b      	ldr	r3, [pc, #236]	; (800458c <_ZL12MX_GPIO_Initv+0x140>)
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	607b      	str	r3, [r7, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044a8:	4b38      	ldr	r3, [pc, #224]	; (800458c <_ZL12MX_GPIO_Initv+0x140>)
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	4a37      	ldr	r2, [pc, #220]	; (800458c <_ZL12MX_GPIO_Initv+0x140>)
 80044ae:	f043 0308 	orr.w	r3, r3, #8
 80044b2:	6193      	str	r3, [r2, #24]
 80044b4:	4b35      	ldr	r3, [pc, #212]	; (800458c <_ZL12MX_GPIO_Initv+0x140>)
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_CAN_Pin|CONDENS_Pin, GPIO_PIN_RESET);
 80044c0:	2200      	movs	r2, #0
 80044c2:	f241 2101 	movw	r1, #4609	; 0x1201
 80044c6:	4832      	ldr	r0, [pc, #200]	; (8004590 <_ZL12MX_GPIO_Initv+0x144>)
 80044c8:	f002 ffe3 	bl	8007492 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UNLOAD_GPIO_Port, UNLOAD_Pin, GPIO_PIN_RESET);
 80044cc:	2200      	movs	r2, #0
 80044ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044d2:	4830      	ldr	r0, [pc, #192]	; (8004594 <_ZL12MX_GPIO_Initv+0x148>)
 80044d4:	f002 ffdd 	bl	8007492 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VENT_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80044d8:	2200      	movs	r2, #0
 80044da:	2130      	movs	r1, #48	; 0x30
 80044dc:	482e      	ldr	r0, [pc, #184]	; (8004598 <_ZL12MX_GPIO_Initv+0x14c>)
 80044de:	f002 ffd8 	bl	8007492 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin LED_CAN_Pin CONDENS_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_CAN_Pin|CONDENS_Pin;
 80044e2:	f241 2301 	movw	r3, #4609	; 0x1201
 80044e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e8:	2301      	movs	r3, #1
 80044ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f0:	2302      	movs	r3, #2
 80044f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044f4:	f107 0310 	add.w	r3, r7, #16
 80044f8:	4619      	mov	r1, r3
 80044fa:	4825      	ldr	r0, [pc, #148]	; (8004590 <_ZL12MX_GPIO_Initv+0x144>)
 80044fc:	f002 fe1e 	bl	800713c <HAL_GPIO_Init>

  /*Configure GPIO pin : ASYNC_Pin */
  GPIO_InitStruct.Pin = ASYNC_Pin;
 8004500:	2304      	movs	r3, #4
 8004502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	2300      	movs	r3, #0
 800450a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ASYNC_GPIO_Port, &GPIO_InitStruct);
 800450c:	f107 0310 	add.w	r3, r7, #16
 8004510:	4619      	mov	r1, r3
 8004512:	4820      	ldr	r0, [pc, #128]	; (8004594 <_ZL12MX_GPIO_Initv+0x148>)
 8004514:	f002 fe12 	bl	800713c <HAL_GPIO_Init>

  /*Configure GPIO pin : UNLOAD_Pin */
  GPIO_InitStruct.Pin = UNLOAD_Pin;
 8004518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800451c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800451e:	2301      	movs	r3, #1
 8004520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004522:	2300      	movs	r3, #0
 8004524:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004526:	2302      	movs	r3, #2
 8004528:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UNLOAD_GPIO_Port, &GPIO_InitStruct);
 800452a:	f107 0310 	add.w	r3, r7, #16
 800452e:	4619      	mov	r1, r3
 8004530:	4818      	ldr	r0, [pc, #96]	; (8004594 <_ZL12MX_GPIO_Initv+0x148>)
 8004532:	f002 fe03 	bl	800713c <HAL_GPIO_Init>

  /*Configure GPIO pin : Contactor_Pin */
  GPIO_InitStruct.Pin = Contactor_Pin;
 8004536:	2304      	movs	r3, #4
 8004538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453e:	2300      	movs	r3, #0
 8004540:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Contactor_GPIO_Port, &GPIO_InitStruct);
 8004542:	f107 0310 	add.w	r3, r7, #16
 8004546:	4619      	mov	r1, r3
 8004548:	4814      	ldr	r0, [pc, #80]	; (800459c <_ZL12MX_GPIO_Initv+0x150>)
 800454a:	f002 fdf7 	bl	800713c <HAL_GPIO_Init>

  /*Configure GPIO pins : VENT_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = VENT_Pin|LED_GREEN_Pin;
 800454e:	2330      	movs	r3, #48	; 0x30
 8004550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004552:	2301      	movs	r3, #1
 8004554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004556:	2300      	movs	r3, #0
 8004558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800455a:	2302      	movs	r3, #2
 800455c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800455e:	f107 0310 	add.w	r3, r7, #16
 8004562:	4619      	mov	r1, r3
 8004564:	480c      	ldr	r0, [pc, #48]	; (8004598 <_ZL12MX_GPIO_Initv+0x14c>)
 8004566:	f002 fde9 	bl	800713c <HAL_GPIO_Init>

  /*Configure GPIO pins : TD_DM_Pin SP_Pin START_Pin */
  GPIO_InitStruct.Pin = TD_DM_Pin|SP_Pin|START_Pin;
 800456a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800456e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004578:	f107 0310 	add.w	r3, r7, #16
 800457c:	4619      	mov	r1, r3
 800457e:	4806      	ldr	r0, [pc, #24]	; (8004598 <_ZL12MX_GPIO_Initv+0x14c>)
 8004580:	f002 fddc 	bl	800713c <HAL_GPIO_Init>

}
 8004584:	bf00      	nop
 8004586:	3720      	adds	r7, #32
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	40011000 	.word	0x40011000
 8004594:	40010800 	.word	0x40010800
 8004598:	40010c00 	.word	0x40010c00
 800459c:	40011400 	.word	0x40011400

080045a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80045a4:	b672      	cpsid	i
}
 80045a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80045a8:	e7fe      	b.n	80045a8 <Error_Handler+0x8>

080045aa <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    size_t size ()  {return end_i;}
    void push_back(T p)
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	2b0b      	cmp	r3, #11
 80045ba:	d808      	bhi.n	80045ce <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_+0x24>
            vector[end_i++] = p;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	1c59      	adds	r1, r3, #1
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6311      	str	r1, [r2, #48]	; 0x30
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6839      	ldr	r1, [r7, #0]
 80045ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr

080045d8 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>:
    void remove (T p)
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 80045e6:	2300      	movs	r3, #0
 80045e8:	73bb      	strb	r3, [r7, #14]
 80045ea:	7bba      	ldrb	r2, [r7, #14]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d20d      	bcs.n	8004610 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
        if (vector[i] == p) {
 80045f4:	7bba      	ldrb	r2, [r7, #14]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d102      	bne.n	8004608 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x30>
          index = i;
 8004602:	7bbb      	ldrb	r3, [r7, #14]
 8004604:	73fb      	strb	r3, [r7, #15]
          break;
 8004606:	e003      	b.n	8004610 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
      for (uint8_t i = 0; i < end_i; i++) {
 8004608:	7bbb      	ldrb	r3, [r7, #14]
 800460a:	3301      	adds	r3, #1
 800460c:	73bb      	strb	r3, [r7, #14]
 800460e:	e7ec      	b.n	80045ea <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	737b      	strb	r3, [r7, #13]
 8004614:	7b7a      	ldrb	r2, [r7, #13]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	429a      	cmp	r2, r3
 800461c:	d20c      	bcs.n	8004638 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x60>
          vector[i] = vector[i+1];
 800461e:	7b7b      	ldrb	r3, [r7, #13]
 8004620:	1c59      	adds	r1, r3, #1
 8004622:	7b7a      	ldrb	r2, [r7, #13]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 8004630:	7b7b      	ldrb	r3, [r7, #13]
 8004632:	3301      	adds	r3, #1
 8004634:	737b      	strb	r3, [r7, #13]
 8004636:	e7ed      	b.n	8004614 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x3c>
      }
      end_i--;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	1e5a      	subs	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8004642:	bf00      	nop
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	bc80      	pop	{r7}
 800464a:	4770      	bx	lr

0800464c <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	b2db      	uxtb	r3, r3
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr

08004664 <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>:

    T operator[] (const size_t index) const
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 8004676:	4618      	mov	r0, r3
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>:
    Static_vector (){}
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 800469c:	f003 fade 	bl	8007c5c <HAL_RCC_GetHCLKFreq>
 80046a0:	4603      	mov	r3, r0
 80046a2:	4a06      	ldr	r2, [pc, #24]	; (80046bc <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	099b      	lsrs	r3, r3, #6
 80046aa:	3b01      	subs	r3, #1
 80046ac:	4618      	mov	r0, r3
 80046ae:	f002 f8b6 	bl	800681e <HAL_SYSTICK_Config>
	}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	10624dd3 	.word	0x10624dd3

080046c0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80046c0:	b5b0      	push	{r4, r5, r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fb fefe 	bl	80004cc <__aeabi_i2d>
 80046d0:	4604      	mov	r4, r0
 80046d2:	460d      	mov	r5, r1
 80046d4:	6838      	ldr	r0, [r7, #0]
 80046d6:	f7fb fef9 	bl	80004cc <__aeabi_i2d>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4620      	mov	r0, r4
 80046e0:	4629      	mov	r1, r5
 80046e2:	f005 fc0d 	bl	8009f00 <pow>
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
    }
 80046ea:	4610      	mov	r0, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bdb0      	pop	{r4, r5, r7, pc}

080046f4 <_ZN7ServiceI7In_data8Out_dataEclEv>:
	void operator()(){
 80046f4:	b590      	push	{r4, r7, lr}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
		outData.voltage_board  = k_adc * adc[V24] * 100 + 6; // 6 падение на диоде
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f7fd fc0e 	bl	8001f24 <_ZN4ADC_ixEh>
 8004708:	4603      	mov	r3, r0
 800470a:	4618      	mov	r0, r3
 800470c:	f7fc fada 	bl	8000cc4 <__aeabi_i2f>
 8004710:	4603      	mov	r3, r0
 8004712:	49c0      	ldr	r1, [pc, #768]	; (8004a14 <_ZN7ServiceI7In_data8Out_dataEclEv+0x320>)
 8004714:	4618      	mov	r0, r3
 8004716:	f7fc fb29 	bl	8000d6c <__aeabi_fmul>
 800471a:	4603      	mov	r3, r0
 800471c:	49be      	ldr	r1, [pc, #760]	; (8004a18 <_ZN7ServiceI7In_data8Out_dataEclEv+0x324>)
 800471e:	4618      	mov	r0, r3
 8004720:	f7fc fb24 	bl	8000d6c <__aeabi_fmul>
 8004724:	4603      	mov	r3, r0
 8004726:	49bd      	ldr	r1, [pc, #756]	; (8004a1c <_ZN7ServiceI7In_data8Out_dataEclEv+0x328>)
 8004728:	4618      	mov	r0, r3
 800472a:	f7fc fa17 	bl	8000b5c <__addsf3>
 800472e:	4603      	mov	r3, r0
 8004730:	4618      	mov	r0, r3
 8004732:	f7fc fd1d 	bl	8001170 <__aeabi_f2uiz>
 8004736:	4603      	mov	r3, r0
 8004738:	b29a      	uxth	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		outData.convertor_temp  = ntc(adc[Trad]);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685c      	ldr	r4, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2102      	movs	r1, #2
 800474a:	4618      	mov	r0, r3
 800474c:	f7fd fbea 	bl	8001f24 <_ZN4ADC_ixEh>
 8004750:	4603      	mov	r3, r0
 8004752:	4619      	mov	r1, r3
 8004754:	4620      	mov	r0, r4
 8004756:	f7fd fdd7 	bl	8002308 <_ZN3NTCclEt>
 800475a:	4603      	mov	r3, r0
 800475c:	b21a      	sxth	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		outData.current        = (abs(adc.value(PS) - adc.offset_I_S)) * 100 / 21;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2101      	movs	r1, #1
 800476a:	4618      	mov	r0, r3
 800476c:	f7fd fbeb 	bl	8001f46 <_ZN4ADC_5valueEh>
 8004770:	4603      	mov	r3, r0
 8004772:	461a      	mov	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	bfb8      	it	lt
 8004782:	425b      	neglt	r3, r3
 8004784:	2264      	movs	r2, #100	; 0x64
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	4aa5      	ldr	r2, [pc, #660]	; (8004a20 <_ZN7ServiceI7In_data8Out_dataEclEv+0x32c>)
 800478c:	fb82 1203 	smull	r1, r2, r2, r3
 8004790:	1092      	asrs	r2, r2, #2
 8004792:	17db      	asrs	r3, r3, #31
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	b29a      	uxth	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		outData.current_A      = adc.current();
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fd fc04 	bl	8001fb0 <_ZN4ADC_7currentEv>
 80047a8:	4603      	mov	r3, r0
 80047aa:	461a      	mov	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		new_hv = (adc.value_HV() * 350 / 4095 * 45) / 10;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fd fc07 	bl	8001fca <_ZN4ADC_8value_HVEv>
 80047bc:	4603      	mov	r3, r0
 80047be:	461a      	mov	r2, r3
 80047c0:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80047c4:	fb03 f302 	mul.w	r3, r3, r2
 80047c8:	4a96      	ldr	r2, [pc, #600]	; (8004a24 <_ZN7ServiceI7In_data8Out_dataEclEv+0x330>)
 80047ca:	fb82 1203 	smull	r1, r2, r2, r3
 80047ce:	441a      	add	r2, r3
 80047d0:	12d2      	asrs	r2, r2, #11
 80047d2:	17db      	asrs	r3, r3, #31
 80047d4:	1ad2      	subs	r2, r2, r3
 80047d6:	4613      	mov	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4413      	add	r3, r2
 80047dc:	011a      	lsls	r2, r3, #4
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	4a91      	ldr	r2, [pc, #580]	; (8004a28 <_ZN7ServiceI7In_data8Out_dataEclEv+0x334>)
 80047e2:	fb82 1203 	smull	r1, r2, r2, r3
 80047e6:	1092      	asrs	r2, r2, #2
 80047e8:	17db      	asrs	r3, r3, #31
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	b21a      	sxth	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		if(measure_timer.done()) {
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3338      	adds	r3, #56	; 0x38
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fc fe51 	bl	80014a0 <_ZN5Timer4doneEv>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d062      	beq.n	80048ca <_ZN7ServiceI7In_data8Out_dataEclEv+0x1d6>
			measure_timer.stop();
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3338      	adds	r3, #56	; 0x38
 8004808:	4618      	mov	r0, r3
 800480a:	f7fc fe3a 	bl	8001482 <_ZN5Timer4stopEv>
			measure_timer.start();
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3338      	adds	r3, #56	; 0x38
 8004812:	4618      	mov	r0, r3
 8004814:	f7fc fe56 	bl	80014c4 <_ZN5Timer5startEv>
			arr_new_hv[m] = new_hv;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004824:	b291      	uxth	r1, r2
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	3308      	adds	r3, #8
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	4413      	add	r3, r2
 800482e:	460a      	mov	r2, r1
 8004830:	809a      	strh	r2, [r3, #4]
			if (m < (qty_measure - 1)) m++;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004838:	2b06      	cmp	r3, #6
 800483a:	d808      	bhi.n	800484e <_ZN7ServiceI7In_data8Out_dataEclEv+0x15a>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004842:	3301      	adds	r3, #1
 8004844:	b2da      	uxtb	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800484c:	e003      	b.n	8004856 <_ZN7ServiceI7In_data8Out_dataEclEv+0x162>
			else m = 0;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			HV_avarage = 0;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	84da      	strh	r2, [r3, #38]	; 0x26
			for (auto i = 0; i < qty_measure; i++) {
 800485c:	2300      	movs	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b07      	cmp	r3, #7
 8004864:	dc12      	bgt.n	800488c <_ZN7ServiceI7In_data8Out_dataEclEv+0x198>
				HV_avarage += arr_new_hv[i];
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800486c:	b29a      	uxth	r2, r3
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3308      	adds	r3, #8
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	440b      	add	r3, r1
 8004878:	889b      	ldrh	r3, [r3, #4]
 800487a:	4413      	add	r3, r2
 800487c:	b29b      	uxth	r3, r3
 800487e:	b21a      	sxth	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	84da      	strh	r2, [r3, #38]	; 0x26
			for (auto i = 0; i < qty_measure; i++) {
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3301      	adds	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	e7e9      	b.n	8004860 <_ZN7ServiceI7In_data8Out_dataEclEv+0x16c>
			HV_avarage /= qty_measure;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004892:	2b00      	cmp	r3, #0
 8004894:	da00      	bge.n	8004898 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1a4>
 8004896:	3307      	adds	r3, #7
 8004898:	10db      	asrs	r3, r3, #3
 800489a:	b21a      	sxth	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	84da      	strh	r2, [r3, #38]	; 0x26
			outData.high_voltage  += (HV_avarage - outData.high_voltage) * 10 / 40;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80048ac:	4619      	mov	r1, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80048b4:	1acb      	subs	r3, r1, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	da00      	bge.n	80048bc <_ZN7ServiceI7In_data8Out_dataEclEv+0x1c8>
 80048ba:	3303      	adds	r3, #3
 80048bc:	109b      	asrs	r3, r3, #2
 80048be:	b29b      	uxth	r3, r3
 80048c0:	4413      	add	r3, r2
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
		kolhoz ^= timer.event();
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3328      	adds	r3, #40	; 0x28
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fc fdbd 	bl	800144e <_ZN5Timer5eventEv>
 80048d4:	4603      	mov	r3, r0
 80048d6:	461a      	mov	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80048de:	4053      	eors	r3, r2
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bf14      	ite	ne
 80048e6:	2301      	movne	r3, #1
 80048e8:	2300      	moveq	r3, #0
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
		if (event or kolhoz) {
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d105      	bne.n	8004908 <_ZN7ServiceI7In_data8Out_dataEclEv+0x214>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 80d6 	beq.w	8004ab4 <_ZN7ServiceI7In_data8Out_dataEclEv+0x3c0>
			if(uart.buffer[0] == 4 or kolhoz) {
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	3304      	adds	r3, #4
 800490e:	2100      	movs	r1, #0
 8004910:	4618      	mov	r0, r3
 8004912:	f000 f94d 	bl	8004bb0 <_ZN10Net_bufferILh26EEixEi>
 8004916:	4603      	mov	r3, r0
 8004918:	2b04      	cmp	r3, #4
 800491a:	d004      	beq.n	8004926 <_ZN7ServiceI7In_data8Out_dataEclEv+0x232>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <_ZN7ServiceI7In_data8Out_dataEclEv+0x236>
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <_ZN7ServiceI7In_data8Out_dataEclEv+0x238>
 800492a:	2300      	movs	r3, #0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d07d      	beq.n	8004a2c <_ZN7ServiceI7In_data8Out_dataEclEv+0x338>
				uart.buffer.clear();
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	3304      	adds	r3, #4
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f949 	bl	8004bce <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << outData.voltage_board
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	1d1a      	adds	r2, r3, #4
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f000 f94e 	bl	8004bec <_ZN10Net_bufferILh26EElsEt>
 8004950:	4602      	mov	r2, r0
						    << outData.pressure
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004958:	4619      	mov	r1, r3
 800495a:	4610      	mov	r0, r2
 800495c:	f000 f946 	bl	8004bec <_ZN10Net_bufferILh26EElsEt>
 8004960:	4602      	mov	r2, r0
							<< outData.PWM
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	; 0x66
 8004968:	4619      	mov	r1, r3
 800496a:	4610      	mov	r0, r2
 800496c:	f000 f95c 	bl	8004c28 <_ZN10Net_bufferILh26EElsEs>
 8004970:	4602      	mov	r2, r0
							<< outData.convertor_temp
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8004978:	4619      	mov	r1, r3
 800497a:	4610      	mov	r0, r2
 800497c:	f000 f954 	bl	8004c28 <_ZN10Net_bufferILh26EElsEs>
 8004980:	4602      	mov	r2, r0
							<< outData.current
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004988:	4619      	mov	r1, r3
 800498a:	4610      	mov	r0, r2
 800498c:	f000 f92e 	bl	8004bec <_ZN10Net_bufferILh26EElsEt>
 8004990:	4602      	mov	r2, r0
							<< outData.current_A
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f000 f926 	bl	8004bec <_ZN10Net_bufferILh26EElsEt>
 80049a0:	4602      	mov	r2, r0
							<< outData.current_C
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f000 f91e 	bl	8004bec <_ZN10Net_bufferILh26EElsEt>
 80049b0:	4602      	mov	r2, r0
							<< outData.high_voltage
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f000 f916 	bl	8004bec <_ZN10Net_bufferILh26EElsEt>
 80049c0:	4602      	mov	r2, r0
							<< outData.max_current
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f000 f90e 	bl	8004bec <_ZN10Net_bufferILh26EElsEt>
 80049d0:	4602      	mov	r2, r0
							<< outData.max_current_A
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f000 f906 	bl	8004bec <_ZN10Net_bufferILh26EElsEt>
 80049e0:	4602      	mov	r2, r0
							<< outData.max_current_C
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f000 f8fe 	bl	8004bec <_ZN10Net_bufferILh26EElsEt>
 80049f0:	4602      	mov	r2, r0
							<< outData.U_phase
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80049f8:	4619      	mov	r1, r3
 80049fa:	4610      	mov	r0, r2
 80049fc:	f000 f8f6 	bl	8004bec <_ZN10Net_bufferILh26EElsEt>
 8004a00:	4602      	mov	r2, r0
							<< arOutData[12];
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f000 f8ee 	bl	8004bec <_ZN10Net_bufferILh26EElsEt>
 8004a10:	e02f      	b.n	8004a72 <_ZN7ServiceI7In_data8Out_dataEclEv+0x37e>
 8004a12:	bf00      	nop
 8004a14:	3a534067 	.word	0x3a534067
 8004a18:	42c80000 	.word	0x42c80000
 8004a1c:	40c00000 	.word	0x40c00000
 8004a20:	30c30c31 	.word	0x30c30c31
 8004a24:	80080081 	.word	0x80080081
 8004a28:	66666667 	.word	0x66666667
			} else if(uart.buffer[0] == '+') {
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	3304      	adds	r3, #4
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 f8bb 	bl	8004bb0 <_ZN10Net_bufferILh26EEixEi>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b2b      	cmp	r3, #43	; 0x2b
 8004a3e:	bf0c      	ite	eq
 8004a40:	2301      	moveq	r3, #1
 8004a42:	2300      	movne	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d013      	beq.n	8004a72 <_ZN7ServiceI7In_data8Out_dataEclEv+0x37e>
				uart.buffer.clear();
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 f8bc 	bl	8004bce <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << 'O';
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	214f      	movs	r1, #79	; 0x4f
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 f900 	bl	8004c64 <_ZN10Net_bufferILh26EElsEc>
				uart.buffer << 'K';
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	214b      	movs	r1, #75	; 0x4b
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 f8f9 	bl	8004c64 <_ZN10Net_bufferILh26EElsEc>
			event = false;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			kolhoz = false;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			if(uart.buffer.size())
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 f908 	bl	8004c9e <_ZN10Net_bufferILh26EE4sizeEv>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	bf14      	ite	ne
 8004a94:	2301      	movne	r3, #1
 8004a96:	2300      	moveq	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d005      	beq.n	8004aaa <_ZN7ServiceI7In_data8Out_dataEclEv+0x3b6>
				uart.transmit();
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 f90a 	bl	8004cbc <_ZN5UART_ILj26EE8transmitEv>
	}
 8004aa8:	e004      	b.n	8004ab4 <_ZN7ServiceI7In_data8Out_dataEclEv+0x3c0>
				uart.receive();
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f926 	bl	8004d00 <_ZN5UART_ILj26EE7receiveEv>
	}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd90      	pop	{r4, r7, pc}

08004abc <_ZN5UART_ILj26EEC1ER3Pin>:

public:

	Pin& led_red;

	UART_(Pin& led_red) : led_red{led_red}{}
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 f931 	bl	8004d38 <_ZN10Net_bufferILh26EEC1Ev>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R3NTCR5UART_ILj26EER9InterruptSB_>:
	Service (
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
      , arInData { }, arOutData { }, arInDataMin { }, arInDataMax {}
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	60da      	str	r2, [r3, #12]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	611a      	str	r2, [r3, #16]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3314      	adds	r3, #20
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	605a      	str	r2, [r3, #4]
 8004b16:	609a      	str	r2, [r3, #8]
 8004b18:	60da      	str	r2, [r3, #12]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	84da      	strh	r2, [r3, #38]	; 0x26
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3328      	adds	r3, #40	; 0x28
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fc fc2b 	bl	8001388 <_ZN5TimerC1Ev>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3338      	adds	r3, #56	; 0x38
 8004b36:	2119      	movs	r1, #25
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fc fc3d 	bl	80013b8 <_ZN5TimerC1Em>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3350      	adds	r3, #80	; 0x50
 8004b6a:	68f9      	ldr	r1, [r7, #12]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 f8ef 	bl	8004d50 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3358      	adds	r3, #88	; 0x58
 8004b76:	68f9      	ldr	r1, [r7, #12]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 f907 	bl	8004d8c <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3362      	adds	r3, #98	; 0x62
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	605a      	str	r2, [r3, #4]
 8004b88:	609a      	str	r2, [r3, #8]
 8004b8a:	60da      	str	r2, [r3, #12]
 8004b8c:	611a      	str	r2, [r3, #16]
 8004b8e:	615a      	str	r2, [r3, #20]
 8004b90:	831a      	strh	r2, [r3, #24]
		uart.receive();
 8004b92:	6838      	ldr	r0, [r7, #0]
 8004b94:	f000 f8b4 	bl	8004d00 <_ZN5UART_ILj26EE7receiveEv>
		timer.start(500);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3328      	adds	r3, #40	; 0x28
 8004b9c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fc fc41 	bl	8001428 <_ZN5Timer5startEm>
	}
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <_ZN10Net_bufferILh26EEixEi>:
    Net_buffer& operator>> (uint16_t&);

    Net_buffer& operator<< (char*);


    uint8_t operator[](int n){return buffer[n];}
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	3302      	adds	r3, #2
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr

08004bce <_ZN10Net_bufferILh26EE5clearEv>:
    void clear() { begin_i = 0; end_i = 0; }
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	705a      	strb	r2, [r3, #1]
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr

08004bec <_ZN10Net_bufferILh26EElsEt>:
        end_i++;
   }
}

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint16_t v)
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 8004bf8:	f107 030e 	add.w	r3, r7, #14
 8004bfc:	f107 020f 	add.w	r2, r7, #15
 8004c00:	8879      	ldrh	r1, [r7, #2]
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f8e0 	bl	8004dc8 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 8004c08:	7bbb      	ldrb	r3, [r7, #14]
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f8f0 	bl	8004df2 <_ZN10Net_bufferILh26EElsEh>
 8004c12:	4602      	mov	r2, r0
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	4619      	mov	r1, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	f000 f8ea 	bl	8004df2 <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8004c1e:	687b      	ldr	r3, [r7, #4]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <_ZN10Net_bufferILh26EElsEs>:

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (int16_t v)
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 8004c34:	8879      	ldrh	r1, [r7, #2]
 8004c36:	f107 030e 	add.w	r3, r7, #14
 8004c3a:	f107 020f 	add.w	r2, r7, #15
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f8c2 	bl	8004dc8 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 8004c44:	7bbb      	ldrb	r3, [r7, #14]
 8004c46:	4619      	mov	r1, r3
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f8d2 	bl	8004df2 <_ZN10Net_bufferILh26EElsEh>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	4619      	mov	r1, r3
 8004c54:	4610      	mov	r0, r2
 8004c56:	f000 f8cc 	bl	8004df2 <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8004c5a:	687b      	ldr	r3, [r7, #4]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <_ZN10Net_bufferILh26EElsEc>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (char v)
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	785b      	ldrb	r3, [r3, #1]
 8004c74:	2b19      	cmp	r3, #25
 8004c76:	d80c      	bhi.n	8004c92 <_ZN10Net_bufferILh26EElsEc+0x2e>
      buffer[end_i] = v;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	785b      	ldrb	r3, [r3, #1]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4413      	add	r3, r2
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	709a      	strb	r2, [r3, #2]
      end_i++;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	785b      	ldrb	r3, [r3, #1]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	705a      	strb	r2, [r3, #1]
    return *this;
 8004c92:	687b      	ldr	r3, [r7, #4]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr

08004c9e <_ZN10Net_bufferILh26EE4sizeEv>:
    uint8_t size()  { return end_i - begin_i; }
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	785a      	ldrb	r2, [r3, #1]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <_ZN5UART_ILj26EE8transmitEv>:

	Net_buffer<buffer_size> buffer;

	void transmit(){
 8004cbc:	b590      	push	{r4, r7, lr}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
//		buffer.set_size(buffer_size - DMA1_Channel3->CNDTR);
		HAL_UART_Transmit_DMA(&huart3, buffer.ptr(), buffer.size());
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 f8af 	bl	8004e2c <_ZN10Net_bufferILh26EE3ptrEv>
 8004cce:	4604      	mov	r4, r0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff ffe2 	bl	8004c9e <_ZN10Net_bufferILh26EE4sizeEv>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	4806      	ldr	r0, [pc, #24]	; (8004cfc <_ZN5UART_ILj26EE8transmitEv+0x40>)
 8004ce4:	f004 f9ec 	bl	80090c0 <HAL_UART_Transmit_DMA>
		led_red = true;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2101      	movs	r1, #1
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fd fad5 	bl	800229e <_ZN3PinaSEb>
	}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd90      	pop	{r4, r7, pc}
 8004cfc:	20000284 	.word	0x20000284

08004d00 <_ZN5UART_ILj26EE7receiveEv>:

	void receive(){
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer.ptr(), buffer_size);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f88d 	bl	8004e2c <_ZN10Net_bufferILh26EE3ptrEv>
 8004d12:	4603      	mov	r3, r0
 8004d14:	221a      	movs	r2, #26
 8004d16:	4619      	mov	r1, r3
 8004d18:	4806      	ldr	r0, [pc, #24]	; (8004d34 <_ZN5UART_ILj26EE7receiveEv+0x34>)
 8004d1a:	f004 fa3d 	bl	8009198 <HAL_UARTEx_ReceiveToIdle_DMA>
		led_red = false;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2100      	movs	r1, #0
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fd faba 	bl	800229e <_ZN3PinaSEb>
	}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000284 	.word	0x20000284

08004d38 <_ZN10Net_bufferILh26EEC1Ev>:
    Net_buffer() {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
      clear();
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff ff44 	bl	8004bce <_ZN10Net_bufferILh26EE5clearEv>
    }
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>:
		uart_interrupt(Parent &parent) :
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fc ff69 	bl	8001c34 <_ZN12InterruptingC1Ev>
 8004d62:	4a09      	ldr	r2, [pc, #36]	; (8004d88 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_+0x38>)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	605a      	str	r2, [r3, #4]
			parent.interrupt_usart.subscribe(this);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	4611      	mov	r1, r2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fc fbbb 	bl	80014f2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	0800b080 	.word	0x0800b080

08004d8c <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>:
		dma_interrupt(Parent &parent) :
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fc ff4b 	bl	8001c34 <_ZN12InterruptingC1Ev>
 8004d9e:	4a09      	ldr	r2, [pc, #36]	; (8004dc4 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_+0x38>)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	605a      	str	r2, [r3, #4]
			parent.interrupt_DMA.subscribe(this);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	4611      	mov	r1, r2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fc fb9d 	bl	80014f2 <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	0800b074 	.word	0x0800b074

08004dc8 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>:
    void to_bytes (uint16_t v, uint8_t& low, uint8_t& hi)
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	607a      	str	r2, [r7, #4]
 8004dd2:	603b      	str	r3, [r7, #0]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	817b      	strh	r3, [r7, #10]
        u.d16 = v;
 8004dd8:	897b      	ldrh	r3, [r7, #10]
 8004dda:	82bb      	strh	r3, [r7, #20]
        low = u.d8[0];
 8004ddc:	7d3a      	ldrb	r2, [r7, #20]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	701a      	strb	r2, [r3, #0]
        hi = u.d8[1];
 8004de2:	7d7a      	ldrb	r2, [r7, #21]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	701a      	strb	r2, [r3, #0]
    }
 8004de8:	bf00      	nop
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr

08004df2 <_ZN10Net_bufferILh26EElsEh>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint8_t v)
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	785b      	ldrb	r3, [r3, #1]
 8004e02:	2b19      	cmp	r3, #25
 8004e04:	d80c      	bhi.n	8004e20 <_ZN10Net_bufferILh26EElsEh+0x2e>
      buffer[end_i] = v;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	785b      	ldrb	r3, [r3, #1]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4413      	add	r3, r2
 8004e10:	78fa      	ldrb	r2, [r7, #3]
 8004e12:	709a      	strb	r2, [r3, #2]
      end_i++;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	705a      	strb	r2, [r3, #1]
    return *this;
 8004e20:	687b      	ldr	r3, [r7, #4]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr

08004e2c <_ZN10Net_bufferILh26EE3ptrEv>:
    uint8_t* ptr() {return &buffer[0];}
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3302      	adds	r3, #2
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bc80      	pop	{r7}
 8004e40:	4770      	bx	lr
	...

08004e44 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d107      	bne.n	8004e64 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d102      	bne.n	8004e64 <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 8004e5e:	4803      	ldr	r0, [pc, #12]	; (8004e6c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8004e60:	f7fc fa12 	bl	8001288 <_ZN11TickUpdaterC1Ev>
 8004e64:	bf00      	nop
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20000098 	.word	0x20000098

08004e70 <_ZN7ServiceI7In_data8Out_dataE13dma_interrupt9interruptEv>:
		void interrupt() override {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
			parent.dmaInterrupt();
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 f811 	bl	8004ea4 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>
		}
 8004e82:	bf00      	nop
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <_ZN7ServiceI7In_data8Out_dataE14uart_interrupt9interruptEv>:
		void interrupt() override {
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
			parent.uartInterrupt();
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f811 	bl	8004ebe <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>
		}
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>:
	void dmaInterrupt(){
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
		uart.receive();
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff ff25 	bl	8004d00 <_ZN5UART_ILj26EE7receiveEv>
	}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>:
	void uartInterrupt(){
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
		event = true;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		timer.stop();
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3328      	adds	r3, #40	; 0x28
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fc fad5 	bl	8001482 <_ZN5Timer4stopEv>
	}
 8004ed8:	bf00      	nop
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <_GLOBAL__sub_I_systemtick>:
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ee8:	2001      	movs	r0, #1
 8004eea:	f7ff ffab 	bl	8004e44 <_Z41__static_initialization_and_destruction_0ii>
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004ef6:	4b15      	ldr	r3, [pc, #84]	; (8004f4c <HAL_MspInit+0x5c>)
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	4a14      	ldr	r2, [pc, #80]	; (8004f4c <HAL_MspInit+0x5c>)
 8004efc:	f043 0301 	orr.w	r3, r3, #1
 8004f00:	6193      	str	r3, [r2, #24]
 8004f02:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <HAL_MspInit+0x5c>)
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f0e:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <HAL_MspInit+0x5c>)
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	4a0e      	ldr	r2, [pc, #56]	; (8004f4c <HAL_MspInit+0x5c>)
 8004f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f18:	61d3      	str	r3, [r2, #28]
 8004f1a:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <HAL_MspInit+0x5c>)
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f22:	607b      	str	r3, [r7, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004f26:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <HAL_MspInit+0x60>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	4a04      	ldr	r2, [pc, #16]	; (8004f50 <HAL_MspInit+0x60>)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f42:	bf00      	nop
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	40010000 	.word	0x40010000

08004f54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08a      	sub	sp, #40	; 0x28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f5c:	f107 0318 	add.w	r3, r7, #24
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	605a      	str	r2, [r3, #4]
 8004f66:	609a      	str	r2, [r3, #8]
 8004f68:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a44      	ldr	r2, [pc, #272]	; (8005080 <HAL_ADC_MspInit+0x12c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d152      	bne.n	800501a <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004f74:	4b43      	ldr	r3, [pc, #268]	; (8005084 <HAL_ADC_MspInit+0x130>)
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	4a42      	ldr	r2, [pc, #264]	; (8005084 <HAL_ADC_MspInit+0x130>)
 8004f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f7e:	6193      	str	r3, [r2, #24]
 8004f80:	4b40      	ldr	r3, [pc, #256]	; (8005084 <HAL_ADC_MspInit+0x130>)
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f8c:	4b3d      	ldr	r3, [pc, #244]	; (8005084 <HAL_ADC_MspInit+0x130>)
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	4a3c      	ldr	r2, [pc, #240]	; (8005084 <HAL_ADC_MspInit+0x130>)
 8004f92:	f043 0304 	orr.w	r3, r3, #4
 8004f96:	6193      	str	r3, [r2, #24]
 8004f98:	4b3a      	ldr	r3, [pc, #232]	; (8005084 <HAL_ADC_MspInit+0x130>)
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	613b      	str	r3, [r7, #16]
 8004fa2:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 8004fa4:	238b      	movs	r3, #139	; 0x8b
 8004fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fac:	f107 0318 	add.w	r3, r7, #24
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4835      	ldr	r0, [pc, #212]	; (8005088 <HAL_ADC_MspInit+0x134>)
 8004fb4:	f002 f8c2 	bl	800713c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004fb8:	4b34      	ldr	r3, [pc, #208]	; (800508c <HAL_ADC_MspInit+0x138>)
 8004fba:	4a35      	ldr	r2, [pc, #212]	; (8005090 <HAL_ADC_MspInit+0x13c>)
 8004fbc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fbe:	4b33      	ldr	r3, [pc, #204]	; (800508c <HAL_ADC_MspInit+0x138>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fc4:	4b31      	ldr	r3, [pc, #196]	; (800508c <HAL_ADC_MspInit+0x138>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004fca:	4b30      	ldr	r3, [pc, #192]	; (800508c <HAL_ADC_MspInit+0x138>)
 8004fcc:	2280      	movs	r2, #128	; 0x80
 8004fce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004fd0:	4b2e      	ldr	r3, [pc, #184]	; (800508c <HAL_ADC_MspInit+0x138>)
 8004fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fd6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004fd8:	4b2c      	ldr	r3, [pc, #176]	; (800508c <HAL_ADC_MspInit+0x138>)
 8004fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fde:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004fe0:	4b2a      	ldr	r3, [pc, #168]	; (800508c <HAL_ADC_MspInit+0x138>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004fe6:	4b29      	ldr	r3, [pc, #164]	; (800508c <HAL_ADC_MspInit+0x138>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004fec:	4827      	ldr	r0, [pc, #156]	; (800508c <HAL_ADC_MspInit+0x138>)
 8004fee:	f001 fc23 	bl	8006838 <HAL_DMA_Init>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8004ff8:	f7ff fad2 	bl	80045a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a23      	ldr	r2, [pc, #140]	; (800508c <HAL_ADC_MspInit+0x138>)
 8005000:	621a      	str	r2, [r3, #32]
 8005002:	4a22      	ldr	r2, [pc, #136]	; (800508c <HAL_ADC_MspInit+0x138>)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8005008:	2200      	movs	r2, #0
 800500a:	2101      	movs	r1, #1
 800500c:	2012      	movs	r0, #18
 800500e:	f001 fbdc 	bl	80067ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005012:	2012      	movs	r0, #18
 8005014:	f001 fbf5 	bl	8006802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005018:	e02e      	b.n	8005078 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a1d      	ldr	r2, [pc, #116]	; (8005094 <HAL_ADC_MspInit+0x140>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d129      	bne.n	8005078 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005024:	4b17      	ldr	r3, [pc, #92]	; (8005084 <HAL_ADC_MspInit+0x130>)
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	4a16      	ldr	r2, [pc, #88]	; (8005084 <HAL_ADC_MspInit+0x130>)
 800502a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800502e:	6193      	str	r3, [r2, #24]
 8005030:	4b14      	ldr	r3, [pc, #80]	; (8005084 <HAL_ADC_MspInit+0x130>)
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800503c:	4b11      	ldr	r3, [pc, #68]	; (8005084 <HAL_ADC_MspInit+0x130>)
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	4a10      	ldr	r2, [pc, #64]	; (8005084 <HAL_ADC_MspInit+0x130>)
 8005042:	f043 0304 	orr.w	r3, r3, #4
 8005046:	6193      	str	r3, [r2, #24]
 8005048:	4b0e      	ldr	r3, [pc, #56]	; (8005084 <HAL_ADC_MspInit+0x130>)
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	60bb      	str	r3, [r7, #8]
 8005052:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005054:	2370      	movs	r3, #112	; 0x70
 8005056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005058:	2303      	movs	r3, #3
 800505a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800505c:	f107 0318 	add.w	r3, r7, #24
 8005060:	4619      	mov	r1, r3
 8005062:	4809      	ldr	r0, [pc, #36]	; (8005088 <HAL_ADC_MspInit+0x134>)
 8005064:	f002 f86a 	bl	800713c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8005068:	2200      	movs	r2, #0
 800506a:	2101      	movs	r1, #1
 800506c:	2012      	movs	r0, #18
 800506e:	f001 fbac 	bl	80067ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005072:	2012      	movs	r0, #18
 8005074:	f001 fbc5 	bl	8006802 <HAL_NVIC_EnableIRQ>
}
 8005078:	bf00      	nop
 800507a:	3728      	adds	r7, #40	; 0x28
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40012400 	.word	0x40012400
 8005084:	40021000 	.word	0x40021000
 8005088:	40010800 	.word	0x40010800
 800508c:	20000168 	.word	0x20000168
 8005090:	40020008 	.word	0x40020008
 8005094:	40012800 	.word	0x40012800

08005098 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a12      	ldr	r2, [pc, #72]	; (80050f0 <HAL_TIM_PWM_MspInit+0x58>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d10c      	bne.n	80050c4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <HAL_TIM_PWM_MspInit+0x5c>)
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <HAL_TIM_PWM_MspInit+0x5c>)
 80050b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050b4:	6193      	str	r3, [r2, #24]
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <HAL_TIM_PWM_MspInit+0x5c>)
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80050c2:	e010      	b.n	80050e6 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a0b      	ldr	r2, [pc, #44]	; (80050f8 <HAL_TIM_PWM_MspInit+0x60>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d10b      	bne.n	80050e6 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80050ce:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <HAL_TIM_PWM_MspInit+0x5c>)
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	4a08      	ldr	r2, [pc, #32]	; (80050f4 <HAL_TIM_PWM_MspInit+0x5c>)
 80050d4:	f043 0304 	orr.w	r3, r3, #4
 80050d8:	61d3      	str	r3, [r2, #28]
 80050da:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <HAL_TIM_PWM_MspInit+0x5c>)
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	60bb      	str	r3, [r7, #8]
 80050e4:	68bb      	ldr	r3, [r7, #8]
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr
 80050f0:	40012c00 	.word	0x40012c00
 80050f4:	40021000 	.word	0x40021000
 80050f8:	40000800 	.word	0x40000800

080050fc <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a0d      	ldr	r2, [pc, #52]	; (8005140 <HAL_TIM_OC_MspInit+0x44>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d113      	bne.n	8005136 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800510e:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <HAL_TIM_OC_MspInit+0x48>)
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	4a0c      	ldr	r2, [pc, #48]	; (8005144 <HAL_TIM_OC_MspInit+0x48>)
 8005114:	f043 0302 	orr.w	r3, r3, #2
 8005118:	61d3      	str	r3, [r2, #28]
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <HAL_TIM_OC_MspInit+0x48>)
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005126:	2200      	movs	r2, #0
 8005128:	2100      	movs	r1, #0
 800512a:	201d      	movs	r0, #29
 800512c:	f001 fb4d 	bl	80067ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005130:	201d      	movs	r0, #29
 8005132:	f001 fb66 	bl	8006802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40000400 	.word	0x40000400
 8005144:	40021000 	.word	0x40021000

08005148 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005150:	f107 0318 	add.w	r3, r7, #24
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	609a      	str	r2, [r3, #8]
 800515c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2b      	ldr	r2, [pc, #172]	; (8005210 <HAL_TIM_MspPostInit+0xc8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d132      	bne.n	80051ce <HAL_TIM_MspPostInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005168:	4b2a      	ldr	r3, [pc, #168]	; (8005214 <HAL_TIM_MspPostInit+0xcc>)
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	4a29      	ldr	r2, [pc, #164]	; (8005214 <HAL_TIM_MspPostInit+0xcc>)
 800516e:	f043 0308 	orr.w	r3, r3, #8
 8005172:	6193      	str	r3, [r2, #24]
 8005174:	4b27      	ldr	r3, [pc, #156]	; (8005214 <HAL_TIM_MspPostInit+0xcc>)
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	f003 0308 	and.w	r3, r3, #8
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005180:	4b24      	ldr	r3, [pc, #144]	; (8005214 <HAL_TIM_MspPostInit+0xcc>)
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	4a23      	ldr	r2, [pc, #140]	; (8005214 <HAL_TIM_MspPostInit+0xcc>)
 8005186:	f043 0304 	orr.w	r3, r3, #4
 800518a:	6193      	str	r3, [r2, #24]
 800518c:	4b21      	ldr	r3, [pc, #132]	; (8005214 <HAL_TIM_MspPostInit+0xcc>)
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	693b      	ldr	r3, [r7, #16]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005198:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800519c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519e:	2302      	movs	r3, #2
 80051a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a2:	2302      	movs	r3, #2
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051a6:	f107 0318 	add.w	r3, r7, #24
 80051aa:	4619      	mov	r1, r3
 80051ac:	481a      	ldr	r0, [pc, #104]	; (8005218 <HAL_TIM_MspPostInit+0xd0>)
 80051ae:	f001 ffc5 	bl	800713c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80051b2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80051b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b8:	2302      	movs	r3, #2
 80051ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051bc:	2302      	movs	r3, #2
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051c0:	f107 0318 	add.w	r3, r7, #24
 80051c4:	4619      	mov	r1, r3
 80051c6:	4815      	ldr	r0, [pc, #84]	; (800521c <HAL_TIM_MspPostInit+0xd4>)
 80051c8:	f001 ffb8 	bl	800713c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80051cc:	e01c      	b.n	8005208 <HAL_TIM_MspPostInit+0xc0>
  else if(htim->Instance==TIM4)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a13      	ldr	r2, [pc, #76]	; (8005220 <HAL_TIM_MspPostInit+0xd8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d117      	bne.n	8005208 <HAL_TIM_MspPostInit+0xc0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051d8:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <HAL_TIM_MspPostInit+0xcc>)
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	4a0d      	ldr	r2, [pc, #52]	; (8005214 <HAL_TIM_MspPostInit+0xcc>)
 80051de:	f043 0308 	orr.w	r3, r3, #8
 80051e2:	6193      	str	r3, [r2, #24]
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_TIM_MspPostInit+0xcc>)
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	f003 0308 	and.w	r3, r3, #8
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80051f0:	2340      	movs	r3, #64	; 0x40
 80051f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f4:	2302      	movs	r3, #2
 80051f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051f8:	2302      	movs	r3, #2
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051fc:	f107 0318 	add.w	r3, r7, #24
 8005200:	4619      	mov	r1, r3
 8005202:	4805      	ldr	r0, [pc, #20]	; (8005218 <HAL_TIM_MspPostInit+0xd0>)
 8005204:	f001 ff9a 	bl	800713c <HAL_GPIO_Init>
}
 8005208:	bf00      	nop
 800520a:	3728      	adds	r7, #40	; 0x28
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40021000 	.word	0x40021000
 8005218:	40010c00 	.word	0x40010c00
 800521c:	40010800 	.word	0x40010800
 8005220:	40000800 	.word	0x40000800

08005224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b08a      	sub	sp, #40	; 0x28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800522c:	f107 0314 	add.w	r3, r7, #20
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	605a      	str	r2, [r3, #4]
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a50      	ldr	r2, [pc, #320]	; (8005380 <HAL_UART_MspInit+0x15c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	f040 8099 	bne.w	8005378 <HAL_UART_MspInit+0x154>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005246:	4b4f      	ldr	r3, [pc, #316]	; (8005384 <HAL_UART_MspInit+0x160>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	4a4e      	ldr	r2, [pc, #312]	; (8005384 <HAL_UART_MspInit+0x160>)
 800524c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005250:	61d3      	str	r3, [r2, #28]
 8005252:	4b4c      	ldr	r3, [pc, #304]	; (8005384 <HAL_UART_MspInit+0x160>)
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800525e:	4b49      	ldr	r3, [pc, #292]	; (8005384 <HAL_UART_MspInit+0x160>)
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	4a48      	ldr	r2, [pc, #288]	; (8005384 <HAL_UART_MspInit+0x160>)
 8005264:	f043 0310 	orr.w	r3, r3, #16
 8005268:	6193      	str	r3, [r2, #24]
 800526a:	4b46      	ldr	r3, [pc, #280]	; (8005384 <HAL_UART_MspInit+0x160>)
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f003 0310 	and.w	r3, r3, #16
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800527a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527c:	2302      	movs	r3, #2
 800527e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005280:	2303      	movs	r3, #3
 8005282:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005284:	f107 0314 	add.w	r3, r7, #20
 8005288:	4619      	mov	r1, r3
 800528a:	483f      	ldr	r0, [pc, #252]	; (8005388 <HAL_UART_MspInit+0x164>)
 800528c:	f001 ff56 	bl	800713c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005290:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005296:	2300      	movs	r3, #0
 8005298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529a:	2300      	movs	r3, #0
 800529c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800529e:	f107 0314 	add.w	r3, r7, #20
 80052a2:	4619      	mov	r1, r3
 80052a4:	4838      	ldr	r0, [pc, #224]	; (8005388 <HAL_UART_MspInit+0x164>)
 80052a6:	f001 ff49 	bl	800713c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80052aa:	4b38      	ldr	r3, [pc, #224]	; (800538c <HAL_UART_MspInit+0x168>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	f043 0310 	orr.w	r3, r3, #16
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
 80052c8:	4a30      	ldr	r2, [pc, #192]	; (800538c <HAL_UART_MspInit+0x168>)
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80052ce:	4b30      	ldr	r3, [pc, #192]	; (8005390 <HAL_UART_MspInit+0x16c>)
 80052d0:	4a30      	ldr	r2, [pc, #192]	; (8005394 <HAL_UART_MspInit+0x170>)
 80052d2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80052d4:	4b2e      	ldr	r3, [pc, #184]	; (8005390 <HAL_UART_MspInit+0x16c>)
 80052d6:	2210      	movs	r2, #16
 80052d8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052da:	4b2d      	ldr	r3, [pc, #180]	; (8005390 <HAL_UART_MspInit+0x16c>)
 80052dc:	2200      	movs	r2, #0
 80052de:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80052e0:	4b2b      	ldr	r3, [pc, #172]	; (8005390 <HAL_UART_MspInit+0x16c>)
 80052e2:	2280      	movs	r2, #128	; 0x80
 80052e4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052e6:	4b2a      	ldr	r3, [pc, #168]	; (8005390 <HAL_UART_MspInit+0x16c>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052ec:	4b28      	ldr	r3, [pc, #160]	; (8005390 <HAL_UART_MspInit+0x16c>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80052f2:	4b27      	ldr	r3, [pc, #156]	; (8005390 <HAL_UART_MspInit+0x16c>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80052f8:	4b25      	ldr	r3, [pc, #148]	; (8005390 <HAL_UART_MspInit+0x16c>)
 80052fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005300:	4823      	ldr	r0, [pc, #140]	; (8005390 <HAL_UART_MspInit+0x16c>)
 8005302:	f001 fa99 	bl	8006838 <HAL_DMA_Init>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 800530c:	f7ff f948 	bl	80045a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a1f      	ldr	r2, [pc, #124]	; (8005390 <HAL_UART_MspInit+0x16c>)
 8005314:	635a      	str	r2, [r3, #52]	; 0x34
 8005316:	4a1e      	ldr	r2, [pc, #120]	; (8005390 <HAL_UART_MspInit+0x16c>)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800531c:	4b1e      	ldr	r3, [pc, #120]	; (8005398 <HAL_UART_MspInit+0x174>)
 800531e:	4a1f      	ldr	r2, [pc, #124]	; (800539c <HAL_UART_MspInit+0x178>)
 8005320:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005322:	4b1d      	ldr	r3, [pc, #116]	; (8005398 <HAL_UART_MspInit+0x174>)
 8005324:	2200      	movs	r2, #0
 8005326:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005328:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <HAL_UART_MspInit+0x174>)
 800532a:	2200      	movs	r2, #0
 800532c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800532e:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <HAL_UART_MspInit+0x174>)
 8005330:	2280      	movs	r2, #128	; 0x80
 8005332:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005334:	4b18      	ldr	r3, [pc, #96]	; (8005398 <HAL_UART_MspInit+0x174>)
 8005336:	2200      	movs	r2, #0
 8005338:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800533a:	4b17      	ldr	r3, [pc, #92]	; (8005398 <HAL_UART_MspInit+0x174>)
 800533c:	2200      	movs	r2, #0
 800533e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005340:	4b15      	ldr	r3, [pc, #84]	; (8005398 <HAL_UART_MspInit+0x174>)
 8005342:	2200      	movs	r2, #0
 8005344:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005346:	4b14      	ldr	r3, [pc, #80]	; (8005398 <HAL_UART_MspInit+0x174>)
 8005348:	2200      	movs	r2, #0
 800534a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800534c:	4812      	ldr	r0, [pc, #72]	; (8005398 <HAL_UART_MspInit+0x174>)
 800534e:	f001 fa73 	bl	8006838 <HAL_DMA_Init>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8005358:	f7ff f922 	bl	80045a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a0e      	ldr	r2, [pc, #56]	; (8005398 <HAL_UART_MspInit+0x174>)
 8005360:	639a      	str	r2, [r3, #56]	; 0x38
 8005362:	4a0d      	ldr	r2, [pc, #52]	; (8005398 <HAL_UART_MspInit+0x174>)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8005368:	2200      	movs	r2, #0
 800536a:	2102      	movs	r1, #2
 800536c:	2027      	movs	r0, #39	; 0x27
 800536e:	f001 fa2c 	bl	80067ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005372:	2027      	movs	r0, #39	; 0x27
 8005374:	f001 fa45 	bl	8006802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005378:	bf00      	nop
 800537a:	3728      	adds	r7, #40	; 0x28
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40004800 	.word	0x40004800
 8005384:	40021000 	.word	0x40021000
 8005388:	40011000 	.word	0x40011000
 800538c:	40010000 	.word	0x40010000
 8005390:	200002c8 	.word	0x200002c8
 8005394:	4002001c 	.word	0x4002001c
 8005398:	2000030c 	.word	0x2000030c
 800539c:	40020030 	.word	0x40020030

080053a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80053a4:	e7fe      	b.n	80053a4 <NMI_Handler+0x4>
	...

080053a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	TIM1->CCR1 = 0;
 80053ac:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <HardFault_Handler+0x70>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80053b2:	4b19      	ldr	r3, [pc, #100]	; (8005418 <HardFault_Handler+0x70>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80053b8:	4b17      	ldr	r3, [pc, #92]	; (8005418 <HardFault_Handler+0x70>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80053be:	2100      	movs	r1, #0
 80053c0:	4816      	ldr	r0, [pc, #88]	; (800541c <HardFault_Handler+0x74>)
 80053c2:	f002 ff37 	bl	8008234 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80053c6:	2100      	movs	r1, #0
 80053c8:	4814      	ldr	r0, [pc, #80]	; (800541c <HardFault_Handler+0x74>)
 80053ca:	f003 fcdb 	bl	8008d84 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80053ce:	2104      	movs	r1, #4
 80053d0:	4812      	ldr	r0, [pc, #72]	; (800541c <HardFault_Handler+0x74>)
 80053d2:	f002 ff2f 	bl	8008234 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80053d6:	2104      	movs	r1, #4
 80053d8:	4810      	ldr	r0, [pc, #64]	; (800541c <HardFault_Handler+0x74>)
 80053da:	f003 fcd3 	bl	8008d84 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80053de:	2108      	movs	r1, #8
 80053e0:	480e      	ldr	r0, [pc, #56]	; (800541c <HardFault_Handler+0x74>)
 80053e2:	f002 ff27 	bl	8008234 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 80053e6:	2108      	movs	r1, #8
 80053e8:	480c      	ldr	r0, [pc, #48]	; (800541c <HardFault_Handler+0x74>)
 80053ea:	f003 fccb 	bl	8008d84 <HAL_TIMEx_PWMN_Stop>

	HAL_TIM_Base_Stop_IT(&htim3);
 80053ee:	480c      	ldr	r0, [pc, #48]	; (8005420 <HardFault_Handler+0x78>)
 80053f0:	f002 fd9a 	bl	8007f28 <HAL_TIM_Base_Stop_IT>

	TIM4->CCR1 = 0;
 80053f4:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <HardFault_Handler+0x7c>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80053fa:	2100      	movs	r1, #0
 80053fc:	480a      	ldr	r0, [pc, #40]	; (8005428 <HardFault_Handler+0x80>)
 80053fe:	f002 ff19 	bl	8008234 <HAL_TIM_PWM_Stop>

	HAL_GPIO_WritePin(GPIOC, LED_RED_Pin, GPIO_PIN_SET);
 8005402:	2201      	movs	r2, #1
 8005404:	2101      	movs	r1, #1
 8005406:	4809      	ldr	r0, [pc, #36]	; (800542c <HardFault_Handler+0x84>)
 8005408:	f002 f843 	bl	8007492 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin, GPIO_PIN_SET);
 800540c:	2201      	movs	r2, #1
 800540e:	2120      	movs	r1, #32
 8005410:	4807      	ldr	r0, [pc, #28]	; (8005430 <HardFault_Handler+0x88>)
 8005412:	f002 f83e 	bl	8007492 <HAL_GPIO_WritePin>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005416:	e7fe      	b.n	8005416 <HardFault_Handler+0x6e>
 8005418:	40012c00 	.word	0x40012c00
 800541c:	200001ac 	.word	0x200001ac
 8005420:	200001f4 	.word	0x200001f4
 8005424:	40000800 	.word	0x40000800
 8005428:	2000023c 	.word	0x2000023c
 800542c:	40011000 	.word	0x40011000
 8005430:	40010c00 	.word	0x40010c00

08005434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005438:	e7fe      	b.n	8005438 <MemManage_Handler+0x4>

0800543a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800543a:	b480      	push	{r7}
 800543c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800543e:	e7fe      	b.n	800543e <BusFault_Handler+0x4>

08005440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005444:	e7fe      	b.n	8005444 <UsageFault_Handler+0x4>

08005446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005446:	b480      	push	{r7}
 8005448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800544a:	bf00      	nop
 800544c:	46bd      	mov	sp, r7
 800544e:	bc80      	pop	{r7}
 8005450:	4770      	bx	lr

08005452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005452:	b480      	push	{r7}
 8005454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005456:	bf00      	nop
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr

0800545e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800545e:	b480      	push	{r7}
 8005460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005462:	bf00      	nop
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr

0800546a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800546e:	f7fb ff2f 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005472:	bf00      	nop
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800547c:	4802      	ldr	r0, [pc, #8]	; (8005488 <DMA1_Channel1_IRQHandler+0x10>)
 800547e:	f001 fbf3 	bl	8006c68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005482:	bf00      	nop
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000168 	.word	0x20000168

0800548c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005490:	4802      	ldr	r0, [pc, #8]	; (800549c <DMA1_Channel2_IRQHandler+0x10>)
 8005492:	f001 fbe9 	bl	8006c68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005496:	bf00      	nop
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	200002c8 	.word	0x200002c8

080054a0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80054a4:	4802      	ldr	r0, [pc, #8]	; (80054b0 <DMA1_Channel3_IRQHandler+0x10>)
 80054a6:	f001 fbdf 	bl	8006c68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80054aa:	bf00      	nop
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	2000030c 	.word	0x2000030c

080054b4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80054b8:	4803      	ldr	r0, [pc, #12]	; (80054c8 <ADC1_2_IRQHandler+0x14>)
 80054ba:	f000 face 	bl	8005a5a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80054be:	4803      	ldr	r0, [pc, #12]	; (80054cc <ADC1_2_IRQHandler+0x18>)
 80054c0:	f000 facb 	bl	8005a5a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80054c4:	bf00      	nop
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	20000108 	.word	0x20000108
 80054cc:	20000138 	.word	0x20000138

080054d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80054d4:	4802      	ldr	r0, [pc, #8]	; (80054e0 <TIM3_IRQHandler+0x10>)
 80054d6:	f002 ff1d 	bl	8008314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80054da:	bf00      	nop
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	200001f4 	.word	0x200001f4

080054e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80054e8:	4802      	ldr	r0, [pc, #8]	; (80054f4 <USART3_IRQHandler+0x10>)
 80054ea:	f003 fea5 	bl	8009238 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80054ee:	bf00      	nop
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	20000284 	.word	0x20000284

080054f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
	return 1;
 80054fc:	2301      	movs	r3, #1
}
 80054fe:	4618      	mov	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr

08005506 <_kill>:

int _kill(int pid, int sig)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b082      	sub	sp, #8
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005510:	f005 fce8 	bl	800aee4 <__errno>
 8005514:	4603      	mov	r3, r0
 8005516:	2216      	movs	r2, #22
 8005518:	601a      	str	r2, [r3, #0]
	return -1;
 800551a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <_exit>:

void _exit (int status)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b082      	sub	sp, #8
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800552e:	f04f 31ff 	mov.w	r1, #4294967295
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff ffe7 	bl	8005506 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005538:	e7fe      	b.n	8005538 <_exit+0x12>

0800553a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800553a:	b480      	push	{r7}
 800553c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800553e:	bf00      	nop
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr
	...

08005548 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8005548:	480c      	ldr	r0, [pc, #48]	; (800557c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800554a:	490d      	ldr	r1, [pc, #52]	; (8005580 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800554c:	4a0d      	ldr	r2, [pc, #52]	; (8005584 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800554e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005550:	e002      	b.n	8005558 <LoopCopyDataInit>

08005552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005556:	3304      	adds	r3, #4

08005558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800555a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800555c:	d3f9      	bcc.n	8005552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800555e:	4a0a      	ldr	r2, [pc, #40]	; (8005588 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005560:	4c0a      	ldr	r4, [pc, #40]	; (800558c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005564:	e001      	b.n	800556a <LoopFillZerobss>

08005566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005568:	3204      	adds	r2, #4

0800556a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800556a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800556c:	d3fb      	bcc.n	8005566 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800556e:	f7ff ffe4 	bl	800553a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005572:	f005 fcbd 	bl	800aef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005576:	f7fe fb27 	bl	8003bc8 <main>
  bx lr
 800557a:	4770      	bx	lr
  ldr r0, =_sdata
 800557c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005580:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8005584:	0800b144 	.word	0x0800b144
  ldr r2, =_sbss
 8005588:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800558c:	2000036c 	.word	0x2000036c

08005590 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005590:	e7fe      	b.n	8005590 <ADC3_IRQHandler>
	...

08005594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005598:	4b08      	ldr	r3, [pc, #32]	; (80055bc <HAL_Init+0x28>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a07      	ldr	r2, [pc, #28]	; (80055bc <HAL_Init+0x28>)
 800559e:	f043 0310 	orr.w	r3, r3, #16
 80055a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055a4:	2003      	movs	r0, #3
 80055a6:	f001 f905 	bl	80067b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80055aa:	2003      	movs	r0, #3
 80055ac:	f000 f808 	bl	80055c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80055b0:	f7ff fc9e 	bl	8004ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40022000 	.word	0x40022000

080055c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80055c8:	4b12      	ldr	r3, [pc, #72]	; (8005614 <HAL_InitTick+0x54>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	4b12      	ldr	r3, [pc, #72]	; (8005618 <HAL_InitTick+0x58>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	4619      	mov	r1, r3
 80055d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80055da:	fbb2 f3f3 	udiv	r3, r2, r3
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 f91d 	bl	800681e <HAL_SYSTICK_Config>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e00e      	b.n	800560c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b0f      	cmp	r3, #15
 80055f2:	d80a      	bhi.n	800560a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055f4:	2200      	movs	r2, #0
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	f04f 30ff 	mov.w	r0, #4294967295
 80055fc:	f001 f8e5 	bl	80067ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005600:	4a06      	ldr	r2, [pc, #24]	; (800561c <HAL_InitTick+0x5c>)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	e000      	b.n	800560c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
}
 800560c:	4618      	mov	r0, r3
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20000000 	.word	0x20000000
 8005618:	20000008 	.word	0x20000008
 800561c:	20000004 	.word	0x20000004

08005620 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  return uwTick;
 8005624:	4b02      	ldr	r3, [pc, #8]	; (8005630 <HAL_GetTick+0x10>)
 8005626:	681b      	ldr	r3, [r3, #0]
}
 8005628:	4618      	mov	r0, r3
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr
 8005630:	20000364 	.word	0x20000364

08005634 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e0ce      	b.n	80057f4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005660:	2b00      	cmp	r3, #0
 8005662:	d109      	bne.n	8005678 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fc6e 	bl	8004f54 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fc75 	bl	8005f68 <ADC_ConversionStop_Disable>
 800567e:	4603      	mov	r3, r0
 8005680:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005686:	f003 0310 	and.w	r3, r3, #16
 800568a:	2b00      	cmp	r3, #0
 800568c:	f040 80a9 	bne.w	80057e2 <HAL_ADC_Init+0x1ae>
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	2b00      	cmp	r3, #0
 8005694:	f040 80a5 	bne.w	80057e2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056a0:	f023 0302 	bic.w	r3, r3, #2
 80056a4:	f043 0202 	orr.w	r2, r3, #2
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4951      	ldr	r1, [pc, #324]	; (80057fc <HAL_ADC_Init+0x1c8>)
 80056b6:	428b      	cmp	r3, r1
 80056b8:	d10a      	bne.n	80056d0 <HAL_ADC_Init+0x9c>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80056c2:	d002      	beq.n	80056ca <HAL_ADC_Init+0x96>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	e004      	b.n	80056d4 <HAL_ADC_Init+0xa0>
 80056ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80056ce:	e001      	b.n	80056d4 <HAL_ADC_Init+0xa0>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80056d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	7b1b      	ldrb	r3, [r3, #12]
 80056da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80056dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ec:	d003      	beq.n	80056f6 <HAL_ADC_Init+0xc2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d102      	bne.n	80056fc <HAL_ADC_Init+0xc8>
 80056f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056fa:	e000      	b.n	80056fe <HAL_ADC_Init+0xca>
 80056fc:	2300      	movs	r3, #0
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	7d1b      	ldrb	r3, [r3, #20]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d119      	bne.n	8005740 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	7b1b      	ldrb	r3, [r3, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	3b01      	subs	r3, #1
 800571a:	035a      	lsls	r2, r3, #13
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	e00b      	b.n	8005740 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572c:	f043 0220 	orr.w	r2, r3, #32
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	f043 0201 	orr.w	r2, r3, #1
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	430a      	orrs	r2, r1
 8005752:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	4b29      	ldr	r3, [pc, #164]	; (8005800 <HAL_ADC_Init+0x1cc>)
 800575c:	4013      	ands	r3, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	430b      	orrs	r3, r1
 8005766:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005770:	d003      	beq.n	800577a <HAL_ADC_Init+0x146>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d104      	bne.n	8005784 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	3b01      	subs	r3, #1
 8005780:	051b      	lsls	r3, r3, #20
 8005782:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	430a      	orrs	r2, r1
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	4b19      	ldr	r3, [pc, #100]	; (8005804 <HAL_ADC_Init+0x1d0>)
 80057a0:	4013      	ands	r3, r2
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d10b      	bne.n	80057c0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b2:	f023 0303 	bic.w	r3, r3, #3
 80057b6:	f043 0201 	orr.w	r2, r3, #1
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80057be:	e018      	b.n	80057f2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c4:	f023 0312 	bic.w	r3, r3, #18
 80057c8:	f043 0210 	orr.w	r2, r3, #16
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	f043 0201 	orr.w	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80057e0:	e007      	b.n	80057f2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	f043 0210 	orr.w	r2, r3, #16
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40013c00 	.word	0x40013c00
 8005800:	ffe1f7fd 	.word	0xffe1f7fd
 8005804:	ff1f0efe 	.word	0xff1f0efe

08005808 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005814:	2300      	movs	r3, #0
 8005816:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a64      	ldr	r2, [pc, #400]	; (80059b0 <HAL_ADC_Start_DMA+0x1a8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d004      	beq.n	800582c <HAL_ADC_Start_DMA+0x24>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a63      	ldr	r2, [pc, #396]	; (80059b4 <HAL_ADC_Start_DMA+0x1ac>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d106      	bne.n	800583a <HAL_ADC_Start_DMA+0x32>
 800582c:	4b60      	ldr	r3, [pc, #384]	; (80059b0 <HAL_ADC_Start_DMA+0x1a8>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005834:	2b00      	cmp	r3, #0
 8005836:	f040 80b3 	bne.w	80059a0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_ADC_Start_DMA+0x40>
 8005844:	2302      	movs	r3, #2
 8005846:	e0ae      	b.n	80059a6 <HAL_ADC_Start_DMA+0x19e>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 fb2f 	bl	8005eb4 <ADC_Enable>
 8005856:	4603      	mov	r3, r0
 8005858:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800585a:	7dfb      	ldrb	r3, [r7, #23]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f040 809a 	bne.w	8005996 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800586a:	f023 0301 	bic.w	r3, r3, #1
 800586e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a4e      	ldr	r2, [pc, #312]	; (80059b4 <HAL_ADC_Start_DMA+0x1ac>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d105      	bne.n	800588c <HAL_ADC_Start_DMA+0x84>
 8005880:	4b4b      	ldr	r3, [pc, #300]	; (80059b0 <HAL_ADC_Start_DMA+0x1a8>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d115      	bne.n	80058b8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d026      	beq.n	80058f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80058ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80058b6:	e01d      	b.n	80058f4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a39      	ldr	r2, [pc, #228]	; (80059b0 <HAL_ADC_Start_DMA+0x1a8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <HAL_ADC_Start_DMA+0xd0>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a38      	ldr	r2, [pc, #224]	; (80059b4 <HAL_ADC_Start_DMA+0x1ac>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d10d      	bne.n	80058f4 <HAL_ADC_Start_DMA+0xec>
 80058d8:	4b35      	ldr	r3, [pc, #212]	; (80059b0 <HAL_ADC_Start_DMA+0x1a8>)
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80058ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d006      	beq.n	800590e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	f023 0206 	bic.w	r2, r3, #6
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	62da      	str	r2, [r3, #44]	; 0x2c
 800590c:	e002      	b.n	8005914 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	4a25      	ldr	r2, [pc, #148]	; (80059b8 <HAL_ADC_Start_DMA+0x1b0>)
 8005922:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	4a24      	ldr	r2, [pc, #144]	; (80059bc <HAL_ADC_Start_DMA+0x1b4>)
 800592a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	4a23      	ldr	r2, [pc, #140]	; (80059c0 <HAL_ADC_Start_DMA+0x1b8>)
 8005932:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0202 	mvn.w	r2, #2
 800593c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800594c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a18      	ldr	r0, [r3, #32]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	334c      	adds	r3, #76	; 0x4c
 8005958:	4619      	mov	r1, r3
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f000 ffe1 	bl	8006924 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800596c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005970:	d108      	bne.n	8005984 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005980:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005982:	e00f      	b.n	80059a4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005992:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005994:	e006      	b.n	80059a4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800599e:	e001      	b.n	80059a4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40012400 	.word	0x40012400
 80059b4:	40012800 	.word	0x40012800
 80059b8:	08005feb 	.word	0x08005feb
 80059bc:	08006067 	.word	0x08006067
 80059c0:	08006083 	.word	0x08006083

080059c4 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_ADC_Stop_DMA+0x1a>
 80059da:	2302      	movs	r3, #2
 80059dc:	e039      	b.n	8005a52 <HAL_ADC_Stop_DMA+0x8e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fabe 	bl	8005f68 <ADC_ConversionStop_Disable>
 80059ec:	4603      	mov	r3, r0
 80059ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d128      	bne.n	8005a48 <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a04:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d11a      	bne.n	8005a48 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 ffe3 	bl	80069e2 <HAL_DMA_Abort>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10a      	bne.n	8005a3c <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a2e:	f023 0301 	bic.w	r3, r3, #1
 8005a32:	f043 0201 	orr.w	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	629a      	str	r2, [r3, #40]	; 0x28
 8005a3a:	e005      	b.n	8005a48 <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b082      	sub	sp, #8
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d140      	bne.n	8005af2 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d139      	bne.n	8005af2 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a82:	f003 0310 	and.w	r3, r3, #16
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d105      	bne.n	8005a96 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005aa0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005aa4:	d11d      	bne.n	8005ae2 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d119      	bne.n	8005ae2 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0220 	bic.w	r2, r2, #32
 8005abc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d105      	bne.n	8005ae2 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ada:	f043 0201 	orr.w	r2, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fc fb6a 	bl	80021bc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0212 	mvn.w	r2, #18
 8005af0:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afc:	2b80      	cmp	r3, #128	; 0x80
 8005afe:	d14f      	bne.n	8005ba0 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d148      	bne.n	8005ba0 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d105      	bne.n	8005b26 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005b30:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8005b34:	d012      	beq.n	8005b5c <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d125      	bne.n	8005b90 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005b4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005b52:	d11d      	bne.n	8005b90 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d119      	bne.n	8005b90 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b6a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d105      	bne.n	8005b90 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	f043 0201 	orr.w	r2, r3, #1
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7fc fb27 	bl	80021e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f06f 020c 	mvn.w	r2, #12
 8005b9e:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	d114      	bne.n	8005bd8 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d10d      	bne.n	8005bd8 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f812 	bl	8005bf2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f06f 0201 	mvn.w	r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8005bd8:	bf00      	nop
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc80      	pop	{r7}
 8005bf0:	4770      	bx	lr

08005bf2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr

08005c04 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bc80      	pop	{r7}
 8005c14:	4770      	bx	lr
	...

08005c18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_ADC_ConfigChannel+0x20>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e0dc      	b.n	8005df2 <HAL_ADC_ConfigChannel+0x1da>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b06      	cmp	r3, #6
 8005c46:	d81c      	bhi.n	8005c82 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	4613      	mov	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	3b05      	subs	r3, #5
 8005c5a:	221f      	movs	r2, #31
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	43db      	mvns	r3, r3
 8005c62:	4019      	ands	r1, r3
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	3b05      	subs	r3, #5
 8005c74:	fa00 f203 	lsl.w	r2, r0, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	635a      	str	r2, [r3, #52]	; 0x34
 8005c80:	e03c      	b.n	8005cfc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b0c      	cmp	r3, #12
 8005c88:	d81c      	bhi.n	8005cc4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	3b23      	subs	r3, #35	; 0x23
 8005c9c:	221f      	movs	r2, #31
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	43db      	mvns	r3, r3
 8005ca4:	4019      	ands	r1, r3
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3b23      	subs	r3, #35	; 0x23
 8005cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8005cc2:	e01b      	b.n	8005cfc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	3b41      	subs	r3, #65	; 0x41
 8005cd6:	221f      	movs	r2, #31
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	43db      	mvns	r3, r3
 8005cde:	4019      	ands	r1, r3
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	6818      	ldr	r0, [r3, #0]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	3b41      	subs	r3, #65	; 0x41
 8005cf0:	fa00 f203 	lsl.w	r2, r0, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b09      	cmp	r3, #9
 8005d02:	d91c      	bls.n	8005d3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68d9      	ldr	r1, [r3, #12]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4413      	add	r3, r2
 8005d14:	3b1e      	subs	r3, #30
 8005d16:	2207      	movs	r2, #7
 8005d18:	fa02 f303 	lsl.w	r3, r2, r3
 8005d1c:	43db      	mvns	r3, r3
 8005d1e:	4019      	ands	r1, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	6898      	ldr	r0, [r3, #8]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3b1e      	subs	r3, #30
 8005d30:	fa00 f203 	lsl.w	r2, r0, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	60da      	str	r2, [r3, #12]
 8005d3c:	e019      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6919      	ldr	r1, [r3, #16]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	4413      	add	r3, r2
 8005d4e:	2207      	movs	r2, #7
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	43db      	mvns	r3, r3
 8005d56:	4019      	ands	r1, r3
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	6898      	ldr	r0, [r3, #8]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	4613      	mov	r3, r2
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	4413      	add	r3, r2
 8005d66:	fa00 f203 	lsl.w	r2, r0, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d003      	beq.n	8005d82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005d7e:	2b11      	cmp	r3, #17
 8005d80:	d132      	bne.n	8005de8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a1d      	ldr	r2, [pc, #116]	; (8005dfc <HAL_ADC_ConfigChannel+0x1e4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d125      	bne.n	8005dd8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d126      	bne.n	8005de8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005da8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b10      	cmp	r3, #16
 8005db0:	d11a      	bne.n	8005de8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005db2:	4b13      	ldr	r3, [pc, #76]	; (8005e00 <HAL_ADC_ConfigChannel+0x1e8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a13      	ldr	r2, [pc, #76]	; (8005e04 <HAL_ADC_ConfigChannel+0x1ec>)
 8005db8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbc:	0c9a      	lsrs	r2, r3, #18
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005dc8:	e002      	b.n	8005dd0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f9      	bne.n	8005dca <HAL_ADC_ConfigChannel+0x1b2>
 8005dd6:	e007      	b.n	8005de8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	f043 0220 	orr.w	r2, r3, #32
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr
 8005dfc:	40012400 	.word	0x40012400
 8005e00:	20000000 	.word	0x20000000
 8005e04:	431bde83 	.word	0x431bde83

08005e08 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a24      	ldr	r2, [pc, #144]	; (8005ea8 <HAL_ADC_AnalogWDGConfig+0xa0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d003      	beq.n	8005e24 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005e20:	4a22      	ldr	r2, [pc, #136]	; (8005eac <HAL_ADC_AnalogWDGConfig+0xa4>)
 8005e22:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d101      	bne.n	8005e32 <HAL_ADC_AnalogWDGConfig+0x2a>
 8005e2e:	2302      	movs	r3, #2
 8005e30:	e035      	b.n	8005e9e <HAL_ADC_AnalogWDGConfig+0x96>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	7a1b      	ldrb	r3, [r3, #8]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d108      	bne.n	8005e54 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e50:	605a      	str	r2, [r3, #4]
 8005e52:	e007      	b.n	8005e64 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e62:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <HAL_ADC_AnalogWDGConfig+0xa8>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	6811      	ldr	r1, [r2, #0]
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	6852      	ldr	r2, [r2, #4]
 8005e76:	4311      	orrs	r1, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6812      	ldr	r2, [r2, #0]
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	68d2      	ldr	r2, [r2, #12]
 8005e88:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	6912      	ldr	r2, [r2, #16]
 8005e92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr
 8005ea8:	00800200 	.word	0x00800200
 8005eac:	00400200 	.word	0x00400200
 8005eb0:	ff3ffde0 	.word	0xff3ffde0

08005eb4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d040      	beq.n	8005f54 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0201 	orr.w	r2, r2, #1
 8005ee0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005ee2:	4b1f      	ldr	r3, [pc, #124]	; (8005f60 <ADC_Enable+0xac>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a1f      	ldr	r2, [pc, #124]	; (8005f64 <ADC_Enable+0xb0>)
 8005ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eec:	0c9b      	lsrs	r3, r3, #18
 8005eee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005ef0:	e002      	b.n	8005ef8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f9      	bne.n	8005ef2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005efe:	f7ff fb8f 	bl	8005620 <HAL_GetTick>
 8005f02:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005f04:	e01f      	b.n	8005f46 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005f06:	f7ff fb8b 	bl	8005620 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d918      	bls.n	8005f46 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d011      	beq.n	8005f46 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f26:	f043 0210 	orr.w	r2, r3, #16
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f32:	f043 0201 	orr.w	r2, r3, #1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e007      	b.n	8005f56 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d1d8      	bne.n	8005f06 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000000 	.word	0x20000000
 8005f64:	431bde83 	.word	0x431bde83

08005f68 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d12e      	bne.n	8005fe0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0201 	bic.w	r2, r2, #1
 8005f90:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005f92:	f7ff fb45 	bl	8005620 <HAL_GetTick>
 8005f96:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005f98:	e01b      	b.n	8005fd2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005f9a:	f7ff fb41 	bl	8005620 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d914      	bls.n	8005fd2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d10d      	bne.n	8005fd2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fba:	f043 0210 	orr.w	r2, r3, #16
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc6:	f043 0201 	orr.w	r2, r3, #1
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e007      	b.n	8005fe2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d0dc      	beq.n	8005f9a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006000:	2b00      	cmp	r3, #0
 8006002:	d127      	bne.n	8006054 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800601a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800601e:	d115      	bne.n	800604c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006024:	2b00      	cmp	r3, #0
 8006026:	d111      	bne.n	800604c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d105      	bne.n	800604c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006044:	f043 0201 	orr.w	r2, r3, #1
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7fc f8b5 	bl	80021bc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006052:	e004      	b.n	800605e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	4798      	blx	r3
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff fdb3 	bl	8005be0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800607a:	bf00      	nop
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006094:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	f043 0204 	orr.w	r2, r3, #4
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7ff fdab 	bl	8005c04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
	...

080060b8 <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_ADCEx_InjectedStart_IT+0x1a>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e078      	b.n	80061c4 <HAL_ADCEx_InjectedStart_IT+0x10c>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff feea 	bl	8005eb4 <ADC_Enable>
 80060e0:	4603      	mov	r3, r0
 80060e2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d167      	bne.n	80061ba <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a32      	ldr	r2, [pc, #200]	; (80061cc <HAL_ADCEx_InjectedStart_IT+0x114>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d105      	bne.n	8006114 <HAL_ADCEx_InjectedStart_IT+0x5c>
 8006108:	4b31      	ldr	r3, [pc, #196]	; (80061d0 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	629a      	str	r2, [r3, #40]	; 0x28
 8006120:	e005      	b.n	800612e <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006136:	2b00      	cmp	r3, #0
 8006138:	d102      	bne.n	8006140 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0204 	mvn.w	r2, #4
 8006150:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006160:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800616c:	2b00      	cmp	r3, #0
 800616e:	d128      	bne.n	80061c2 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800617a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800617e:	d113      	bne.n	80061a8 <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8006184:	4a11      	ldr	r2, [pc, #68]	; (80061cc <HAL_ADCEx_InjectedStart_IT+0x114>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d105      	bne.n	8006196 <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800618a:	4b11      	ldr	r3, [pc, #68]	; (80061d0 <HAL_ADCEx_InjectedStart_IT+0x118>)
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8006192:	2b00      	cmp	r3, #0
 8006194:	d108      	bne.n	80061a8 <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 80061a4:	609a      	str	r2, [r3, #8]
 80061a6:	e00c      	b.n	80061c2 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061b6:	609a      	str	r2, [r3, #8]
 80061b8:	e003      	b.n	80061c2 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	40012800 	.word	0x40012800
 80061d0:	40012400 	.word	0x40012400

080061d4 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d101      	bne.n	80061ee <HAL_ADCEx_InjectedStop_IT+0x1a>
 80061ea:	2302      	movs	r3, #2
 80061ec:	e038      	b.n	8006260 <HAL_ADCEx_InjectedStop_IT+0x8c>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d121      	bne.n	8006246 <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800620c:	2b00      	cmp	r3, #0
 800620e:	d11a      	bne.n	8006246 <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff fea9 	bl	8005f68 <ADC_ConversionStop_Disable>
 8006216:	4603      	mov	r3, r0
 8006218:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d11a      	bne.n	8006256 <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800622e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006234:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006238:	f023 0301 	bic.w	r3, r3, #1
 800623c:	f043 0201 	orr.w	r2, r3, #1
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8006244:	e007      	b.n	8006256 <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624a:	f043 0220 	orr.w	r2, r3, #32
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800625e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b04      	cmp	r3, #4
 800627a:	d009      	beq.n	8006290 <HAL_ADCEx_InjectedGetValue+0x28>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b04      	cmp	r3, #4
 8006280:	d815      	bhi.n	80062ae <HAL_ADCEx_InjectedGetValue+0x46>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d00d      	beq.n	80062a4 <HAL_ADCEx_InjectedGetValue+0x3c>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b03      	cmp	r3, #3
 800628c:	d005      	beq.n	800629a <HAL_ADCEx_InjectedGetValue+0x32>
 800628e:	e00e      	b.n	80062ae <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006296:	60fb      	str	r3, [r7, #12]
      break;
 8006298:	e00e      	b.n	80062b8 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a0:	60fb      	str	r3, [r7, #12]
      break;
 80062a2:	e009      	b.n	80062b8 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	60fb      	str	r3, [r7, #12]
      break;
 80062ac:	e004      	b.n	80062b8 <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b4:	60fb      	str	r3, [r7, #12]
      break;
 80062b6:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 80062b8:	68fb      	ldr	r3, [r7, #12]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	bc80      	pop	{r7}
 80062c2:	4770      	bx	lr

080062c4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80062c4:	b490      	push	{r4, r7}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_ADCEx_InjectedConfigChannel+0x20>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e18d      	b.n	8006600 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d119      	bne.n	8006328 <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d10c      	bne.n	8006316 <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006302:	0d9b      	lsrs	r3, r3, #22
 8006304:	059b      	lsls	r3, r3, #22
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	6812      	ldr	r2, [r2, #0]
 800630a:	03d1      	lsls	r1, r2, #15
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6812      	ldr	r2, [r2, #0]
 8006310:	430b      	orrs	r3, r1
 8006312:	6393      	str	r3, [r2, #56]	; 0x38
 8006314:	e04f      	b.n	80063b6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	f043 0220 	orr.w	r2, r3, #32
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	73fb      	strb	r3, [r7, #15]
 8006326:	e046      	b.n	80063b6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	429a      	cmp	r2, r3
 8006332:	d82a      	bhi.n	800638a <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	1ad2      	subs	r2, r2, r3
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	330f      	adds	r3, #15
 800634c:	221f      	movs	r2, #31
 800634e:	fa02 f303 	lsl.w	r3, r2, r3
 8006352:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006356:	43db      	mvns	r3, r3
 8006358:	4019      	ands	r1, r3
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	3b01      	subs	r3, #1
 8006360:	0518      	lsls	r0, r3, #20
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	681c      	ldr	r4, [r3, #0]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	1ad2      	subs	r2, r2, r3
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	330f      	adds	r3, #15
 8006378:	fa04 f303 	lsl.w	r3, r4, r3
 800637c:	ea40 0203 	orr.w	r2, r0, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	639a      	str	r2, [r3, #56]	; 0x38
 8006388:	e015      	b.n	80063b6 <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	1ad2      	subs	r2, r2, r3
 800639a:	4613      	mov	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	330f      	adds	r3, #15
 80063a2:	221f      	movs	r2, #31
 80063a4:	fa02 f303 	lsl.w	r3, r2, r3
 80063a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80063ac:	43da      	mvns	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	400a      	ands	r2, r1
 80063b4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d01c      	beq.n	80063fe <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6812      	ldr	r2, [r2, #0]
 80063d6:	498d      	ldr	r1, [pc, #564]	; (800660c <HAL_ADCEx_InjectedConfigChannel+0x348>)
 80063d8:	428a      	cmp	r2, r1
 80063da:	d10a      	bne.n	80063f2 <HAL_ADCEx_InjectedConfigChannel+0x12e>
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	6992      	ldr	r2, [r2, #24]
 80063e0:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 80063e4:	d002      	beq.n	80063ec <HAL_ADCEx_InjectedConfigChannel+0x128>
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	6992      	ldr	r2, [r2, #24]
 80063ea:	e004      	b.n	80063f6 <HAL_ADCEx_InjectedConfigChannel+0x132>
 80063ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063f0:	e001      	b.n	80063f6 <HAL_ADCEx_InjectedConfigChannel+0x132>
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	6992      	ldr	r2, [r2, #24]
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	6809      	ldr	r1, [r1, #0]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	7d5b      	ldrb	r3, [r3, #21]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d115      	bne.n	8006432 <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800640e:	d108      	bne.n	8006422 <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800641e:	605a      	str	r2, [r3, #4]
 8006420:	e007      	b.n	8006432 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006426:	f043 0220 	orr.w	r2, r3, #32
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	7d1b      	ldrb	r3, [r3, #20]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d114      	bne.n	8006464 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	7d5b      	ldrb	r3, [r3, #21]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d108      	bne.n	8006454 <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006450:	605a      	str	r2, [r3, #4]
 8006452:	e007      	b.n	8006464 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	f043 0220 	orr.w	r2, r3, #32
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b09      	cmp	r3, #9
 800646a:	d91c      	bls.n	80064a6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68d9      	ldr	r1, [r3, #12]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4613      	mov	r3, r2
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	4413      	add	r3, r2
 800647c:	3b1e      	subs	r3, #30
 800647e:	2207      	movs	r2, #7
 8006480:	fa02 f303 	lsl.w	r3, r2, r3
 8006484:	43db      	mvns	r3, r3
 8006486:	4019      	ands	r1, r3
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	6898      	ldr	r0, [r3, #8]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	4613      	mov	r3, r2
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	4413      	add	r3, r2
 8006496:	3b1e      	subs	r3, #30
 8006498:	fa00 f203 	lsl.w	r2, r0, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	60da      	str	r2, [r3, #12]
 80064a4:	e019      	b.n	80064da <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6919      	ldr	r1, [r3, #16]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	4413      	add	r3, r2
 80064b6:	2207      	movs	r2, #7
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	43db      	mvns	r3, r3
 80064be:	4019      	ands	r1, r3
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	6898      	ldr	r0, [r3, #8]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	4613      	mov	r3, r2
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	4413      	add	r3, r2
 80064ce:	fa00 f203 	lsl.w	r2, r0, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2b10      	cmp	r3, #16
 80064e0:	d003      	beq.n	80064ea <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80064e6:	2b11      	cmp	r3, #17
 80064e8:	d107      	bne.n	80064fa <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80064f8:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d022      	beq.n	8006548 <HAL_ADCEx_InjectedConfigChannel+0x284>
 8006502:	2b03      	cmp	r3, #3
 8006504:	d82e      	bhi.n	8006564 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 8006506:	2b01      	cmp	r3, #1
 8006508:	d002      	beq.n	8006510 <HAL_ADCEx_InjectedConfigChannel+0x24c>
 800650a:	2b02      	cmp	r3, #2
 800650c:	d00e      	beq.n	800652c <HAL_ADCEx_InjectedConfigChannel+0x268>
 800650e:	e029      	b.n	8006564 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800651a:	f023 030f 	bic.w	r3, r3, #15
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	68d1      	ldr	r1, [r2, #12]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	430b      	orrs	r3, r1
 8006528:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 800652a:	e029      	b.n	8006580 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006536:	f023 030f 	bic.w	r3, r3, #15
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	68d1      	ldr	r1, [r2, #12]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6812      	ldr	r2, [r2, #0]
 8006542:	430b      	orrs	r3, r1
 8006544:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 8006546:	e01b      	b.n	8006580 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006552:	f023 030f 	bic.w	r3, r3, #15
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	68d1      	ldr	r1, [r2, #12]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	430b      	orrs	r3, r1
 8006560:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8006562:	e00d      	b.n	8006580 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800656e:	f023 030f 	bic.w	r3, r3, #15
 8006572:	683a      	ldr	r2, [r7, #0]
 8006574:	68d1      	ldr	r1, [r2, #12]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	430b      	orrs	r3, r1
 800657c:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 800657e:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b10      	cmp	r3, #16
 8006586:	d003      	beq.n	8006590 <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800658c:	2b11      	cmp	r3, #17
 800658e:	d132      	bne.n	80065f6 <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1e      	ldr	r2, [pc, #120]	; (8006610 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d125      	bne.n	80065e6 <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d126      	bne.n	80065f6 <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80065b6:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b10      	cmp	r3, #16
 80065be:	d11a      	bne.n	80065f6 <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80065c0:	4b14      	ldr	r3, [pc, #80]	; (8006614 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a14      	ldr	r2, [pc, #80]	; (8006618 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 80065c6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ca:	0c9a      	lsrs	r2, r3, #18
 80065cc:	4613      	mov	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80065d6:	e002      	b.n	80065de <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	3b01      	subs	r3, #1
 80065dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1f9      	bne.n	80065d8 <HAL_ADCEx_InjectedConfigChannel+0x314>
 80065e4:	e007      	b.n	80065f6 <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ea:	f043 0220 	orr.w	r2, r3, #32
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bc90      	pop	{r4, r7}
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	40013c00 	.word	0x40013c00
 8006610:	40012400 	.word	0x40012400
 8006614:	20000000 	.word	0x20000000
 8006618:	431bde83 	.word	0x431bde83

0800661c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800662c:	4b0c      	ldr	r3, [pc, #48]	; (8006660 <__NVIC_SetPriorityGrouping+0x44>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006638:	4013      	ands	r3, r2
 800663a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800664c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800664e:	4a04      	ldr	r2, [pc, #16]	; (8006660 <__NVIC_SetPriorityGrouping+0x44>)
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	60d3      	str	r3, [r2, #12]
}
 8006654:	bf00      	nop
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	bc80      	pop	{r7}
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	e000ed00 	.word	0xe000ed00

08006664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006668:	4b04      	ldr	r3, [pc, #16]	; (800667c <__NVIC_GetPriorityGrouping+0x18>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	0a1b      	lsrs	r3, r3, #8
 800666e:	f003 0307 	and.w	r3, r3, #7
}
 8006672:	4618      	mov	r0, r3
 8006674:	46bd      	mov	sp, r7
 8006676:	bc80      	pop	{r7}
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	e000ed00 	.word	0xe000ed00

08006680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800668a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800668e:	2b00      	cmp	r3, #0
 8006690:	db0b      	blt.n	80066aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	f003 021f 	and.w	r2, r3, #31
 8006698:	4906      	ldr	r1, [pc, #24]	; (80066b4 <__NVIC_EnableIRQ+0x34>)
 800669a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800669e:	095b      	lsrs	r3, r3, #5
 80066a0:	2001      	movs	r0, #1
 80066a2:	fa00 f202 	lsl.w	r2, r0, r2
 80066a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr
 80066b4:	e000e100 	.word	0xe000e100

080066b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	6039      	str	r1, [r7, #0]
 80066c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	db0a      	blt.n	80066e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	490c      	ldr	r1, [pc, #48]	; (8006704 <__NVIC_SetPriority+0x4c>)
 80066d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d6:	0112      	lsls	r2, r2, #4
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	440b      	add	r3, r1
 80066dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066e0:	e00a      	b.n	80066f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	4908      	ldr	r1, [pc, #32]	; (8006708 <__NVIC_SetPriority+0x50>)
 80066e8:	79fb      	ldrb	r3, [r7, #7]
 80066ea:	f003 030f 	and.w	r3, r3, #15
 80066ee:	3b04      	subs	r3, #4
 80066f0:	0112      	lsls	r2, r2, #4
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	440b      	add	r3, r1
 80066f6:	761a      	strb	r2, [r3, #24]
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bc80      	pop	{r7}
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	e000e100 	.word	0xe000e100
 8006708:	e000ed00 	.word	0xe000ed00

0800670c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800670c:	b480      	push	{r7}
 800670e:	b089      	sub	sp, #36	; 0x24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f1c3 0307 	rsb	r3, r3, #7
 8006726:	2b04      	cmp	r3, #4
 8006728:	bf28      	it	cs
 800672a:	2304      	movcs	r3, #4
 800672c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	3304      	adds	r3, #4
 8006732:	2b06      	cmp	r3, #6
 8006734:	d902      	bls.n	800673c <NVIC_EncodePriority+0x30>
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	3b03      	subs	r3, #3
 800673a:	e000      	b.n	800673e <NVIC_EncodePriority+0x32>
 800673c:	2300      	movs	r3, #0
 800673e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006740:	f04f 32ff 	mov.w	r2, #4294967295
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	fa02 f303 	lsl.w	r3, r2, r3
 800674a:	43da      	mvns	r2, r3
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	401a      	ands	r2, r3
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006754:	f04f 31ff 	mov.w	r1, #4294967295
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	fa01 f303 	lsl.w	r3, r1, r3
 800675e:	43d9      	mvns	r1, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006764:	4313      	orrs	r3, r2
         );
}
 8006766:	4618      	mov	r0, r3
 8006768:	3724      	adds	r7, #36	; 0x24
 800676a:	46bd      	mov	sp, r7
 800676c:	bc80      	pop	{r7}
 800676e:	4770      	bx	lr

08006770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3b01      	subs	r3, #1
 800677c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006780:	d301      	bcc.n	8006786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006782:	2301      	movs	r3, #1
 8006784:	e00f      	b.n	80067a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006786:	4a0a      	ldr	r2, [pc, #40]	; (80067b0 <SysTick_Config+0x40>)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3b01      	subs	r3, #1
 800678c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800678e:	210f      	movs	r1, #15
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	f7ff ff90 	bl	80066b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006798:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <SysTick_Config+0x40>)
 800679a:	2200      	movs	r2, #0
 800679c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800679e:	4b04      	ldr	r3, [pc, #16]	; (80067b0 <SysTick_Config+0x40>)
 80067a0:	2207      	movs	r2, #7
 80067a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	e000e010 	.word	0xe000e010

080067b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff ff2d 	bl	800661c <__NVIC_SetPriorityGrouping>
}
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b086      	sub	sp, #24
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	4603      	mov	r3, r0
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	607a      	str	r2, [r7, #4]
 80067d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067dc:	f7ff ff42 	bl	8006664 <__NVIC_GetPriorityGrouping>
 80067e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	6978      	ldr	r0, [r7, #20]
 80067e8:	f7ff ff90 	bl	800670c <NVIC_EncodePriority>
 80067ec:	4602      	mov	r2, r0
 80067ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067f2:	4611      	mov	r1, r2
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff ff5f 	bl	80066b8 <__NVIC_SetPriority>
}
 80067fa:	bf00      	nop
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	4603      	mov	r3, r0
 800680a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800680c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff ff35 	bl	8006680 <__NVIC_EnableIRQ>
}
 8006816:	bf00      	nop
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ffa2 	bl	8006770 <SysTick_Config>
 800682c:	4603      	mov	r3, r0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e059      	b.n	8006902 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	4b2d      	ldr	r3, [pc, #180]	; (800690c <HAL_DMA_Init+0xd4>)
 8006856:	429a      	cmp	r2, r3
 8006858:	d80f      	bhi.n	800687a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	4b2b      	ldr	r3, [pc, #172]	; (8006910 <HAL_DMA_Init+0xd8>)
 8006862:	4413      	add	r3, r2
 8006864:	4a2b      	ldr	r2, [pc, #172]	; (8006914 <HAL_DMA_Init+0xdc>)
 8006866:	fba2 2303 	umull	r2, r3, r2, r3
 800686a:	091b      	lsrs	r3, r3, #4
 800686c:	009a      	lsls	r2, r3, #2
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a28      	ldr	r2, [pc, #160]	; (8006918 <HAL_DMA_Init+0xe0>)
 8006876:	63da      	str	r2, [r3, #60]	; 0x3c
 8006878:	e00e      	b.n	8006898 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	461a      	mov	r2, r3
 8006880:	4b26      	ldr	r3, [pc, #152]	; (800691c <HAL_DMA_Init+0xe4>)
 8006882:	4413      	add	r3, r2
 8006884:	4a23      	ldr	r2, [pc, #140]	; (8006914 <HAL_DMA_Init+0xdc>)
 8006886:	fba2 2303 	umull	r2, r3, r2, r3
 800688a:	091b      	lsrs	r3, r3, #4
 800688c:	009a      	lsls	r2, r3, #2
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a22      	ldr	r2, [pc, #136]	; (8006920 <HAL_DMA_Init+0xe8>)
 8006896:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80068ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80068b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80068bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr
 800690c:	40020407 	.word	0x40020407
 8006910:	bffdfff8 	.word	0xbffdfff8
 8006914:	cccccccd 	.word	0xcccccccd
 8006918:	40020000 	.word	0x40020000
 800691c:	bffdfbf8 	.word	0xbffdfbf8
 8006920:	40020400 	.word	0x40020400

08006924 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_DMA_Start_IT+0x20>
 8006940:	2302      	movs	r3, #2
 8006942:	e04a      	b.n	80069da <HAL_DMA_Start_IT+0xb6>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006952:	2b01      	cmp	r3, #1
 8006954:	d13a      	bne.n	80069cc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2202      	movs	r2, #2
 800695a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0201 	bic.w	r2, r2, #1
 8006972:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	68b9      	ldr	r1, [r7, #8]
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 fbb0 	bl	80070e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d008      	beq.n	800699a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 020e 	orr.w	r2, r2, #14
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	e00f      	b.n	80069ba <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0204 	bic.w	r2, r2, #4
 80069a8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 020a 	orr.w	r2, r2, #10
 80069b8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f042 0201 	orr.w	r2, r2, #1
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	e005      	b.n	80069d8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80069d4:	2302      	movs	r3, #2
 80069d6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80069d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b085      	sub	sp, #20
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d008      	beq.n	8006a0a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2204      	movs	r2, #4
 80069fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e020      	b.n	8006a4c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 020e 	bic.w	r2, r2, #14
 8006a18:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0201 	bic.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	2101      	movs	r1, #1
 8006a34:	fa01 f202 	lsl.w	r2, r1, r2
 8006a38:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr
	...

08006a58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d005      	beq.n	8006a7a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2204      	movs	r2, #4
 8006a72:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	73fb      	strb	r3, [r7, #15]
 8006a78:	e0d6      	b.n	8006c28 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 020e 	bic.w	r2, r2, #14
 8006a88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0201 	bic.w	r2, r2, #1
 8006a98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4b64      	ldr	r3, [pc, #400]	; (8006c34 <HAL_DMA_Abort_IT+0x1dc>)
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d958      	bls.n	8006b58 <HAL_DMA_Abort_IT+0x100>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a63      	ldr	r2, [pc, #396]	; (8006c38 <HAL_DMA_Abort_IT+0x1e0>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d04f      	beq.n	8006b50 <HAL_DMA_Abort_IT+0xf8>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a61      	ldr	r2, [pc, #388]	; (8006c3c <HAL_DMA_Abort_IT+0x1e4>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d048      	beq.n	8006b4c <HAL_DMA_Abort_IT+0xf4>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a60      	ldr	r2, [pc, #384]	; (8006c40 <HAL_DMA_Abort_IT+0x1e8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d040      	beq.n	8006b46 <HAL_DMA_Abort_IT+0xee>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a5e      	ldr	r2, [pc, #376]	; (8006c44 <HAL_DMA_Abort_IT+0x1ec>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d038      	beq.n	8006b40 <HAL_DMA_Abort_IT+0xe8>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a5d      	ldr	r2, [pc, #372]	; (8006c48 <HAL_DMA_Abort_IT+0x1f0>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d030      	beq.n	8006b3a <HAL_DMA_Abort_IT+0xe2>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a5b      	ldr	r2, [pc, #364]	; (8006c4c <HAL_DMA_Abort_IT+0x1f4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d028      	beq.n	8006b34 <HAL_DMA_Abort_IT+0xdc>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a53      	ldr	r2, [pc, #332]	; (8006c34 <HAL_DMA_Abort_IT+0x1dc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d020      	beq.n	8006b2e <HAL_DMA_Abort_IT+0xd6>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a57      	ldr	r2, [pc, #348]	; (8006c50 <HAL_DMA_Abort_IT+0x1f8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d019      	beq.n	8006b2a <HAL_DMA_Abort_IT+0xd2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a56      	ldr	r2, [pc, #344]	; (8006c54 <HAL_DMA_Abort_IT+0x1fc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d012      	beq.n	8006b26 <HAL_DMA_Abort_IT+0xce>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a54      	ldr	r2, [pc, #336]	; (8006c58 <HAL_DMA_Abort_IT+0x200>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00a      	beq.n	8006b20 <HAL_DMA_Abort_IT+0xc8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a53      	ldr	r2, [pc, #332]	; (8006c5c <HAL_DMA_Abort_IT+0x204>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d102      	bne.n	8006b1a <HAL_DMA_Abort_IT+0xc2>
 8006b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b18:	e01b      	b.n	8006b52 <HAL_DMA_Abort_IT+0xfa>
 8006b1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b1e:	e018      	b.n	8006b52 <HAL_DMA_Abort_IT+0xfa>
 8006b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b24:	e015      	b.n	8006b52 <HAL_DMA_Abort_IT+0xfa>
 8006b26:	2310      	movs	r3, #16
 8006b28:	e013      	b.n	8006b52 <HAL_DMA_Abort_IT+0xfa>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e011      	b.n	8006b52 <HAL_DMA_Abort_IT+0xfa>
 8006b2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b32:	e00e      	b.n	8006b52 <HAL_DMA_Abort_IT+0xfa>
 8006b34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b38:	e00b      	b.n	8006b52 <HAL_DMA_Abort_IT+0xfa>
 8006b3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006b3e:	e008      	b.n	8006b52 <HAL_DMA_Abort_IT+0xfa>
 8006b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b44:	e005      	b.n	8006b52 <HAL_DMA_Abort_IT+0xfa>
 8006b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b4a:	e002      	b.n	8006b52 <HAL_DMA_Abort_IT+0xfa>
 8006b4c:	2310      	movs	r3, #16
 8006b4e:	e000      	b.n	8006b52 <HAL_DMA_Abort_IT+0xfa>
 8006b50:	2301      	movs	r3, #1
 8006b52:	4a43      	ldr	r2, [pc, #268]	; (8006c60 <HAL_DMA_Abort_IT+0x208>)
 8006b54:	6053      	str	r3, [r2, #4]
 8006b56:	e057      	b.n	8006c08 <HAL_DMA_Abort_IT+0x1b0>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a36      	ldr	r2, [pc, #216]	; (8006c38 <HAL_DMA_Abort_IT+0x1e0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d04f      	beq.n	8006c02 <HAL_DMA_Abort_IT+0x1aa>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a35      	ldr	r2, [pc, #212]	; (8006c3c <HAL_DMA_Abort_IT+0x1e4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d048      	beq.n	8006bfe <HAL_DMA_Abort_IT+0x1a6>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a33      	ldr	r2, [pc, #204]	; (8006c40 <HAL_DMA_Abort_IT+0x1e8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d040      	beq.n	8006bf8 <HAL_DMA_Abort_IT+0x1a0>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a32      	ldr	r2, [pc, #200]	; (8006c44 <HAL_DMA_Abort_IT+0x1ec>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d038      	beq.n	8006bf2 <HAL_DMA_Abort_IT+0x19a>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a30      	ldr	r2, [pc, #192]	; (8006c48 <HAL_DMA_Abort_IT+0x1f0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d030      	beq.n	8006bec <HAL_DMA_Abort_IT+0x194>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a2f      	ldr	r2, [pc, #188]	; (8006c4c <HAL_DMA_Abort_IT+0x1f4>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d028      	beq.n	8006be6 <HAL_DMA_Abort_IT+0x18e>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a26      	ldr	r2, [pc, #152]	; (8006c34 <HAL_DMA_Abort_IT+0x1dc>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d020      	beq.n	8006be0 <HAL_DMA_Abort_IT+0x188>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a2b      	ldr	r2, [pc, #172]	; (8006c50 <HAL_DMA_Abort_IT+0x1f8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d019      	beq.n	8006bdc <HAL_DMA_Abort_IT+0x184>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a29      	ldr	r2, [pc, #164]	; (8006c54 <HAL_DMA_Abort_IT+0x1fc>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d012      	beq.n	8006bd8 <HAL_DMA_Abort_IT+0x180>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a28      	ldr	r2, [pc, #160]	; (8006c58 <HAL_DMA_Abort_IT+0x200>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00a      	beq.n	8006bd2 <HAL_DMA_Abort_IT+0x17a>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a26      	ldr	r2, [pc, #152]	; (8006c5c <HAL_DMA_Abort_IT+0x204>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d102      	bne.n	8006bcc <HAL_DMA_Abort_IT+0x174>
 8006bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bca:	e01b      	b.n	8006c04 <HAL_DMA_Abort_IT+0x1ac>
 8006bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bd0:	e018      	b.n	8006c04 <HAL_DMA_Abort_IT+0x1ac>
 8006bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bd6:	e015      	b.n	8006c04 <HAL_DMA_Abort_IT+0x1ac>
 8006bd8:	2310      	movs	r3, #16
 8006bda:	e013      	b.n	8006c04 <HAL_DMA_Abort_IT+0x1ac>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e011      	b.n	8006c04 <HAL_DMA_Abort_IT+0x1ac>
 8006be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006be4:	e00e      	b.n	8006c04 <HAL_DMA_Abort_IT+0x1ac>
 8006be6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006bea:	e00b      	b.n	8006c04 <HAL_DMA_Abort_IT+0x1ac>
 8006bec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bf0:	e008      	b.n	8006c04 <HAL_DMA_Abort_IT+0x1ac>
 8006bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bf6:	e005      	b.n	8006c04 <HAL_DMA_Abort_IT+0x1ac>
 8006bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bfc:	e002      	b.n	8006c04 <HAL_DMA_Abort_IT+0x1ac>
 8006bfe:	2310      	movs	r3, #16
 8006c00:	e000      	b.n	8006c04 <HAL_DMA_Abort_IT+0x1ac>
 8006c02:	2301      	movs	r3, #1
 8006c04:	4a17      	ldr	r2, [pc, #92]	; (8006c64 <HAL_DMA_Abort_IT+0x20c>)
 8006c06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	4798      	blx	r3
    } 
  }
  return status;
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	40020080 	.word	0x40020080
 8006c38:	40020008 	.word	0x40020008
 8006c3c:	4002001c 	.word	0x4002001c
 8006c40:	40020030 	.word	0x40020030
 8006c44:	40020044 	.word	0x40020044
 8006c48:	40020058 	.word	0x40020058
 8006c4c:	4002006c 	.word	0x4002006c
 8006c50:	40020408 	.word	0x40020408
 8006c54:	4002041c 	.word	0x4002041c
 8006c58:	40020430 	.word	0x40020430
 8006c5c:	40020444 	.word	0x40020444
 8006c60:	40020400 	.word	0x40020400
 8006c64:	40020000 	.word	0x40020000

08006c68 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c84:	2204      	movs	r2, #4
 8006c86:	409a      	lsls	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 80d6 	beq.w	8006e3e <HAL_DMA_IRQHandler+0x1d6>
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80d0 	beq.w	8006e3e <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d107      	bne.n	8006cbc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 0204 	bic.w	r2, r2, #4
 8006cba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4b9b      	ldr	r3, [pc, #620]	; (8006f30 <HAL_DMA_IRQHandler+0x2c8>)
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d958      	bls.n	8006d7a <HAL_DMA_IRQHandler+0x112>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a99      	ldr	r2, [pc, #612]	; (8006f34 <HAL_DMA_IRQHandler+0x2cc>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d04f      	beq.n	8006d72 <HAL_DMA_IRQHandler+0x10a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a98      	ldr	r2, [pc, #608]	; (8006f38 <HAL_DMA_IRQHandler+0x2d0>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d048      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x106>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a96      	ldr	r2, [pc, #600]	; (8006f3c <HAL_DMA_IRQHandler+0x2d4>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d040      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x100>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a95      	ldr	r2, [pc, #596]	; (8006f40 <HAL_DMA_IRQHandler+0x2d8>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d038      	beq.n	8006d62 <HAL_DMA_IRQHandler+0xfa>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a93      	ldr	r2, [pc, #588]	; (8006f44 <HAL_DMA_IRQHandler+0x2dc>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d030      	beq.n	8006d5c <HAL_DMA_IRQHandler+0xf4>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a92      	ldr	r2, [pc, #584]	; (8006f48 <HAL_DMA_IRQHandler+0x2e0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d028      	beq.n	8006d56 <HAL_DMA_IRQHandler+0xee>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a89      	ldr	r2, [pc, #548]	; (8006f30 <HAL_DMA_IRQHandler+0x2c8>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d020      	beq.n	8006d50 <HAL_DMA_IRQHandler+0xe8>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a8e      	ldr	r2, [pc, #568]	; (8006f4c <HAL_DMA_IRQHandler+0x2e4>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d019      	beq.n	8006d4c <HAL_DMA_IRQHandler+0xe4>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a8c      	ldr	r2, [pc, #560]	; (8006f50 <HAL_DMA_IRQHandler+0x2e8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d012      	beq.n	8006d48 <HAL_DMA_IRQHandler+0xe0>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a8b      	ldr	r2, [pc, #556]	; (8006f54 <HAL_DMA_IRQHandler+0x2ec>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00a      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xda>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a89      	ldr	r2, [pc, #548]	; (8006f58 <HAL_DMA_IRQHandler+0x2f0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d102      	bne.n	8006d3c <HAL_DMA_IRQHandler+0xd4>
 8006d36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d3a:	e01b      	b.n	8006d74 <HAL_DMA_IRQHandler+0x10c>
 8006d3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006d40:	e018      	b.n	8006d74 <HAL_DMA_IRQHandler+0x10c>
 8006d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d46:	e015      	b.n	8006d74 <HAL_DMA_IRQHandler+0x10c>
 8006d48:	2340      	movs	r3, #64	; 0x40
 8006d4a:	e013      	b.n	8006d74 <HAL_DMA_IRQHandler+0x10c>
 8006d4c:	2304      	movs	r3, #4
 8006d4e:	e011      	b.n	8006d74 <HAL_DMA_IRQHandler+0x10c>
 8006d50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006d54:	e00e      	b.n	8006d74 <HAL_DMA_IRQHandler+0x10c>
 8006d56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006d5a:	e00b      	b.n	8006d74 <HAL_DMA_IRQHandler+0x10c>
 8006d5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006d60:	e008      	b.n	8006d74 <HAL_DMA_IRQHandler+0x10c>
 8006d62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d66:	e005      	b.n	8006d74 <HAL_DMA_IRQHandler+0x10c>
 8006d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d6c:	e002      	b.n	8006d74 <HAL_DMA_IRQHandler+0x10c>
 8006d6e:	2340      	movs	r3, #64	; 0x40
 8006d70:	e000      	b.n	8006d74 <HAL_DMA_IRQHandler+0x10c>
 8006d72:	2304      	movs	r3, #4
 8006d74:	4a79      	ldr	r2, [pc, #484]	; (8006f5c <HAL_DMA_IRQHandler+0x2f4>)
 8006d76:	6053      	str	r3, [r2, #4]
 8006d78:	e057      	b.n	8006e2a <HAL_DMA_IRQHandler+0x1c2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a6d      	ldr	r2, [pc, #436]	; (8006f34 <HAL_DMA_IRQHandler+0x2cc>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d04f      	beq.n	8006e24 <HAL_DMA_IRQHandler+0x1bc>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a6b      	ldr	r2, [pc, #428]	; (8006f38 <HAL_DMA_IRQHandler+0x2d0>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d048      	beq.n	8006e20 <HAL_DMA_IRQHandler+0x1b8>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a6a      	ldr	r2, [pc, #424]	; (8006f3c <HAL_DMA_IRQHandler+0x2d4>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d040      	beq.n	8006e1a <HAL_DMA_IRQHandler+0x1b2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a68      	ldr	r2, [pc, #416]	; (8006f40 <HAL_DMA_IRQHandler+0x2d8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d038      	beq.n	8006e14 <HAL_DMA_IRQHandler+0x1ac>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a67      	ldr	r2, [pc, #412]	; (8006f44 <HAL_DMA_IRQHandler+0x2dc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d030      	beq.n	8006e0e <HAL_DMA_IRQHandler+0x1a6>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a65      	ldr	r2, [pc, #404]	; (8006f48 <HAL_DMA_IRQHandler+0x2e0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d028      	beq.n	8006e08 <HAL_DMA_IRQHandler+0x1a0>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a5d      	ldr	r2, [pc, #372]	; (8006f30 <HAL_DMA_IRQHandler+0x2c8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d020      	beq.n	8006e02 <HAL_DMA_IRQHandler+0x19a>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a61      	ldr	r2, [pc, #388]	; (8006f4c <HAL_DMA_IRQHandler+0x2e4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d019      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x196>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a60      	ldr	r2, [pc, #384]	; (8006f50 <HAL_DMA_IRQHandler+0x2e8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d012      	beq.n	8006dfa <HAL_DMA_IRQHandler+0x192>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a5e      	ldr	r2, [pc, #376]	; (8006f54 <HAL_DMA_IRQHandler+0x2ec>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00a      	beq.n	8006df4 <HAL_DMA_IRQHandler+0x18c>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a5d      	ldr	r2, [pc, #372]	; (8006f58 <HAL_DMA_IRQHandler+0x2f0>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d102      	bne.n	8006dee <HAL_DMA_IRQHandler+0x186>
 8006de8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006dec:	e01b      	b.n	8006e26 <HAL_DMA_IRQHandler+0x1be>
 8006dee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006df2:	e018      	b.n	8006e26 <HAL_DMA_IRQHandler+0x1be>
 8006df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006df8:	e015      	b.n	8006e26 <HAL_DMA_IRQHandler+0x1be>
 8006dfa:	2340      	movs	r3, #64	; 0x40
 8006dfc:	e013      	b.n	8006e26 <HAL_DMA_IRQHandler+0x1be>
 8006dfe:	2304      	movs	r3, #4
 8006e00:	e011      	b.n	8006e26 <HAL_DMA_IRQHandler+0x1be>
 8006e02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e06:	e00e      	b.n	8006e26 <HAL_DMA_IRQHandler+0x1be>
 8006e08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e0c:	e00b      	b.n	8006e26 <HAL_DMA_IRQHandler+0x1be>
 8006e0e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e12:	e008      	b.n	8006e26 <HAL_DMA_IRQHandler+0x1be>
 8006e14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e18:	e005      	b.n	8006e26 <HAL_DMA_IRQHandler+0x1be>
 8006e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e1e:	e002      	b.n	8006e26 <HAL_DMA_IRQHandler+0x1be>
 8006e20:	2340      	movs	r3, #64	; 0x40
 8006e22:	e000      	b.n	8006e26 <HAL_DMA_IRQHandler+0x1be>
 8006e24:	2304      	movs	r3, #4
 8006e26:	4a4e      	ldr	r2, [pc, #312]	; (8006f60 <HAL_DMA_IRQHandler+0x2f8>)
 8006e28:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 8136 	beq.w	80070a0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006e3c:	e130      	b.n	80070a0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	2202      	movs	r2, #2
 8006e44:	409a      	lsls	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 80f8 	beq.w	8007040 <HAL_DMA_IRQHandler+0x3d8>
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 80f2 	beq.w	8007040 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0320 	and.w	r3, r3, #32
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10b      	bne.n	8006e82 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 020a 	bic.w	r2, r2, #10
 8006e78:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	4b29      	ldr	r3, [pc, #164]	; (8006f30 <HAL_DMA_IRQHandler+0x2c8>)
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d973      	bls.n	8006f76 <HAL_DMA_IRQHandler+0x30e>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a28      	ldr	r2, [pc, #160]	; (8006f34 <HAL_DMA_IRQHandler+0x2cc>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d06a      	beq.n	8006f6e <HAL_DMA_IRQHandler+0x306>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a26      	ldr	r2, [pc, #152]	; (8006f38 <HAL_DMA_IRQHandler+0x2d0>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d063      	beq.n	8006f6a <HAL_DMA_IRQHandler+0x302>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a25      	ldr	r2, [pc, #148]	; (8006f3c <HAL_DMA_IRQHandler+0x2d4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d05b      	beq.n	8006f64 <HAL_DMA_IRQHandler+0x2fc>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a23      	ldr	r2, [pc, #140]	; (8006f40 <HAL_DMA_IRQHandler+0x2d8>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d038      	beq.n	8006f28 <HAL_DMA_IRQHandler+0x2c0>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a22      	ldr	r2, [pc, #136]	; (8006f44 <HAL_DMA_IRQHandler+0x2dc>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d030      	beq.n	8006f22 <HAL_DMA_IRQHandler+0x2ba>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a20      	ldr	r2, [pc, #128]	; (8006f48 <HAL_DMA_IRQHandler+0x2e0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d028      	beq.n	8006f1c <HAL_DMA_IRQHandler+0x2b4>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a18      	ldr	r2, [pc, #96]	; (8006f30 <HAL_DMA_IRQHandler+0x2c8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d020      	beq.n	8006f16 <HAL_DMA_IRQHandler+0x2ae>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1c      	ldr	r2, [pc, #112]	; (8006f4c <HAL_DMA_IRQHandler+0x2e4>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d019      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x2aa>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1b      	ldr	r2, [pc, #108]	; (8006f50 <HAL_DMA_IRQHandler+0x2e8>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d012      	beq.n	8006f0e <HAL_DMA_IRQHandler+0x2a6>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a19      	ldr	r2, [pc, #100]	; (8006f54 <HAL_DMA_IRQHandler+0x2ec>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00a      	beq.n	8006f08 <HAL_DMA_IRQHandler+0x2a0>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a18      	ldr	r2, [pc, #96]	; (8006f58 <HAL_DMA_IRQHandler+0x2f0>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d102      	bne.n	8006f02 <HAL_DMA_IRQHandler+0x29a>
 8006efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f00:	e036      	b.n	8006f70 <HAL_DMA_IRQHandler+0x308>
 8006f02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f06:	e033      	b.n	8006f70 <HAL_DMA_IRQHandler+0x308>
 8006f08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f0c:	e030      	b.n	8006f70 <HAL_DMA_IRQHandler+0x308>
 8006f0e:	2320      	movs	r3, #32
 8006f10:	e02e      	b.n	8006f70 <HAL_DMA_IRQHandler+0x308>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e02c      	b.n	8006f70 <HAL_DMA_IRQHandler+0x308>
 8006f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f1a:	e029      	b.n	8006f70 <HAL_DMA_IRQHandler+0x308>
 8006f1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006f20:	e026      	b.n	8006f70 <HAL_DMA_IRQHandler+0x308>
 8006f22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f26:	e023      	b.n	8006f70 <HAL_DMA_IRQHandler+0x308>
 8006f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f2c:	e020      	b.n	8006f70 <HAL_DMA_IRQHandler+0x308>
 8006f2e:	bf00      	nop
 8006f30:	40020080 	.word	0x40020080
 8006f34:	40020008 	.word	0x40020008
 8006f38:	4002001c 	.word	0x4002001c
 8006f3c:	40020030 	.word	0x40020030
 8006f40:	40020044 	.word	0x40020044
 8006f44:	40020058 	.word	0x40020058
 8006f48:	4002006c 	.word	0x4002006c
 8006f4c:	40020408 	.word	0x40020408
 8006f50:	4002041c 	.word	0x4002041c
 8006f54:	40020430 	.word	0x40020430
 8006f58:	40020444 	.word	0x40020444
 8006f5c:	40020400 	.word	0x40020400
 8006f60:	40020000 	.word	0x40020000
 8006f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f68:	e002      	b.n	8006f70 <HAL_DMA_IRQHandler+0x308>
 8006f6a:	2320      	movs	r3, #32
 8006f6c:	e000      	b.n	8006f70 <HAL_DMA_IRQHandler+0x308>
 8006f6e:	2302      	movs	r3, #2
 8006f70:	4a4e      	ldr	r2, [pc, #312]	; (80070ac <HAL_DMA_IRQHandler+0x444>)
 8006f72:	6053      	str	r3, [r2, #4]
 8006f74:	e057      	b.n	8007026 <HAL_DMA_IRQHandler+0x3be>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a4d      	ldr	r2, [pc, #308]	; (80070b0 <HAL_DMA_IRQHandler+0x448>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d04f      	beq.n	8007020 <HAL_DMA_IRQHandler+0x3b8>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a4b      	ldr	r2, [pc, #300]	; (80070b4 <HAL_DMA_IRQHandler+0x44c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d048      	beq.n	800701c <HAL_DMA_IRQHandler+0x3b4>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a4a      	ldr	r2, [pc, #296]	; (80070b8 <HAL_DMA_IRQHandler+0x450>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d040      	beq.n	8007016 <HAL_DMA_IRQHandler+0x3ae>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a48      	ldr	r2, [pc, #288]	; (80070bc <HAL_DMA_IRQHandler+0x454>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d038      	beq.n	8007010 <HAL_DMA_IRQHandler+0x3a8>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a47      	ldr	r2, [pc, #284]	; (80070c0 <HAL_DMA_IRQHandler+0x458>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d030      	beq.n	800700a <HAL_DMA_IRQHandler+0x3a2>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a45      	ldr	r2, [pc, #276]	; (80070c4 <HAL_DMA_IRQHandler+0x45c>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d028      	beq.n	8007004 <HAL_DMA_IRQHandler+0x39c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a44      	ldr	r2, [pc, #272]	; (80070c8 <HAL_DMA_IRQHandler+0x460>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d020      	beq.n	8006ffe <HAL_DMA_IRQHandler+0x396>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a42      	ldr	r2, [pc, #264]	; (80070cc <HAL_DMA_IRQHandler+0x464>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d019      	beq.n	8006ffa <HAL_DMA_IRQHandler+0x392>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a41      	ldr	r2, [pc, #260]	; (80070d0 <HAL_DMA_IRQHandler+0x468>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d012      	beq.n	8006ff6 <HAL_DMA_IRQHandler+0x38e>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a3f      	ldr	r2, [pc, #252]	; (80070d4 <HAL_DMA_IRQHandler+0x46c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d00a      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x388>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a3e      	ldr	r2, [pc, #248]	; (80070d8 <HAL_DMA_IRQHandler+0x470>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d102      	bne.n	8006fea <HAL_DMA_IRQHandler+0x382>
 8006fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fe8:	e01b      	b.n	8007022 <HAL_DMA_IRQHandler+0x3ba>
 8006fea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fee:	e018      	b.n	8007022 <HAL_DMA_IRQHandler+0x3ba>
 8006ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ff4:	e015      	b.n	8007022 <HAL_DMA_IRQHandler+0x3ba>
 8006ff6:	2320      	movs	r3, #32
 8006ff8:	e013      	b.n	8007022 <HAL_DMA_IRQHandler+0x3ba>
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	e011      	b.n	8007022 <HAL_DMA_IRQHandler+0x3ba>
 8006ffe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007002:	e00e      	b.n	8007022 <HAL_DMA_IRQHandler+0x3ba>
 8007004:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007008:	e00b      	b.n	8007022 <HAL_DMA_IRQHandler+0x3ba>
 800700a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800700e:	e008      	b.n	8007022 <HAL_DMA_IRQHandler+0x3ba>
 8007010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007014:	e005      	b.n	8007022 <HAL_DMA_IRQHandler+0x3ba>
 8007016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800701a:	e002      	b.n	8007022 <HAL_DMA_IRQHandler+0x3ba>
 800701c:	2320      	movs	r3, #32
 800701e:	e000      	b.n	8007022 <HAL_DMA_IRQHandler+0x3ba>
 8007020:	2302      	movs	r3, #2
 8007022:	4a2e      	ldr	r2, [pc, #184]	; (80070dc <HAL_DMA_IRQHandler+0x474>)
 8007024:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	2b00      	cmp	r3, #0
 8007034:	d034      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800703e:	e02f      	b.n	80070a0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	2208      	movs	r2, #8
 8007046:	409a      	lsls	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4013      	ands	r3, r2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d028      	beq.n	80070a2 <HAL_DMA_IRQHandler+0x43a>
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	d023      	beq.n	80070a2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 020e 	bic.w	r2, r2, #14
 8007068:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007072:	2101      	movs	r1, #1
 8007074:	fa01 f202 	lsl.w	r2, r1, r2
 8007078:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007094:	2b00      	cmp	r3, #0
 8007096:	d004      	beq.n	80070a2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	4798      	blx	r3
    }
  }
  return;
 80070a0:	bf00      	nop
 80070a2:	bf00      	nop
}
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	40020400 	.word	0x40020400
 80070b0:	40020008 	.word	0x40020008
 80070b4:	4002001c 	.word	0x4002001c
 80070b8:	40020030 	.word	0x40020030
 80070bc:	40020044 	.word	0x40020044
 80070c0:	40020058 	.word	0x40020058
 80070c4:	4002006c 	.word	0x4002006c
 80070c8:	40020080 	.word	0x40020080
 80070cc:	40020408 	.word	0x40020408
 80070d0:	4002041c 	.word	0x4002041c
 80070d4:	40020430 	.word	0x40020430
 80070d8:	40020444 	.word	0x40020444
 80070dc:	40020000 	.word	0x40020000

080070e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
 80070ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f6:	2101      	movs	r1, #1
 80070f8:	fa01 f202 	lsl.w	r2, r1, r2
 80070fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2b10      	cmp	r3, #16
 800710c:	d108      	bne.n	8007120 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800711e:	e007      	b.n	8007130 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68ba      	ldr	r2, [r7, #8]
 8007126:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	60da      	str	r2, [r3, #12]
}
 8007130:	bf00      	nop
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	bc80      	pop	{r7}
 8007138:	4770      	bx	lr
	...

0800713c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800713c:	b480      	push	{r7}
 800713e:	b08b      	sub	sp, #44	; 0x2c
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007146:	2300      	movs	r3, #0
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800714a:	2300      	movs	r3, #0
 800714c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800714e:	e179      	b.n	8007444 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007150:	2201      	movs	r2, #1
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	fa02 f303 	lsl.w	r3, r2, r3
 8007158:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	69fa      	ldr	r2, [r7, #28]
 8007160:	4013      	ands	r3, r2
 8007162:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	429a      	cmp	r2, r3
 800716a:	f040 8168 	bne.w	800743e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	4aa0      	ldr	r2, [pc, #640]	; (80073f4 <HAL_GPIO_Init+0x2b8>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d05e      	beq.n	8007236 <HAL_GPIO_Init+0xfa>
 8007178:	4a9e      	ldr	r2, [pc, #632]	; (80073f4 <HAL_GPIO_Init+0x2b8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d875      	bhi.n	800726a <HAL_GPIO_Init+0x12e>
 800717e:	4a9e      	ldr	r2, [pc, #632]	; (80073f8 <HAL_GPIO_Init+0x2bc>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d058      	beq.n	8007236 <HAL_GPIO_Init+0xfa>
 8007184:	4a9c      	ldr	r2, [pc, #624]	; (80073f8 <HAL_GPIO_Init+0x2bc>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d86f      	bhi.n	800726a <HAL_GPIO_Init+0x12e>
 800718a:	4a9c      	ldr	r2, [pc, #624]	; (80073fc <HAL_GPIO_Init+0x2c0>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d052      	beq.n	8007236 <HAL_GPIO_Init+0xfa>
 8007190:	4a9a      	ldr	r2, [pc, #616]	; (80073fc <HAL_GPIO_Init+0x2c0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d869      	bhi.n	800726a <HAL_GPIO_Init+0x12e>
 8007196:	4a9a      	ldr	r2, [pc, #616]	; (8007400 <HAL_GPIO_Init+0x2c4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d04c      	beq.n	8007236 <HAL_GPIO_Init+0xfa>
 800719c:	4a98      	ldr	r2, [pc, #608]	; (8007400 <HAL_GPIO_Init+0x2c4>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d863      	bhi.n	800726a <HAL_GPIO_Init+0x12e>
 80071a2:	4a98      	ldr	r2, [pc, #608]	; (8007404 <HAL_GPIO_Init+0x2c8>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d046      	beq.n	8007236 <HAL_GPIO_Init+0xfa>
 80071a8:	4a96      	ldr	r2, [pc, #600]	; (8007404 <HAL_GPIO_Init+0x2c8>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d85d      	bhi.n	800726a <HAL_GPIO_Init+0x12e>
 80071ae:	2b12      	cmp	r3, #18
 80071b0:	d82a      	bhi.n	8007208 <HAL_GPIO_Init+0xcc>
 80071b2:	2b12      	cmp	r3, #18
 80071b4:	d859      	bhi.n	800726a <HAL_GPIO_Init+0x12e>
 80071b6:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <HAL_GPIO_Init+0x80>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	08007237 	.word	0x08007237
 80071c0:	08007211 	.word	0x08007211
 80071c4:	08007223 	.word	0x08007223
 80071c8:	08007265 	.word	0x08007265
 80071cc:	0800726b 	.word	0x0800726b
 80071d0:	0800726b 	.word	0x0800726b
 80071d4:	0800726b 	.word	0x0800726b
 80071d8:	0800726b 	.word	0x0800726b
 80071dc:	0800726b 	.word	0x0800726b
 80071e0:	0800726b 	.word	0x0800726b
 80071e4:	0800726b 	.word	0x0800726b
 80071e8:	0800726b 	.word	0x0800726b
 80071ec:	0800726b 	.word	0x0800726b
 80071f0:	0800726b 	.word	0x0800726b
 80071f4:	0800726b 	.word	0x0800726b
 80071f8:	0800726b 	.word	0x0800726b
 80071fc:	0800726b 	.word	0x0800726b
 8007200:	08007219 	.word	0x08007219
 8007204:	0800722d 	.word	0x0800722d
 8007208:	4a7f      	ldr	r2, [pc, #508]	; (8007408 <HAL_GPIO_Init+0x2cc>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d013      	beq.n	8007236 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800720e:	e02c      	b.n	800726a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	623b      	str	r3, [r7, #32]
          break;
 8007216:	e029      	b.n	800726c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	3304      	adds	r3, #4
 800721e:	623b      	str	r3, [r7, #32]
          break;
 8007220:	e024      	b.n	800726c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	3308      	adds	r3, #8
 8007228:	623b      	str	r3, [r7, #32]
          break;
 800722a:	e01f      	b.n	800726c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	330c      	adds	r3, #12
 8007232:	623b      	str	r3, [r7, #32]
          break;
 8007234:	e01a      	b.n	800726c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d102      	bne.n	8007244 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800723e:	2304      	movs	r3, #4
 8007240:	623b      	str	r3, [r7, #32]
          break;
 8007242:	e013      	b.n	800726c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d105      	bne.n	8007258 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800724c:	2308      	movs	r3, #8
 800724e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	611a      	str	r2, [r3, #16]
          break;
 8007256:	e009      	b.n	800726c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007258:	2308      	movs	r3, #8
 800725a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	615a      	str	r2, [r3, #20]
          break;
 8007262:	e003      	b.n	800726c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007264:	2300      	movs	r3, #0
 8007266:	623b      	str	r3, [r7, #32]
          break;
 8007268:	e000      	b.n	800726c <HAL_GPIO_Init+0x130>
          break;
 800726a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	2bff      	cmp	r3, #255	; 0xff
 8007270:	d801      	bhi.n	8007276 <HAL_GPIO_Init+0x13a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	e001      	b.n	800727a <HAL_GPIO_Init+0x13e>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3304      	adds	r3, #4
 800727a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	2bff      	cmp	r3, #255	; 0xff
 8007280:	d802      	bhi.n	8007288 <HAL_GPIO_Init+0x14c>
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	e002      	b.n	800728e <HAL_GPIO_Init+0x152>
 8007288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728a:	3b08      	subs	r3, #8
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	210f      	movs	r1, #15
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	fa01 f303 	lsl.w	r3, r1, r3
 800729c:	43db      	mvns	r3, r3
 800729e:	401a      	ands	r2, r3
 80072a0:	6a39      	ldr	r1, [r7, #32]
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	fa01 f303 	lsl.w	r3, r1, r3
 80072a8:	431a      	orrs	r2, r3
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f000 80c1 	beq.w	800743e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80072bc:	4b53      	ldr	r3, [pc, #332]	; (800740c <HAL_GPIO_Init+0x2d0>)
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	4a52      	ldr	r2, [pc, #328]	; (800740c <HAL_GPIO_Init+0x2d0>)
 80072c2:	f043 0301 	orr.w	r3, r3, #1
 80072c6:	6193      	str	r3, [r2, #24]
 80072c8:	4b50      	ldr	r3, [pc, #320]	; (800740c <HAL_GPIO_Init+0x2d0>)
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80072d4:	4a4e      	ldr	r2, [pc, #312]	; (8007410 <HAL_GPIO_Init+0x2d4>)
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	089b      	lsrs	r3, r3, #2
 80072da:	3302      	adds	r3, #2
 80072dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	f003 0303 	and.w	r3, r3, #3
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	220f      	movs	r2, #15
 80072ec:	fa02 f303 	lsl.w	r3, r2, r3
 80072f0:	43db      	mvns	r3, r3
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4013      	ands	r3, r2
 80072f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a46      	ldr	r2, [pc, #280]	; (8007414 <HAL_GPIO_Init+0x2d8>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d01f      	beq.n	8007340 <HAL_GPIO_Init+0x204>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a45      	ldr	r2, [pc, #276]	; (8007418 <HAL_GPIO_Init+0x2dc>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d019      	beq.n	800733c <HAL_GPIO_Init+0x200>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a44      	ldr	r2, [pc, #272]	; (800741c <HAL_GPIO_Init+0x2e0>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d013      	beq.n	8007338 <HAL_GPIO_Init+0x1fc>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a43      	ldr	r2, [pc, #268]	; (8007420 <HAL_GPIO_Init+0x2e4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00d      	beq.n	8007334 <HAL_GPIO_Init+0x1f8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a42      	ldr	r2, [pc, #264]	; (8007424 <HAL_GPIO_Init+0x2e8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d007      	beq.n	8007330 <HAL_GPIO_Init+0x1f4>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a41      	ldr	r2, [pc, #260]	; (8007428 <HAL_GPIO_Init+0x2ec>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d101      	bne.n	800732c <HAL_GPIO_Init+0x1f0>
 8007328:	2305      	movs	r3, #5
 800732a:	e00a      	b.n	8007342 <HAL_GPIO_Init+0x206>
 800732c:	2306      	movs	r3, #6
 800732e:	e008      	b.n	8007342 <HAL_GPIO_Init+0x206>
 8007330:	2304      	movs	r3, #4
 8007332:	e006      	b.n	8007342 <HAL_GPIO_Init+0x206>
 8007334:	2303      	movs	r3, #3
 8007336:	e004      	b.n	8007342 <HAL_GPIO_Init+0x206>
 8007338:	2302      	movs	r3, #2
 800733a:	e002      	b.n	8007342 <HAL_GPIO_Init+0x206>
 800733c:	2301      	movs	r3, #1
 800733e:	e000      	b.n	8007342 <HAL_GPIO_Init+0x206>
 8007340:	2300      	movs	r3, #0
 8007342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007344:	f002 0203 	and.w	r2, r2, #3
 8007348:	0092      	lsls	r2, r2, #2
 800734a:	4093      	lsls	r3, r2
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007352:	492f      	ldr	r1, [pc, #188]	; (8007410 <HAL_GPIO_Init+0x2d4>)
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	089b      	lsrs	r3, r3, #2
 8007358:	3302      	adds	r3, #2
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d006      	beq.n	800737a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800736c:	4b2f      	ldr	r3, [pc, #188]	; (800742c <HAL_GPIO_Init+0x2f0>)
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	492e      	ldr	r1, [pc, #184]	; (800742c <HAL_GPIO_Init+0x2f0>)
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	4313      	orrs	r3, r2
 8007376:	600b      	str	r3, [r1, #0]
 8007378:	e006      	b.n	8007388 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800737a:	4b2c      	ldr	r3, [pc, #176]	; (800742c <HAL_GPIO_Init+0x2f0>)
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	43db      	mvns	r3, r3
 8007382:	492a      	ldr	r1, [pc, #168]	; (800742c <HAL_GPIO_Init+0x2f0>)
 8007384:	4013      	ands	r3, r2
 8007386:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d006      	beq.n	80073a2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007394:	4b25      	ldr	r3, [pc, #148]	; (800742c <HAL_GPIO_Init+0x2f0>)
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	4924      	ldr	r1, [pc, #144]	; (800742c <HAL_GPIO_Init+0x2f0>)
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	4313      	orrs	r3, r2
 800739e:	604b      	str	r3, [r1, #4]
 80073a0:	e006      	b.n	80073b0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80073a2:	4b22      	ldr	r3, [pc, #136]	; (800742c <HAL_GPIO_Init+0x2f0>)
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	43db      	mvns	r3, r3
 80073aa:	4920      	ldr	r1, [pc, #128]	; (800742c <HAL_GPIO_Init+0x2f0>)
 80073ac:	4013      	ands	r3, r2
 80073ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d006      	beq.n	80073ca <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80073bc:	4b1b      	ldr	r3, [pc, #108]	; (800742c <HAL_GPIO_Init+0x2f0>)
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	491a      	ldr	r1, [pc, #104]	; (800742c <HAL_GPIO_Init+0x2f0>)
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	608b      	str	r3, [r1, #8]
 80073c8:	e006      	b.n	80073d8 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80073ca:	4b18      	ldr	r3, [pc, #96]	; (800742c <HAL_GPIO_Init+0x2f0>)
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	43db      	mvns	r3, r3
 80073d2:	4916      	ldr	r1, [pc, #88]	; (800742c <HAL_GPIO_Init+0x2f0>)
 80073d4:	4013      	ands	r3, r2
 80073d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d025      	beq.n	8007430 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80073e4:	4b11      	ldr	r3, [pc, #68]	; (800742c <HAL_GPIO_Init+0x2f0>)
 80073e6:	68da      	ldr	r2, [r3, #12]
 80073e8:	4910      	ldr	r1, [pc, #64]	; (800742c <HAL_GPIO_Init+0x2f0>)
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60cb      	str	r3, [r1, #12]
 80073f0:	e025      	b.n	800743e <HAL_GPIO_Init+0x302>
 80073f2:	bf00      	nop
 80073f4:	10320000 	.word	0x10320000
 80073f8:	10310000 	.word	0x10310000
 80073fc:	10220000 	.word	0x10220000
 8007400:	10210000 	.word	0x10210000
 8007404:	10120000 	.word	0x10120000
 8007408:	10110000 	.word	0x10110000
 800740c:	40021000 	.word	0x40021000
 8007410:	40010000 	.word	0x40010000
 8007414:	40010800 	.word	0x40010800
 8007418:	40010c00 	.word	0x40010c00
 800741c:	40011000 	.word	0x40011000
 8007420:	40011400 	.word	0x40011400
 8007424:	40011800 	.word	0x40011800
 8007428:	40011c00 	.word	0x40011c00
 800742c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007430:	4b0b      	ldr	r3, [pc, #44]	; (8007460 <HAL_GPIO_Init+0x324>)
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	43db      	mvns	r3, r3
 8007438:	4909      	ldr	r1, [pc, #36]	; (8007460 <HAL_GPIO_Init+0x324>)
 800743a:	4013      	ands	r3, r2
 800743c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800743e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007440:	3301      	adds	r3, #1
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744a:	fa22 f303 	lsr.w	r3, r2, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	f47f ae7e 	bne.w	8007150 <HAL_GPIO_Init+0x14>
  }
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop
 8007458:	372c      	adds	r7, #44	; 0x2c
 800745a:	46bd      	mov	sp, r7
 800745c:	bc80      	pop	{r7}
 800745e:	4770      	bx	lr
 8007460:	40010400 	.word	0x40010400

08007464 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	887b      	ldrh	r3, [r7, #2]
 8007476:	4013      	ands	r3, r2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800747c:	2301      	movs	r3, #1
 800747e:	73fb      	strb	r3, [r7, #15]
 8007480:	e001      	b.n	8007486 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr

08007492 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	460b      	mov	r3, r1
 800749c:	807b      	strh	r3, [r7, #2]
 800749e:	4613      	mov	r3, r2
 80074a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80074a2:	787b      	ldrb	r3, [r7, #1]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074a8:	887a      	ldrh	r2, [r7, #2]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80074ae:	e003      	b.n	80074b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80074b0:	887b      	ldrh	r3, [r7, #2]
 80074b2:	041a      	lsls	r2, r3, #16
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	611a      	str	r2, [r3, #16]
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	bc80      	pop	{r7}
 80074c0:	4770      	bx	lr
	...

080074c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e26c      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 8087 	beq.w	80075f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074e4:	4b92      	ldr	r3, [pc, #584]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f003 030c 	and.w	r3, r3, #12
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d00c      	beq.n	800750a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80074f0:	4b8f      	ldr	r3, [pc, #572]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f003 030c 	and.w	r3, r3, #12
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d112      	bne.n	8007522 <HAL_RCC_OscConfig+0x5e>
 80074fc:	4b8c      	ldr	r3, [pc, #560]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007508:	d10b      	bne.n	8007522 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800750a:	4b89      	ldr	r3, [pc, #548]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d06c      	beq.n	80075f0 <HAL_RCC_OscConfig+0x12c>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d168      	bne.n	80075f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e246      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800752a:	d106      	bne.n	800753a <HAL_RCC_OscConfig+0x76>
 800752c:	4b80      	ldr	r3, [pc, #512]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a7f      	ldr	r2, [pc, #508]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	e02e      	b.n	8007598 <HAL_RCC_OscConfig+0xd4>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10c      	bne.n	800755c <HAL_RCC_OscConfig+0x98>
 8007542:	4b7b      	ldr	r3, [pc, #492]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a7a      	ldr	r2, [pc, #488]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	4b78      	ldr	r3, [pc, #480]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a77      	ldr	r2, [pc, #476]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007554:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	e01d      	b.n	8007598 <HAL_RCC_OscConfig+0xd4>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007564:	d10c      	bne.n	8007580 <HAL_RCC_OscConfig+0xbc>
 8007566:	4b72      	ldr	r3, [pc, #456]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a71      	ldr	r2, [pc, #452]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 800756c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	4b6f      	ldr	r3, [pc, #444]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a6e      	ldr	r2, [pc, #440]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	e00b      	b.n	8007598 <HAL_RCC_OscConfig+0xd4>
 8007580:	4b6b      	ldr	r3, [pc, #428]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a6a      	ldr	r2, [pc, #424]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	4b68      	ldr	r3, [pc, #416]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a67      	ldr	r2, [pc, #412]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007596:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d013      	beq.n	80075c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075a0:	f7fe f83e 	bl	8005620 <HAL_GetTick>
 80075a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075a6:	e008      	b.n	80075ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075a8:	f7fe f83a 	bl	8005620 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b64      	cmp	r3, #100	; 0x64
 80075b4:	d901      	bls.n	80075ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e1fa      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ba:	4b5d      	ldr	r3, [pc, #372]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0f0      	beq.n	80075a8 <HAL_RCC_OscConfig+0xe4>
 80075c6:	e014      	b.n	80075f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075c8:	f7fe f82a 	bl	8005620 <HAL_GetTick>
 80075cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075ce:	e008      	b.n	80075e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075d0:	f7fe f826 	bl	8005620 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	2b64      	cmp	r3, #100	; 0x64
 80075dc:	d901      	bls.n	80075e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80075de:	2303      	movs	r3, #3
 80075e0:	e1e6      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075e2:	4b53      	ldr	r3, [pc, #332]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1f0      	bne.n	80075d0 <HAL_RCC_OscConfig+0x10c>
 80075ee:	e000      	b.n	80075f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d063      	beq.n	80076c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80075fe:	4b4c      	ldr	r3, [pc, #304]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f003 030c 	and.w	r3, r3, #12
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00b      	beq.n	8007622 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800760a:	4b49      	ldr	r3, [pc, #292]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f003 030c 	and.w	r3, r3, #12
 8007612:	2b08      	cmp	r3, #8
 8007614:	d11c      	bne.n	8007650 <HAL_RCC_OscConfig+0x18c>
 8007616:	4b46      	ldr	r3, [pc, #280]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d116      	bne.n	8007650 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007622:	4b43      	ldr	r3, [pc, #268]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d005      	beq.n	800763a <HAL_RCC_OscConfig+0x176>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d001      	beq.n	800763a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e1ba      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800763a:	4b3d      	ldr	r3, [pc, #244]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	4939      	ldr	r1, [pc, #228]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 800764a:	4313      	orrs	r3, r2
 800764c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800764e:	e03a      	b.n	80076c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d020      	beq.n	800769a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007658:	4b36      	ldr	r3, [pc, #216]	; (8007734 <HAL_RCC_OscConfig+0x270>)
 800765a:	2201      	movs	r2, #1
 800765c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800765e:	f7fd ffdf 	bl	8005620 <HAL_GetTick>
 8007662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007664:	e008      	b.n	8007678 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007666:	f7fd ffdb 	bl	8005620 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	2b02      	cmp	r3, #2
 8007672:	d901      	bls.n	8007678 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e19b      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007678:	4b2d      	ldr	r3, [pc, #180]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0f0      	beq.n	8007666 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007684:	4b2a      	ldr	r3, [pc, #168]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	4927      	ldr	r1, [pc, #156]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 8007694:	4313      	orrs	r3, r2
 8007696:	600b      	str	r3, [r1, #0]
 8007698:	e015      	b.n	80076c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800769a:	4b26      	ldr	r3, [pc, #152]	; (8007734 <HAL_RCC_OscConfig+0x270>)
 800769c:	2200      	movs	r2, #0
 800769e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a0:	f7fd ffbe 	bl	8005620 <HAL_GetTick>
 80076a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076a6:	e008      	b.n	80076ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076a8:	f7fd ffba 	bl	8005620 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d901      	bls.n	80076ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e17a      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ba:	4b1d      	ldr	r3, [pc, #116]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1f0      	bne.n	80076a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0308 	and.w	r3, r3, #8
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d03a      	beq.n	8007748 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d019      	beq.n	800770e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076da:	4b17      	ldr	r3, [pc, #92]	; (8007738 <HAL_RCC_OscConfig+0x274>)
 80076dc:	2201      	movs	r2, #1
 80076de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076e0:	f7fd ff9e 	bl	8005620 <HAL_GetTick>
 80076e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076e6:	e008      	b.n	80076fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076e8:	f7fd ff9a 	bl	8005620 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e15a      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076fa:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <HAL_RCC_OscConfig+0x26c>)
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0f0      	beq.n	80076e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007706:	2001      	movs	r0, #1
 8007708:	f000 fada 	bl	8007cc0 <RCC_Delay>
 800770c:	e01c      	b.n	8007748 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800770e:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <HAL_RCC_OscConfig+0x274>)
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007714:	f7fd ff84 	bl	8005620 <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800771a:	e00f      	b.n	800773c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800771c:	f7fd ff80 	bl	8005620 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d908      	bls.n	800773c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e140      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
 800772e:	bf00      	nop
 8007730:	40021000 	.word	0x40021000
 8007734:	42420000 	.word	0x42420000
 8007738:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800773c:	4b9e      	ldr	r3, [pc, #632]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1e9      	bne.n	800771c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 80a6 	beq.w	80078a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007756:	2300      	movs	r3, #0
 8007758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800775a:	4b97      	ldr	r3, [pc, #604]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10d      	bne.n	8007782 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007766:	4b94      	ldr	r3, [pc, #592]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	4a93      	ldr	r2, [pc, #588]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 800776c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007770:	61d3      	str	r3, [r2, #28]
 8007772:	4b91      	ldr	r3, [pc, #580]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800777a:	60bb      	str	r3, [r7, #8]
 800777c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800777e:	2301      	movs	r3, #1
 8007780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007782:	4b8e      	ldr	r3, [pc, #568]	; (80079bc <HAL_RCC_OscConfig+0x4f8>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800778a:	2b00      	cmp	r3, #0
 800778c:	d118      	bne.n	80077c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800778e:	4b8b      	ldr	r3, [pc, #556]	; (80079bc <HAL_RCC_OscConfig+0x4f8>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a8a      	ldr	r2, [pc, #552]	; (80079bc <HAL_RCC_OscConfig+0x4f8>)
 8007794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800779a:	f7fd ff41 	bl	8005620 <HAL_GetTick>
 800779e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077a0:	e008      	b.n	80077b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077a2:	f7fd ff3d 	bl	8005620 <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	2b64      	cmp	r3, #100	; 0x64
 80077ae:	d901      	bls.n	80077b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e0fd      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077b4:	4b81      	ldr	r3, [pc, #516]	; (80079bc <HAL_RCC_OscConfig+0x4f8>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0f0      	beq.n	80077a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d106      	bne.n	80077d6 <HAL_RCC_OscConfig+0x312>
 80077c8:	4b7b      	ldr	r3, [pc, #492]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	4a7a      	ldr	r2, [pc, #488]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 80077ce:	f043 0301 	orr.w	r3, r3, #1
 80077d2:	6213      	str	r3, [r2, #32]
 80077d4:	e02d      	b.n	8007832 <HAL_RCC_OscConfig+0x36e>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10c      	bne.n	80077f8 <HAL_RCC_OscConfig+0x334>
 80077de:	4b76      	ldr	r3, [pc, #472]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	4a75      	ldr	r2, [pc, #468]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 80077e4:	f023 0301 	bic.w	r3, r3, #1
 80077e8:	6213      	str	r3, [r2, #32]
 80077ea:	4b73      	ldr	r3, [pc, #460]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	4a72      	ldr	r2, [pc, #456]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 80077f0:	f023 0304 	bic.w	r3, r3, #4
 80077f4:	6213      	str	r3, [r2, #32]
 80077f6:	e01c      	b.n	8007832 <HAL_RCC_OscConfig+0x36e>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	2b05      	cmp	r3, #5
 80077fe:	d10c      	bne.n	800781a <HAL_RCC_OscConfig+0x356>
 8007800:	4b6d      	ldr	r3, [pc, #436]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	4a6c      	ldr	r2, [pc, #432]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 8007806:	f043 0304 	orr.w	r3, r3, #4
 800780a:	6213      	str	r3, [r2, #32]
 800780c:	4b6a      	ldr	r3, [pc, #424]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	4a69      	ldr	r2, [pc, #420]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 8007812:	f043 0301 	orr.w	r3, r3, #1
 8007816:	6213      	str	r3, [r2, #32]
 8007818:	e00b      	b.n	8007832 <HAL_RCC_OscConfig+0x36e>
 800781a:	4b67      	ldr	r3, [pc, #412]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	4a66      	ldr	r2, [pc, #408]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 8007820:	f023 0301 	bic.w	r3, r3, #1
 8007824:	6213      	str	r3, [r2, #32]
 8007826:	4b64      	ldr	r3, [pc, #400]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	4a63      	ldr	r2, [pc, #396]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 800782c:	f023 0304 	bic.w	r3, r3, #4
 8007830:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d015      	beq.n	8007866 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800783a:	f7fd fef1 	bl	8005620 <HAL_GetTick>
 800783e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007840:	e00a      	b.n	8007858 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007842:	f7fd feed 	bl	8005620 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007850:	4293      	cmp	r3, r2
 8007852:	d901      	bls.n	8007858 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e0ab      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007858:	4b57      	ldr	r3, [pc, #348]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0ee      	beq.n	8007842 <HAL_RCC_OscConfig+0x37e>
 8007864:	e014      	b.n	8007890 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007866:	f7fd fedb 	bl	8005620 <HAL_GetTick>
 800786a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800786c:	e00a      	b.n	8007884 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800786e:	f7fd fed7 	bl	8005620 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	f241 3288 	movw	r2, #5000	; 0x1388
 800787c:	4293      	cmp	r3, r2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e095      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007884:	4b4c      	ldr	r3, [pc, #304]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1ee      	bne.n	800786e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007890:	7dfb      	ldrb	r3, [r7, #23]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d105      	bne.n	80078a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007896:	4b48      	ldr	r3, [pc, #288]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	4a47      	ldr	r2, [pc, #284]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 800789c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 8081 	beq.w	80079ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078ac:	4b42      	ldr	r3, [pc, #264]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f003 030c 	and.w	r3, r3, #12
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d061      	beq.n	800797c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	69db      	ldr	r3, [r3, #28]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d146      	bne.n	800794e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078c0:	4b3f      	ldr	r3, [pc, #252]	; (80079c0 <HAL_RCC_OscConfig+0x4fc>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078c6:	f7fd feab 	bl	8005620 <HAL_GetTick>
 80078ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078cc:	e008      	b.n	80078e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078ce:	f7fd fea7 	bl	8005620 <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d901      	bls.n	80078e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e067      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80078e0:	4b35      	ldr	r3, [pc, #212]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1f0      	bne.n	80078ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f4:	d108      	bne.n	8007908 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80078f6:	4b30      	ldr	r3, [pc, #192]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	492d      	ldr	r1, [pc, #180]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 8007904:	4313      	orrs	r3, r2
 8007906:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007908:	4b2b      	ldr	r3, [pc, #172]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a19      	ldr	r1, [r3, #32]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	430b      	orrs	r3, r1
 800791a:	4927      	ldr	r1, [pc, #156]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 800791c:	4313      	orrs	r3, r2
 800791e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007920:	4b27      	ldr	r3, [pc, #156]	; (80079c0 <HAL_RCC_OscConfig+0x4fc>)
 8007922:	2201      	movs	r2, #1
 8007924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007926:	f7fd fe7b 	bl	8005620 <HAL_GetTick>
 800792a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800792c:	e008      	b.n	8007940 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800792e:	f7fd fe77 	bl	8005620 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	2b02      	cmp	r3, #2
 800793a:	d901      	bls.n	8007940 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e037      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007940:	4b1d      	ldr	r3, [pc, #116]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0f0      	beq.n	800792e <HAL_RCC_OscConfig+0x46a>
 800794c:	e02f      	b.n	80079ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800794e:	4b1c      	ldr	r3, [pc, #112]	; (80079c0 <HAL_RCC_OscConfig+0x4fc>)
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007954:	f7fd fe64 	bl	8005620 <HAL_GetTick>
 8007958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800795a:	e008      	b.n	800796e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800795c:	f7fd fe60 	bl	8005620 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2b02      	cmp	r3, #2
 8007968:	d901      	bls.n	800796e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e020      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800796e:	4b12      	ldr	r3, [pc, #72]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1f0      	bne.n	800795c <HAL_RCC_OscConfig+0x498>
 800797a:	e018      	b.n	80079ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e013      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007988:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <HAL_RCC_OscConfig+0x4f4>)
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	429a      	cmp	r2, r3
 800799a:	d106      	bne.n	80079aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d001      	beq.n	80079ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e000      	b.n	80079b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	40021000 	.word	0x40021000
 80079bc:	40007000 	.word	0x40007000
 80079c0:	42420060 	.word	0x42420060

080079c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e0d0      	b.n	8007b7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079d8:	4b6a      	ldr	r3, [pc, #424]	; (8007b84 <HAL_RCC_ClockConfig+0x1c0>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d910      	bls.n	8007a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079e6:	4b67      	ldr	r3, [pc, #412]	; (8007b84 <HAL_RCC_ClockConfig+0x1c0>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f023 0207 	bic.w	r2, r3, #7
 80079ee:	4965      	ldr	r1, [pc, #404]	; (8007b84 <HAL_RCC_ClockConfig+0x1c0>)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079f6:	4b63      	ldr	r3, [pc, #396]	; (8007b84 <HAL_RCC_ClockConfig+0x1c0>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0307 	and.w	r3, r3, #7
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d001      	beq.n	8007a08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e0b8      	b.n	8007b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d020      	beq.n	8007a56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0304 	and.w	r3, r3, #4
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d005      	beq.n	8007a2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a20:	4b59      	ldr	r3, [pc, #356]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	4a58      	ldr	r2, [pc, #352]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007a26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007a2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0308 	and.w	r3, r3, #8
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d005      	beq.n	8007a44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a38:	4b53      	ldr	r3, [pc, #332]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	4a52      	ldr	r2, [pc, #328]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007a3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007a42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a44:	4b50      	ldr	r3, [pc, #320]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	494d      	ldr	r1, [pc, #308]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d040      	beq.n	8007ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d107      	bne.n	8007a7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a6a:	4b47      	ldr	r3, [pc, #284]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d115      	bne.n	8007aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e07f      	b.n	8007b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d107      	bne.n	8007a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a82:	4b41      	ldr	r3, [pc, #260]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d109      	bne.n	8007aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e073      	b.n	8007b7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a92:	4b3d      	ldr	r3, [pc, #244]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e06b      	b.n	8007b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007aa2:	4b39      	ldr	r3, [pc, #228]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f023 0203 	bic.w	r2, r3, #3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	4936      	ldr	r1, [pc, #216]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ab4:	f7fd fdb4 	bl	8005620 <HAL_GetTick>
 8007ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aba:	e00a      	b.n	8007ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007abc:	f7fd fdb0 	bl	8005620 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e053      	b.n	8007b7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ad2:	4b2d      	ldr	r3, [pc, #180]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f003 020c 	and.w	r2, r3, #12
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d1eb      	bne.n	8007abc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ae4:	4b27      	ldr	r3, [pc, #156]	; (8007b84 <HAL_RCC_ClockConfig+0x1c0>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0307 	and.w	r3, r3, #7
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d210      	bcs.n	8007b14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007af2:	4b24      	ldr	r3, [pc, #144]	; (8007b84 <HAL_RCC_ClockConfig+0x1c0>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f023 0207 	bic.w	r2, r3, #7
 8007afa:	4922      	ldr	r1, [pc, #136]	; (8007b84 <HAL_RCC_ClockConfig+0x1c0>)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b02:	4b20      	ldr	r3, [pc, #128]	; (8007b84 <HAL_RCC_ClockConfig+0x1c0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0307 	and.w	r3, r3, #7
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d001      	beq.n	8007b14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e032      	b.n	8007b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d008      	beq.n	8007b32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b20:	4b19      	ldr	r3, [pc, #100]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	4916      	ldr	r1, [pc, #88]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0308 	and.w	r3, r3, #8
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007b3e:	4b12      	ldr	r3, [pc, #72]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	490e      	ldr	r1, [pc, #56]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b52:	f000 f821 	bl	8007b98 <HAL_RCC_GetSysClockFreq>
 8007b56:	4602      	mov	r2, r0
 8007b58:	4b0b      	ldr	r3, [pc, #44]	; (8007b88 <HAL_RCC_ClockConfig+0x1c4>)
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	091b      	lsrs	r3, r3, #4
 8007b5e:	f003 030f 	and.w	r3, r3, #15
 8007b62:	490a      	ldr	r1, [pc, #40]	; (8007b8c <HAL_RCC_ClockConfig+0x1c8>)
 8007b64:	5ccb      	ldrb	r3, [r1, r3]
 8007b66:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6a:	4a09      	ldr	r2, [pc, #36]	; (8007b90 <HAL_RCC_ClockConfig+0x1cc>)
 8007b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007b6e:	4b09      	ldr	r3, [pc, #36]	; (8007b94 <HAL_RCC_ClockConfig+0x1d0>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fd fd24 	bl	80055c0 <HAL_InitTick>

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	40022000 	.word	0x40022000
 8007b88:	40021000 	.word	0x40021000
 8007b8c:	0800b0d8 	.word	0x0800b0d8
 8007b90:	20000000 	.word	0x20000000
 8007b94:	20000004 	.word	0x20000004

08007b98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b98:	b490      	push	{r4, r7}
 8007b9a:	b08a      	sub	sp, #40	; 0x28
 8007b9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007b9e:	4b2a      	ldr	r3, [pc, #168]	; (8007c48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007ba0:	1d3c      	adds	r4, r7, #4
 8007ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007ba8:	f240 2301 	movw	r3, #513	; 0x201
 8007bac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	61fb      	str	r3, [r7, #28]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	61bb      	str	r3, [r7, #24]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007bc2:	4b22      	ldr	r3, [pc, #136]	; (8007c4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	f003 030c 	and.w	r3, r3, #12
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d002      	beq.n	8007bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8007bd2:	2b08      	cmp	r3, #8
 8007bd4:	d003      	beq.n	8007bde <HAL_RCC_GetSysClockFreq+0x46>
 8007bd6:	e02d      	b.n	8007c34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007bd8:	4b1d      	ldr	r3, [pc, #116]	; (8007c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007bda:	623b      	str	r3, [r7, #32]
      break;
 8007bdc:	e02d      	b.n	8007c3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	0c9b      	lsrs	r3, r3, #18
 8007be2:	f003 030f 	and.w	r3, r3, #15
 8007be6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007bea:	4413      	add	r3, r2
 8007bec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007bf0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d013      	beq.n	8007c24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007bfc:	4b13      	ldr	r3, [pc, #76]	; (8007c4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	0c5b      	lsrs	r3, r3, #17
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007c10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	4a0e      	ldr	r2, [pc, #56]	; (8007c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c16:	fb02 f203 	mul.w	r2, r2, r3
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c20:	627b      	str	r3, [r7, #36]	; 0x24
 8007c22:	e004      	b.n	8007c2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	4a0b      	ldr	r2, [pc, #44]	; (8007c54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007c28:	fb02 f303 	mul.w	r3, r2, r3
 8007c2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c30:	623b      	str	r3, [r7, #32]
      break;
 8007c32:	e002      	b.n	8007c3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007c34:	4b08      	ldr	r3, [pc, #32]	; (8007c58 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c36:	623b      	str	r3, [r7, #32]
      break;
 8007c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3728      	adds	r7, #40	; 0x28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc90      	pop	{r4, r7}
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	0800b050 	.word	0x0800b050
 8007c4c:	40021000 	.word	0x40021000
 8007c50:	00f42400 	.word	0x00f42400
 8007c54:	003d0900 	.word	0x003d0900
 8007c58:	007a1200 	.word	0x007a1200

08007c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c60:	4b02      	ldr	r3, [pc, #8]	; (8007c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8007c62:	681b      	ldr	r3, [r3, #0]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr
 8007c6c:	20000000 	.word	0x20000000

08007c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c74:	f7ff fff2 	bl	8007c5c <HAL_RCC_GetHCLKFreq>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	0a1b      	lsrs	r3, r3, #8
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	4903      	ldr	r1, [pc, #12]	; (8007c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c86:	5ccb      	ldrb	r3, [r1, r3]
 8007c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	40021000 	.word	0x40021000
 8007c94:	0800b0e8 	.word	0x0800b0e8

08007c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c9c:	f7ff ffde 	bl	8007c5c <HAL_RCC_GetHCLKFreq>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	0adb      	lsrs	r3, r3, #11
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	4903      	ldr	r1, [pc, #12]	; (8007cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cae:	5ccb      	ldrb	r3, [r1, r3]
 8007cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	40021000 	.word	0x40021000
 8007cbc:	0800b0e8 	.word	0x0800b0e8

08007cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007cc8:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <RCC_Delay+0x34>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a0a      	ldr	r2, [pc, #40]	; (8007cf8 <RCC_Delay+0x38>)
 8007cce:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd2:	0a5b      	lsrs	r3, r3, #9
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	fb02 f303 	mul.w	r3, r2, r3
 8007cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007cdc:	bf00      	nop
  }
  while (Delay --);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1e5a      	subs	r2, r3, #1
 8007ce2:	60fa      	str	r2, [r7, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1f9      	bne.n	8007cdc <RCC_Delay+0x1c>
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr
 8007cf4:	20000000 	.word	0x20000000
 8007cf8:	10624dd3 	.word	0x10624dd3

08007cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	613b      	str	r3, [r7, #16]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d07d      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d1c:	4b4f      	ldr	r3, [pc, #316]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10d      	bne.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d28:	4b4c      	ldr	r3, [pc, #304]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	4a4b      	ldr	r2, [pc, #300]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d32:	61d3      	str	r3, [r2, #28]
 8007d34:	4b49      	ldr	r3, [pc, #292]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d3c:	60bb      	str	r3, [r7, #8]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d40:	2301      	movs	r3, #1
 8007d42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d44:	4b46      	ldr	r3, [pc, #280]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d118      	bne.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d50:	4b43      	ldr	r3, [pc, #268]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a42      	ldr	r2, [pc, #264]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d5c:	f7fd fc60 	bl	8005620 <HAL_GetTick>
 8007d60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d62:	e008      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d64:	f7fd fc5c 	bl	8005620 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b64      	cmp	r3, #100	; 0x64
 8007d70:	d901      	bls.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e06d      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d76:	4b3a      	ldr	r3, [pc, #232]	; (8007e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0f0      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d82:	4b36      	ldr	r3, [pc, #216]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d02e      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d027      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007da0:	4b2e      	ldr	r3, [pc, #184]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007da2:	6a1b      	ldr	r3, [r3, #32]
 8007da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007da8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007daa:	4b2e      	ldr	r3, [pc, #184]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007dac:	2201      	movs	r2, #1
 8007dae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007db0:	4b2c      	ldr	r3, [pc, #176]	; (8007e64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007db6:	4a29      	ldr	r2, [pc, #164]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d014      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dc6:	f7fd fc2b 	bl	8005620 <HAL_GetTick>
 8007dca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dcc:	e00a      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dce:	f7fd fc27 	bl	8005620 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d901      	bls.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e036      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007de4:	4b1d      	ldr	r3, [pc, #116]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d0ee      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007df0:	4b1a      	ldr	r3, [pc, #104]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	4917      	ldr	r1, [pc, #92]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d105      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e08:	4b14      	ldr	r3, [pc, #80]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	4a13      	ldr	r2, [pc, #76]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d008      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e20:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	490b      	ldr	r1, [pc, #44]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0310 	and.w	r3, r3, #16
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d008      	beq.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e3e:	4b07      	ldr	r3, [pc, #28]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	4904      	ldr	r1, [pc, #16]	; (8007e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	40021000 	.word	0x40021000
 8007e60:	40007000 	.word	0x40007000
 8007e64:	42420440 	.word	0x42420440

08007e68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d001      	beq.n	8007e80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e044      	b.n	8007f0a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0201 	orr.w	r2, r2, #1
 8007e96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a1d      	ldr	r2, [pc, #116]	; (8007f14 <HAL_TIM_Base_Start_IT+0xac>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d018      	beq.n	8007ed4 <HAL_TIM_Base_Start_IT+0x6c>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a1c      	ldr	r2, [pc, #112]	; (8007f18 <HAL_TIM_Base_Start_IT+0xb0>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d013      	beq.n	8007ed4 <HAL_TIM_Base_Start_IT+0x6c>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eb4:	d00e      	beq.n	8007ed4 <HAL_TIM_Base_Start_IT+0x6c>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a18      	ldr	r2, [pc, #96]	; (8007f1c <HAL_TIM_Base_Start_IT+0xb4>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d009      	beq.n	8007ed4 <HAL_TIM_Base_Start_IT+0x6c>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a16      	ldr	r2, [pc, #88]	; (8007f20 <HAL_TIM_Base_Start_IT+0xb8>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d004      	beq.n	8007ed4 <HAL_TIM_Base_Start_IT+0x6c>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a15      	ldr	r2, [pc, #84]	; (8007f24 <HAL_TIM_Base_Start_IT+0xbc>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d111      	bne.n	8007ef8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f003 0307 	and.w	r3, r3, #7
 8007ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b06      	cmp	r3, #6
 8007ee4:	d010      	beq.n	8007f08 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f042 0201 	orr.w	r2, r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef6:	e007      	b.n	8007f08 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 0201 	orr.w	r2, r2, #1
 8007f06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3714      	adds	r7, #20
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bc80      	pop	{r7}
 8007f12:	4770      	bx	lr
 8007f14:	40012c00 	.word	0x40012c00
 8007f18:	40013400 	.word	0x40013400
 8007f1c:	40000400 	.word	0x40000400
 8007f20:	40000800 	.word	0x40000800
 8007f24:	40000c00 	.word	0x40000c00

08007f28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0201 	bic.w	r2, r2, #1
 8007f3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	6a1a      	ldr	r2, [r3, #32]
 8007f46:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10f      	bne.n	8007f70 <HAL_TIM_Base_Stop_IT+0x48>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6a1a      	ldr	r2, [r3, #32]
 8007f56:	f240 4344 	movw	r3, #1092	; 0x444
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d107      	bne.n	8007f70 <HAL_TIM_Base_Stop_IT+0x48>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f022 0201 	bic.w	r2, r2, #1
 8007f6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bc80      	pop	{r7}
 8007f82:	4770      	bx	lr

08007f84 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e041      	b.n	800801a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d106      	bne.n	8007fb0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7fd f8a6 	bl	80050fc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	f000 fbe8 	bl	8008798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e041      	b.n	80080b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	d106      	bne.n	800804e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7fd f825 	bl	8005098 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2202      	movs	r2, #2
 8008052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	3304      	adds	r3, #4
 800805e:	4619      	mov	r1, r3
 8008060:	4610      	mov	r0, r2
 8008062:	f000 fb99 	bl	8008798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d109      	bne.n	80080e4 <HAL_TIM_PWM_Start+0x24>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b01      	cmp	r3, #1
 80080da:	bf14      	ite	ne
 80080dc:	2301      	movne	r3, #1
 80080de:	2300      	moveq	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	e022      	b.n	800812a <HAL_TIM_PWM_Start+0x6a>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	d109      	bne.n	80080fe <HAL_TIM_PWM_Start+0x3e>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	bf14      	ite	ne
 80080f6:	2301      	movne	r3, #1
 80080f8:	2300      	moveq	r3, #0
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	e015      	b.n	800812a <HAL_TIM_PWM_Start+0x6a>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b08      	cmp	r3, #8
 8008102:	d109      	bne.n	8008118 <HAL_TIM_PWM_Start+0x58>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b01      	cmp	r3, #1
 800810e:	bf14      	ite	ne
 8008110:	2301      	movne	r3, #1
 8008112:	2300      	moveq	r3, #0
 8008114:	b2db      	uxtb	r3, r3
 8008116:	e008      	b.n	800812a <HAL_TIM_PWM_Start+0x6a>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b01      	cmp	r3, #1
 8008122:	bf14      	ite	ne
 8008124:	2301      	movne	r3, #1
 8008126:	2300      	moveq	r3, #0
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e072      	b.n	8008218 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d104      	bne.n	8008142 <HAL_TIM_PWM_Start+0x82>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008140:	e013      	b.n	800816a <HAL_TIM_PWM_Start+0xaa>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b04      	cmp	r3, #4
 8008146:	d104      	bne.n	8008152 <HAL_TIM_PWM_Start+0x92>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2202      	movs	r2, #2
 800814c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008150:	e00b      	b.n	800816a <HAL_TIM_PWM_Start+0xaa>
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b08      	cmp	r3, #8
 8008156:	d104      	bne.n	8008162 <HAL_TIM_PWM_Start+0xa2>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2202      	movs	r2, #2
 800815c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008160:	e003      	b.n	800816a <HAL_TIM_PWM_Start+0xaa>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2202      	movs	r2, #2
 8008166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2201      	movs	r2, #1
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	4618      	mov	r0, r3
 8008174:	f000 fd36 	bl	8008be4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a28      	ldr	r2, [pc, #160]	; (8008220 <HAL_TIM_PWM_Start+0x160>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d004      	beq.n	800818c <HAL_TIM_PWM_Start+0xcc>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a27      	ldr	r2, [pc, #156]	; (8008224 <HAL_TIM_PWM_Start+0x164>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d101      	bne.n	8008190 <HAL_TIM_PWM_Start+0xd0>
 800818c:	2301      	movs	r3, #1
 800818e:	e000      	b.n	8008192 <HAL_TIM_PWM_Start+0xd2>
 8008190:	2300      	movs	r3, #0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d007      	beq.n	80081a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a1d      	ldr	r2, [pc, #116]	; (8008220 <HAL_TIM_PWM_Start+0x160>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d018      	beq.n	80081e2 <HAL_TIM_PWM_Start+0x122>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a1b      	ldr	r2, [pc, #108]	; (8008224 <HAL_TIM_PWM_Start+0x164>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d013      	beq.n	80081e2 <HAL_TIM_PWM_Start+0x122>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c2:	d00e      	beq.n	80081e2 <HAL_TIM_PWM_Start+0x122>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a17      	ldr	r2, [pc, #92]	; (8008228 <HAL_TIM_PWM_Start+0x168>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d009      	beq.n	80081e2 <HAL_TIM_PWM_Start+0x122>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a16      	ldr	r2, [pc, #88]	; (800822c <HAL_TIM_PWM_Start+0x16c>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d004      	beq.n	80081e2 <HAL_TIM_PWM_Start+0x122>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a14      	ldr	r2, [pc, #80]	; (8008230 <HAL_TIM_PWM_Start+0x170>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d111      	bne.n	8008206 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f003 0307 	and.w	r3, r3, #7
 80081ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2b06      	cmp	r3, #6
 80081f2:	d010      	beq.n	8008216 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f042 0201 	orr.w	r2, r2, #1
 8008202:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008204:	e007      	b.n	8008216 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f042 0201 	orr.w	r2, r2, #1
 8008214:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	40012c00 	.word	0x40012c00
 8008224:	40013400 	.word	0x40013400
 8008228:	40000400 	.word	0x40000400
 800822c:	40000800 	.word	0x40000800
 8008230:	40000c00 	.word	0x40000c00

08008234 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2200      	movs	r2, #0
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	4618      	mov	r0, r3
 8008248:	f000 fccc 	bl	8008be4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a2e      	ldr	r2, [pc, #184]	; (800830c <HAL_TIM_PWM_Stop+0xd8>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d004      	beq.n	8008260 <HAL_TIM_PWM_Stop+0x2c>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a2d      	ldr	r2, [pc, #180]	; (8008310 <HAL_TIM_PWM_Stop+0xdc>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d101      	bne.n	8008264 <HAL_TIM_PWM_Stop+0x30>
 8008260:	2301      	movs	r3, #1
 8008262:	e000      	b.n	8008266 <HAL_TIM_PWM_Stop+0x32>
 8008264:	2300      	movs	r3, #0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d017      	beq.n	800829a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6a1a      	ldr	r2, [r3, #32]
 8008270:	f241 1311 	movw	r3, #4369	; 0x1111
 8008274:	4013      	ands	r3, r2
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10f      	bne.n	800829a <HAL_TIM_PWM_Stop+0x66>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6a1a      	ldr	r2, [r3, #32]
 8008280:	f240 4344 	movw	r3, #1092	; 0x444
 8008284:	4013      	ands	r3, r2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d107      	bne.n	800829a <HAL_TIM_PWM_Stop+0x66>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008298:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6a1a      	ldr	r2, [r3, #32]
 80082a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80082a4:	4013      	ands	r3, r2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10f      	bne.n	80082ca <HAL_TIM_PWM_Stop+0x96>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6a1a      	ldr	r2, [r3, #32]
 80082b0:	f240 4344 	movw	r3, #1092	; 0x444
 80082b4:	4013      	ands	r3, r2
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d107      	bne.n	80082ca <HAL_TIM_PWM_Stop+0x96>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 0201 	bic.w	r2, r2, #1
 80082c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d104      	bne.n	80082da <HAL_TIM_PWM_Stop+0xa6>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082d8:	e013      	b.n	8008302 <HAL_TIM_PWM_Stop+0xce>
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b04      	cmp	r3, #4
 80082de:	d104      	bne.n	80082ea <HAL_TIM_PWM_Stop+0xb6>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082e8:	e00b      	b.n	8008302 <HAL_TIM_PWM_Stop+0xce>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	2b08      	cmp	r3, #8
 80082ee:	d104      	bne.n	80082fa <HAL_TIM_PWM_Stop+0xc6>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082f8:	e003      	b.n	8008302 <HAL_TIM_PWM_Stop+0xce>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3708      	adds	r7, #8
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}
 800830c:	40012c00 	.word	0x40012c00
 8008310:	40013400 	.word	0x40013400

08008314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b02      	cmp	r3, #2
 8008328:	d122      	bne.n	8008370 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b02      	cmp	r3, #2
 8008336:	d11b      	bne.n	8008370 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f06f 0202 	mvn.w	r2, #2
 8008340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	f003 0303 	and.w	r3, r3, #3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fa03 	bl	8008762 <HAL_TIM_IC_CaptureCallback>
 800835c:	e005      	b.n	800836a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f9f6 	bl	8008750 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fa05 	bl	8008774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	f003 0304 	and.w	r3, r3, #4
 800837a:	2b04      	cmp	r3, #4
 800837c:	d122      	bne.n	80083c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b04      	cmp	r3, #4
 800838a:	d11b      	bne.n	80083c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f06f 0204 	mvn.w	r2, #4
 8008394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2202      	movs	r2, #2
 800839a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f9d9 	bl	8008762 <HAL_TIM_IC_CaptureCallback>
 80083b0:	e005      	b.n	80083be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f9cc 	bl	8008750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f9db 	bl	8008774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 0308 	and.w	r3, r3, #8
 80083ce:	2b08      	cmp	r3, #8
 80083d0:	d122      	bne.n	8008418 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f003 0308 	and.w	r3, r3, #8
 80083dc:	2b08      	cmp	r3, #8
 80083de:	d11b      	bne.n	8008418 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f06f 0208 	mvn.w	r2, #8
 80083e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2204      	movs	r2, #4
 80083ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	69db      	ldr	r3, [r3, #28]
 80083f6:	f003 0303 	and.w	r3, r3, #3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f9af 	bl	8008762 <HAL_TIM_IC_CaptureCallback>
 8008404:	e005      	b.n	8008412 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f9a2 	bl	8008750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f9b1 	bl	8008774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	f003 0310 	and.w	r3, r3, #16
 8008422:	2b10      	cmp	r3, #16
 8008424:	d122      	bne.n	800846c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	f003 0310 	and.w	r3, r3, #16
 8008430:	2b10      	cmp	r3, #16
 8008432:	d11b      	bne.n	800846c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f06f 0210 	mvn.w	r2, #16
 800843c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2208      	movs	r2, #8
 8008442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f985 	bl	8008762 <HAL_TIM_IC_CaptureCallback>
 8008458:	e005      	b.n	8008466 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f978 	bl	8008750 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f987 	bl	8008774 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b01      	cmp	r3, #1
 8008478:	d10e      	bne.n	8008498 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f003 0301 	and.w	r3, r3, #1
 8008484:	2b01      	cmp	r3, #1
 8008486:	d107      	bne.n	8008498 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f06f 0201 	mvn.w	r2, #1
 8008490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7fb fb84 	bl	8003ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a2:	2b80      	cmp	r3, #128	; 0x80
 80084a4:	d10e      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b0:	2b80      	cmp	r3, #128	; 0x80
 80084b2:	d107      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f000 fd84 	bl	8008fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ce:	2b40      	cmp	r3, #64	; 0x40
 80084d0:	d10e      	bne.n	80084f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084dc:	2b40      	cmp	r3, #64	; 0x40
 80084de:	d107      	bne.n	80084f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f94b 	bl	8008786 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	f003 0320 	and.w	r3, r3, #32
 80084fa:	2b20      	cmp	r3, #32
 80084fc:	d10e      	bne.n	800851c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	f003 0320 	and.w	r3, r3, #32
 8008508:	2b20      	cmp	r3, #32
 800850a:	d107      	bne.n	800851c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f06f 0220 	mvn.w	r2, #32
 8008514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fd4f 	bl	8008fba <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800851c:	bf00      	nop
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008536:	2b01      	cmp	r3, #1
 8008538:	d101      	bne.n	800853e <HAL_TIM_OC_ConfigChannel+0x1a>
 800853a:	2302      	movs	r3, #2
 800853c:	e046      	b.n	80085cc <HAL_TIM_OC_ConfigChannel+0xa8>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b0c      	cmp	r3, #12
 800854a:	d839      	bhi.n	80085c0 <HAL_TIM_OC_ConfigChannel+0x9c>
 800854c:	a201      	add	r2, pc, #4	; (adr r2, 8008554 <HAL_TIM_OC_ConfigChannel+0x30>)
 800854e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008552:	bf00      	nop
 8008554:	08008589 	.word	0x08008589
 8008558:	080085c1 	.word	0x080085c1
 800855c:	080085c1 	.word	0x080085c1
 8008560:	080085c1 	.word	0x080085c1
 8008564:	08008597 	.word	0x08008597
 8008568:	080085c1 	.word	0x080085c1
 800856c:	080085c1 	.word	0x080085c1
 8008570:	080085c1 	.word	0x080085c1
 8008574:	080085a5 	.word	0x080085a5
 8008578:	080085c1 	.word	0x080085c1
 800857c:	080085c1 	.word	0x080085c1
 8008580:	080085c1 	.word	0x080085c1
 8008584:	080085b3 	.word	0x080085b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68b9      	ldr	r1, [r7, #8]
 800858e:	4618      	mov	r0, r3
 8008590:	f000 f97c 	bl	800888c <TIM_OC1_SetConfig>
      break;
 8008594:	e015      	b.n	80085c2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68b9      	ldr	r1, [r7, #8]
 800859c:	4618      	mov	r0, r3
 800859e:	f000 f9e5 	bl	800896c <TIM_OC2_SetConfig>
      break;
 80085a2:	e00e      	b.n	80085c2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	68b9      	ldr	r1, [r7, #8]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fa52 	bl	8008a54 <TIM_OC3_SetConfig>
      break;
 80085b0:	e007      	b.n	80085c2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fabf 	bl	8008b3c <TIM_OC4_SetConfig>
      break;
 80085be:	e000      	b.n	80085c2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80085c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d101      	bne.n	80085ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80085ea:	2302      	movs	r3, #2
 80085ec:	e0ac      	b.n	8008748 <HAL_TIM_PWM_ConfigChannel+0x174>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b0c      	cmp	r3, #12
 80085fa:	f200 809f 	bhi.w	800873c <HAL_TIM_PWM_ConfigChannel+0x168>
 80085fe:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008604:	08008639 	.word	0x08008639
 8008608:	0800873d 	.word	0x0800873d
 800860c:	0800873d 	.word	0x0800873d
 8008610:	0800873d 	.word	0x0800873d
 8008614:	08008679 	.word	0x08008679
 8008618:	0800873d 	.word	0x0800873d
 800861c:	0800873d 	.word	0x0800873d
 8008620:	0800873d 	.word	0x0800873d
 8008624:	080086bb 	.word	0x080086bb
 8008628:	0800873d 	.word	0x0800873d
 800862c:	0800873d 	.word	0x0800873d
 8008630:	0800873d 	.word	0x0800873d
 8008634:	080086fb 	.word	0x080086fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	4618      	mov	r0, r3
 8008640:	f000 f924 	bl	800888c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	699a      	ldr	r2, [r3, #24]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f042 0208 	orr.w	r2, r2, #8
 8008652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	699a      	ldr	r2, [r3, #24]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f022 0204 	bic.w	r2, r2, #4
 8008662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6999      	ldr	r1, [r3, #24]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	691a      	ldr	r2, [r3, #16]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	430a      	orrs	r2, r1
 8008674:	619a      	str	r2, [r3, #24]
      break;
 8008676:	e062      	b.n	800873e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68b9      	ldr	r1, [r7, #8]
 800867e:	4618      	mov	r0, r3
 8008680:	f000 f974 	bl	800896c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	699a      	ldr	r2, [r3, #24]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	699a      	ldr	r2, [r3, #24]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6999      	ldr	r1, [r3, #24]
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	021a      	lsls	r2, r3, #8
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	430a      	orrs	r2, r1
 80086b6:	619a      	str	r2, [r3, #24]
      break;
 80086b8:	e041      	b.n	800873e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68b9      	ldr	r1, [r7, #8]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 f9c7 	bl	8008a54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	69da      	ldr	r2, [r3, #28]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f042 0208 	orr.w	r2, r2, #8
 80086d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	69da      	ldr	r2, [r3, #28]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 0204 	bic.w	r2, r2, #4
 80086e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	69d9      	ldr	r1, [r3, #28]
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	691a      	ldr	r2, [r3, #16]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	61da      	str	r2, [r3, #28]
      break;
 80086f8:	e021      	b.n	800873e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68b9      	ldr	r1, [r7, #8]
 8008700:	4618      	mov	r0, r3
 8008702:	f000 fa1b 	bl	8008b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69da      	ldr	r2, [r3, #28]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	69da      	ldr	r2, [r3, #28]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	69d9      	ldr	r1, [r3, #28]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	021a      	lsls	r2, r3, #8
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	430a      	orrs	r2, r1
 8008738:	61da      	str	r2, [r3, #28]
      break;
 800873a:	e000      	b.n	800873e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800873c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	bc80      	pop	{r7}
 8008760:	4770      	bx	lr

08008762 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	bc80      	pop	{r7}
 8008772:	4770      	bx	lr

08008774 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	bc80      	pop	{r7}
 8008784:	4770      	bx	lr

08008786 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	bc80      	pop	{r7}
 8008796:	4770      	bx	lr

08008798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a33      	ldr	r2, [pc, #204]	; (8008878 <TIM_Base_SetConfig+0xe0>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d013      	beq.n	80087d8 <TIM_Base_SetConfig+0x40>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a32      	ldr	r2, [pc, #200]	; (800887c <TIM_Base_SetConfig+0xe4>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00f      	beq.n	80087d8 <TIM_Base_SetConfig+0x40>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087be:	d00b      	beq.n	80087d8 <TIM_Base_SetConfig+0x40>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a2f      	ldr	r2, [pc, #188]	; (8008880 <TIM_Base_SetConfig+0xe8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d007      	beq.n	80087d8 <TIM_Base_SetConfig+0x40>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a2e      	ldr	r2, [pc, #184]	; (8008884 <TIM_Base_SetConfig+0xec>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d003      	beq.n	80087d8 <TIM_Base_SetConfig+0x40>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a2d      	ldr	r2, [pc, #180]	; (8008888 <TIM_Base_SetConfig+0xf0>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d108      	bne.n	80087ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a22      	ldr	r2, [pc, #136]	; (8008878 <TIM_Base_SetConfig+0xe0>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d013      	beq.n	800881a <TIM_Base_SetConfig+0x82>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a21      	ldr	r2, [pc, #132]	; (800887c <TIM_Base_SetConfig+0xe4>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d00f      	beq.n	800881a <TIM_Base_SetConfig+0x82>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008800:	d00b      	beq.n	800881a <TIM_Base_SetConfig+0x82>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a1e      	ldr	r2, [pc, #120]	; (8008880 <TIM_Base_SetConfig+0xe8>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d007      	beq.n	800881a <TIM_Base_SetConfig+0x82>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a1d      	ldr	r2, [pc, #116]	; (8008884 <TIM_Base_SetConfig+0xec>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d003      	beq.n	800881a <TIM_Base_SetConfig+0x82>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a1c      	ldr	r2, [pc, #112]	; (8008888 <TIM_Base_SetConfig+0xf0>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d108      	bne.n	800882c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	4313      	orrs	r3, r2
 800882a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	4313      	orrs	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	689a      	ldr	r2, [r3, #8]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a09      	ldr	r2, [pc, #36]	; (8008878 <TIM_Base_SetConfig+0xe0>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d003      	beq.n	8008860 <TIM_Base_SetConfig+0xc8>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a08      	ldr	r2, [pc, #32]	; (800887c <TIM_Base_SetConfig+0xe4>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d103      	bne.n	8008868 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	615a      	str	r2, [r3, #20]
}
 800886e:	bf00      	nop
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	bc80      	pop	{r7}
 8008876:	4770      	bx	lr
 8008878:	40012c00 	.word	0x40012c00
 800887c:	40013400 	.word	0x40013400
 8008880:	40000400 	.word	0x40000400
 8008884:	40000800 	.word	0x40000800
 8008888:	40000c00 	.word	0x40000c00

0800888c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	f023 0201 	bic.w	r2, r3, #1
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f023 0303 	bic.w	r3, r3, #3
 80088c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f023 0302 	bic.w	r3, r3, #2
 80088d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	4313      	orrs	r3, r2
 80088de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a20      	ldr	r2, [pc, #128]	; (8008964 <TIM_OC1_SetConfig+0xd8>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d003      	beq.n	80088f0 <TIM_OC1_SetConfig+0x64>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a1f      	ldr	r2, [pc, #124]	; (8008968 <TIM_OC1_SetConfig+0xdc>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d10c      	bne.n	800890a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f023 0308 	bic.w	r3, r3, #8
 80088f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	4313      	orrs	r3, r2
 8008900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f023 0304 	bic.w	r3, r3, #4
 8008908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a15      	ldr	r2, [pc, #84]	; (8008964 <TIM_OC1_SetConfig+0xd8>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d003      	beq.n	800891a <TIM_OC1_SetConfig+0x8e>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a14      	ldr	r2, [pc, #80]	; (8008968 <TIM_OC1_SetConfig+0xdc>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d111      	bne.n	800893e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	4313      	orrs	r3, r2
 8008932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	4313      	orrs	r3, r2
 800893c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	621a      	str	r2, [r3, #32]
}
 8008958:	bf00      	nop
 800895a:	371c      	adds	r7, #28
 800895c:	46bd      	mov	sp, r7
 800895e:	bc80      	pop	{r7}
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	40012c00 	.word	0x40012c00
 8008968:	40013400 	.word	0x40013400

0800896c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	f023 0210 	bic.w	r2, r3, #16
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800899a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	021b      	lsls	r3, r3, #8
 80089aa:	68fa      	ldr	r2, [r7, #12]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	f023 0320 	bic.w	r3, r3, #32
 80089b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	011b      	lsls	r3, r3, #4
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a21      	ldr	r2, [pc, #132]	; (8008a4c <TIM_OC2_SetConfig+0xe0>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d003      	beq.n	80089d4 <TIM_OC2_SetConfig+0x68>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a20      	ldr	r2, [pc, #128]	; (8008a50 <TIM_OC2_SetConfig+0xe4>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d10d      	bne.n	80089f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	011b      	lsls	r3, r3, #4
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a16      	ldr	r2, [pc, #88]	; (8008a4c <TIM_OC2_SetConfig+0xe0>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d003      	beq.n	8008a00 <TIM_OC2_SetConfig+0x94>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a15      	ldr	r2, [pc, #84]	; (8008a50 <TIM_OC2_SetConfig+0xe4>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d113      	bne.n	8008a28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	621a      	str	r2, [r3, #32]
}
 8008a42:	bf00      	nop
 8008a44:	371c      	adds	r7, #28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bc80      	pop	{r7}
 8008a4a:	4770      	bx	lr
 8008a4c:	40012c00 	.word	0x40012c00
 8008a50:	40013400 	.word	0x40013400

08008a54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f023 0303 	bic.w	r3, r3, #3
 8008a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	021b      	lsls	r3, r3, #8
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a21      	ldr	r2, [pc, #132]	; (8008b34 <TIM_OC3_SetConfig+0xe0>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d003      	beq.n	8008aba <TIM_OC3_SetConfig+0x66>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a20      	ldr	r2, [pc, #128]	; (8008b38 <TIM_OC3_SetConfig+0xe4>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d10d      	bne.n	8008ad6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	021b      	lsls	r3, r3, #8
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a16      	ldr	r2, [pc, #88]	; (8008b34 <TIM_OC3_SetConfig+0xe0>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d003      	beq.n	8008ae6 <TIM_OC3_SetConfig+0x92>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a15      	ldr	r2, [pc, #84]	; (8008b38 <TIM_OC3_SetConfig+0xe4>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d113      	bne.n	8008b0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	695b      	ldr	r3, [r3, #20]
 8008afa:	011b      	lsls	r3, r3, #4
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	011b      	lsls	r3, r3, #4
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	621a      	str	r2, [r3, #32]
}
 8008b28:	bf00      	nop
 8008b2a:	371c      	adds	r7, #28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bc80      	pop	{r7}
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	40012c00 	.word	0x40012c00
 8008b38:	40013400 	.word	0x40013400

08008b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b087      	sub	sp, #28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	69db      	ldr	r3, [r3, #28]
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	021b      	lsls	r3, r3, #8
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	031b      	lsls	r3, r3, #12
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a11      	ldr	r2, [pc, #68]	; (8008bdc <TIM_OC4_SetConfig+0xa0>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d003      	beq.n	8008ba4 <TIM_OC4_SetConfig+0x68>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a10      	ldr	r2, [pc, #64]	; (8008be0 <TIM_OC4_SetConfig+0xa4>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d109      	bne.n	8008bb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	019b      	lsls	r3, r3, #6
 8008bb2:	697a      	ldr	r2, [r7, #20]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	621a      	str	r2, [r3, #32]
}
 8008bd2:	bf00      	nop
 8008bd4:	371c      	adds	r7, #28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bc80      	pop	{r7}
 8008bda:	4770      	bx	lr
 8008bdc:	40012c00 	.word	0x40012c00
 8008be0:	40013400 	.word	0x40013400

08008be4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	f003 031f 	and.w	r3, r3, #31
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6a1a      	ldr	r2, [r3, #32]
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	43db      	mvns	r3, r3
 8008c06:	401a      	ands	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6a1a      	ldr	r2, [r3, #32]
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f003 031f 	and.w	r3, r3, #31
 8008c16:	6879      	ldr	r1, [r7, #4]
 8008c18:	fa01 f303 	lsl.w	r3, r1, r3
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	621a      	str	r2, [r3, #32]
}
 8008c22:	bf00      	nop
 8008c24:	371c      	adds	r7, #28
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bc80      	pop	{r7}
 8008c2a:	4770      	bx	lr

08008c2c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d109      	bne.n	8008c50 <HAL_TIMEx_PWMN_Start+0x24>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	bf14      	ite	ne
 8008c48:	2301      	movne	r3, #1
 8008c4a:	2300      	moveq	r3, #0
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	e022      	b.n	8008c96 <HAL_TIMEx_PWMN_Start+0x6a>
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	2b04      	cmp	r3, #4
 8008c54:	d109      	bne.n	8008c6a <HAL_TIMEx_PWMN_Start+0x3e>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	bf14      	ite	ne
 8008c62:	2301      	movne	r3, #1
 8008c64:	2300      	moveq	r3, #0
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	e015      	b.n	8008c96 <HAL_TIMEx_PWMN_Start+0x6a>
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b08      	cmp	r3, #8
 8008c6e:	d109      	bne.n	8008c84 <HAL_TIMEx_PWMN_Start+0x58>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	bf14      	ite	ne
 8008c7c:	2301      	movne	r3, #1
 8008c7e:	2300      	moveq	r3, #0
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	e008      	b.n	8008c96 <HAL_TIMEx_PWMN_Start+0x6a>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	bf14      	ite	ne
 8008c90:	2301      	movne	r3, #1
 8008c92:	2300      	moveq	r3, #0
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e063      	b.n	8008d66 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d104      	bne.n	8008cae <HAL_TIMEx_PWMN_Start+0x82>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008cac:	e013      	b.n	8008cd6 <HAL_TIMEx_PWMN_Start+0xaa>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b04      	cmp	r3, #4
 8008cb2:	d104      	bne.n	8008cbe <HAL_TIMEx_PWMN_Start+0x92>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2202      	movs	r2, #2
 8008cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cbc:	e00b      	b.n	8008cd6 <HAL_TIMEx_PWMN_Start+0xaa>
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	2b08      	cmp	r3, #8
 8008cc2:	d104      	bne.n	8008cce <HAL_TIMEx_PWMN_Start+0xa2>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ccc:	e003      	b.n	8008cd6 <HAL_TIMEx_PWMN_Start+0xaa>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2204      	movs	r2, #4
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 f97d 	bl	8008fde <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cf2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a1d      	ldr	r2, [pc, #116]	; (8008d70 <HAL_TIMEx_PWMN_Start+0x144>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d018      	beq.n	8008d30 <HAL_TIMEx_PWMN_Start+0x104>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a1c      	ldr	r2, [pc, #112]	; (8008d74 <HAL_TIMEx_PWMN_Start+0x148>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d013      	beq.n	8008d30 <HAL_TIMEx_PWMN_Start+0x104>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d10:	d00e      	beq.n	8008d30 <HAL_TIMEx_PWMN_Start+0x104>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a18      	ldr	r2, [pc, #96]	; (8008d78 <HAL_TIMEx_PWMN_Start+0x14c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d009      	beq.n	8008d30 <HAL_TIMEx_PWMN_Start+0x104>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a16      	ldr	r2, [pc, #88]	; (8008d7c <HAL_TIMEx_PWMN_Start+0x150>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d004      	beq.n	8008d30 <HAL_TIMEx_PWMN_Start+0x104>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a15      	ldr	r2, [pc, #84]	; (8008d80 <HAL_TIMEx_PWMN_Start+0x154>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d111      	bne.n	8008d54 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f003 0307 	and.w	r3, r3, #7
 8008d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2b06      	cmp	r3, #6
 8008d40:	d010      	beq.n	8008d64 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f042 0201 	orr.w	r2, r2, #1
 8008d50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d52:	e007      	b.n	8008d64 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f042 0201 	orr.w	r2, r2, #1
 8008d62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	40012c00 	.word	0x40012c00
 8008d74:	40013400 	.word	0x40013400
 8008d78:	40000400 	.word	0x40000400
 8008d7c:	40000800 	.word	0x40000800
 8008d80:	40000c00 	.word	0x40000c00

08008d84 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2200      	movs	r2, #0
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 f921 	bl	8008fde <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6a1a      	ldr	r2, [r3, #32]
 8008da2:	f241 1311 	movw	r3, #4369	; 0x1111
 8008da6:	4013      	ands	r3, r2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10f      	bne.n	8008dcc <HAL_TIMEx_PWMN_Stop+0x48>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6a1a      	ldr	r2, [r3, #32]
 8008db2:	f240 4344 	movw	r3, #1092	; 0x444
 8008db6:	4013      	ands	r3, r2
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d107      	bne.n	8008dcc <HAL_TIMEx_PWMN_Stop+0x48>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008dca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6a1a      	ldr	r2, [r3, #32]
 8008dd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10f      	bne.n	8008dfc <HAL_TIMEx_PWMN_Stop+0x78>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6a1a      	ldr	r2, [r3, #32]
 8008de2:	f240 4344 	movw	r3, #1092	; 0x444
 8008de6:	4013      	ands	r3, r2
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d107      	bne.n	8008dfc <HAL_TIMEx_PWMN_Stop+0x78>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f022 0201 	bic.w	r2, r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d104      	bne.n	8008e0c <HAL_TIMEx_PWMN_Stop+0x88>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e0a:	e013      	b.n	8008e34 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	d104      	bne.n	8008e1c <HAL_TIMEx_PWMN_Stop+0x98>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e1a:	e00b      	b.n	8008e34 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	2b08      	cmp	r3, #8
 8008e20:	d104      	bne.n	8008e2c <HAL_TIMEx_PWMN_Stop+0xa8>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e2a:	e003      	b.n	8008e34 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d101      	bne.n	8008e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e54:	2302      	movs	r3, #2
 8008e56:	e050      	b.n	8008efa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2202      	movs	r2, #2
 8008e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a1b      	ldr	r2, [pc, #108]	; (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d018      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a19      	ldr	r2, [pc, #100]	; (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d013      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eae:	d00e      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a15      	ldr	r2, [pc, #84]	; (8008f0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d009      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a14      	ldr	r2, [pc, #80]	; (8008f10 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d004      	beq.n	8008ece <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a12      	ldr	r2, [pc, #72]	; (8008f14 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d10c      	bne.n	8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bc80      	pop	{r7}
 8008f02:	4770      	bx	lr
 8008f04:	40012c00 	.word	0x40012c00
 8008f08:	40013400 	.word	0x40013400
 8008f0c:	40000400 	.word	0x40000400
 8008f10:	40000800 	.word	0x40000800
 8008f14:	40000c00 	.word	0x40000c00

08008f18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b085      	sub	sp, #20
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d101      	bne.n	8008f34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f30:	2302      	movs	r3, #2
 8008f32:	e03d      	b.n	8008fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	69db      	ldr	r3, [r3, #28]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3714      	adds	r7, #20
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bc80      	pop	{r7}
 8008fb8:	4770      	bx	lr

08008fba <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b083      	sub	sp, #12
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fc2:	bf00      	nop
 8008fc4:	370c      	adds	r7, #12
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bc80      	pop	{r7}
 8008fca:	4770      	bx	lr

08008fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fd4:	bf00      	nop
 8008fd6:	370c      	adds	r7, #12
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bc80      	pop	{r7}
 8008fdc:	4770      	bx	lr

08008fde <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b087      	sub	sp, #28
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	f003 031f 	and.w	r3, r3, #31
 8008ff0:	2204      	movs	r2, #4
 8008ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a1a      	ldr	r2, [r3, #32]
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	43db      	mvns	r3, r3
 8009000:	401a      	ands	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6a1a      	ldr	r2, [r3, #32]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	f003 031f 	and.w	r3, r3, #31
 8009010:	6879      	ldr	r1, [r7, #4]
 8009012:	fa01 f303 	lsl.w	r3, r1, r3
 8009016:	431a      	orrs	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	621a      	str	r2, [r3, #32]
}
 800901c:	bf00      	nop
 800901e:	371c      	adds	r7, #28
 8009020:	46bd      	mov	sp, r7
 8009022:	bc80      	pop	{r7}
 8009024:	4770      	bx	lr

08009026 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d101      	bne.n	8009038 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e03f      	b.n	80090b8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	d106      	bne.n	8009052 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7fc f8e9 	bl	8005224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2224      	movs	r2, #36	; 0x24
 8009056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68da      	ldr	r2, [r3, #12]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009068:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fd64 	bl	8009b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	691a      	ldr	r2, [r3, #16]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800907e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	695a      	ldr	r2, [r3, #20]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800908e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68da      	ldr	r2, [r3, #12]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800909e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2220      	movs	r2, #32
 80090aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2220      	movs	r2, #32
 80090b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3708      	adds	r7, #8
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	4613      	mov	r3, r2
 80090cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	2b20      	cmp	r3, #32
 80090d8:	d153      	bne.n	8009182 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <HAL_UART_Transmit_DMA+0x26>
 80090e0:	88fb      	ldrh	r3, [r7, #6]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e04c      	b.n	8009184 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d101      	bne.n	80090f8 <HAL_UART_Transmit_DMA+0x38>
 80090f4:	2302      	movs	r3, #2
 80090f6:	e045      	b.n	8009184 <HAL_UART_Transmit_DMA+0xc4>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	88fa      	ldrh	r2, [r7, #6]
 800910a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	88fa      	ldrh	r2, [r7, #6]
 8009110:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2221      	movs	r2, #33	; 0x21
 800911c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009124:	4a19      	ldr	r2, [pc, #100]	; (800918c <HAL_UART_Transmit_DMA+0xcc>)
 8009126:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912c:	4a18      	ldr	r2, [pc, #96]	; (8009190 <HAL_UART_Transmit_DMA+0xd0>)
 800912e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009134:	4a17      	ldr	r2, [pc, #92]	; (8009194 <HAL_UART_Transmit_DMA+0xd4>)
 8009136:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800913c:	2200      	movs	r2, #0
 800913e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8009140:	f107 0308 	add.w	r3, r7, #8
 8009144:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	6819      	ldr	r1, [r3, #0]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3304      	adds	r3, #4
 8009154:	461a      	mov	r2, r3
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	f7fd fbe4 	bl	8006924 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009164:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	695a      	ldr	r2, [r3, #20]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800917c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	e000      	b.n	8009184 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8009182:	2302      	movs	r3, #2
  }
}
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	080095d5 	.word	0x080095d5
 8009190:	08009627 	.word	0x08009627
 8009194:	0800970f 	.word	0x0800970f

08009198 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	4613      	mov	r3, r2
 80091a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2b20      	cmp	r3, #32
 80091b0:	d13c      	bne.n	800922c <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80091b8:	88fb      	ldrh	r3, [r7, #6]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d101      	bne.n	80091c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	e035      	b.n	800922e <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d101      	bne.n	80091d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80091cc:	2302      	movs	r3, #2
 80091ce:	e02e      	b.n	800922e <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2201      	movs	r2, #1
 80091dc:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80091de:	88fb      	ldrh	r3, [r7, #6]
 80091e0:	461a      	mov	r2, r3
 80091e2:	68b9      	ldr	r1, [r7, #8]
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f000 fadd 	bl	80097a4 <UART_Start_Receive_DMA>
 80091ea:	4603      	mov	r3, r0
 80091ec:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d119      	bne.n	8009228 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d113      	bne.n	8009224 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80091fc:	2300      	movs	r3, #0
 80091fe:	613b      	str	r3, [r7, #16]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	613b      	str	r3, [r7, #16]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	613b      	str	r3, [r7, #16]
 8009210:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68da      	ldr	r2, [r3, #12]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f042 0210 	orr.w	r2, r2, #16
 8009220:	60da      	str	r2, [r3, #12]
 8009222:	e001      	b.n	8009228 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	e000      	b.n	800922e <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 800922c:	2302      	movs	r3, #2
  }
}
 800922e:	4618      	mov	r0, r3
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08a      	sub	sp, #40	; 0x28
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009258:	2300      	movs	r3, #0
 800925a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800925c:	2300      	movs	r3, #0
 800925e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	f003 030f 	and.w	r3, r3, #15
 8009266:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10d      	bne.n	800928a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800926e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009270:	f003 0320 	and.w	r3, r3, #32
 8009274:	2b00      	cmp	r3, #0
 8009276:	d008      	beq.n	800928a <HAL_UART_IRQHandler+0x52>
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	f003 0320 	and.w	r3, r3, #32
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fbae 	bl	80099e4 <UART_Receive_IT>
      return;
 8009288:	e17b      	b.n	8009582 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 80b1 	beq.w	80093f4 <HAL_UART_IRQHandler+0x1bc>
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b00      	cmp	r3, #0
 800929a:	d105      	bne.n	80092a8 <HAL_UART_IRQHandler+0x70>
 800929c:	6a3b      	ldr	r3, [r7, #32]
 800929e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f000 80a6 	beq.w	80093f4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00a      	beq.n	80092c8 <HAL_UART_IRQHandler+0x90>
 80092b2:	6a3b      	ldr	r3, [r7, #32]
 80092b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d005      	beq.n	80092c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c0:	f043 0201 	orr.w	r2, r3, #1
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ca:	f003 0304 	and.w	r3, r3, #4
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00a      	beq.n	80092e8 <HAL_UART_IRQHandler+0xb0>
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	f003 0301 	and.w	r3, r3, #1
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d005      	beq.n	80092e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e0:	f043 0202 	orr.w	r2, r3, #2
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ea:	f003 0302 	and.w	r3, r3, #2
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00a      	beq.n	8009308 <HAL_UART_IRQHandler+0xd0>
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d005      	beq.n	8009308 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009300:	f043 0204 	orr.w	r2, r3, #4
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	f003 0308 	and.w	r3, r3, #8
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00f      	beq.n	8009332 <HAL_UART_IRQHandler+0xfa>
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	f003 0320 	and.w	r3, r3, #32
 8009318:	2b00      	cmp	r3, #0
 800931a:	d104      	bne.n	8009326 <HAL_UART_IRQHandler+0xee>
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b00      	cmp	r3, #0
 8009324:	d005      	beq.n	8009332 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932a:	f043 0208 	orr.w	r2, r3, #8
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 811e 	beq.w	8009578 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	f003 0320 	and.w	r3, r3, #32
 8009342:	2b00      	cmp	r3, #0
 8009344:	d007      	beq.n	8009356 <HAL_UART_IRQHandler+0x11e>
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	f003 0320 	and.w	r3, r3, #32
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fb47 	bl	80099e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	695b      	ldr	r3, [r3, #20]
 800935c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009360:	2b00      	cmp	r3, #0
 8009362:	bf14      	ite	ne
 8009364:	2301      	movne	r3, #1
 8009366:	2300      	moveq	r3, #0
 8009368:	b2db      	uxtb	r3, r3
 800936a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009370:	f003 0308 	and.w	r3, r3, #8
 8009374:	2b00      	cmp	r3, #0
 8009376:	d102      	bne.n	800937e <HAL_UART_IRQHandler+0x146>
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d031      	beq.n	80093e2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fa89 	bl	8009896 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800938e:	2b00      	cmp	r3, #0
 8009390:	d023      	beq.n	80093da <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	695a      	ldr	r2, [r3, #20]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093a0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d013      	beq.n	80093d2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ae:	4a76      	ldr	r2, [pc, #472]	; (8009588 <HAL_UART_IRQHandler+0x350>)
 80093b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fd fb4e 	bl	8006a58 <HAL_DMA_Abort_IT>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d016      	beq.n	80093f0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80093cc:	4610      	mov	r0, r2
 80093ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d0:	e00e      	b.n	80093f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f8f5 	bl	80095c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d8:	e00a      	b.n	80093f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f8f1 	bl	80095c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e0:	e006      	b.n	80093f0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f8ed 	bl	80095c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80093ee:	e0c3      	b.n	8009578 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093f0:	bf00      	nop
    return;
 80093f2:	e0c1      	b.n	8009578 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	f040 80a1 	bne.w	8009540 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	f003 0310 	and.w	r3, r3, #16
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 809b 	beq.w	8009540 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	f003 0310 	and.w	r3, r3, #16
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 8095 	beq.w	8009540 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009416:	2300      	movs	r3, #0
 8009418:	60fb      	str	r3, [r7, #12]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	60fb      	str	r3, [r7, #12]
 800942a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009436:	2b00      	cmp	r3, #0
 8009438:	d04e      	beq.n	80094d8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009444:	8a3b      	ldrh	r3, [r7, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 8098 	beq.w	800957c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009450:	8a3a      	ldrh	r2, [r7, #16]
 8009452:	429a      	cmp	r2, r3
 8009454:	f080 8092 	bcs.w	800957c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	8a3a      	ldrh	r2, [r7, #16]
 800945c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	2b20      	cmp	r3, #32
 8009466:	d02b      	beq.n	80094c0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68da      	ldr	r2, [r3, #12]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009476:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	695a      	ldr	r2, [r3, #20]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f022 0201 	bic.w	r2, r2, #1
 8009486:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	695a      	ldr	r2, [r3, #20]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009496:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2220      	movs	r2, #32
 800949c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68da      	ldr	r2, [r3, #12]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f022 0210 	bic.w	r2, r2, #16
 80094b4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fd fa91 	bl	80069e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	4619      	mov	r1, r3
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f7f8 ff9b 	bl	800240c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80094d6:	e051      	b.n	800957c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d047      	beq.n	8009580 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80094f0:	8a7b      	ldrh	r3, [r7, #18]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d044      	beq.n	8009580 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68da      	ldr	r2, [r3, #12]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009504:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	695a      	ldr	r2, [r3, #20]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f022 0201 	bic.w	r2, r2, #1
 8009514:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2220      	movs	r2, #32
 800951a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68da      	ldr	r2, [r3, #12]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f022 0210 	bic.w	r2, r2, #16
 8009532:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009534:	8a7b      	ldrh	r3, [r7, #18]
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7f8 ff67 	bl	800240c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800953e:	e01f      	b.n	8009580 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009546:	2b00      	cmp	r3, #0
 8009548:	d008      	beq.n	800955c <HAL_UART_IRQHandler+0x324>
 800954a:	6a3b      	ldr	r3, [r7, #32]
 800954c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009550:	2b00      	cmp	r3, #0
 8009552:	d003      	beq.n	800955c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f9de 	bl	8009916 <UART_Transmit_IT>
    return;
 800955a:	e012      	b.n	8009582 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00d      	beq.n	8009582 <HAL_UART_IRQHandler+0x34a>
 8009566:	6a3b      	ldr	r3, [r7, #32]
 8009568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956c:	2b00      	cmp	r3, #0
 800956e:	d008      	beq.n	8009582 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fa1f 	bl	80099b4 <UART_EndTransmit_IT>
    return;
 8009576:	e004      	b.n	8009582 <HAL_UART_IRQHandler+0x34a>
    return;
 8009578:	bf00      	nop
 800957a:	e002      	b.n	8009582 <HAL_UART_IRQHandler+0x34a>
      return;
 800957c:	bf00      	nop
 800957e:	e000      	b.n	8009582 <HAL_UART_IRQHandler+0x34a>
      return;
 8009580:	bf00      	nop
  }
}
 8009582:	3728      	adds	r7, #40	; 0x28
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	080098ef 	.word	0x080098ef

0800958c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	bc80      	pop	{r7}
 800959c:	4770      	bx	lr

0800959e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800959e:	b480      	push	{r7}
 80095a0:	b083      	sub	sp, #12
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80095a6:	bf00      	nop
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bc80      	pop	{r7}
 80095ae:	4770      	bx	lr

080095b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	bc80      	pop	{r7}
 80095c0:	4770      	bx	lr

080095c2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095c2:	b480      	push	{r7}
 80095c4:	b083      	sub	sp, #12
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80095ca:	bf00      	nop
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bc80      	pop	{r7}
 80095d2:	4770      	bx	lr

080095d4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 0320 	and.w	r3, r3, #32
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d113      	bne.n	8009618 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	695a      	ldr	r2, [r3, #20]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009604:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68da      	ldr	r2, [r3, #12]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009614:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009616:	e002      	b.n	800961e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f7f8 fee3 	bl	80023e4 <HAL_UART_TxCpltCallback>
}
 800961e:	bf00      	nop
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b084      	sub	sp, #16
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009632:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f7ff ffa9 	bl	800958c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 0320 	and.w	r3, r3, #32
 800965a:	2b00      	cmp	r3, #0
 800965c:	d12a      	bne.n	80096b4 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68da      	ldr	r2, [r3, #12]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009672:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	695a      	ldr	r2, [r3, #20]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f022 0201 	bic.w	r2, r2, #1
 8009682:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	695a      	ldr	r2, [r3, #20]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009692:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2220      	movs	r2, #32
 8009698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d107      	bne.n	80096b4 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68da      	ldr	r2, [r3, #12]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f022 0210 	bic.w	r2, r2, #16
 80096b2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d106      	bne.n	80096ca <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80096c0:	4619      	mov	r1, r3
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f7f8 fea2 	bl	800240c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096c8:	e002      	b.n	80096d0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f7ff ff67 	bl	800959e <HAL_UART_RxCpltCallback>
}
 80096d0:	bf00      	nop
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d108      	bne.n	8009700 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80096f2:	085b      	lsrs	r3, r3, #1
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	4619      	mov	r1, r3
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f7f8 fe87 	bl	800240c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096fe:	e002      	b.n	8009706 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f7ff ff55 	bl	80095b0 <HAL_UART_RxHalfCpltCallback>
}
 8009706:	bf00      	nop
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009716:	2300      	movs	r3, #0
 8009718:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800972a:	2b00      	cmp	r3, #0
 800972c:	bf14      	ite	ne
 800972e:	2301      	movne	r3, #1
 8009730:	2300      	moveq	r3, #0
 8009732:	b2db      	uxtb	r3, r3
 8009734:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b21      	cmp	r3, #33	; 0x21
 8009740:	d108      	bne.n	8009754 <UART_DMAError+0x46>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d005      	beq.n	8009754 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	2200      	movs	r2, #0
 800974c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800974e:	68b8      	ldr	r0, [r7, #8]
 8009750:	f000 f88c 	bl	800986c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975e:	2b00      	cmp	r3, #0
 8009760:	bf14      	ite	ne
 8009762:	2301      	movne	r3, #1
 8009764:	2300      	moveq	r3, #0
 8009766:	b2db      	uxtb	r3, r3
 8009768:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b22      	cmp	r3, #34	; 0x22
 8009774:	d108      	bne.n	8009788 <UART_DMAError+0x7a>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d005      	beq.n	8009788 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2200      	movs	r2, #0
 8009780:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009782:	68b8      	ldr	r0, [r7, #8]
 8009784:	f000 f887 	bl	8009896 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978c:	f043 0210 	orr.w	r2, r3, #16
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009794:	68b8      	ldr	r0, [r7, #8]
 8009796:	f7ff ff14 	bl	80095c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800979a:	bf00      	nop
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
	...

080097a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	4613      	mov	r3, r2
 80097b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	88fa      	ldrh	r2, [r7, #6]
 80097bc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2222      	movs	r2, #34	; 0x22
 80097c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d0:	4a23      	ldr	r2, [pc, #140]	; (8009860 <UART_Start_Receive_DMA+0xbc>)
 80097d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d8:	4a22      	ldr	r2, [pc, #136]	; (8009864 <UART_Start_Receive_DMA+0xc0>)
 80097da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e0:	4a21      	ldr	r2, [pc, #132]	; (8009868 <UART_Start_Receive_DMA+0xc4>)
 80097e2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e8:	2200      	movs	r2, #0
 80097ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80097ec:	f107 0308 	add.w	r3, r7, #8
 80097f0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	3304      	adds	r3, #4
 80097fc:	4619      	mov	r1, r3
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	88fb      	ldrh	r3, [r7, #6]
 8009804:	f7fd f88e 	bl	8006924 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009808:	2300      	movs	r3, #0
 800980a:	613b      	str	r3, [r7, #16]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	613b      	str	r3, [r7, #16]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	613b      	str	r3, [r7, #16]
 800981c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68da      	ldr	r2, [r3, #12]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009834:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	695a      	ldr	r2, [r3, #20]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f042 0201 	orr.w	r2, r2, #1
 8009844:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	695a      	ldr	r2, [r3, #20]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009854:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	08009643 	.word	0x08009643
 8009864:	080096d9 	.word	0x080096d9
 8009868:	0800970f 	.word	0x0800970f

0800986c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68da      	ldr	r2, [r3, #12]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009882:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2220      	movs	r2, #32
 8009888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	bc80      	pop	{r7}
 8009894:	4770      	bx	lr

08009896 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68da      	ldr	r2, [r3, #12]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80098ac:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	695a      	ldr	r2, [r3, #20]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f022 0201 	bic.w	r2, r2, #1
 80098bc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d107      	bne.n	80098d6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68da      	ldr	r2, [r3, #12]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f022 0210 	bic.w	r2, r2, #16
 80098d4:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2220      	movs	r2, #32
 80098da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bc80      	pop	{r7}
 80098ec:	4770      	bx	lr

080098ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2200      	movs	r2, #0
 8009900:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f7ff fe5a 	bl	80095c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800990e:	bf00      	nop
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009916:	b480      	push	{r7}
 8009918:	b085      	sub	sp, #20
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b21      	cmp	r3, #33	; 0x21
 8009928:	d13e      	bne.n	80099a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009932:	d114      	bne.n	800995e <UART_Transmit_IT+0x48>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d110      	bne.n	800995e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a1b      	ldr	r3, [r3, #32]
 8009940:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009950:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a1b      	ldr	r3, [r3, #32]
 8009956:	1c9a      	adds	r2, r3, #2
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	621a      	str	r2, [r3, #32]
 800995c:	e008      	b.n	8009970 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a1b      	ldr	r3, [r3, #32]
 8009962:	1c59      	adds	r1, r3, #1
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	6211      	str	r1, [r2, #32]
 8009968:	781a      	ldrb	r2, [r3, #0]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009974:	b29b      	uxth	r3, r3
 8009976:	3b01      	subs	r3, #1
 8009978:	b29b      	uxth	r3, r3
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	4619      	mov	r1, r3
 800997e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10f      	bne.n	80099a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68da      	ldr	r2, [r3, #12]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009992:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68da      	ldr	r2, [r3, #12]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	e000      	b.n	80099aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80099a8:	2302      	movs	r3, #2
  }
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bc80      	pop	{r7}
 80099b2:	4770      	bx	lr

080099b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2220      	movs	r2, #32
 80099d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7f8 fd05 	bl	80023e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b22      	cmp	r3, #34	; 0x22
 80099f6:	f040 8099 	bne.w	8009b2c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a02:	d117      	bne.n	8009a34 <UART_Receive_IT+0x50>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d113      	bne.n	8009a34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a14:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2c:	1c9a      	adds	r2, r3, #2
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	629a      	str	r2, [r3, #40]	; 0x28
 8009a32:	e026      	b.n	8009a82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a38:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a46:	d007      	beq.n	8009a58 <UART_Receive_IT+0x74>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10a      	bne.n	8009a66 <UART_Receive_IT+0x82>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d106      	bne.n	8009a66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	b2da      	uxtb	r2, r3
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	701a      	strb	r2, [r3, #0]
 8009a64:	e008      	b.n	8009a78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a72:	b2da      	uxtb	r2, r3
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7c:	1c5a      	adds	r2, r3, #1
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	4619      	mov	r1, r3
 8009a90:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d148      	bne.n	8009b28 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	68da      	ldr	r2, [r3, #12]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 0220 	bic.w	r2, r2, #32
 8009aa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68da      	ldr	r2, [r3, #12]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ab4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	695a      	ldr	r2, [r3, #20]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f022 0201 	bic.w	r2, r2, #1
 8009ac4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2220      	movs	r2, #32
 8009aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d123      	bne.n	8009b1e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68da      	ldr	r2, [r3, #12]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f022 0210 	bic.w	r2, r2, #16
 8009aea:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 0310 	and.w	r3, r3, #16
 8009af6:	2b10      	cmp	r3, #16
 8009af8:	d10a      	bne.n	8009b10 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009afa:	2300      	movs	r3, #0
 8009afc:	60fb      	str	r3, [r7, #12]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	60fb      	str	r3, [r7, #12]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7f8 fc78 	bl	800240c <HAL_UARTEx_RxEventCallback>
 8009b1c:	e002      	b.n	8009b24 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7ff fd3d 	bl	800959e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	e002      	b.n	8009b2e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	e000      	b.n	8009b2e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009b2c:	2302      	movs	r3, #2
  }
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	68da      	ldr	r2, [r3, #12]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	430a      	orrs	r2, r1
 8009b54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	689a      	ldr	r2, [r3, #8]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	431a      	orrs	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	695b      	ldr	r3, [r3, #20]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009b72:	f023 030c 	bic.w	r3, r3, #12
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	6812      	ldr	r2, [r2, #0]
 8009b7a:	68b9      	ldr	r1, [r7, #8]
 8009b7c:	430b      	orrs	r3, r1
 8009b7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	695b      	ldr	r3, [r3, #20]
 8009b86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	699a      	ldr	r2, [r3, #24]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	430a      	orrs	r2, r1
 8009b94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a2c      	ldr	r2, [pc, #176]	; (8009c4c <UART_SetConfig+0x114>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d103      	bne.n	8009ba8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009ba0:	f7fe f87a 	bl	8007c98 <HAL_RCC_GetPCLK2Freq>
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	e002      	b.n	8009bae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009ba8:	f7fe f862 	bl	8007c70 <HAL_RCC_GetPCLK1Freq>
 8009bac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	009a      	lsls	r2, r3, #2
 8009bb8:	441a      	add	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	009b      	lsls	r3, r3, #2
 8009bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bc4:	4a22      	ldr	r2, [pc, #136]	; (8009c50 <UART_SetConfig+0x118>)
 8009bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bca:	095b      	lsrs	r3, r3, #5
 8009bcc:	0119      	lsls	r1, r3, #4
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	009a      	lsls	r2, r3, #2
 8009bd8:	441a      	add	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8009be4:	4b1a      	ldr	r3, [pc, #104]	; (8009c50 <UART_SetConfig+0x118>)
 8009be6:	fba3 0302 	umull	r0, r3, r3, r2
 8009bea:	095b      	lsrs	r3, r3, #5
 8009bec:	2064      	movs	r0, #100	; 0x64
 8009bee:	fb00 f303 	mul.w	r3, r0, r3
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	011b      	lsls	r3, r3, #4
 8009bf6:	3332      	adds	r3, #50	; 0x32
 8009bf8:	4a15      	ldr	r2, [pc, #84]	; (8009c50 <UART_SetConfig+0x118>)
 8009bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfe:	095b      	lsrs	r3, r3, #5
 8009c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c04:	4419      	add	r1, r3
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	009a      	lsls	r2, r3, #2
 8009c10:	441a      	add	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c1c:	4b0c      	ldr	r3, [pc, #48]	; (8009c50 <UART_SetConfig+0x118>)
 8009c1e:	fba3 0302 	umull	r0, r3, r3, r2
 8009c22:	095b      	lsrs	r3, r3, #5
 8009c24:	2064      	movs	r0, #100	; 0x64
 8009c26:	fb00 f303 	mul.w	r3, r0, r3
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	011b      	lsls	r3, r3, #4
 8009c2e:	3332      	adds	r3, #50	; 0x32
 8009c30:	4a07      	ldr	r2, [pc, #28]	; (8009c50 <UART_SetConfig+0x118>)
 8009c32:	fba2 2303 	umull	r2, r3, r2, r3
 8009c36:	095b      	lsrs	r3, r3, #5
 8009c38:	f003 020f 	and.w	r2, r3, #15
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	440a      	add	r2, r1
 8009c42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009c44:	bf00      	nop
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	40013800 	.word	0x40013800
 8009c50:	51eb851f 	.word	0x51eb851f

08009c54 <__cxa_pure_virtual>:
 8009c54:	b508      	push	{r3, lr}
 8009c56:	f000 f80d 	bl	8009c74 <_ZSt9terminatev>

08009c5a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009c5a:	b508      	push	{r3, lr}
 8009c5c:	4780      	blx	r0
 8009c5e:	f001 f939 	bl	800aed4 <abort>
	...

08009c64 <_ZSt13get_terminatev>:
 8009c64:	4b02      	ldr	r3, [pc, #8]	; (8009c70 <_ZSt13get_terminatev+0xc>)
 8009c66:	6818      	ldr	r0, [r3, #0]
 8009c68:	f3bf 8f5b 	dmb	ish
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	2000000c 	.word	0x2000000c

08009c74 <_ZSt9terminatev>:
 8009c74:	b508      	push	{r3, lr}
 8009c76:	f7ff fff5 	bl	8009c64 <_ZSt13get_terminatev>
 8009c7a:	f7ff ffee 	bl	8009c5a <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08009c80 <log1pf>:
 8009c80:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c88:	4604      	mov	r4, r0
 8009c8a:	4605      	mov	r5, r0
 8009c8c:	db06      	blt.n	8009c9c <log1pf+0x1c>
 8009c8e:	4601      	mov	r1, r0
 8009c90:	f7f6 ff64 	bl	8000b5c <__addsf3>
 8009c94:	4604      	mov	r4, r0
 8009c96:	4620      	mov	r0, r4
 8009c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c9c:	4b8b      	ldr	r3, [pc, #556]	; (8009ecc <log1pf+0x24c>)
 8009c9e:	4298      	cmp	r0, r3
 8009ca0:	dc7d      	bgt.n	8009d9e <log1pf+0x11e>
 8009ca2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009ca6:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8009caa:	db0d      	blt.n	8009cc8 <log1pf+0x48>
 8009cac:	4988      	ldr	r1, [pc, #544]	; (8009ed0 <log1pf+0x250>)
 8009cae:	f7f7 f9f1 	bl	8001094 <__aeabi_fcmpeq>
 8009cb2:	b120      	cbz	r0, 8009cbe <log1pf+0x3e>
 8009cb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb8:	2001      	movs	r0, #1
 8009cba:	f000 bfc3 	b.w	800ac44 <__math_divzerof>
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cc4:	f000 bfce 	b.w	800ac64 <__math_invalidf>
 8009cc8:	f1b6 5f44 	cmp.w	r6, #822083584	; 0x31000000
 8009ccc:	da14      	bge.n	8009cf8 <log1pf+0x78>
 8009cce:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009cd2:	f7f6 ff43 	bl	8000b5c <__addsf3>
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	f7f7 fa04 	bl	80010e4 <__aeabi_fcmpgt>
 8009cdc:	b110      	cbz	r0, 8009ce4 <log1pf+0x64>
 8009cde:	f1b6 5f12 	cmp.w	r6, #612368384	; 0x24800000
 8009ce2:	dbd8      	blt.n	8009c96 <log1pf+0x16>
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f7f7 f840 	bl	8000d6c <__aeabi_fmul>
 8009cec:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009cf0:	f7f7 f83c 	bl	8000d6c <__aeabi_fmul>
 8009cf4:	4601      	mov	r1, r0
 8009cf6:	e072      	b.n	8009dde <log1pf+0x15e>
 8009cf8:	4b76      	ldr	r3, [pc, #472]	; (8009ed4 <log1pf+0x254>)
 8009cfa:	441d      	add	r5, r3
 8009cfc:	429d      	cmp	r5, r3
 8009cfe:	d85c      	bhi.n	8009dba <log1pf+0x13a>
 8009d00:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009d04:	4620      	mov	r0, r4
 8009d06:	f7f6 ff29 	bl	8000b5c <__addsf3>
 8009d0a:	15c6      	asrs	r6, r0, #23
 8009d0c:	3e7f      	subs	r6, #127	; 0x7f
 8009d0e:	2e00      	cmp	r6, #0
 8009d10:	4607      	mov	r7, r0
 8009d12:	4605      	mov	r5, r0
 8009d14:	dd4a      	ble.n	8009dac <log1pf+0x12c>
 8009d16:	4621      	mov	r1, r4
 8009d18:	f7f6 ff1e 	bl	8000b58 <__aeabi_fsub>
 8009d1c:	4601      	mov	r1, r0
 8009d1e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009d22:	f7f6 ff19 	bl	8000b58 <__aeabi_fsub>
 8009d26:	4639      	mov	r1, r7
 8009d28:	f7f7 f8d4 	bl	8000ed4 <__aeabi_fdiv>
 8009d2c:	4607      	mov	r7, r0
 8009d2e:	4b6a      	ldr	r3, [pc, #424]	; (8009ed8 <log1pf+0x258>)
 8009d30:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8009d34:	429d      	cmp	r5, r3
 8009d36:	bfc8      	it	gt
 8009d38:	f045 507c 	orrgt.w	r0, r5, #1056964608	; 0x3f000000
 8009d3c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009d40:	bfc9      	itett	gt
 8009d42:	f5c5 0500 	rsbgt	r5, r5, #8388608	; 0x800000
 8009d46:	f045 507e 	orrle.w	r0, r5, #1065353216	; 0x3f800000
 8009d4a:	3601      	addgt	r6, #1
 8009d4c:	10ad      	asrgt	r5, r5, #2
 8009d4e:	f7f6 ff03 	bl	8000b58 <__aeabi_fsub>
 8009d52:	4604      	mov	r4, r0
 8009d54:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f7f7 f807 	bl	8000d6c <__aeabi_fmul>
 8009d5e:	4621      	mov	r1, r4
 8009d60:	f7f7 f804 	bl	8000d6c <__aeabi_fmul>
 8009d64:	4680      	mov	r8, r0
 8009d66:	2d00      	cmp	r5, #0
 8009d68:	d156      	bne.n	8009e18 <log1pf+0x198>
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f7f7 f991 	bl	8001094 <__aeabi_fcmpeq>
 8009d72:	b328      	cbz	r0, 8009dc0 <log1pf+0x140>
 8009d74:	2e00      	cmp	r6, #0
 8009d76:	f000 80a6 	beq.w	8009ec6 <log1pf+0x246>
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f7f6 ffa2 	bl	8000cc4 <__aeabi_i2f>
 8009d80:	4956      	ldr	r1, [pc, #344]	; (8009edc <log1pf+0x25c>)
 8009d82:	4605      	mov	r5, r0
 8009d84:	f7f6 fff2 	bl	8000d6c <__aeabi_fmul>
 8009d88:	4639      	mov	r1, r7
 8009d8a:	f7f6 fee7 	bl	8000b5c <__addsf3>
 8009d8e:	4954      	ldr	r1, [pc, #336]	; (8009ee0 <log1pf+0x260>)
 8009d90:	4604      	mov	r4, r0
 8009d92:	4628      	mov	r0, r5
 8009d94:	f7f6 ffea 	bl	8000d6c <__aeabi_fmul>
 8009d98:	4601      	mov	r1, r0
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	e778      	b.n	8009c90 <log1pf+0x10>
 8009d9e:	f1b0 4fb4 	cmp.w	r0, #1509949440	; 0x5a000000
 8009da2:	dbad      	blt.n	8009d00 <log1pf+0x80>
 8009da4:	15c6      	asrs	r6, r0, #23
 8009da6:	2700      	movs	r7, #0
 8009da8:	3e7f      	subs	r6, #127	; 0x7f
 8009daa:	e7c0      	b.n	8009d2e <log1pf+0xae>
 8009dac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009db0:	f7f6 fed2 	bl	8000b58 <__aeabi_fsub>
 8009db4:	4601      	mov	r1, r0
 8009db6:	4620      	mov	r0, r4
 8009db8:	e7b3      	b.n	8009d22 <log1pf+0xa2>
 8009dba:	2501      	movs	r5, #1
 8009dbc:	2600      	movs	r6, #0
 8009dbe:	e7c9      	b.n	8009d54 <log1pf+0xd4>
 8009dc0:	4948      	ldr	r1, [pc, #288]	; (8009ee4 <log1pf+0x264>)
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f7f6 ffd2 	bl	8000d6c <__aeabi_fmul>
 8009dc8:	4601      	mov	r1, r0
 8009dca:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009dce:	f7f6 fec3 	bl	8000b58 <__aeabi_fsub>
 8009dd2:	4641      	mov	r1, r8
 8009dd4:	f7f6 ffca 	bl	8000d6c <__aeabi_fmul>
 8009dd8:	4605      	mov	r5, r0
 8009dda:	b926      	cbnz	r6, 8009de6 <log1pf+0x166>
 8009ddc:	4601      	mov	r1, r0
 8009dde:	4620      	mov	r0, r4
 8009de0:	f7f6 feba 	bl	8000b58 <__aeabi_fsub>
 8009de4:	e756      	b.n	8009c94 <log1pf+0x14>
 8009de6:	4630      	mov	r0, r6
 8009de8:	f7f6 ff6c 	bl	8000cc4 <__aeabi_i2f>
 8009dec:	493c      	ldr	r1, [pc, #240]	; (8009ee0 <log1pf+0x260>)
 8009dee:	4680      	mov	r8, r0
 8009df0:	f7f6 ffbc 	bl	8000d6c <__aeabi_fmul>
 8009df4:	4939      	ldr	r1, [pc, #228]	; (8009edc <log1pf+0x25c>)
 8009df6:	4606      	mov	r6, r0
 8009df8:	4640      	mov	r0, r8
 8009dfa:	f7f6 ffb7 	bl	8000d6c <__aeabi_fmul>
 8009dfe:	4639      	mov	r1, r7
 8009e00:	f7f6 feac 	bl	8000b5c <__addsf3>
 8009e04:	4601      	mov	r1, r0
 8009e06:	4628      	mov	r0, r5
 8009e08:	f7f6 fea6 	bl	8000b58 <__aeabi_fsub>
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	f7f6 fea3 	bl	8000b58 <__aeabi_fsub>
 8009e12:	4601      	mov	r1, r0
 8009e14:	4630      	mov	r0, r6
 8009e16:	e7e3      	b.n	8009de0 <log1pf+0x160>
 8009e18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f7f6 fe9d 	bl	8000b5c <__addsf3>
 8009e22:	4601      	mov	r1, r0
 8009e24:	4620      	mov	r0, r4
 8009e26:	f7f7 f855 	bl	8000ed4 <__aeabi_fdiv>
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	4681      	mov	r9, r0
 8009e2e:	f7f6 ff9d 	bl	8000d6c <__aeabi_fmul>
 8009e32:	4605      	mov	r5, r0
 8009e34:	492c      	ldr	r1, [pc, #176]	; (8009ee8 <log1pf+0x268>)
 8009e36:	f7f6 ff99 	bl	8000d6c <__aeabi_fmul>
 8009e3a:	492c      	ldr	r1, [pc, #176]	; (8009eec <log1pf+0x26c>)
 8009e3c:	f7f6 fe8e 	bl	8000b5c <__addsf3>
 8009e40:	4629      	mov	r1, r5
 8009e42:	f7f6 ff93 	bl	8000d6c <__aeabi_fmul>
 8009e46:	492a      	ldr	r1, [pc, #168]	; (8009ef0 <log1pf+0x270>)
 8009e48:	f7f6 fe88 	bl	8000b5c <__addsf3>
 8009e4c:	4629      	mov	r1, r5
 8009e4e:	f7f6 ff8d 	bl	8000d6c <__aeabi_fmul>
 8009e52:	4928      	ldr	r1, [pc, #160]	; (8009ef4 <log1pf+0x274>)
 8009e54:	f7f6 fe82 	bl	8000b5c <__addsf3>
 8009e58:	4629      	mov	r1, r5
 8009e5a:	f7f6 ff87 	bl	8000d6c <__aeabi_fmul>
 8009e5e:	4926      	ldr	r1, [pc, #152]	; (8009ef8 <log1pf+0x278>)
 8009e60:	f7f6 fe7c 	bl	8000b5c <__addsf3>
 8009e64:	4629      	mov	r1, r5
 8009e66:	f7f6 ff81 	bl	8000d6c <__aeabi_fmul>
 8009e6a:	4924      	ldr	r1, [pc, #144]	; (8009efc <log1pf+0x27c>)
 8009e6c:	f7f6 fe76 	bl	8000b5c <__addsf3>
 8009e70:	4629      	mov	r1, r5
 8009e72:	f7f6 ff7b 	bl	8000d6c <__aeabi_fmul>
 8009e76:	491b      	ldr	r1, [pc, #108]	; (8009ee4 <log1pf+0x264>)
 8009e78:	f7f6 fe70 	bl	8000b5c <__addsf3>
 8009e7c:	4629      	mov	r1, r5
 8009e7e:	f7f6 ff75 	bl	8000d6c <__aeabi_fmul>
 8009e82:	4641      	mov	r1, r8
 8009e84:	f7f6 fe6a 	bl	8000b5c <__addsf3>
 8009e88:	4649      	mov	r1, r9
 8009e8a:	f7f6 ff6f 	bl	8000d6c <__aeabi_fmul>
 8009e8e:	4605      	mov	r5, r0
 8009e90:	b926      	cbnz	r6, 8009e9c <log1pf+0x21c>
 8009e92:	4601      	mov	r1, r0
 8009e94:	4640      	mov	r0, r8
 8009e96:	f7f6 fe5f 	bl	8000b58 <__aeabi_fsub>
 8009e9a:	e72b      	b.n	8009cf4 <log1pf+0x74>
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	f7f6 ff11 	bl	8000cc4 <__aeabi_i2f>
 8009ea2:	490f      	ldr	r1, [pc, #60]	; (8009ee0 <log1pf+0x260>)
 8009ea4:	4681      	mov	r9, r0
 8009ea6:	f7f6 ff61 	bl	8000d6c <__aeabi_fmul>
 8009eaa:	490c      	ldr	r1, [pc, #48]	; (8009edc <log1pf+0x25c>)
 8009eac:	4606      	mov	r6, r0
 8009eae:	4648      	mov	r0, r9
 8009eb0:	f7f6 ff5c 	bl	8000d6c <__aeabi_fmul>
 8009eb4:	4639      	mov	r1, r7
 8009eb6:	f7f6 fe51 	bl	8000b5c <__addsf3>
 8009eba:	4629      	mov	r1, r5
 8009ebc:	f7f6 fe4e 	bl	8000b5c <__addsf3>
 8009ec0:	4601      	mov	r1, r0
 8009ec2:	4640      	mov	r0, r8
 8009ec4:	e7a0      	b.n	8009e08 <log1pf+0x188>
 8009ec6:	2400      	movs	r4, #0
 8009ec8:	e6e5      	b.n	8009c96 <log1pf+0x16>
 8009eca:	bf00      	nop
 8009ecc:	3ed413d6 	.word	0x3ed413d6
 8009ed0:	bf800000 	.word	0xbf800000
 8009ed4:	416a09e0 	.word	0x416a09e0
 8009ed8:	003504f6 	.word	0x003504f6
 8009edc:	3717f7d1 	.word	0x3717f7d1
 8009ee0:	3f317180 	.word	0x3f317180
 8009ee4:	3f2aaaab 	.word	0x3f2aaaab
 8009ee8:	3e178897 	.word	0x3e178897
 8009eec:	3e1cd04f 	.word	0x3e1cd04f
 8009ef0:	3e3a3325 	.word	0x3e3a3325
 8009ef4:	3e638e29 	.word	0x3e638e29
 8009ef8:	3e924925 	.word	0x3e924925
 8009efc:	3ecccccd 	.word	0x3ecccccd

08009f00 <pow>:
 8009f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f04:	461f      	mov	r7, r3
 8009f06:	4680      	mov	r8, r0
 8009f08:	4689      	mov	r9, r1
 8009f0a:	4616      	mov	r6, r2
 8009f0c:	f000 f8d0 	bl	800a0b0 <__ieee754_pow>
 8009f10:	4b4d      	ldr	r3, [pc, #308]	; (800a048 <pow+0x148>)
 8009f12:	4604      	mov	r4, r0
 8009f14:	f993 3000 	ldrsb.w	r3, [r3]
 8009f18:	460d      	mov	r5, r1
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	d015      	beq.n	8009f4a <pow+0x4a>
 8009f1e:	4632      	mov	r2, r6
 8009f20:	463b      	mov	r3, r7
 8009f22:	4630      	mov	r0, r6
 8009f24:	4639      	mov	r1, r7
 8009f26:	f7f6 fdd5 	bl	8000ad4 <__aeabi_dcmpun>
 8009f2a:	b970      	cbnz	r0, 8009f4a <pow+0x4a>
 8009f2c:	4642      	mov	r2, r8
 8009f2e:	464b      	mov	r3, r9
 8009f30:	4640      	mov	r0, r8
 8009f32:	4649      	mov	r1, r9
 8009f34:	f7f6 fdce 	bl	8000ad4 <__aeabi_dcmpun>
 8009f38:	2200      	movs	r2, #0
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	b148      	cbz	r0, 8009f52 <pow+0x52>
 8009f3e:	4630      	mov	r0, r6
 8009f40:	4639      	mov	r1, r7
 8009f42:	f7f6 fd95 	bl	8000a70 <__aeabi_dcmpeq>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	d17b      	bne.n	800a042 <pow+0x142>
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f52:	4640      	mov	r0, r8
 8009f54:	4649      	mov	r1, r9
 8009f56:	f7f6 fd8b 	bl	8000a70 <__aeabi_dcmpeq>
 8009f5a:	b1e0      	cbz	r0, 8009f96 <pow+0x96>
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	2300      	movs	r3, #0
 8009f60:	4630      	mov	r0, r6
 8009f62:	4639      	mov	r1, r7
 8009f64:	f7f6 fd84 	bl	8000a70 <__aeabi_dcmpeq>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d16a      	bne.n	800a042 <pow+0x142>
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	4639      	mov	r1, r7
 8009f70:	f000 fe91 	bl	800ac96 <finite>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d0e8      	beq.n	8009f4a <pow+0x4a>
 8009f78:	2200      	movs	r2, #0
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	4639      	mov	r1, r7
 8009f80:	f7f6 fd80 	bl	8000a84 <__aeabi_dcmplt>
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d0e0      	beq.n	8009f4a <pow+0x4a>
 8009f88:	f000 ffac 	bl	800aee4 <__errno>
 8009f8c:	2321      	movs	r3, #33	; 0x21
 8009f8e:	2400      	movs	r4, #0
 8009f90:	6003      	str	r3, [r0, #0]
 8009f92:	4d2e      	ldr	r5, [pc, #184]	; (800a04c <pow+0x14c>)
 8009f94:	e7d9      	b.n	8009f4a <pow+0x4a>
 8009f96:	4620      	mov	r0, r4
 8009f98:	4629      	mov	r1, r5
 8009f9a:	f000 fe7c 	bl	800ac96 <finite>
 8009f9e:	bba8      	cbnz	r0, 800a00c <pow+0x10c>
 8009fa0:	4640      	mov	r0, r8
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	f000 fe77 	bl	800ac96 <finite>
 8009fa8:	b380      	cbz	r0, 800a00c <pow+0x10c>
 8009faa:	4630      	mov	r0, r6
 8009fac:	4639      	mov	r1, r7
 8009fae:	f000 fe72 	bl	800ac96 <finite>
 8009fb2:	b358      	cbz	r0, 800a00c <pow+0x10c>
 8009fb4:	4622      	mov	r2, r4
 8009fb6:	462b      	mov	r3, r5
 8009fb8:	4620      	mov	r0, r4
 8009fba:	4629      	mov	r1, r5
 8009fbc:	f7f6 fd8a 	bl	8000ad4 <__aeabi_dcmpun>
 8009fc0:	b160      	cbz	r0, 8009fdc <pow+0xdc>
 8009fc2:	f000 ff8f 	bl	800aee4 <__errno>
 8009fc6:	2321      	movs	r3, #33	; 0x21
 8009fc8:	2200      	movs	r2, #0
 8009fca:	6003      	str	r3, [r0, #0]
 8009fcc:	2300      	movs	r3, #0
 8009fce:	4610      	mov	r0, r2
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	f7f6 fc0f 	bl	80007f4 <__aeabi_ddiv>
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	460d      	mov	r5, r1
 8009fda:	e7b6      	b.n	8009f4a <pow+0x4a>
 8009fdc:	f000 ff82 	bl	800aee4 <__errno>
 8009fe0:	2322      	movs	r3, #34	; 0x22
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	6003      	str	r3, [r0, #0]
 8009fe6:	4649      	mov	r1, r9
 8009fe8:	2300      	movs	r3, #0
 8009fea:	4640      	mov	r0, r8
 8009fec:	f7f6 fd4a 	bl	8000a84 <__aeabi_dcmplt>
 8009ff0:	2400      	movs	r4, #0
 8009ff2:	b148      	cbz	r0, 800a008 <pow+0x108>
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	4639      	mov	r1, r7
 8009ff8:	f000 fe5a 	bl	800acb0 <rint>
 8009ffc:	4632      	mov	r2, r6
 8009ffe:	463b      	mov	r3, r7
 800a000:	f7f6 fd36 	bl	8000a70 <__aeabi_dcmpeq>
 800a004:	2800      	cmp	r0, #0
 800a006:	d0c4      	beq.n	8009f92 <pow+0x92>
 800a008:	4d11      	ldr	r5, [pc, #68]	; (800a050 <pow+0x150>)
 800a00a:	e79e      	b.n	8009f4a <pow+0x4a>
 800a00c:	2200      	movs	r2, #0
 800a00e:	2300      	movs	r3, #0
 800a010:	4620      	mov	r0, r4
 800a012:	4629      	mov	r1, r5
 800a014:	f7f6 fd2c 	bl	8000a70 <__aeabi_dcmpeq>
 800a018:	2800      	cmp	r0, #0
 800a01a:	d096      	beq.n	8009f4a <pow+0x4a>
 800a01c:	4640      	mov	r0, r8
 800a01e:	4649      	mov	r1, r9
 800a020:	f000 fe39 	bl	800ac96 <finite>
 800a024:	2800      	cmp	r0, #0
 800a026:	d090      	beq.n	8009f4a <pow+0x4a>
 800a028:	4630      	mov	r0, r6
 800a02a:	4639      	mov	r1, r7
 800a02c:	f000 fe33 	bl	800ac96 <finite>
 800a030:	2800      	cmp	r0, #0
 800a032:	d08a      	beq.n	8009f4a <pow+0x4a>
 800a034:	f000 ff56 	bl	800aee4 <__errno>
 800a038:	2322      	movs	r3, #34	; 0x22
 800a03a:	2400      	movs	r4, #0
 800a03c:	2500      	movs	r5, #0
 800a03e:	6003      	str	r3, [r0, #0]
 800a040:	e783      	b.n	8009f4a <pow+0x4a>
 800a042:	2400      	movs	r4, #0
 800a044:	4d03      	ldr	r5, [pc, #12]	; (800a054 <pow+0x154>)
 800a046:	e780      	b.n	8009f4a <pow+0x4a>
 800a048:	20000010 	.word	0x20000010
 800a04c:	fff00000 	.word	0xfff00000
 800a050:	7ff00000 	.word	0x7ff00000
 800a054:	3ff00000 	.word	0x3ff00000

0800a058 <sqrt>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	4606      	mov	r6, r0
 800a05c:	460f      	mov	r7, r1
 800a05e:	f000 fd3d 	bl	800aadc <__ieee754_sqrt>
 800a062:	4b12      	ldr	r3, [pc, #72]	; (800a0ac <sqrt+0x54>)
 800a064:	4604      	mov	r4, r0
 800a066:	f993 3000 	ldrsb.w	r3, [r3]
 800a06a:	460d      	mov	r5, r1
 800a06c:	3301      	adds	r3, #1
 800a06e:	d019      	beq.n	800a0a4 <sqrt+0x4c>
 800a070:	4632      	mov	r2, r6
 800a072:	463b      	mov	r3, r7
 800a074:	4630      	mov	r0, r6
 800a076:	4639      	mov	r1, r7
 800a078:	f7f6 fd2c 	bl	8000ad4 <__aeabi_dcmpun>
 800a07c:	b990      	cbnz	r0, 800a0a4 <sqrt+0x4c>
 800a07e:	2200      	movs	r2, #0
 800a080:	2300      	movs	r3, #0
 800a082:	4630      	mov	r0, r6
 800a084:	4639      	mov	r1, r7
 800a086:	f7f6 fcfd 	bl	8000a84 <__aeabi_dcmplt>
 800a08a:	b158      	cbz	r0, 800a0a4 <sqrt+0x4c>
 800a08c:	f000 ff2a 	bl	800aee4 <__errno>
 800a090:	2321      	movs	r3, #33	; 0x21
 800a092:	2200      	movs	r2, #0
 800a094:	6003      	str	r3, [r0, #0]
 800a096:	2300      	movs	r3, #0
 800a098:	4610      	mov	r0, r2
 800a09a:	4619      	mov	r1, r3
 800a09c:	f7f6 fbaa 	bl	80007f4 <__aeabi_ddiv>
 800a0a0:	4604      	mov	r4, r0
 800a0a2:	460d      	mov	r5, r1
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20000010 	.word	0x20000010

0800a0b0 <__ieee754_pow>:
 800a0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b4:	b093      	sub	sp, #76	; 0x4c
 800a0b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0ba:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800a0be:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a0c2:	ea55 0302 	orrs.w	r3, r5, r2
 800a0c6:	4607      	mov	r7, r0
 800a0c8:	4688      	mov	r8, r1
 800a0ca:	f000 84bf 	beq.w	800aa4c <__ieee754_pow+0x99c>
 800a0ce:	4b7e      	ldr	r3, [pc, #504]	; (800a2c8 <__ieee754_pow+0x218>)
 800a0d0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a0d4:	429c      	cmp	r4, r3
 800a0d6:	4689      	mov	r9, r1
 800a0d8:	4682      	mov	sl, r0
 800a0da:	dc09      	bgt.n	800a0f0 <__ieee754_pow+0x40>
 800a0dc:	d103      	bne.n	800a0e6 <__ieee754_pow+0x36>
 800a0de:	b978      	cbnz	r0, 800a100 <__ieee754_pow+0x50>
 800a0e0:	42a5      	cmp	r5, r4
 800a0e2:	dd02      	ble.n	800a0ea <__ieee754_pow+0x3a>
 800a0e4:	e00c      	b.n	800a100 <__ieee754_pow+0x50>
 800a0e6:	429d      	cmp	r5, r3
 800a0e8:	dc02      	bgt.n	800a0f0 <__ieee754_pow+0x40>
 800a0ea:	429d      	cmp	r5, r3
 800a0ec:	d10e      	bne.n	800a10c <__ieee754_pow+0x5c>
 800a0ee:	b16a      	cbz	r2, 800a10c <__ieee754_pow+0x5c>
 800a0f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a0f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a0f8:	ea54 030a 	orrs.w	r3, r4, sl
 800a0fc:	f000 84a6 	beq.w	800aa4c <__ieee754_pow+0x99c>
 800a100:	4872      	ldr	r0, [pc, #456]	; (800a2cc <__ieee754_pow+0x21c>)
 800a102:	b013      	add	sp, #76	; 0x4c
 800a104:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a108:	f000 bdcc 	b.w	800aca4 <nan>
 800a10c:	f1b9 0f00 	cmp.w	r9, #0
 800a110:	da39      	bge.n	800a186 <__ieee754_pow+0xd6>
 800a112:	4b6f      	ldr	r3, [pc, #444]	; (800a2d0 <__ieee754_pow+0x220>)
 800a114:	429d      	cmp	r5, r3
 800a116:	dc54      	bgt.n	800a1c2 <__ieee754_pow+0x112>
 800a118:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a11c:	429d      	cmp	r5, r3
 800a11e:	f340 84a6 	ble.w	800aa6e <__ieee754_pow+0x9be>
 800a122:	152b      	asrs	r3, r5, #20
 800a124:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a128:	2b14      	cmp	r3, #20
 800a12a:	dd0f      	ble.n	800a14c <__ieee754_pow+0x9c>
 800a12c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a130:	fa22 f103 	lsr.w	r1, r2, r3
 800a134:	fa01 f303 	lsl.w	r3, r1, r3
 800a138:	4293      	cmp	r3, r2
 800a13a:	f040 8498 	bne.w	800aa6e <__ieee754_pow+0x9be>
 800a13e:	f001 0101 	and.w	r1, r1, #1
 800a142:	f1c1 0302 	rsb	r3, r1, #2
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	b182      	cbz	r2, 800a16c <__ieee754_pow+0xbc>
 800a14a:	e05e      	b.n	800a20a <__ieee754_pow+0x15a>
 800a14c:	2a00      	cmp	r2, #0
 800a14e:	d15a      	bne.n	800a206 <__ieee754_pow+0x156>
 800a150:	f1c3 0314 	rsb	r3, r3, #20
 800a154:	fa45 f103 	asr.w	r1, r5, r3
 800a158:	fa01 f303 	lsl.w	r3, r1, r3
 800a15c:	42ab      	cmp	r3, r5
 800a15e:	f040 8483 	bne.w	800aa68 <__ieee754_pow+0x9b8>
 800a162:	f001 0101 	and.w	r1, r1, #1
 800a166:	f1c1 0302 	rsb	r3, r1, #2
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	4b59      	ldr	r3, [pc, #356]	; (800a2d4 <__ieee754_pow+0x224>)
 800a16e:	429d      	cmp	r5, r3
 800a170:	d130      	bne.n	800a1d4 <__ieee754_pow+0x124>
 800a172:	2e00      	cmp	r6, #0
 800a174:	f280 8474 	bge.w	800aa60 <__ieee754_pow+0x9b0>
 800a178:	463a      	mov	r2, r7
 800a17a:	4643      	mov	r3, r8
 800a17c:	2000      	movs	r0, #0
 800a17e:	4955      	ldr	r1, [pc, #340]	; (800a2d4 <__ieee754_pow+0x224>)
 800a180:	f7f6 fb38 	bl	80007f4 <__aeabi_ddiv>
 800a184:	e02f      	b.n	800a1e6 <__ieee754_pow+0x136>
 800a186:	2300      	movs	r3, #0
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	2a00      	cmp	r2, #0
 800a18c:	d13d      	bne.n	800a20a <__ieee754_pow+0x15a>
 800a18e:	4b4e      	ldr	r3, [pc, #312]	; (800a2c8 <__ieee754_pow+0x218>)
 800a190:	429d      	cmp	r5, r3
 800a192:	d1eb      	bne.n	800a16c <__ieee754_pow+0xbc>
 800a194:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a198:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a19c:	ea53 030a 	orrs.w	r3, r3, sl
 800a1a0:	f000 8454 	beq.w	800aa4c <__ieee754_pow+0x99c>
 800a1a4:	4b4c      	ldr	r3, [pc, #304]	; (800a2d8 <__ieee754_pow+0x228>)
 800a1a6:	429c      	cmp	r4, r3
 800a1a8:	dd0d      	ble.n	800a1c6 <__ieee754_pow+0x116>
 800a1aa:	2e00      	cmp	r6, #0
 800a1ac:	f280 8454 	bge.w	800aa58 <__ieee754_pow+0x9a8>
 800a1b0:	f04f 0b00 	mov.w	fp, #0
 800a1b4:	f04f 0c00 	mov.w	ip, #0
 800a1b8:	4658      	mov	r0, fp
 800a1ba:	4661      	mov	r1, ip
 800a1bc:	b013      	add	sp, #76	; 0x4c
 800a1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c2:	2302      	movs	r3, #2
 800a1c4:	e7e0      	b.n	800a188 <__ieee754_pow+0xd8>
 800a1c6:	2e00      	cmp	r6, #0
 800a1c8:	daf2      	bge.n	800a1b0 <__ieee754_pow+0x100>
 800a1ca:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a1ce:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a1d2:	e7f1      	b.n	800a1b8 <__ieee754_pow+0x108>
 800a1d4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800a1d8:	d108      	bne.n	800a1ec <__ieee754_pow+0x13c>
 800a1da:	463a      	mov	r2, r7
 800a1dc:	4643      	mov	r3, r8
 800a1de:	4638      	mov	r0, r7
 800a1e0:	4641      	mov	r1, r8
 800a1e2:	f7f6 f9dd 	bl	80005a0 <__aeabi_dmul>
 800a1e6:	4683      	mov	fp, r0
 800a1e8:	468c      	mov	ip, r1
 800a1ea:	e7e5      	b.n	800a1b8 <__ieee754_pow+0x108>
 800a1ec:	4b3b      	ldr	r3, [pc, #236]	; (800a2dc <__ieee754_pow+0x22c>)
 800a1ee:	429e      	cmp	r6, r3
 800a1f0:	d10b      	bne.n	800a20a <__ieee754_pow+0x15a>
 800a1f2:	f1b9 0f00 	cmp.w	r9, #0
 800a1f6:	db08      	blt.n	800a20a <__ieee754_pow+0x15a>
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	4641      	mov	r1, r8
 800a1fc:	b013      	add	sp, #76	; 0x4c
 800a1fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a202:	f000 bc6b 	b.w	800aadc <__ieee754_sqrt>
 800a206:	2300      	movs	r3, #0
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	4638      	mov	r0, r7
 800a20c:	4641      	mov	r1, r8
 800a20e:	f000 fd3f 	bl	800ac90 <fabs>
 800a212:	4683      	mov	fp, r0
 800a214:	468c      	mov	ip, r1
 800a216:	f1ba 0f00 	cmp.w	sl, #0
 800a21a:	d129      	bne.n	800a270 <__ieee754_pow+0x1c0>
 800a21c:	b124      	cbz	r4, 800a228 <__ieee754_pow+0x178>
 800a21e:	4b2d      	ldr	r3, [pc, #180]	; (800a2d4 <__ieee754_pow+0x224>)
 800a220:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800a224:	429a      	cmp	r2, r3
 800a226:	d123      	bne.n	800a270 <__ieee754_pow+0x1c0>
 800a228:	2e00      	cmp	r6, #0
 800a22a:	da07      	bge.n	800a23c <__ieee754_pow+0x18c>
 800a22c:	465a      	mov	r2, fp
 800a22e:	4663      	mov	r3, ip
 800a230:	2000      	movs	r0, #0
 800a232:	4928      	ldr	r1, [pc, #160]	; (800a2d4 <__ieee754_pow+0x224>)
 800a234:	f7f6 fade 	bl	80007f4 <__aeabi_ddiv>
 800a238:	4683      	mov	fp, r0
 800a23a:	468c      	mov	ip, r1
 800a23c:	f1b9 0f00 	cmp.w	r9, #0
 800a240:	daba      	bge.n	800a1b8 <__ieee754_pow+0x108>
 800a242:	9b00      	ldr	r3, [sp, #0]
 800a244:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a248:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a24c:	4323      	orrs	r3, r4
 800a24e:	d108      	bne.n	800a262 <__ieee754_pow+0x1b2>
 800a250:	465a      	mov	r2, fp
 800a252:	4663      	mov	r3, ip
 800a254:	4658      	mov	r0, fp
 800a256:	4661      	mov	r1, ip
 800a258:	f7f5 ffea 	bl	8000230 <__aeabi_dsub>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	e78e      	b.n	800a180 <__ieee754_pow+0xd0>
 800a262:	9b00      	ldr	r3, [sp, #0]
 800a264:	2b01      	cmp	r3, #1
 800a266:	d1a7      	bne.n	800a1b8 <__ieee754_pow+0x108>
 800a268:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a26c:	469c      	mov	ip, r3
 800a26e:	e7a3      	b.n	800a1b8 <__ieee754_pow+0x108>
 800a270:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800a274:	3b01      	subs	r3, #1
 800a276:	930c      	str	r3, [sp, #48]	; 0x30
 800a278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a27a:	9b00      	ldr	r3, [sp, #0]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	d104      	bne.n	800a28a <__ieee754_pow+0x1da>
 800a280:	463a      	mov	r2, r7
 800a282:	4643      	mov	r3, r8
 800a284:	4638      	mov	r0, r7
 800a286:	4641      	mov	r1, r8
 800a288:	e7e6      	b.n	800a258 <__ieee754_pow+0x1a8>
 800a28a:	4b15      	ldr	r3, [pc, #84]	; (800a2e0 <__ieee754_pow+0x230>)
 800a28c:	429d      	cmp	r5, r3
 800a28e:	f340 80f9 	ble.w	800a484 <__ieee754_pow+0x3d4>
 800a292:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a296:	429d      	cmp	r5, r3
 800a298:	4b0f      	ldr	r3, [pc, #60]	; (800a2d8 <__ieee754_pow+0x228>)
 800a29a:	dd09      	ble.n	800a2b0 <__ieee754_pow+0x200>
 800a29c:	429c      	cmp	r4, r3
 800a29e:	dc0c      	bgt.n	800a2ba <__ieee754_pow+0x20a>
 800a2a0:	2e00      	cmp	r6, #0
 800a2a2:	da85      	bge.n	800a1b0 <__ieee754_pow+0x100>
 800a2a4:	a306      	add	r3, pc, #24	; (adr r3, 800a2c0 <__ieee754_pow+0x210>)
 800a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2aa:	4610      	mov	r0, r2
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	e798      	b.n	800a1e2 <__ieee754_pow+0x132>
 800a2b0:	429c      	cmp	r4, r3
 800a2b2:	dbf5      	blt.n	800a2a0 <__ieee754_pow+0x1f0>
 800a2b4:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <__ieee754_pow+0x224>)
 800a2b6:	429c      	cmp	r4, r3
 800a2b8:	dd14      	ble.n	800a2e4 <__ieee754_pow+0x234>
 800a2ba:	2e00      	cmp	r6, #0
 800a2bc:	dcf2      	bgt.n	800a2a4 <__ieee754_pow+0x1f4>
 800a2be:	e777      	b.n	800a1b0 <__ieee754_pow+0x100>
 800a2c0:	8800759c 	.word	0x8800759c
 800a2c4:	7e37e43c 	.word	0x7e37e43c
 800a2c8:	7ff00000 	.word	0x7ff00000
 800a2cc:	0800b0f0 	.word	0x0800b0f0
 800a2d0:	433fffff 	.word	0x433fffff
 800a2d4:	3ff00000 	.word	0x3ff00000
 800a2d8:	3fefffff 	.word	0x3fefffff
 800a2dc:	3fe00000 	.word	0x3fe00000
 800a2e0:	41e00000 	.word	0x41e00000
 800a2e4:	4661      	mov	r1, ip
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	4658      	mov	r0, fp
 800a2ea:	4b61      	ldr	r3, [pc, #388]	; (800a470 <__ieee754_pow+0x3c0>)
 800a2ec:	f7f5 ffa0 	bl	8000230 <__aeabi_dsub>
 800a2f0:	a355      	add	r3, pc, #340	; (adr r3, 800a448 <__ieee754_pow+0x398>)
 800a2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	460d      	mov	r5, r1
 800a2fa:	f7f6 f951 	bl	80005a0 <__aeabi_dmul>
 800a2fe:	a354      	add	r3, pc, #336	; (adr r3, 800a450 <__ieee754_pow+0x3a0>)
 800a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a304:	4606      	mov	r6, r0
 800a306:	460f      	mov	r7, r1
 800a308:	4620      	mov	r0, r4
 800a30a:	4629      	mov	r1, r5
 800a30c:	f7f6 f948 	bl	80005a0 <__aeabi_dmul>
 800a310:	2200      	movs	r2, #0
 800a312:	4682      	mov	sl, r0
 800a314:	468b      	mov	fp, r1
 800a316:	4620      	mov	r0, r4
 800a318:	4629      	mov	r1, r5
 800a31a:	4b56      	ldr	r3, [pc, #344]	; (800a474 <__ieee754_pow+0x3c4>)
 800a31c:	f7f6 f940 	bl	80005a0 <__aeabi_dmul>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	a14c      	add	r1, pc, #304	; (adr r1, 800a458 <__ieee754_pow+0x3a8>)
 800a326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a32a:	f7f5 ff81 	bl	8000230 <__aeabi_dsub>
 800a32e:	4622      	mov	r2, r4
 800a330:	462b      	mov	r3, r5
 800a332:	f7f6 f935 	bl	80005a0 <__aeabi_dmul>
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	2000      	movs	r0, #0
 800a33c:	494e      	ldr	r1, [pc, #312]	; (800a478 <__ieee754_pow+0x3c8>)
 800a33e:	f7f5 ff77 	bl	8000230 <__aeabi_dsub>
 800a342:	4622      	mov	r2, r4
 800a344:	462b      	mov	r3, r5
 800a346:	4680      	mov	r8, r0
 800a348:	4689      	mov	r9, r1
 800a34a:	4620      	mov	r0, r4
 800a34c:	4629      	mov	r1, r5
 800a34e:	f7f6 f927 	bl	80005a0 <__aeabi_dmul>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	4640      	mov	r0, r8
 800a358:	4649      	mov	r1, r9
 800a35a:	f7f6 f921 	bl	80005a0 <__aeabi_dmul>
 800a35e:	a340      	add	r3, pc, #256	; (adr r3, 800a460 <__ieee754_pow+0x3b0>)
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	f7f6 f91c 	bl	80005a0 <__aeabi_dmul>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	4650      	mov	r0, sl
 800a36e:	4659      	mov	r1, fp
 800a370:	f7f5 ff5e 	bl	8000230 <__aeabi_dsub>
 800a374:	f04f 0a00 	mov.w	sl, #0
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	4604      	mov	r4, r0
 800a37e:	460d      	mov	r5, r1
 800a380:	4630      	mov	r0, r6
 800a382:	4639      	mov	r1, r7
 800a384:	f7f5 ff56 	bl	8000234 <__adddf3>
 800a388:	4632      	mov	r2, r6
 800a38a:	463b      	mov	r3, r7
 800a38c:	4650      	mov	r0, sl
 800a38e:	468b      	mov	fp, r1
 800a390:	f7f5 ff4e 	bl	8000230 <__aeabi_dsub>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	4620      	mov	r0, r4
 800a39a:	4629      	mov	r1, r5
 800a39c:	f7f5 ff48 	bl	8000230 <__aeabi_dsub>
 800a3a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a3a4:	9b00      	ldr	r3, [sp, #0]
 800a3a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	f04f 0600 	mov.w	r6, #0
 800a3b0:	f04f 0200 	mov.w	r2, #0
 800a3b4:	bf0c      	ite	eq
 800a3b6:	4b31      	ldreq	r3, [pc, #196]	; (800a47c <__ieee754_pow+0x3cc>)
 800a3b8:	4b2d      	ldrne	r3, [pc, #180]	; (800a470 <__ieee754_pow+0x3c0>)
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	460d      	mov	r5, r1
 800a3be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3c2:	e9cd 2300 	strd	r2, r3, [sp]
 800a3c6:	4632      	mov	r2, r6
 800a3c8:	463b      	mov	r3, r7
 800a3ca:	f7f5 ff31 	bl	8000230 <__aeabi_dsub>
 800a3ce:	4652      	mov	r2, sl
 800a3d0:	465b      	mov	r3, fp
 800a3d2:	f7f6 f8e5 	bl	80005a0 <__aeabi_dmul>
 800a3d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3da:	4680      	mov	r8, r0
 800a3dc:	4689      	mov	r9, r1
 800a3de:	4620      	mov	r0, r4
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	f7f6 f8dd 	bl	80005a0 <__aeabi_dmul>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	f7f5 ff21 	bl	8000234 <__adddf3>
 800a3f2:	4632      	mov	r2, r6
 800a3f4:	463b      	mov	r3, r7
 800a3f6:	4680      	mov	r8, r0
 800a3f8:	4689      	mov	r9, r1
 800a3fa:	4650      	mov	r0, sl
 800a3fc:	4659      	mov	r1, fp
 800a3fe:	f7f6 f8cf 	bl	80005a0 <__aeabi_dmul>
 800a402:	4604      	mov	r4, r0
 800a404:	460d      	mov	r5, r1
 800a406:	460b      	mov	r3, r1
 800a408:	4602      	mov	r2, r0
 800a40a:	4649      	mov	r1, r9
 800a40c:	4640      	mov	r0, r8
 800a40e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a412:	f7f5 ff0f 	bl	8000234 <__adddf3>
 800a416:	4b1a      	ldr	r3, [pc, #104]	; (800a480 <__ieee754_pow+0x3d0>)
 800a418:	4682      	mov	sl, r0
 800a41a:	4299      	cmp	r1, r3
 800a41c:	460f      	mov	r7, r1
 800a41e:	460e      	mov	r6, r1
 800a420:	f340 82ed 	ble.w	800a9fe <__ieee754_pow+0x94e>
 800a424:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a428:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a42c:	4303      	orrs	r3, r0
 800a42e:	f000 81e7 	beq.w	800a800 <__ieee754_pow+0x750>
 800a432:	a30d      	add	r3, pc, #52	; (adr r3, 800a468 <__ieee754_pow+0x3b8>)
 800a434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a438:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a43c:	f7f6 f8b0 	bl	80005a0 <__aeabi_dmul>
 800a440:	a309      	add	r3, pc, #36	; (adr r3, 800a468 <__ieee754_pow+0x3b8>)
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	e6cc      	b.n	800a1e2 <__ieee754_pow+0x132>
 800a448:	60000000 	.word	0x60000000
 800a44c:	3ff71547 	.word	0x3ff71547
 800a450:	f85ddf44 	.word	0xf85ddf44
 800a454:	3e54ae0b 	.word	0x3e54ae0b
 800a458:	55555555 	.word	0x55555555
 800a45c:	3fd55555 	.word	0x3fd55555
 800a460:	652b82fe 	.word	0x652b82fe
 800a464:	3ff71547 	.word	0x3ff71547
 800a468:	8800759c 	.word	0x8800759c
 800a46c:	7e37e43c 	.word	0x7e37e43c
 800a470:	3ff00000 	.word	0x3ff00000
 800a474:	3fd00000 	.word	0x3fd00000
 800a478:	3fe00000 	.word	0x3fe00000
 800a47c:	bff00000 	.word	0xbff00000
 800a480:	408fffff 	.word	0x408fffff
 800a484:	4bd4      	ldr	r3, [pc, #848]	; (800a7d8 <__ieee754_pow+0x728>)
 800a486:	2200      	movs	r2, #0
 800a488:	ea09 0303 	and.w	r3, r9, r3
 800a48c:	b943      	cbnz	r3, 800a4a0 <__ieee754_pow+0x3f0>
 800a48e:	4658      	mov	r0, fp
 800a490:	4661      	mov	r1, ip
 800a492:	4bd2      	ldr	r3, [pc, #840]	; (800a7dc <__ieee754_pow+0x72c>)
 800a494:	f7f6 f884 	bl	80005a0 <__aeabi_dmul>
 800a498:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a49c:	4683      	mov	fp, r0
 800a49e:	460c      	mov	r4, r1
 800a4a0:	1523      	asrs	r3, r4, #20
 800a4a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a4a6:	4413      	add	r3, r2
 800a4a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4aa:	4bcd      	ldr	r3, [pc, #820]	; (800a7e0 <__ieee754_pow+0x730>)
 800a4ac:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a4b0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a4b4:	429c      	cmp	r4, r3
 800a4b6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a4ba:	dd08      	ble.n	800a4ce <__ieee754_pow+0x41e>
 800a4bc:	4bc9      	ldr	r3, [pc, #804]	; (800a7e4 <__ieee754_pow+0x734>)
 800a4be:	429c      	cmp	r4, r3
 800a4c0:	f340 819c 	ble.w	800a7fc <__ieee754_pow+0x74c>
 800a4c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4ce:	2600      	movs	r6, #0
 800a4d0:	00f3      	lsls	r3, r6, #3
 800a4d2:	930d      	str	r3, [sp, #52]	; 0x34
 800a4d4:	4bc4      	ldr	r3, [pc, #784]	; (800a7e8 <__ieee754_pow+0x738>)
 800a4d6:	4658      	mov	r0, fp
 800a4d8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a4dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a4e8:	4623      	mov	r3, r4
 800a4ea:	f7f5 fea1 	bl	8000230 <__aeabi_dsub>
 800a4ee:	46da      	mov	sl, fp
 800a4f0:	462b      	mov	r3, r5
 800a4f2:	4652      	mov	r2, sl
 800a4f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a4f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4fc:	f7f5 fe9a 	bl	8000234 <__adddf3>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	2000      	movs	r0, #0
 800a506:	49b9      	ldr	r1, [pc, #740]	; (800a7ec <__ieee754_pow+0x73c>)
 800a508:	f7f6 f974 	bl	80007f4 <__aeabi_ddiv>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a514:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a518:	f7f6 f842 	bl	80005a0 <__aeabi_dmul>
 800a51c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a520:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a524:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a528:	2300      	movs	r3, #0
 800a52a:	2200      	movs	r2, #0
 800a52c:	46ab      	mov	fp, r5
 800a52e:	106d      	asrs	r5, r5, #1
 800a530:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a534:	9304      	str	r3, [sp, #16]
 800a536:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a53a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a53e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a542:	4640      	mov	r0, r8
 800a544:	4649      	mov	r1, r9
 800a546:	4614      	mov	r4, r2
 800a548:	461d      	mov	r5, r3
 800a54a:	f7f6 f829 	bl	80005a0 <__aeabi_dmul>
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a556:	f7f5 fe6b 	bl	8000230 <__aeabi_dsub>
 800a55a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a55e:	4606      	mov	r6, r0
 800a560:	460f      	mov	r7, r1
 800a562:	4620      	mov	r0, r4
 800a564:	4629      	mov	r1, r5
 800a566:	f7f5 fe63 	bl	8000230 <__aeabi_dsub>
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	4650      	mov	r0, sl
 800a570:	4659      	mov	r1, fp
 800a572:	f7f5 fe5d 	bl	8000230 <__aeabi_dsub>
 800a576:	4642      	mov	r2, r8
 800a578:	464b      	mov	r3, r9
 800a57a:	f7f6 f811 	bl	80005a0 <__aeabi_dmul>
 800a57e:	4602      	mov	r2, r0
 800a580:	460b      	mov	r3, r1
 800a582:	4630      	mov	r0, r6
 800a584:	4639      	mov	r1, r7
 800a586:	f7f5 fe53 	bl	8000230 <__aeabi_dsub>
 800a58a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a58e:	f7f6 f807 	bl	80005a0 <__aeabi_dmul>
 800a592:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a596:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a59a:	4610      	mov	r0, r2
 800a59c:	4619      	mov	r1, r3
 800a59e:	f7f5 ffff 	bl	80005a0 <__aeabi_dmul>
 800a5a2:	a37b      	add	r3, pc, #492	; (adr r3, 800a790 <__ieee754_pow+0x6e0>)
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	460d      	mov	r5, r1
 800a5ac:	f7f5 fff8 	bl	80005a0 <__aeabi_dmul>
 800a5b0:	a379      	add	r3, pc, #484	; (adr r3, 800a798 <__ieee754_pow+0x6e8>)
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	f7f5 fe3d 	bl	8000234 <__adddf3>
 800a5ba:	4622      	mov	r2, r4
 800a5bc:	462b      	mov	r3, r5
 800a5be:	f7f5 ffef 	bl	80005a0 <__aeabi_dmul>
 800a5c2:	a377      	add	r3, pc, #476	; (adr r3, 800a7a0 <__ieee754_pow+0x6f0>)
 800a5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c8:	f7f5 fe34 	bl	8000234 <__adddf3>
 800a5cc:	4622      	mov	r2, r4
 800a5ce:	462b      	mov	r3, r5
 800a5d0:	f7f5 ffe6 	bl	80005a0 <__aeabi_dmul>
 800a5d4:	a374      	add	r3, pc, #464	; (adr r3, 800a7a8 <__ieee754_pow+0x6f8>)
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	f7f5 fe2b 	bl	8000234 <__adddf3>
 800a5de:	4622      	mov	r2, r4
 800a5e0:	462b      	mov	r3, r5
 800a5e2:	f7f5 ffdd 	bl	80005a0 <__aeabi_dmul>
 800a5e6:	a372      	add	r3, pc, #456	; (adr r3, 800a7b0 <__ieee754_pow+0x700>)
 800a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ec:	f7f5 fe22 	bl	8000234 <__adddf3>
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	462b      	mov	r3, r5
 800a5f4:	f7f5 ffd4 	bl	80005a0 <__aeabi_dmul>
 800a5f8:	a36f      	add	r3, pc, #444	; (adr r3, 800a7b8 <__ieee754_pow+0x708>)
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	f7f5 fe19 	bl	8000234 <__adddf3>
 800a602:	4622      	mov	r2, r4
 800a604:	4606      	mov	r6, r0
 800a606:	460f      	mov	r7, r1
 800a608:	462b      	mov	r3, r5
 800a60a:	4620      	mov	r0, r4
 800a60c:	4629      	mov	r1, r5
 800a60e:	f7f5 ffc7 	bl	80005a0 <__aeabi_dmul>
 800a612:	4602      	mov	r2, r0
 800a614:	460b      	mov	r3, r1
 800a616:	4630      	mov	r0, r6
 800a618:	4639      	mov	r1, r7
 800a61a:	f7f5 ffc1 	bl	80005a0 <__aeabi_dmul>
 800a61e:	4604      	mov	r4, r0
 800a620:	460d      	mov	r5, r1
 800a622:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a626:	4642      	mov	r2, r8
 800a628:	464b      	mov	r3, r9
 800a62a:	f7f5 fe03 	bl	8000234 <__adddf3>
 800a62e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a632:	f7f5 ffb5 	bl	80005a0 <__aeabi_dmul>
 800a636:	4622      	mov	r2, r4
 800a638:	462b      	mov	r3, r5
 800a63a:	f7f5 fdfb 	bl	8000234 <__adddf3>
 800a63e:	4642      	mov	r2, r8
 800a640:	4606      	mov	r6, r0
 800a642:	460f      	mov	r7, r1
 800a644:	464b      	mov	r3, r9
 800a646:	4640      	mov	r0, r8
 800a648:	4649      	mov	r1, r9
 800a64a:	f7f5 ffa9 	bl	80005a0 <__aeabi_dmul>
 800a64e:	2200      	movs	r2, #0
 800a650:	4b67      	ldr	r3, [pc, #412]	; (800a7f0 <__ieee754_pow+0x740>)
 800a652:	4682      	mov	sl, r0
 800a654:	468b      	mov	fp, r1
 800a656:	f7f5 fded 	bl	8000234 <__adddf3>
 800a65a:	4632      	mov	r2, r6
 800a65c:	463b      	mov	r3, r7
 800a65e:	f7f5 fde9 	bl	8000234 <__adddf3>
 800a662:	9c04      	ldr	r4, [sp, #16]
 800a664:	460d      	mov	r5, r1
 800a666:	4622      	mov	r2, r4
 800a668:	460b      	mov	r3, r1
 800a66a:	4640      	mov	r0, r8
 800a66c:	4649      	mov	r1, r9
 800a66e:	f7f5 ff97 	bl	80005a0 <__aeabi_dmul>
 800a672:	2200      	movs	r2, #0
 800a674:	4680      	mov	r8, r0
 800a676:	4689      	mov	r9, r1
 800a678:	4620      	mov	r0, r4
 800a67a:	4629      	mov	r1, r5
 800a67c:	4b5c      	ldr	r3, [pc, #368]	; (800a7f0 <__ieee754_pow+0x740>)
 800a67e:	f7f5 fdd7 	bl	8000230 <__aeabi_dsub>
 800a682:	4652      	mov	r2, sl
 800a684:	465b      	mov	r3, fp
 800a686:	f7f5 fdd3 	bl	8000230 <__aeabi_dsub>
 800a68a:	4602      	mov	r2, r0
 800a68c:	460b      	mov	r3, r1
 800a68e:	4630      	mov	r0, r6
 800a690:	4639      	mov	r1, r7
 800a692:	f7f5 fdcd 	bl	8000230 <__aeabi_dsub>
 800a696:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a69a:	f7f5 ff81 	bl	80005a0 <__aeabi_dmul>
 800a69e:	4622      	mov	r2, r4
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	460f      	mov	r7, r1
 800a6a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a6a8:	462b      	mov	r3, r5
 800a6aa:	f7f5 ff79 	bl	80005a0 <__aeabi_dmul>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	f7f5 fdbd 	bl	8000234 <__adddf3>
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	460f      	mov	r7, r1
 800a6be:	4602      	mov	r2, r0
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	4640      	mov	r0, r8
 800a6c4:	4649      	mov	r1, r9
 800a6c6:	f7f5 fdb5 	bl	8000234 <__adddf3>
 800a6ca:	a33d      	add	r3, pc, #244	; (adr r3, 800a7c0 <__ieee754_pow+0x710>)
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	9c04      	ldr	r4, [sp, #16]
 800a6d2:	460d      	mov	r5, r1
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	f7f5 ff63 	bl	80005a0 <__aeabi_dmul>
 800a6da:	4642      	mov	r2, r8
 800a6dc:	464b      	mov	r3, r9
 800a6de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	f7f5 fda3 	bl	8000230 <__aeabi_dsub>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	4630      	mov	r0, r6
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	f7f5 fd9d 	bl	8000230 <__aeabi_dsub>
 800a6f6:	a334      	add	r3, pc, #208	; (adr r3, 800a7c8 <__ieee754_pow+0x718>)
 800a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fc:	f7f5 ff50 	bl	80005a0 <__aeabi_dmul>
 800a700:	a333      	add	r3, pc, #204	; (adr r3, 800a7d0 <__ieee754_pow+0x720>)
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	4606      	mov	r6, r0
 800a708:	460f      	mov	r7, r1
 800a70a:	4620      	mov	r0, r4
 800a70c:	4629      	mov	r1, r5
 800a70e:	f7f5 ff47 	bl	80005a0 <__aeabi_dmul>
 800a712:	4602      	mov	r2, r0
 800a714:	460b      	mov	r3, r1
 800a716:	4630      	mov	r0, r6
 800a718:	4639      	mov	r1, r7
 800a71a:	f7f5 fd8b 	bl	8000234 <__adddf3>
 800a71e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a720:	4b34      	ldr	r3, [pc, #208]	; (800a7f4 <__ieee754_pow+0x744>)
 800a722:	4413      	add	r3, r2
 800a724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a728:	f7f5 fd84 	bl	8000234 <__adddf3>
 800a72c:	4680      	mov	r8, r0
 800a72e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a730:	4689      	mov	r9, r1
 800a732:	f7f5 fecb 	bl	80004cc <__aeabi_i2d>
 800a736:	4604      	mov	r4, r0
 800a738:	460d      	mov	r5, r1
 800a73a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a73c:	4b2e      	ldr	r3, [pc, #184]	; (800a7f8 <__ieee754_pow+0x748>)
 800a73e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a742:	4413      	add	r3, r2
 800a744:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a748:	4642      	mov	r2, r8
 800a74a:	464b      	mov	r3, r9
 800a74c:	f7f5 fd72 	bl	8000234 <__adddf3>
 800a750:	4632      	mov	r2, r6
 800a752:	463b      	mov	r3, r7
 800a754:	f7f5 fd6e 	bl	8000234 <__adddf3>
 800a758:	4622      	mov	r2, r4
 800a75a:	462b      	mov	r3, r5
 800a75c:	f7f5 fd6a 	bl	8000234 <__adddf3>
 800a760:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a764:	4622      	mov	r2, r4
 800a766:	462b      	mov	r3, r5
 800a768:	4650      	mov	r0, sl
 800a76a:	468b      	mov	fp, r1
 800a76c:	f7f5 fd60 	bl	8000230 <__aeabi_dsub>
 800a770:	4632      	mov	r2, r6
 800a772:	463b      	mov	r3, r7
 800a774:	f7f5 fd5c 	bl	8000230 <__aeabi_dsub>
 800a778:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a77c:	f7f5 fd58 	bl	8000230 <__aeabi_dsub>
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	4640      	mov	r0, r8
 800a786:	4649      	mov	r1, r9
 800a788:	e608      	b.n	800a39c <__ieee754_pow+0x2ec>
 800a78a:	bf00      	nop
 800a78c:	f3af 8000 	nop.w
 800a790:	4a454eef 	.word	0x4a454eef
 800a794:	3fca7e28 	.word	0x3fca7e28
 800a798:	93c9db65 	.word	0x93c9db65
 800a79c:	3fcd864a 	.word	0x3fcd864a
 800a7a0:	a91d4101 	.word	0xa91d4101
 800a7a4:	3fd17460 	.word	0x3fd17460
 800a7a8:	518f264d 	.word	0x518f264d
 800a7ac:	3fd55555 	.word	0x3fd55555
 800a7b0:	db6fabff 	.word	0xdb6fabff
 800a7b4:	3fdb6db6 	.word	0x3fdb6db6
 800a7b8:	33333303 	.word	0x33333303
 800a7bc:	3fe33333 	.word	0x3fe33333
 800a7c0:	e0000000 	.word	0xe0000000
 800a7c4:	3feec709 	.word	0x3feec709
 800a7c8:	dc3a03fd 	.word	0xdc3a03fd
 800a7cc:	3feec709 	.word	0x3feec709
 800a7d0:	145b01f5 	.word	0x145b01f5
 800a7d4:	be3e2fe0 	.word	0xbe3e2fe0
 800a7d8:	7ff00000 	.word	0x7ff00000
 800a7dc:	43400000 	.word	0x43400000
 800a7e0:	0003988e 	.word	0x0003988e
 800a7e4:	000bb679 	.word	0x000bb679
 800a7e8:	0800b0f8 	.word	0x0800b0f8
 800a7ec:	3ff00000 	.word	0x3ff00000
 800a7f0:	40080000 	.word	0x40080000
 800a7f4:	0800b118 	.word	0x0800b118
 800a7f8:	0800b108 	.word	0x0800b108
 800a7fc:	2601      	movs	r6, #1
 800a7fe:	e667      	b.n	800a4d0 <__ieee754_pow+0x420>
 800a800:	a39d      	add	r3, pc, #628	; (adr r3, 800aa78 <__ieee754_pow+0x9c8>)
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	4640      	mov	r0, r8
 800a808:	4649      	mov	r1, r9
 800a80a:	f7f5 fd13 	bl	8000234 <__adddf3>
 800a80e:	4622      	mov	r2, r4
 800a810:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a814:	462b      	mov	r3, r5
 800a816:	4650      	mov	r0, sl
 800a818:	4639      	mov	r1, r7
 800a81a:	f7f5 fd09 	bl	8000230 <__aeabi_dsub>
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a826:	f7f6 f94b 	bl	8000ac0 <__aeabi_dcmpgt>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	f47f ae01 	bne.w	800a432 <__ieee754_pow+0x382>
 800a830:	4aa5      	ldr	r2, [pc, #660]	; (800aac8 <__ieee754_pow+0xa18>)
 800a832:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a836:	4293      	cmp	r3, r2
 800a838:	f340 8103 	ble.w	800aa42 <__ieee754_pow+0x992>
 800a83c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a840:	2000      	movs	r0, #0
 800a842:	151b      	asrs	r3, r3, #20
 800a844:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a848:	fa4a f303 	asr.w	r3, sl, r3
 800a84c:	4433      	add	r3, r6
 800a84e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a852:	4f9e      	ldr	r7, [pc, #632]	; (800aacc <__ieee754_pow+0xa1c>)
 800a854:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a858:	4117      	asrs	r7, r2
 800a85a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a85e:	ea23 0107 	bic.w	r1, r3, r7
 800a862:	f1c2 0214 	rsb	r2, r2, #20
 800a866:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a86a:	460b      	mov	r3, r1
 800a86c:	fa4a fa02 	asr.w	sl, sl, r2
 800a870:	2e00      	cmp	r6, #0
 800a872:	4602      	mov	r2, r0
 800a874:	4629      	mov	r1, r5
 800a876:	4620      	mov	r0, r4
 800a878:	bfb8      	it	lt
 800a87a:	f1ca 0a00 	rsblt	sl, sl, #0
 800a87e:	f7f5 fcd7 	bl	8000230 <__aeabi_dsub>
 800a882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a886:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a88a:	2400      	movs	r4, #0
 800a88c:	4642      	mov	r2, r8
 800a88e:	464b      	mov	r3, r9
 800a890:	f7f5 fcd0 	bl	8000234 <__adddf3>
 800a894:	a37a      	add	r3, pc, #488	; (adr r3, 800aa80 <__ieee754_pow+0x9d0>)
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	4620      	mov	r0, r4
 800a89c:	460d      	mov	r5, r1
 800a89e:	f7f5 fe7f 	bl	80005a0 <__aeabi_dmul>
 800a8a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	460f      	mov	r7, r1
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	f7f5 fcbf 	bl	8000230 <__aeabi_dsub>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	4640      	mov	r0, r8
 800a8b8:	4649      	mov	r1, r9
 800a8ba:	f7f5 fcb9 	bl	8000230 <__aeabi_dsub>
 800a8be:	a372      	add	r3, pc, #456	; (adr r3, 800aa88 <__ieee754_pow+0x9d8>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	f7f5 fe6c 	bl	80005a0 <__aeabi_dmul>
 800a8c8:	a371      	add	r3, pc, #452	; (adr r3, 800aa90 <__ieee754_pow+0x9e0>)
 800a8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ce:	4680      	mov	r8, r0
 800a8d0:	4689      	mov	r9, r1
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	f7f5 fe63 	bl	80005a0 <__aeabi_dmul>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	460b      	mov	r3, r1
 800a8de:	4640      	mov	r0, r8
 800a8e0:	4649      	mov	r1, r9
 800a8e2:	f7f5 fca7 	bl	8000234 <__adddf3>
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	460d      	mov	r5, r1
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	4639      	mov	r1, r7
 800a8f2:	f7f5 fc9f 	bl	8000234 <__adddf3>
 800a8f6:	4632      	mov	r2, r6
 800a8f8:	463b      	mov	r3, r7
 800a8fa:	4680      	mov	r8, r0
 800a8fc:	4689      	mov	r9, r1
 800a8fe:	f7f5 fc97 	bl	8000230 <__aeabi_dsub>
 800a902:	4602      	mov	r2, r0
 800a904:	460b      	mov	r3, r1
 800a906:	4620      	mov	r0, r4
 800a908:	4629      	mov	r1, r5
 800a90a:	f7f5 fc91 	bl	8000230 <__aeabi_dsub>
 800a90e:	4642      	mov	r2, r8
 800a910:	4606      	mov	r6, r0
 800a912:	460f      	mov	r7, r1
 800a914:	464b      	mov	r3, r9
 800a916:	4640      	mov	r0, r8
 800a918:	4649      	mov	r1, r9
 800a91a:	f7f5 fe41 	bl	80005a0 <__aeabi_dmul>
 800a91e:	a35e      	add	r3, pc, #376	; (adr r3, 800aa98 <__ieee754_pow+0x9e8>)
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	4604      	mov	r4, r0
 800a926:	460d      	mov	r5, r1
 800a928:	f7f5 fe3a 	bl	80005a0 <__aeabi_dmul>
 800a92c:	a35c      	add	r3, pc, #368	; (adr r3, 800aaa0 <__ieee754_pow+0x9f0>)
 800a92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a932:	f7f5 fc7d 	bl	8000230 <__aeabi_dsub>
 800a936:	4622      	mov	r2, r4
 800a938:	462b      	mov	r3, r5
 800a93a:	f7f5 fe31 	bl	80005a0 <__aeabi_dmul>
 800a93e:	a35a      	add	r3, pc, #360	; (adr r3, 800aaa8 <__ieee754_pow+0x9f8>)
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	f7f5 fc76 	bl	8000234 <__adddf3>
 800a948:	4622      	mov	r2, r4
 800a94a:	462b      	mov	r3, r5
 800a94c:	f7f5 fe28 	bl	80005a0 <__aeabi_dmul>
 800a950:	a357      	add	r3, pc, #348	; (adr r3, 800aab0 <__ieee754_pow+0xa00>)
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	f7f5 fc6b 	bl	8000230 <__aeabi_dsub>
 800a95a:	4622      	mov	r2, r4
 800a95c:	462b      	mov	r3, r5
 800a95e:	f7f5 fe1f 	bl	80005a0 <__aeabi_dmul>
 800a962:	a355      	add	r3, pc, #340	; (adr r3, 800aab8 <__ieee754_pow+0xa08>)
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	f7f5 fc64 	bl	8000234 <__adddf3>
 800a96c:	4622      	mov	r2, r4
 800a96e:	462b      	mov	r3, r5
 800a970:	f7f5 fe16 	bl	80005a0 <__aeabi_dmul>
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	4640      	mov	r0, r8
 800a97a:	4649      	mov	r1, r9
 800a97c:	f7f5 fc58 	bl	8000230 <__aeabi_dsub>
 800a980:	4604      	mov	r4, r0
 800a982:	460d      	mov	r5, r1
 800a984:	4602      	mov	r2, r0
 800a986:	460b      	mov	r3, r1
 800a988:	4640      	mov	r0, r8
 800a98a:	4649      	mov	r1, r9
 800a98c:	f7f5 fe08 	bl	80005a0 <__aeabi_dmul>
 800a990:	2200      	movs	r2, #0
 800a992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a996:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a99a:	4620      	mov	r0, r4
 800a99c:	4629      	mov	r1, r5
 800a99e:	f7f5 fc47 	bl	8000230 <__aeabi_dsub>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9aa:	f7f5 ff23 	bl	80007f4 <__aeabi_ddiv>
 800a9ae:	4632      	mov	r2, r6
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	460d      	mov	r5, r1
 800a9b4:	463b      	mov	r3, r7
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	4649      	mov	r1, r9
 800a9ba:	f7f5 fdf1 	bl	80005a0 <__aeabi_dmul>
 800a9be:	4632      	mov	r2, r6
 800a9c0:	463b      	mov	r3, r7
 800a9c2:	f7f5 fc37 	bl	8000234 <__adddf3>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	f7f5 fc2f 	bl	8000230 <__aeabi_dsub>
 800a9d2:	4642      	mov	r2, r8
 800a9d4:	464b      	mov	r3, r9
 800a9d6:	f7f5 fc2b 	bl	8000230 <__aeabi_dsub>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	460b      	mov	r3, r1
 800a9de:	2000      	movs	r0, #0
 800a9e0:	493b      	ldr	r1, [pc, #236]	; (800aad0 <__ieee754_pow+0xa20>)
 800a9e2:	f7f5 fc25 	bl	8000230 <__aeabi_dsub>
 800a9e6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a9ea:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a9ee:	da2b      	bge.n	800aa48 <__ieee754_pow+0x998>
 800a9f0:	4652      	mov	r2, sl
 800a9f2:	f000 f9e9 	bl	800adc8 <scalbn>
 800a9f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9fa:	f7ff bbf2 	b.w	800a1e2 <__ieee754_pow+0x132>
 800a9fe:	4b35      	ldr	r3, [pc, #212]	; (800aad4 <__ieee754_pow+0xa24>)
 800aa00:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800aa04:	429f      	cmp	r7, r3
 800aa06:	f77f af13 	ble.w	800a830 <__ieee754_pow+0x780>
 800aa0a:	4b33      	ldr	r3, [pc, #204]	; (800aad8 <__ieee754_pow+0xa28>)
 800aa0c:	440b      	add	r3, r1
 800aa0e:	4303      	orrs	r3, r0
 800aa10:	d00b      	beq.n	800aa2a <__ieee754_pow+0x97a>
 800aa12:	a32b      	add	r3, pc, #172	; (adr r3, 800aac0 <__ieee754_pow+0xa10>)
 800aa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa1c:	f7f5 fdc0 	bl	80005a0 <__aeabi_dmul>
 800aa20:	a327      	add	r3, pc, #156	; (adr r3, 800aac0 <__ieee754_pow+0xa10>)
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	f7ff bbdc 	b.w	800a1e2 <__ieee754_pow+0x132>
 800aa2a:	4622      	mov	r2, r4
 800aa2c:	462b      	mov	r3, r5
 800aa2e:	f7f5 fbff 	bl	8000230 <__aeabi_dsub>
 800aa32:	4642      	mov	r2, r8
 800aa34:	464b      	mov	r3, r9
 800aa36:	f7f6 f839 	bl	8000aac <__aeabi_dcmpge>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	f43f aef8 	beq.w	800a830 <__ieee754_pow+0x780>
 800aa40:	e7e7      	b.n	800aa12 <__ieee754_pow+0x962>
 800aa42:	f04f 0a00 	mov.w	sl, #0
 800aa46:	e71e      	b.n	800a886 <__ieee754_pow+0x7d6>
 800aa48:	4621      	mov	r1, r4
 800aa4a:	e7d4      	b.n	800a9f6 <__ieee754_pow+0x946>
 800aa4c:	f04f 0b00 	mov.w	fp, #0
 800aa50:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aad0 <__ieee754_pow+0xa20>
 800aa54:	f7ff bbb0 	b.w	800a1b8 <__ieee754_pow+0x108>
 800aa58:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800aa5c:	f7ff bbac 	b.w	800a1b8 <__ieee754_pow+0x108>
 800aa60:	4638      	mov	r0, r7
 800aa62:	4641      	mov	r1, r8
 800aa64:	f7ff bbbf 	b.w	800a1e6 <__ieee754_pow+0x136>
 800aa68:	9200      	str	r2, [sp, #0]
 800aa6a:	f7ff bb7f 	b.w	800a16c <__ieee754_pow+0xbc>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	f7ff bb69 	b.w	800a146 <__ieee754_pow+0x96>
 800aa74:	f3af 8000 	nop.w
 800aa78:	652b82fe 	.word	0x652b82fe
 800aa7c:	3c971547 	.word	0x3c971547
 800aa80:	00000000 	.word	0x00000000
 800aa84:	3fe62e43 	.word	0x3fe62e43
 800aa88:	fefa39ef 	.word	0xfefa39ef
 800aa8c:	3fe62e42 	.word	0x3fe62e42
 800aa90:	0ca86c39 	.word	0x0ca86c39
 800aa94:	be205c61 	.word	0xbe205c61
 800aa98:	72bea4d0 	.word	0x72bea4d0
 800aa9c:	3e663769 	.word	0x3e663769
 800aaa0:	c5d26bf1 	.word	0xc5d26bf1
 800aaa4:	3ebbbd41 	.word	0x3ebbbd41
 800aaa8:	af25de2c 	.word	0xaf25de2c
 800aaac:	3f11566a 	.word	0x3f11566a
 800aab0:	16bebd93 	.word	0x16bebd93
 800aab4:	3f66c16c 	.word	0x3f66c16c
 800aab8:	5555553e 	.word	0x5555553e
 800aabc:	3fc55555 	.word	0x3fc55555
 800aac0:	c2f8f359 	.word	0xc2f8f359
 800aac4:	01a56e1f 	.word	0x01a56e1f
 800aac8:	3fe00000 	.word	0x3fe00000
 800aacc:	000fffff 	.word	0x000fffff
 800aad0:	3ff00000 	.word	0x3ff00000
 800aad4:	4090cbff 	.word	0x4090cbff
 800aad8:	3f6f3400 	.word	0x3f6f3400

0800aadc <__ieee754_sqrt>:
 800aadc:	f8df c150 	ldr.w	ip, [pc, #336]	; 800ac30 <__ieee754_sqrt+0x154>
 800aae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae4:	ea3c 0c01 	bics.w	ip, ip, r1
 800aae8:	460b      	mov	r3, r1
 800aaea:	4606      	mov	r6, r0
 800aaec:	460d      	mov	r5, r1
 800aaee:	460a      	mov	r2, r1
 800aaf0:	4607      	mov	r7, r0
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	d10e      	bne.n	800ab14 <__ieee754_sqrt+0x38>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	f7f5 fd52 	bl	80005a0 <__aeabi_dmul>
 800aafc:	4602      	mov	r2, r0
 800aafe:	460b      	mov	r3, r1
 800ab00:	4630      	mov	r0, r6
 800ab02:	4629      	mov	r1, r5
 800ab04:	f7f5 fb96 	bl	8000234 <__adddf3>
 800ab08:	4606      	mov	r6, r0
 800ab0a:	460d      	mov	r5, r1
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	4629      	mov	r1, r5
 800ab10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab14:	2900      	cmp	r1, #0
 800ab16:	dc0d      	bgt.n	800ab34 <__ieee754_sqrt+0x58>
 800ab18:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ab1c:	ea5c 0707 	orrs.w	r7, ip, r7
 800ab20:	d0f4      	beq.n	800ab0c <__ieee754_sqrt+0x30>
 800ab22:	b139      	cbz	r1, 800ab34 <__ieee754_sqrt+0x58>
 800ab24:	4602      	mov	r2, r0
 800ab26:	f7f5 fb83 	bl	8000230 <__aeabi_dsub>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	f7f5 fe61 	bl	80007f4 <__aeabi_ddiv>
 800ab32:	e7e9      	b.n	800ab08 <__ieee754_sqrt+0x2c>
 800ab34:	1512      	asrs	r2, r2, #20
 800ab36:	d074      	beq.n	800ac22 <__ieee754_sqrt+0x146>
 800ab38:	2000      	movs	r0, #0
 800ab3a:	07d5      	lsls	r5, r2, #31
 800ab3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab40:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800ab44:	bf5e      	ittt	pl
 800ab46:	0fe3      	lsrpl	r3, r4, #31
 800ab48:	0064      	lslpl	r4, r4, #1
 800ab4a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800ab4e:	0fe3      	lsrs	r3, r4, #31
 800ab50:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ab54:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800ab58:	2516      	movs	r5, #22
 800ab5a:	4601      	mov	r1, r0
 800ab5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ab60:	1076      	asrs	r6, r6, #1
 800ab62:	0064      	lsls	r4, r4, #1
 800ab64:	188f      	adds	r7, r1, r2
 800ab66:	429f      	cmp	r7, r3
 800ab68:	bfde      	ittt	le
 800ab6a:	1bdb      	suble	r3, r3, r7
 800ab6c:	18b9      	addle	r1, r7, r2
 800ab6e:	1880      	addle	r0, r0, r2
 800ab70:	005b      	lsls	r3, r3, #1
 800ab72:	3d01      	subs	r5, #1
 800ab74:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ab78:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ab7c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ab80:	d1f0      	bne.n	800ab64 <__ieee754_sqrt+0x88>
 800ab82:	462a      	mov	r2, r5
 800ab84:	f04f 0e20 	mov.w	lr, #32
 800ab88:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ab8c:	428b      	cmp	r3, r1
 800ab8e:	eb07 0c05 	add.w	ip, r7, r5
 800ab92:	dc02      	bgt.n	800ab9a <__ieee754_sqrt+0xbe>
 800ab94:	d113      	bne.n	800abbe <__ieee754_sqrt+0xe2>
 800ab96:	45a4      	cmp	ip, r4
 800ab98:	d811      	bhi.n	800abbe <__ieee754_sqrt+0xe2>
 800ab9a:	f1bc 0f00 	cmp.w	ip, #0
 800ab9e:	eb0c 0507 	add.w	r5, ip, r7
 800aba2:	da43      	bge.n	800ac2c <__ieee754_sqrt+0x150>
 800aba4:	2d00      	cmp	r5, #0
 800aba6:	db41      	blt.n	800ac2c <__ieee754_sqrt+0x150>
 800aba8:	f101 0801 	add.w	r8, r1, #1
 800abac:	1a5b      	subs	r3, r3, r1
 800abae:	4641      	mov	r1, r8
 800abb0:	45a4      	cmp	ip, r4
 800abb2:	bf88      	it	hi
 800abb4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800abb8:	eba4 040c 	sub.w	r4, r4, ip
 800abbc:	443a      	add	r2, r7
 800abbe:	005b      	lsls	r3, r3, #1
 800abc0:	f1be 0e01 	subs.w	lr, lr, #1
 800abc4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800abc8:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800abcc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800abd0:	d1dc      	bne.n	800ab8c <__ieee754_sqrt+0xb0>
 800abd2:	4323      	orrs	r3, r4
 800abd4:	d006      	beq.n	800abe4 <__ieee754_sqrt+0x108>
 800abd6:	1c54      	adds	r4, r2, #1
 800abd8:	bf0b      	itete	eq
 800abda:	4672      	moveq	r2, lr
 800abdc:	3201      	addne	r2, #1
 800abde:	3001      	addeq	r0, #1
 800abe0:	f022 0201 	bicne.w	r2, r2, #1
 800abe4:	1043      	asrs	r3, r0, #1
 800abe6:	07c1      	lsls	r1, r0, #31
 800abe8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800abec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800abf0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800abf4:	bf48      	it	mi
 800abf6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800abfa:	4610      	mov	r0, r2
 800abfc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800ac00:	e782      	b.n	800ab08 <__ieee754_sqrt+0x2c>
 800ac02:	0ae3      	lsrs	r3, r4, #11
 800ac04:	3915      	subs	r1, #21
 800ac06:	0564      	lsls	r4, r4, #21
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d0fa      	beq.n	800ac02 <__ieee754_sqrt+0x126>
 800ac0c:	02de      	lsls	r6, r3, #11
 800ac0e:	d50a      	bpl.n	800ac26 <__ieee754_sqrt+0x14a>
 800ac10:	f1c2 0020 	rsb	r0, r2, #32
 800ac14:	fa24 f000 	lsr.w	r0, r4, r0
 800ac18:	1e55      	subs	r5, r2, #1
 800ac1a:	4094      	lsls	r4, r2
 800ac1c:	4303      	orrs	r3, r0
 800ac1e:	1b4a      	subs	r2, r1, r5
 800ac20:	e78a      	b.n	800ab38 <__ieee754_sqrt+0x5c>
 800ac22:	4611      	mov	r1, r2
 800ac24:	e7f0      	b.n	800ac08 <__ieee754_sqrt+0x12c>
 800ac26:	005b      	lsls	r3, r3, #1
 800ac28:	3201      	adds	r2, #1
 800ac2a:	e7ef      	b.n	800ac0c <__ieee754_sqrt+0x130>
 800ac2c:	4688      	mov	r8, r1
 800ac2e:	e7bd      	b.n	800abac <__ieee754_sqrt+0xd0>
 800ac30:	7ff00000 	.word	0x7ff00000

0800ac34 <with_errnof>:
 800ac34:	b538      	push	{r3, r4, r5, lr}
 800ac36:	4604      	mov	r4, r0
 800ac38:	460d      	mov	r5, r1
 800ac3a:	f000 f953 	bl	800aee4 <__errno>
 800ac3e:	6005      	str	r5, [r0, #0]
 800ac40:	4620      	mov	r0, r4
 800ac42:	bd38      	pop	{r3, r4, r5, pc}

0800ac44 <__math_divzerof>:
 800ac44:	b508      	push	{r3, lr}
 800ac46:	b948      	cbnz	r0, 800ac5c <__math_divzerof+0x18>
 800ac48:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ac4c:	2100      	movs	r1, #0
 800ac4e:	f7f6 f941 	bl	8000ed4 <__aeabi_fdiv>
 800ac52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ac56:	2122      	movs	r1, #34	; 0x22
 800ac58:	f7ff bfec 	b.w	800ac34 <with_errnof>
 800ac5c:	4800      	ldr	r0, [pc, #0]	; (800ac60 <__math_divzerof+0x1c>)
 800ac5e:	e7f5      	b.n	800ac4c <__math_divzerof+0x8>
 800ac60:	bf800000 	.word	0xbf800000

0800ac64 <__math_invalidf>:
 800ac64:	b538      	push	{r3, r4, r5, lr}
 800ac66:	4601      	mov	r1, r0
 800ac68:	4605      	mov	r5, r0
 800ac6a:	f7f5 ff75 	bl	8000b58 <__aeabi_fsub>
 800ac6e:	4601      	mov	r1, r0
 800ac70:	f7f6 f930 	bl	8000ed4 <__aeabi_fdiv>
 800ac74:	4629      	mov	r1, r5
 800ac76:	4604      	mov	r4, r0
 800ac78:	4628      	mov	r0, r5
 800ac7a:	f7f6 fa3d 	bl	80010f8 <__aeabi_fcmpun>
 800ac7e:	b928      	cbnz	r0, 800ac8c <__math_invalidf+0x28>
 800ac80:	4620      	mov	r0, r4
 800ac82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac86:	2121      	movs	r1, #33	; 0x21
 800ac88:	f7ff bfd4 	b.w	800ac34 <with_errnof>
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	bd38      	pop	{r3, r4, r5, pc}

0800ac90 <fabs>:
 800ac90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ac94:	4770      	bx	lr

0800ac96 <finite>:
 800ac96:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800ac9a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ac9e:	0fc0      	lsrs	r0, r0, #31
 800aca0:	4770      	bx	lr
	...

0800aca4 <nan>:
 800aca4:	2000      	movs	r0, #0
 800aca6:	4901      	ldr	r1, [pc, #4]	; (800acac <nan+0x8>)
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	7ff80000 	.word	0x7ff80000

0800acb0 <rint>:
 800acb0:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800acb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acb6:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800acba:	2f13      	cmp	r7, #19
 800acbc:	4602      	mov	r2, r0
 800acbe:	460b      	mov	r3, r1
 800acc0:	460c      	mov	r4, r1
 800acc2:	4605      	mov	r5, r0
 800acc4:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800acc8:	dc59      	bgt.n	800ad7e <rint+0xce>
 800acca:	2f00      	cmp	r7, #0
 800accc:	da2a      	bge.n	800ad24 <rint+0x74>
 800acce:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800acd2:	4301      	orrs	r1, r0
 800acd4:	d022      	beq.n	800ad1c <rint+0x6c>
 800acd6:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800acda:	4301      	orrs	r1, r0
 800acdc:	424d      	negs	r5, r1
 800acde:	430d      	orrs	r5, r1
 800ace0:	4936      	ldr	r1, [pc, #216]	; (800adbc <rint+0x10c>)
 800ace2:	0c5c      	lsrs	r4, r3, #17
 800ace4:	0b2d      	lsrs	r5, r5, #12
 800ace6:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800acea:	0464      	lsls	r4, r4, #17
 800acec:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800acf0:	ea45 0304 	orr.w	r3, r5, r4
 800acf4:	e9d1 4500 	ldrd	r4, r5, [r1]
 800acf8:	4620      	mov	r0, r4
 800acfa:	4629      	mov	r1, r5
 800acfc:	f7f5 fa9a 	bl	8000234 <__adddf3>
 800ad00:	e9cd 0100 	strd	r0, r1, [sp]
 800ad04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad08:	462b      	mov	r3, r5
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	f7f5 fa90 	bl	8000230 <__aeabi_dsub>
 800ad10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad14:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4619      	mov	r1, r3
 800ad20:	b003      	add	sp, #12
 800ad22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad24:	4926      	ldr	r1, [pc, #152]	; (800adc0 <rint+0x110>)
 800ad26:	4139      	asrs	r1, r7
 800ad28:	ea03 0001 	and.w	r0, r3, r1
 800ad2c:	4310      	orrs	r0, r2
 800ad2e:	d0f5      	beq.n	800ad1c <rint+0x6c>
 800ad30:	084b      	lsrs	r3, r1, #1
 800ad32:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800ad36:	ea52 0501 	orrs.w	r5, r2, r1
 800ad3a:	d00c      	beq.n	800ad56 <rint+0xa6>
 800ad3c:	ea24 0303 	bic.w	r3, r4, r3
 800ad40:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800ad44:	2f13      	cmp	r7, #19
 800ad46:	bf0c      	ite	eq
 800ad48:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800ad4c:	2500      	movne	r5, #0
 800ad4e:	fa44 f707 	asr.w	r7, r4, r7
 800ad52:	ea43 0407 	orr.w	r4, r3, r7
 800ad56:	4919      	ldr	r1, [pc, #100]	; (800adbc <rint+0x10c>)
 800ad58:	4623      	mov	r3, r4
 800ad5a:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800ad5e:	462a      	mov	r2, r5
 800ad60:	e9d6 4500 	ldrd	r4, r5, [r6]
 800ad64:	4620      	mov	r0, r4
 800ad66:	4629      	mov	r1, r5
 800ad68:	f7f5 fa64 	bl	8000234 <__adddf3>
 800ad6c:	e9cd 0100 	strd	r0, r1, [sp]
 800ad70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad74:	4622      	mov	r2, r4
 800ad76:	462b      	mov	r3, r5
 800ad78:	f7f5 fa5a 	bl	8000230 <__aeabi_dsub>
 800ad7c:	e7cc      	b.n	800ad18 <rint+0x68>
 800ad7e:	2f33      	cmp	r7, #51	; 0x33
 800ad80:	dd05      	ble.n	800ad8e <rint+0xde>
 800ad82:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800ad86:	d1c9      	bne.n	800ad1c <rint+0x6c>
 800ad88:	f7f5 fa54 	bl	8000234 <__adddf3>
 800ad8c:	e7c4      	b.n	800ad18 <rint+0x68>
 800ad8e:	f04f 31ff 	mov.w	r1, #4294967295
 800ad92:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800ad96:	fa21 f10c 	lsr.w	r1, r1, ip
 800ad9a:	4208      	tst	r0, r1
 800ad9c:	d0be      	beq.n	800ad1c <rint+0x6c>
 800ad9e:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800ada2:	bf18      	it	ne
 800ada4:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800ada8:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800adac:	bf1e      	ittt	ne
 800adae:	ea20 0303 	bicne.w	r3, r0, r3
 800adb2:	fa45 fc0c 	asrne.w	ip, r5, ip
 800adb6:	ea43 050c 	orrne.w	r5, r3, ip
 800adba:	e7cc      	b.n	800ad56 <rint+0xa6>
 800adbc:	0800b128 	.word	0x0800b128
 800adc0:	000fffff 	.word	0x000fffff
 800adc4:	00000000 	.word	0x00000000

0800adc8 <scalbn>:
 800adc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adca:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800adce:	4604      	mov	r4, r0
 800add0:	460d      	mov	r5, r1
 800add2:	4617      	mov	r7, r2
 800add4:	460b      	mov	r3, r1
 800add6:	b996      	cbnz	r6, 800adfe <scalbn+0x36>
 800add8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800addc:	4303      	orrs	r3, r0
 800adde:	d039      	beq.n	800ae54 <scalbn+0x8c>
 800ade0:	4b35      	ldr	r3, [pc, #212]	; (800aeb8 <scalbn+0xf0>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	f7f5 fbdc 	bl	80005a0 <__aeabi_dmul>
 800ade8:	4b34      	ldr	r3, [pc, #208]	; (800aebc <scalbn+0xf4>)
 800adea:	4604      	mov	r4, r0
 800adec:	429f      	cmp	r7, r3
 800adee:	460d      	mov	r5, r1
 800adf0:	da0f      	bge.n	800ae12 <scalbn+0x4a>
 800adf2:	a32d      	add	r3, pc, #180	; (adr r3, 800aea8 <scalbn+0xe0>)
 800adf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf8:	f7f5 fbd2 	bl	80005a0 <__aeabi_dmul>
 800adfc:	e006      	b.n	800ae0c <scalbn+0x44>
 800adfe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ae02:	4296      	cmp	r6, r2
 800ae04:	d10a      	bne.n	800ae1c <scalbn+0x54>
 800ae06:	4602      	mov	r2, r0
 800ae08:	f7f5 fa14 	bl	8000234 <__adddf3>
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	460d      	mov	r5, r1
 800ae10:	e020      	b.n	800ae54 <scalbn+0x8c>
 800ae12:	460b      	mov	r3, r1
 800ae14:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ae18:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800ae1c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800ae20:	19b9      	adds	r1, r7, r6
 800ae22:	4291      	cmp	r1, r2
 800ae24:	dd0e      	ble.n	800ae44 <scalbn+0x7c>
 800ae26:	a322      	add	r3, pc, #136	; (adr r3, 800aeb0 <scalbn+0xe8>)
 800ae28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ae30:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ae34:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ae38:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ae3c:	4820      	ldr	r0, [pc, #128]	; (800aec0 <scalbn+0xf8>)
 800ae3e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ae42:	e7d9      	b.n	800adf8 <scalbn+0x30>
 800ae44:	2900      	cmp	r1, #0
 800ae46:	dd08      	ble.n	800ae5a <scalbn+0x92>
 800ae48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae50:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ae54:	4620      	mov	r0, r4
 800ae56:	4629      	mov	r1, r5
 800ae58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae5a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800ae5e:	da16      	bge.n	800ae8e <scalbn+0xc6>
 800ae60:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ae64:	429f      	cmp	r7, r3
 800ae66:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800ae6a:	dd08      	ble.n	800ae7e <scalbn+0xb6>
 800ae6c:	4c15      	ldr	r4, [pc, #84]	; (800aec4 <scalbn+0xfc>)
 800ae6e:	4814      	ldr	r0, [pc, #80]	; (800aec0 <scalbn+0xf8>)
 800ae70:	f363 74df 	bfi	r4, r3, #31, #1
 800ae74:	a30e      	add	r3, pc, #56	; (adr r3, 800aeb0 <scalbn+0xe8>)
 800ae76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	e7bc      	b.n	800adf8 <scalbn+0x30>
 800ae7e:	4c12      	ldr	r4, [pc, #72]	; (800aec8 <scalbn+0x100>)
 800ae80:	4812      	ldr	r0, [pc, #72]	; (800aecc <scalbn+0x104>)
 800ae82:	f363 74df 	bfi	r4, r3, #31, #1
 800ae86:	a308      	add	r3, pc, #32	; (adr r3, 800aea8 <scalbn+0xe0>)
 800ae88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8c:	e7f5      	b.n	800ae7a <scalbn+0xb2>
 800ae8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ae92:	3136      	adds	r1, #54	; 0x36
 800ae94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae98:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	4629      	mov	r1, r5
 800aea0:	2200      	movs	r2, #0
 800aea2:	4b0b      	ldr	r3, [pc, #44]	; (800aed0 <scalbn+0x108>)
 800aea4:	e7a8      	b.n	800adf8 <scalbn+0x30>
 800aea6:	bf00      	nop
 800aea8:	c2f8f359 	.word	0xc2f8f359
 800aeac:	01a56e1f 	.word	0x01a56e1f
 800aeb0:	8800759c 	.word	0x8800759c
 800aeb4:	7e37e43c 	.word	0x7e37e43c
 800aeb8:	43500000 	.word	0x43500000
 800aebc:	ffff3cb0 	.word	0xffff3cb0
 800aec0:	8800759c 	.word	0x8800759c
 800aec4:	7e37e43c 	.word	0x7e37e43c
 800aec8:	01a56e1f 	.word	0x01a56e1f
 800aecc:	c2f8f359 	.word	0xc2f8f359
 800aed0:	3c900000 	.word	0x3c900000

0800aed4 <abort>:
 800aed4:	2006      	movs	r0, #6
 800aed6:	b508      	push	{r3, lr}
 800aed8:	f000 f86c 	bl	800afb4 <raise>
 800aedc:	2001      	movs	r0, #1
 800aede:	f7fa fb22 	bl	8005526 <_exit>
	...

0800aee4 <__errno>:
 800aee4:	4b01      	ldr	r3, [pc, #4]	; (800aeec <__errno+0x8>)
 800aee6:	6818      	ldr	r0, [r3, #0]
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	20000014 	.word	0x20000014

0800aef0 <__libc_init_array>:
 800aef0:	b570      	push	{r4, r5, r6, lr}
 800aef2:	2600      	movs	r6, #0
 800aef4:	4d0c      	ldr	r5, [pc, #48]	; (800af28 <__libc_init_array+0x38>)
 800aef6:	4c0d      	ldr	r4, [pc, #52]	; (800af2c <__libc_init_array+0x3c>)
 800aef8:	1b64      	subs	r4, r4, r5
 800aefa:	10a4      	asrs	r4, r4, #2
 800aefc:	42a6      	cmp	r6, r4
 800aefe:	d109      	bne.n	800af14 <__libc_init_array+0x24>
 800af00:	f000 f874 	bl	800afec <_init>
 800af04:	2600      	movs	r6, #0
 800af06:	4d0a      	ldr	r5, [pc, #40]	; (800af30 <__libc_init_array+0x40>)
 800af08:	4c0a      	ldr	r4, [pc, #40]	; (800af34 <__libc_init_array+0x44>)
 800af0a:	1b64      	subs	r4, r4, r5
 800af0c:	10a4      	asrs	r4, r4, #2
 800af0e:	42a6      	cmp	r6, r4
 800af10:	d105      	bne.n	800af1e <__libc_init_array+0x2e>
 800af12:	bd70      	pop	{r4, r5, r6, pc}
 800af14:	f855 3b04 	ldr.w	r3, [r5], #4
 800af18:	4798      	blx	r3
 800af1a:	3601      	adds	r6, #1
 800af1c:	e7ee      	b.n	800aefc <__libc_init_array+0xc>
 800af1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800af22:	4798      	blx	r3
 800af24:	3601      	adds	r6, #1
 800af26:	e7f2      	b.n	800af0e <__libc_init_array+0x1e>
 800af28:	0800b138 	.word	0x0800b138
 800af2c:	0800b138 	.word	0x0800b138
 800af30:	0800b138 	.word	0x0800b138
 800af34:	0800b140 	.word	0x0800b140

0800af38 <memcpy>:
 800af38:	440a      	add	r2, r1
 800af3a:	4291      	cmp	r1, r2
 800af3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800af40:	d100      	bne.n	800af44 <memcpy+0xc>
 800af42:	4770      	bx	lr
 800af44:	b510      	push	{r4, lr}
 800af46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af4a:	4291      	cmp	r1, r2
 800af4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af50:	d1f9      	bne.n	800af46 <memcpy+0xe>
 800af52:	bd10      	pop	{r4, pc}

0800af54 <memset>:
 800af54:	4603      	mov	r3, r0
 800af56:	4402      	add	r2, r0
 800af58:	4293      	cmp	r3, r2
 800af5a:	d100      	bne.n	800af5e <memset+0xa>
 800af5c:	4770      	bx	lr
 800af5e:	f803 1b01 	strb.w	r1, [r3], #1
 800af62:	e7f9      	b.n	800af58 <memset+0x4>

0800af64 <_raise_r>:
 800af64:	291f      	cmp	r1, #31
 800af66:	b538      	push	{r3, r4, r5, lr}
 800af68:	4604      	mov	r4, r0
 800af6a:	460d      	mov	r5, r1
 800af6c:	d904      	bls.n	800af78 <_raise_r+0x14>
 800af6e:	2316      	movs	r3, #22
 800af70:	6003      	str	r3, [r0, #0]
 800af72:	f04f 30ff 	mov.w	r0, #4294967295
 800af76:	bd38      	pop	{r3, r4, r5, pc}
 800af78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af7a:	b112      	cbz	r2, 800af82 <_raise_r+0x1e>
 800af7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af80:	b94b      	cbnz	r3, 800af96 <_raise_r+0x32>
 800af82:	4620      	mov	r0, r4
 800af84:	f000 f830 	bl	800afe8 <_getpid_r>
 800af88:	462a      	mov	r2, r5
 800af8a:	4601      	mov	r1, r0
 800af8c:	4620      	mov	r0, r4
 800af8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af92:	f000 b817 	b.w	800afc4 <_kill_r>
 800af96:	2b01      	cmp	r3, #1
 800af98:	d00a      	beq.n	800afb0 <_raise_r+0x4c>
 800af9a:	1c59      	adds	r1, r3, #1
 800af9c:	d103      	bne.n	800afa6 <_raise_r+0x42>
 800af9e:	2316      	movs	r3, #22
 800afa0:	6003      	str	r3, [r0, #0]
 800afa2:	2001      	movs	r0, #1
 800afa4:	e7e7      	b.n	800af76 <_raise_r+0x12>
 800afa6:	2400      	movs	r4, #0
 800afa8:	4628      	mov	r0, r5
 800afaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afae:	4798      	blx	r3
 800afb0:	2000      	movs	r0, #0
 800afb2:	e7e0      	b.n	800af76 <_raise_r+0x12>

0800afb4 <raise>:
 800afb4:	4b02      	ldr	r3, [pc, #8]	; (800afc0 <raise+0xc>)
 800afb6:	4601      	mov	r1, r0
 800afb8:	6818      	ldr	r0, [r3, #0]
 800afba:	f7ff bfd3 	b.w	800af64 <_raise_r>
 800afbe:	bf00      	nop
 800afc0:	20000014 	.word	0x20000014

0800afc4 <_kill_r>:
 800afc4:	b538      	push	{r3, r4, r5, lr}
 800afc6:	2300      	movs	r3, #0
 800afc8:	4d06      	ldr	r5, [pc, #24]	; (800afe4 <_kill_r+0x20>)
 800afca:	4604      	mov	r4, r0
 800afcc:	4608      	mov	r0, r1
 800afce:	4611      	mov	r1, r2
 800afd0:	602b      	str	r3, [r5, #0]
 800afd2:	f7fa fa98 	bl	8005506 <_kill>
 800afd6:	1c43      	adds	r3, r0, #1
 800afd8:	d102      	bne.n	800afe0 <_kill_r+0x1c>
 800afda:	682b      	ldr	r3, [r5, #0]
 800afdc:	b103      	cbz	r3, 800afe0 <_kill_r+0x1c>
 800afde:	6023      	str	r3, [r4, #0]
 800afe0:	bd38      	pop	{r3, r4, r5, pc}
 800afe2:	bf00      	nop
 800afe4:	20000368 	.word	0x20000368

0800afe8 <_getpid_r>:
 800afe8:	f7fa ba86 	b.w	80054f8 <_getpid>

0800afec <_init>:
 800afec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afee:	bf00      	nop
 800aff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff2:	bc08      	pop	{r3}
 800aff4:	469e      	mov	lr, r3
 800aff6:	4770      	bx	lr

0800aff8 <_fini>:
 800aff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affa:	bf00      	nop
 800affc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800affe:	bc08      	pop	{r3}
 800b000:	469e      	mov	lr, r3
 800b002:	4770      	bx	lr
