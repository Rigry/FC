
FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aec8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800b0b0  0800b0b0  0001b0b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1c8  0800b1c8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800b1c8  0800b1c8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b1c8  0800b1c8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b1c8  0800b1c8  0001b1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1d0  0800b1d0  0001b1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b1d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000078  0800b24c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  0800b24c  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c49  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d25  00000000  00000000  00039cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0003ca10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0003dc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e68e  00000000  00000000  0003edc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000d245  00000000  00000000  0004d456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0005a69b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000571c  00000000  00000000  0005a6f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000078 	.word	0x20000078
 8000204:	00000000 	.word	0x00000000
 8000208:	0800b098 	.word	0x0800b098

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000007c 	.word	0x2000007c
 8000224:	0800b098 	.word	0x0800b098

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpun>:
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x10>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d10a      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x20>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_dcmpun+0x26>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0001 	mov.w	r0, #1
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_d2iz>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d215      	bcs.n	8000b36 <__aeabi_d2iz+0x36>
 8000b0a:	d511      	bpl.n	8000b30 <__aeabi_d2iz+0x30>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d912      	bls.n	8000b3c <__aeabi_d2iz+0x3c>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	bf18      	it	ne
 8000b2c:	4240      	negne	r0, r0
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d105      	bne.n	8000b48 <__aeabi_d2iz+0x48>
 8000b3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	bf08      	it	eq
 8000b42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fmul>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d06f      	beq.n	8000e64 <__aeabi_fmul+0xf8>
 8000d84:	441a      	add	r2, r3
 8000d86:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8a:	0240      	lsls	r0, r0, #9
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d92:	d01e      	beq.n	8000dd2 <__aeabi_fmul+0x66>
 8000d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da0:	fba0 3101 	umull	r3, r1, r0, r1
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dac:	bf3e      	ittt	cc
 8000dae:	0049      	lslcc	r1, r1, #1
 8000db0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	ea40 0001 	orr.w	r0, r0, r1
 8000dba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dbe:	2afd      	cmp	r2, #253	; 0xfd
 8000dc0:	d81d      	bhi.n	8000dfe <__aeabi_fmul+0x92>
 8000dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dca:	bf08      	it	eq
 8000dcc:	f020 0001 	biceq.w	r0, r0, #1
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	0249      	lsleq	r1, r1, #9
 8000dde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de6:	3a7f      	subs	r2, #127	; 0x7f
 8000de8:	bfc2      	ittt	gt
 8000dea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df2:	4770      	bxgt	lr
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	dc5d      	bgt.n	8000ebc <__aeabi_fmul+0x150>
 8000e00:	f112 0f19 	cmn.w	r2, #25
 8000e04:	bfdc      	itt	le
 8000e06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e0a:	4770      	bxle	lr
 8000e0c:	f1c2 0200 	rsb	r2, r2, #0
 8000e10:	0041      	lsls	r1, r0, #1
 8000e12:	fa21 f102 	lsr.w	r1, r1, r2
 8000e16:	f1c2 0220 	rsb	r2, r2, #32
 8000e1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e22:	f140 0000 	adc.w	r0, r0, #0
 8000e26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e2a:	bf08      	it	eq
 8000e2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e30:	4770      	bx	lr
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xce>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xe6>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e78f      	b.n	8000d84 <__aeabi_fmul+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	bf18      	it	ne
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d00a      	beq.n	8000e8a <__aeabi_fmul+0x11e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1d8      	bne.n	8000e32 <__aeabi_fmul+0xc6>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	bf17      	itett	ne
 8000e90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e94:	4608      	moveq	r0, r1
 8000e96:	f091 0f00 	teqne	r1, #0
 8000e9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9e:	d014      	beq.n	8000eca <__aeabi_fmul+0x15e>
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_fmul+0x13e>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d10f      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eaa:	ea93 0f0c 	teq	r3, ip
 8000eae:	d103      	bne.n	8000eb8 <__aeabi_fmul+0x14c>
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	bf18      	it	ne
 8000eb4:	4608      	movne	r0, r1
 8000eb6:	d108      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec8:	4770      	bx	lr
 8000eca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ece:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fdiv>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d069      	beq.n	8000fc0 <__aeabi_fdiv+0xec>
 8000eec:	eba2 0203 	sub.w	r2, r2, r3
 8000ef0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000efa:	d037      	beq.n	8000f6c <__aeabi_fdiv+0x98>
 8000efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf38      	it	cc
 8000f10:	005b      	lslcc	r3, r3, #1
 8000f12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	bf24      	itt	cs
 8000f1e:	1a5b      	subcs	r3, r3, r1
 8000f20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f36:	bf24      	itt	cs
 8000f38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	bf18      	it	ne
 8000f52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f56:	d1e0      	bne.n	8000f1a <__aeabi_fdiv+0x46>
 8000f58:	2afd      	cmp	r2, #253	; 0xfd
 8000f5a:	f63f af50 	bhi.w	8000dfe <__aeabi_fmul+0x92>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f64:	bf08      	it	eq
 8000f66:	f020 0001 	biceq.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f74:	327f      	adds	r2, #127	; 0x7f
 8000f76:	bfc2      	ittt	gt
 8000f78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f80:	4770      	bxgt	lr
 8000f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	e737      	b.n	8000dfe <__aeabi_fmul+0x92>
 8000f8e:	f092 0f00 	teq	r2, #0
 8000f92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0040      	lsleq	r0, r0, #1
 8000f9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9e:	3a01      	subeq	r2, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xc2>
 8000fa2:	ea40 000c 	orr.w	r0, r0, ip
 8000fa6:	f093 0f00 	teq	r3, #0
 8000faa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0049      	lsleq	r1, r1, #1
 8000fb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb6:	3b01      	subeq	r3, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xda>
 8000fba:	ea41 010c 	orr.w	r1, r1, ip
 8000fbe:	e795      	b.n	8000eec <__aeabi_fdiv+0x18>
 8000fc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc4:	ea92 0f0c 	teq	r2, ip
 8000fc8:	d108      	bne.n	8000fdc <__aeabi_fdiv+0x108>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	f47f af7d 	bne.w	8000eca <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	f47f af70 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e776      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fdc:	ea93 0f0c 	teq	r3, ip
 8000fe0:	d104      	bne.n	8000fec <__aeabi_fdiv+0x118>
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	f43f af4c 	beq.w	8000e80 <__aeabi_fmul+0x114>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e76e      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	d1ca      	bne.n	8000f8e <__aeabi_fdiv+0xba>
 8000ff8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ffc:	f47f af5c 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8001000:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001004:	f47f af3c 	bne.w	8000e80 <__aeabi_fmul+0x114>
 8001008:	e75f      	b.n	8000eca <__aeabi_fmul+0x15e>
 800100a:	bf00      	nop

0800100c <__gesf2>:
 800100c:	f04f 3cff 	mov.w	ip, #4294967295
 8001010:	e006      	b.n	8001020 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__lesf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	e002      	b.n	8001020 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__cmpsf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	bf18      	it	ne
 8001032:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001036:	d011      	beq.n	800105c <__cmpsf2+0x40>
 8001038:	b001      	add	sp, #4
 800103a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800103e:	bf18      	it	ne
 8001040:	ea90 0f01 	teqne	r0, r1
 8001044:	bf58      	it	pl
 8001046:	ebb2 0003 	subspl.w	r0, r2, r3
 800104a:	bf88      	it	hi
 800104c:	17c8      	asrhi	r0, r1, #31
 800104e:	bf38      	it	cc
 8001050:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001054:	bf18      	it	ne
 8001056:	f040 0001 	orrne.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001060:	d102      	bne.n	8001068 <__cmpsf2+0x4c>
 8001062:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001066:	d105      	bne.n	8001074 <__cmpsf2+0x58>
 8001068:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800106c:	d1e4      	bne.n	8001038 <__cmpsf2+0x1c>
 800106e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001072:	d0e1      	beq.n	8001038 <__cmpsf2+0x1c>
 8001074:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <__aeabi_cfrcmple>:
 800107c:	4684      	mov	ip, r0
 800107e:	4608      	mov	r0, r1
 8001080:	4661      	mov	r1, ip
 8001082:	e7ff      	b.n	8001084 <__aeabi_cfcmpeq>

08001084 <__aeabi_cfcmpeq>:
 8001084:	b50f      	push	{r0, r1, r2, r3, lr}
 8001086:	f7ff ffc9 	bl	800101c <__cmpsf2>
 800108a:	2800      	cmp	r0, #0
 800108c:	bf48      	it	mi
 800108e:	f110 0f00 	cmnmi.w	r0, #0
 8001092:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001094 <__aeabi_fcmpeq>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff fff4 	bl	8001084 <__aeabi_cfcmpeq>
 800109c:	bf0c      	ite	eq
 800109e:	2001      	moveq	r0, #1
 80010a0:	2000      	movne	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmplt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffea 	bl	8001084 <__aeabi_cfcmpeq>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmple>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffe0 	bl	8001084 <__aeabi_cfcmpeq>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpge>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffd2 	bl	800107c <__aeabi_cfrcmple>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpgt>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffc8 	bl	800107c <__aeabi_cfrcmple>
 80010ec:	bf34      	ite	cc
 80010ee:	2001      	movcc	r0, #1
 80010f0:	2000      	movcs	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpun>:
 80010f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001100:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001104:	d102      	bne.n	800110c <__aeabi_fcmpun+0x14>
 8001106:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110a:	d108      	bne.n	800111e <__aeabi_fcmpun+0x26>
 800110c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001110:	d102      	bne.n	8001118 <__aeabi_fcmpun+0x20>
 8001112:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001116:	d102      	bne.n	800111e <__aeabi_fcmpun+0x26>
 8001118:	f04f 0000 	mov.w	r0, #0
 800111c:	4770      	bx	lr
 800111e:	f04f 0001 	mov.w	r0, #1
 8001122:	4770      	bx	lr

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <_ZN9Publisher9subscribeEP10Subscriber>:

struct Publisher
{
    Static_vector<Subscriber*, 12> subscriber;

    void subscribe  (Subscriber* p) { subscriber.push_back(p); }
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6839      	ldr	r1, [r7, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f003 fa47 	bl	8004612 <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_ZN9Publisher11unsubscribeEP10Subscriber>:
    void unsubscribe(Subscriber* p) { subscriber.remove(p);  }
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6839      	ldr	r1, [r7, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f003 fa50 	bl	8004640 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_ZN9Publisher6notifyEv>:
    void notify() {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 fa7c 	bl	80046b4 <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	4293      	cmp	r3, r2
 80011c4:	bf34      	ite	cc
 80011c6:	2301      	movcc	r3, #1
 80011c8:	2300      	movcs	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00e      	beq.n	80011ee <_ZN9Publisher6notifyEv+0x46>
          subscriber[i]->notify();
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f003 fa78 	bl	80046cc <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>
 80011dc:	4603      	mov	r3, r0
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	4790      	blx	r2
      for(uint8_t i = 0; i < subscriber.cend(); i++){
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	3301      	adds	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
 80011ec:	e7e2      	b.n	80011b4 <_ZN9Publisher6notifyEv+0xc>
      }
    }
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_ZN9PublisherC1Ev>:
struct Publisher
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	f003 fa71 	bl	80046e8 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_ZN11TickUpdater7SubtickC1Ev>:
    void subscribe_subtick (Subscriber& v);
    void interrupt();


private:
    struct Subtick : Publisher {} subtick {};
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ffeb 	bl	80011f6 <_ZN9PublisherC1Ev>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <_ZN11TickUpdaterC1Ev>:
    TickUpdater() { systemtick.initInterrupt<1000>(); }
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ffdd 	bl	80011f6 <_ZN9PublisherC1Ev>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3334      	adds	r3, #52	; 0x34
 8001240:	2234      	movs	r2, #52	; 0x34
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f009 fedb 	bl	800b000 <memset>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3334      	adds	r3, #52	; 0x34
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffde 	bl	8001210 <_ZN11TickUpdater7SubtickC1Ev>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	669a      	str	r2, [r3, #104]	; 0x68
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <_ZN11TickUpdaterC1Ev+0x44>)
 8001262:	f003 fa4b 	bl	80046fc <_ZN10SystemTick13initInterruptILt1000EEEvv>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000094 	.word	0x20000094

08001274 <HAL_IncTick>:
} tickUpdater{};



void HAL_IncTick()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    tickUpdater.interrupt();
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <HAL_IncTick+0x10>)
 800127a:	f000 f8a8 	bl	80013ce <_ZN11TickUpdater9interruptEv>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000098 	.word	0x20000098

08001288 <_ZN14TickSubscriber9subscribeEv>:

class TickSubscriber : Subscriber
{
protected:
   bool subscribed;
   void subscribe()
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
   {
     if (not subscribed) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	791b      	ldrb	r3, [r3, #4]
 8001294:	f083 0301 	eor.w	r3, r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d007      	beq.n	80012ae <_ZN14TickSubscriber9subscribeEv+0x26>
       subscribed = true;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	711a      	strb	r2, [r3, #4]
       tickUpdater.subscribe (this);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4619      	mov	r1, r3
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <_ZN14TickSubscriber9subscribeEv+0x30>)
 80012aa:	f7ff ff61 	bl	8001170 <_ZN9Publisher9subscribeEP10Subscriber>
     }
   }
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000098 	.word	0x20000098

080012bc <_ZN14TickSubscriber11unsubscribeEv>:
   void unsubscribe()
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
   {
     if (subscribed) {
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	791b      	ldrb	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d007      	beq.n	80012dc <_ZN14TickSubscriber11unsubscribeEv+0x20>
       subscribed = false;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	711a      	strb	r2, [r3, #4]
       tickUpdater.unsubscribe (this);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4803      	ldr	r0, [pc, #12]	; (80012e4 <_ZN14TickSubscriber11unsubscribeEv+0x28>)
 80012d8:	f7ff ff58 	bl	800118c <_ZN9Publisher11unsubscribeEP10Subscriber>
     }
   }
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000098 	.word	0x20000098

080012e8 <_ZN10SubscriberC1Ev>:
struct Subscriber  {
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	4a04      	ldr	r2, [pc, #16]	; (8001304 <_ZN10SubscriberC1Ev+0x1c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	0800b164 	.word	0x0800b164

08001308 <_ZN14TickSubscriberC1Ev>:
class TickSubscriber : Subscriber
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffe8 	bl	80012e8 <_ZN10SubscriberC1Ev>
 8001318:	4a03      	ldr	r2, [pc, #12]	; (8001328 <_ZN14TickSubscriberC1Ev+0x20>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	0800b158 	.word	0x0800b158

0800132c <_ZN5TimerC1Ev>:

class Timer : TickSubscriber
{
  volatile uint32_t time_passed;
public:
  Timer(){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ffe6 	bl	8001308 <_ZN14TickSubscriberC1Ev>
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <_ZN5TimerC1Ev+0x2c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
    subscribed = false;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	711a      	strb	r2, [r3, #4]
  };
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	0800b14c 	.word	0x0800b14c

0800135c <_ZN5TimerC1Em>:
  Timer(uint32_t ms){
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ffcd 	bl	8001308 <_ZN14TickSubscriberC1Ev>
 800136e:	4a09      	ldr	r2, [pc, #36]	; (8001394 <_ZN5TimerC1Em+0x38>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	601a      	str	r2, [r3, #0]
    time_passed = 0;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
    subscribed = false;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	711a      	strb	r2, [r3, #4]
    start(ms);
 8001380:	6839      	ldr	r1, [r7, #0]
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f834 	bl	80013f0 <_ZN5Timer5startEm>
  }
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	0800b14c 	.word	0x0800b14c

08001398 <_ZN5Timer6notifyEv>:
  uint32_t timePassed(); /// возвращает сколько натикал
  uint32_t timeLeft();   /// возвращает сколько осталось
  template<class function>
  void     event (function); /// выполняет function, когда дотикал и перезапускает таймер

  void notify() {
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
    time_passed++;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	1c5a      	adds	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	609a      	str	r2, [r3, #8]
  }
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>:
}

void TickUpdater::interrupt()
{
//    subtick.notify();
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
        notify();
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fef1 	bl	80011a8 <_ZN9Publisher6notifyEv>
    });
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <_ZN11TickUpdater9interruptEv>:
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
    every_qty_cnt_call (subtick_cnt, subtick_qty, [this]{
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f103 0068 	add.w	r0, r3, #104	; 0x68
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4619      	mov	r1, r3
 80013e4:	f003 f9a0 	bl	8004728 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_ZN5Timer5startEm>:


void Timer::start(uint32_t ms){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
   time_passed = 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
   time_set = ms;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	60da      	str	r2, [r3, #12]
   subscribe();
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff3d 	bl	8001288 <_ZN14TickSubscriber9subscribeEv>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_ZN5Timer5eventEv>:

bool Timer::event()
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  if (time_passed >= time_set) {
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	429a      	cmp	r2, r3
 8001428:	bf2c      	ite	cs
 800142a:	2301      	movcs	r3, #1
 800142c:	2300      	movcc	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	d004      	beq.n	800143e <_ZN5Timer5eventEv+0x28>
      time_passed = 0;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
      return (true);
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <_ZN5Timer5eventEv+0x2a>
  } else {
    return (false);
 800143e:	2300      	movs	r3, #0
  }
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <_ZN5Timer4stopEv>:
        time_passed = 0;
        functor();
    }
}

void Timer::stop() {
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
   time_passed = 0;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
   unsubscribe();
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff2e 	bl	80012bc <_ZN14TickSubscriber11unsubscribeEv>
}
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <_ZN5Timer4doneEv>:

bool     Timer::done()       { return time_passed >= time_set; }
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	429a      	cmp	r2, r3
 800147a:	bf2c      	ite	cs
 800147c:	2301      	movcs	r3, #1
 800147e:	2300      	movcc	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <_ZN5Timer5startEv>:
void     Timer::pause()      { unsubscribe(); }
void     Timer::start()      { subscribe();  }
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fef6 	bl	8001288 <_ZN14TickSubscriber9subscribeEv>
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_ZN5Timer7isCountEv>:
bool     Timer::isCount()    { return subscribed; }
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	791b      	ldrb	r3, [r3, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <_ZN9Interrupt9subscribeEP12Interrupting>:
{
    Interrupting* pointer;

public:

    void subscribe(Interrupting* ps)
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
    {
      pointer = ps;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	601a      	str	r2, [r3, #0]
    }
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <_ZN9Interrupt9interruptEv>:

    void clear_subscribe() { pointer = 0; }

    void interrupt()
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    {
      pointer->interrupt();
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4610      	mov	r0, r2
 80014ea:	4798      	blx	r3
    }
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_ZN4ADC_13adc_interruptEv>:

	uint16_t max_current_phase{20};
	uint8_t over_current_a{0};
	uint8_t over_current_c{0};

	void adc_interrupt() {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
		HAL_ADC_Stop_DMA (&hadc1);
 80014fc:	4819      	ldr	r0, [pc, #100]	; (8001564 <_ZN4ADC_13adc_interruptEv+0x70>)
 80014fe:	f004 facd 	bl	8005a9c <HAL_ADC_Stop_DMA>
		new_hv = buffer[3];
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	8b9a      	ldrh	r2, [r3, #28]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		if (abs(new_hv - h_voltage) > 170) {  // 250 ~= 96V
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001512:	461a      	mov	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	bfb8      	it	lt
 8001520:	425b      	neglt	r3, r3
 8001522:	2baa      	cmp	r3, #170	; 0xaa
 8001524:	dd03      	ble.n	800152e <_ZN4ADC_13adc_interruptEv+0x3a>
			error_HV = true;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		}
		h_voltage += (new_hv - h_voltage) * 10 / 30;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f8b3 2076 	ldrh.w	r2, [r3, #118]	; 0x76
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800153a:	4619      	mov	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001542:	1acb      	subs	r3, r1, r3
 8001544:	4908      	ldr	r1, [pc, #32]	; (8001568 <_ZN4ADC_13adc_interruptEv+0x74>)
 8001546:	fb81 0103 	smull	r0, r1, r1, r3
 800154a:	17db      	asrs	r3, r3, #31
 800154c:	1acb      	subs	r3, r1, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	b29a      	uxth	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000108 	.word	0x20000108
 8001568:	55555556 	.word	0x55555556

0800156c <_ZN4ADC_22adc_injected_interruptEv>:

	void adc_injected_interrupt() {
 800156c:	b5b0      	push	{r4, r5, r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

		HAL_ADCEx_InjectedStop_IT (&hadc2);
 8001574:	4862      	ldr	r0, [pc, #392]	; (8001700 <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 8001576:	f004 fe8f 	bl	8006298 <HAL_ADCEx_InjectedStop_IT>
		arr_current_S[j] = HAL_ADCEx_InjectedGetValue(&hadc2, PS);
 800157a:	2101      	movs	r1, #1
 800157c:	4860      	ldr	r0, [pc, #384]	; (8001700 <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 800157e:	f004 fed5 	bl	800632c <HAL_ADCEx_InjectedGetValue>
 8001582:	4602      	mov	r2, r0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800158a:	b211      	sxth	r1, r2
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	330c      	adds	r3, #12
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	460a      	mov	r2, r1
 8001596:	80da      	strh	r2, [r3, #6]
		arr_current_A[j] = HAL_ADCEx_InjectedGetValue(&hadc2, phase_A);
 8001598:	2102      	movs	r1, #2
 800159a:	4859      	ldr	r0, [pc, #356]	; (8001700 <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 800159c:	f004 fec6 	bl	800632c <HAL_ADCEx_InjectedGetValue>
 80015a0:	4601      	mov	r1, r0
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80015a8:	461a      	mov	r2, r3
 80015aa:	b209      	sxth	r1, r1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3218      	adds	r2, #24
 80015b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		arr_current_C[j] = HAL_ADCEx_InjectedGetValue(&hadc2, phase_C);
 80015b4:	2103      	movs	r1, #3
 80015b6:	4852      	ldr	r0, [pc, #328]	; (8001700 <_ZN4ADC_22adc_injected_interruptEv+0x194>)
 80015b8:	f004 feb8 	bl	800632c <HAL_ADCEx_InjectedGetValue>
 80015bc:	4602      	mov	r2, r0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80015c4:	b211      	sxth	r1, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	3320      	adds	r3, #32
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	460a      	mov	r2, r1
 80015d0:	805a      	strh	r2, [r3, #2]
//		if(abs(new_hv - h_voltage) > 150) {  // 250 ~= 96V
//			error_HV = true;
//		}
//		h_voltage += (new_hv - h_voltage) * 10 / 30;

		measure = true;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87

		if(not work) {
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80015e0:	f083 0301 	eor.w	r3, r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 808e 	beq.w	8001708 <_ZN4ADC_22adc_injected_interruptEv+0x19c>
			offset_I_S = 0;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
			offset_I_A = 0;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
			offset_I_C = 0;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
			for (auto i = 0; i < 9; i++) {
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b08      	cmp	r3, #8
 800160c:	dc37      	bgt.n	800167e <_ZN4ADC_22adc_injected_interruptEv+0x112>
				offset_I_S += arr_current_S[i];
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8001614:	b29a      	uxth	r2, r3
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	330c      	adds	r3, #12
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	440b      	add	r3, r1
 8001620:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001624:	b29b      	uxth	r3, r3
 8001626:	4413      	add	r3, r2
 8001628:	b29b      	uxth	r3, r3
 800162a:	b21a      	sxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
				offset_I_A += arr_current_A[i];
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 8001638:	b29a      	uxth	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68f9      	ldr	r1, [r7, #12]
 800163e:	3118      	adds	r1, #24
 8001640:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8001644:	b29b      	uxth	r3, r3
 8001646:	4413      	add	r3, r2
 8001648:	b29b      	uxth	r3, r3
 800164a:	b21a      	sxth	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
				offset_I_C += arr_current_C[i];
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 8001658:	b29a      	uxth	r2, r3
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3320      	adds	r3, #32
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	440b      	add	r3, r1
 8001664:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001668:	b29b      	uxth	r3, r3
 800166a:	4413      	add	r3, r2
 800166c:	b29b      	uxth	r3, r3
 800166e:	b21a      	sxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
			for (auto i = 0; i < 9; i++) {
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3301      	adds	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e7c4      	b.n	8001608 <_ZN4ADC_22adc_injected_interruptEv+0x9c>
			}
			offset_I_S /= (9);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 8001684:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <_ZN4ADC_22adc_injected_interruptEv+0x198>)
 8001686:	fb82 1203 	smull	r1, r2, r2, r3
 800168a:	1052      	asrs	r2, r2, #1
 800168c:	17db      	asrs	r3, r3, #31
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	b21a      	sxth	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
			offset_I_A /= (9);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 800169e:	4a19      	ldr	r2, [pc, #100]	; (8001704 <_ZN4ADC_22adc_injected_interruptEv+0x198>)
 80016a0:	fb82 1203 	smull	r1, r2, r2, r3
 80016a4:	1052      	asrs	r2, r2, #1
 80016a6:	17db      	asrs	r3, r3, #31
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
			offset_I_C /= (9);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 80016b8:	4a12      	ldr	r2, [pc, #72]	; (8001704 <_ZN4ADC_22adc_injected_interruptEv+0x198>)
 80016ba:	fb82 1203 	smull	r1, r2, r2, r3
 80016be:	1052      	asrs	r2, r2, #1
 80016c0:	17db      	asrs	r3, r3, #31
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8

			error_a = 0;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
			error_b = 0;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
			error_c = 0;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8

			over_current_s = 0;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
			over_current_a = 0;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
			over_current_c = 0;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 80016fc:	e240      	b.n	8001b80 <_ZN4ADC_22adc_injected_interruptEv+0x614>
 80016fe:	bf00      	nop
 8001700:	20000138 	.word	0x20000138
 8001704:	38e38e39 	.word	0x38e38e39

		} else if (work) {
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 8236 	beq.w	8001b80 <_ZN4ADC_22adc_injected_interruptEv+0x614>

			arr_S[j] = abs(arr_current_S[j] - offset_I_S);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	330c      	adds	r3, #12
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001734:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800173e:	b211      	sxth	r1, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	3344      	adds	r3, #68	; 0x44
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	460a      	mov	r2, r1
 800174a:	80da      	strh	r2, [r3, #6]
			arr_A[j] = abs(arr_current_A[j] - offset_I_A);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001752:	461a      	mov	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3218      	adds	r2, #24
 8001758:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800175c:	461a      	mov	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800176a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001774:	b211      	sxth	r1, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	3358      	adds	r3, #88	; 0x58
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	460a      	mov	r2, r1
 8001780:	805a      	strh	r2, [r3, #2]
			arr_B[j] = abs(abs(arr_current_A[j] - offset_I_A) - abs(arr_current_C[j] - offset_I_C));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3218      	adds	r2, #24
 800178e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001792:	461a      	mov	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017a0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	3320      	adds	r3, #32
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	440b      	add	r3, r1
 80017b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017b6:	4619      	mov	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 80017be:	1acb      	subs	r3, r1, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bfb8      	it	lt
 80017c4:	425b      	neglt	r3, r3
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017cc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80017d6:	b211      	sxth	r1, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	3360      	adds	r3, #96	; 0x60
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	460a      	mov	r2, r1
 80017e2:	809a      	strh	r2, [r3, #4]
			arr_C[j] = abs(arr_current_C[j] - offset_I_C);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	3320      	adds	r3, #32
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017f6:	461a      	mov	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001804:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800180e:	461a      	mov	r2, r3
 8001810:	b209      	sxth	r1, r1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3250      	adds	r2, #80	; 0x50
 8001816:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			a = (arr_current_A[j] - offset_I_A) * 10 / 21;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001820:	461a      	mov	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3218      	adds	r2, #24
 8001826:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800182a:	461a      	mov	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 8001832:	1ad2      	subs	r2, r2, r3
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4ac6      	ldr	r2, [pc, #792]	; (8001b58 <_ZN4ADC_22adc_injected_interruptEv+0x5ec>)
 800183e:	fb82 1203 	smull	r1, r2, r2, r3
 8001842:	1092      	asrs	r2, r2, #2
 8001844:	17db      	asrs	r3, r3, #31
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	b21a      	sxth	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
			c = (arr_current_C[j] - offset_I_C) * 10 / 21;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	3320      	adds	r3, #32
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001862:	461a      	mov	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 800186a:	1ad2      	subs	r2, r2, r3
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4ab8      	ldr	r2, [pc, #736]	; (8001b58 <_ZN4ADC_22adc_injected_interruptEv+0x5ec>)
 8001876:	fb82 1203 	smull	r1, r2, r2, r3
 800187a:	1092      	asrs	r2, r2, #2
 800187c:	17db      	asrs	r3, r3, #31
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	b21a      	sxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
			b = -1 * (a + c);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 800188e:	b29a      	uxth	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8001896:	b29b      	uxth	r3, r3
 8001898:	4413      	add	r3, r2
 800189a:	b29b      	uxth	r3, r3
 800189c:	425b      	negs	r3, r3
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b21a      	sxth	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

//			if(abs(new_hv - h_voltage) > 250) {  // 250 ~= 96V
//				error_HV = true;
//			}

			if(arr_B[j] <= abs(offset_I_A - offset_I_C) and Km_check) {
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	3360      	adds	r3, #96	; 0x60
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018ba:	461a      	mov	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f9b3 30f6 	ldrsh.w	r3, [r3, #246]	; 0xf6
 80018c2:	4619      	mov	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f9b3 30f8 	ldrsh.w	r3, [r3, #248]	; 0xf8
 80018ca:	1acb      	subs	r3, r1, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bfb8      	it	lt
 80018d0:	425b      	neglt	r3, r3
 80018d2:	429a      	cmp	r2, r3
 80018d4:	dc15      	bgt.n	8001902 <_ZN4ADC_22adc_injected_interruptEv+0x396>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d010      	beq.n	8001902 <_ZN4ADC_22adc_injected_interruptEv+0x396>
				error_b++;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
				if(error_b > 6)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 30d7 	ldrb.w	r3, [r3, #215]	; 0xd7
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d903      	bls.n	8001902 <_ZN4ADC_22adc_injected_interruptEv+0x396>
					error = true;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			}

			if (arr_A[j] <= 5 and Km_check) {
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	3358      	adds	r3, #88	; 0x58
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001914:	2b05      	cmp	r3, #5
 8001916:	dc15      	bgt.n	8001944 <_ZN4ADC_22adc_injected_interruptEv+0x3d8>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800191e:	2b00      	cmp	r3, #0
 8001920:	d010      	beq.n	8001944 <_ZN4ADC_22adc_injected_interruptEv+0x3d8>
				error_a++;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8001928:	3301      	adds	r3, #1
 800192a:	b2da      	uxtb	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
				if (error_a > 6)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8001938:	2b06      	cmp	r3, #6
 800193a:	d903      	bls.n	8001944 <_ZN4ADC_22adc_injected_interruptEv+0x3d8>
					error = true;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			}

			if (arr_C[j] <= 5 and Km_check) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800194a:	461a      	mov	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3250      	adds	r2, #80	; 0x50
 8001950:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001954:	2b05      	cmp	r3, #5
 8001956:	dc15      	bgt.n	8001984 <_ZN4ADC_22adc_injected_interruptEv+0x418>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800195e:	2b00      	cmp	r3, #0
 8001960:	d010      	beq.n	8001984 <_ZN4ADC_22adc_injected_interruptEv+0x418>
				error_c++;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001968:	3301      	adds	r3, #1
 800196a:	b2da      	uxtb	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
				if (error_c > 6)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001978:	2b06      	cmp	r3, #6
 800197a:	d903      	bls.n	8001984 <_ZN4ADC_22adc_injected_interruptEv+0x418>
					error = true;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			}

			if (arr_S[j] / 21 >= max_current and Km_check) {
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	3344      	adds	r3, #68	; 0x44
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4413      	add	r3, r2
 8001992:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001996:	4a70      	ldr	r2, [pc, #448]	; (8001b58 <_ZN4ADC_22adc_injected_interruptEv+0x5ec>)
 8001998:	fb82 1203 	smull	r1, r2, r2, r3
 800199c:	1092      	asrs	r2, r2, #2
 800199e:	17db      	asrs	r3, r3, #31
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 80019ac:	429a      	cmp	r2, r3
 80019ae:	db15      	blt.n	80019dc <_ZN4ADC_22adc_injected_interruptEv+0x470>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d010      	beq.n	80019dc <_ZN4ADC_22adc_injected_interruptEv+0x470>
				over_current_s++;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80019c0:	3301      	adds	r3, #1
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
				if (over_current_s >= 4)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d903      	bls.n	80019dc <_ZN4ADC_22adc_injected_interruptEv+0x470>
					over_cur_s = true;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
			}

			if (arr_A[j] / 21 >= max_current_phase and Km_check) {
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	3358      	adds	r3, #88	; 0x58
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019ee:	4a5a      	ldr	r2, [pc, #360]	; (8001b58 <_ZN4ADC_22adc_injected_interruptEv+0x5ec>)
 80019f0:	fb82 1203 	smull	r1, r2, r2, r3
 80019f4:	1092      	asrs	r2, r2, #2
 80019f6:	17db      	asrs	r3, r3, #31
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 8001a04:	429a      	cmp	r2, r3
 8001a06:	db15      	blt.n	8001a34 <_ZN4ADC_22adc_injected_interruptEv+0x4c8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d010      	beq.n	8001a34 <_ZN4ADC_22adc_injected_interruptEv+0x4c8>
				over_current_a++;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				if (over_current_a >= 4)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d903      	bls.n	8001a34 <_ZN4ADC_22adc_injected_interruptEv+0x4c8>
					over_cur_a = true;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
			}

			if (arr_C[j] / 21 >= max_current_phase and Km_check) {
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3250      	adds	r2, #80	; 0x50
 8001a40:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001a44:	4a44      	ldr	r2, [pc, #272]	; (8001b58 <_ZN4ADC_22adc_injected_interruptEv+0x5ec>)
 8001a46:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4a:	1092      	asrs	r2, r2, #2
 8001a4c:	17db      	asrs	r3, r3, #31
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	db15      	blt.n	8001a8a <_ZN4ADC_22adc_injected_interruptEv+0x51e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d010      	beq.n	8001a8a <_ZN4ADC_22adc_injected_interruptEv+0x51e>
				over_current_c++;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8001a6e:	3301      	adds	r3, #1
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
				if (over_current_c >= 4)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d903      	bls.n	8001a8a <_ZN4ADC_22adc_injected_interruptEv+0x51e>
					over_cur_c = true;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
			}

			new_r = (std::sqrt( std::pow((a - b / 2 - c / 2), 2) + std::pow( (b * 17 / 20 - c * 17 / 20), 2) ) * 2) / 3;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 8001a90:	4619      	mov	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8001a98:	0fda      	lsrs	r2, r3, #31
 8001a9a:	4413      	add	r3, r2
 8001a9c:	105b      	asrs	r3, r3, #1
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	1aca      	subs	r2, r1, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8001aa8:	0fd9      	lsrs	r1, r3, #31
 8001aaa:	440b      	add	r3, r1
 8001aac:	105b      	asrs	r3, r3, #1
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f002 fe58 	bl	800476a <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001aba:	4604      	mov	r4, r0
 8001abc:	460d      	mov	r5, r1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	4413      	add	r3, r2
 8001acc:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <_ZN4ADC_22adc_injected_interruptEv+0x5f0>)
 8001ace:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad2:	10d2      	asrs	r2, r2, #3
 8001ad4:	17db      	asrs	r3, r3, #31
 8001ad6:	1ad2      	subs	r2, r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8001ade:	4619      	mov	r1, r3
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	440b      	add	r3, r1
 8001ae6:	491d      	ldr	r1, [pc, #116]	; (8001b5c <_ZN4ADC_22adc_injected_interruptEv+0x5f0>)
 8001ae8:	fb81 0103 	smull	r0, r1, r1, r3
 8001aec:	10c9      	asrs	r1, r1, #3
 8001aee:	17db      	asrs	r3, r3, #31
 8001af0:	1a5b      	subs	r3, r3, r1
 8001af2:	4413      	add	r3, r2
 8001af4:	2102      	movs	r1, #2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 fe37 	bl	800476a <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4620      	mov	r0, r4
 8001b02:	4629      	mov	r1, r5
 8001b04:	f7fe fb96 	bl	8000234 <__adddf3>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f008 fb04 	bl	800a11c <sqrt>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	f7fe fb8c 	bl	8000234 <__adddf3>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <_ZN4ADC_22adc_injected_interruptEv+0x5f4>)
 8001b2a:	f7fe fe63 	bl	80007f4 <__aeabi_ddiv>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	f7fe ffe3 	bl	8000b00 <__aeabi_d2iz>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

			r += (new_r - r) / 4;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f9b3 3082 	ldrsh.w	r3, [r3, #130]	; 0x82
 8001b52:	4619      	mov	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	e005      	b.n	8001b64 <_ZN4ADC_22adc_injected_interruptEv+0x5f8>
 8001b58:	30c30c31 	.word	0x30c30c31
 8001b5c:	66666667 	.word	0x66666667
 8001b60:	40080000 	.word	0x40080000
 8001b64:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001b68:	1acb      	subs	r3, r1, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da00      	bge.n	8001b70 <_ZN4ADC_22adc_injected_interruptEv+0x604>
 8001b6e:	3303      	adds	r3, #3
 8001b70:	109b      	asrs	r3, r3, #2
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	b21a      	sxth	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		}

		if (j < 8) j++;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001b86:	2b07      	cmp	r3, #7
 8001b88:	d808      	bhi.n	8001b9c <_ZN4ADC_22adc_injected_interruptEv+0x630>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001b90:	3301      	adds	r3, #1
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			over_current_a = 0;
			over_current_c = 0;
		}
//		if(m < 15) m++;
//		else m = 0;
	}
 8001b9a:	e01b      	b.n	8001bd4 <_ZN4ADC_22adc_injected_interruptEv+0x668>
			j = 0;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
			error_a = 0;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
			error_b = 0;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
			error_c = 0;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			over_current_s = 0;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
			over_current_a = 0;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
			over_current_c = 0;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
	}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bdb0      	pop	{r4, r5, r7, pc}

08001bdc <_ZN12InterruptingC1Ev>:
struct Interrupting
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <_ZN12InterruptingC1Ev+0x1c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	0800b140 	.word	0x0800b140

08001bfc <_ZN4ADC_13ADC_interruptC1ERS_>:

	using Parent = ADC_;

	struct ADC_interrupt : Interrupting {
		Parent &parent;
		ADC_interrupt(Parent &parent) :
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ffe7 	bl	8001bdc <_ZN12InterruptingC1Ev>
 8001c0e:	4a09      	ldr	r2, [pc, #36]	; (8001c34 <_ZN4ADC_13ADC_interruptC1ERS_+0x38>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	605a      	str	r2, [r3, #4]
			parent.adc_callback.subscribe(this);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4611      	mov	r1, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fc49 	bl	80014ba <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	0800b134 	.word	0x0800b134

08001c38 <_ZN4ADC_13ADC_interrupt9interruptEv>:
		void interrupt() override {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
			parent.adc_interrupt();
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fc55 	bl	80014f4 <_ZN4ADC_13adc_interruptEv>
		}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>:
	} adc_ { *this };

	struct ADC_INJ_interrupt : Interrupting {
		Parent &parent;
		ADC_INJ_interrupt(Parent &parent) :
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ffbb 	bl	8001bdc <_ZN12InterruptingC1Ev>
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <_ZN4ADC_17ADC_INJ_interruptC1ERS_+0x38>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	605a      	str	r2, [r3, #4]
			parent.adc_injected_callback.subscribe(this);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fc1d 	bl	80014ba <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	0800b128 	.word	0x0800b128

08001c90 <_ZN4ADC_17ADC_INJ_interrupt9interruptEv>:
		void interrupt() override {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
			parent.adc_injected_interrupt();
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fc65 	bl	800156c <_ZN4ADC_22adc_injected_interruptEv>
		}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <_ZN4ADC_C1ER9InterruptS1_ht>:
	} adc_injected_ { *this };

public:

	ADC_(Interrupt& adc_callback, Interrupt& adc_injected_callback, uint8_t qty_channel, uint16_t time_refresh)
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	70fb      	strb	r3, [r7, #3]
    : adc_callback {adc_callback}
    , adc_injected_callback {adc_injected_callback}
    , qty_channel  {qty_channel}
    , time_refresh {time_refresh}
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fb23 	bl	8001308 <_ZN14TickSubscriberC1Ev>
 8001cc2:	4a70      	ldr	r2, [pc, #448]	; (8001e84 <_ZN4ADC_C1ER9InterruptS1_ht+0x1d8>)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	78fa      	ldrb	r2, [r7, #3]
 8001cd8:	741a      	strb	r2, [r3, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8b3a      	ldrh	r2, [r7, #24]
 8001cde:	825a      	strh	r2, [r3, #18]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	829a      	strh	r2, [r3, #20]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	331e      	adds	r3, #30
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	821a      	strh	r2, [r3, #16]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3330      	adds	r3, #48	; 0x30
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
 8001d04:	821a      	strh	r2, [r3, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3342      	adds	r3, #66	; 0x42
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
 8001d10:	609a      	str	r2, [r3, #8]
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	821a      	strh	r2, [r3, #16]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3354      	adds	r3, #84	; 0x54
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f009 f96e 	bl	800b000 <memset>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	338e      	adds	r3, #142	; 0x8e
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	821a      	strh	r2, [r3, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	33a0      	adds	r3, #160	; 0xa0
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	821a      	strh	r2, [r3, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	33b2      	adds	r3, #178	; 0xb2
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	821a      	strh	r2, [r3, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	33c4      	adds	r3, #196	; 0xc4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	821a      	strh	r2, [r3, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2214      	movs	r2, #20
 8001e10:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2214      	movs	r2, #20
 8001e20:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	33e4      	adds	r3, #228	; 0xe4
 8001e38:	68f9      	ldr	r1, [r7, #12]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fede 	bl	8001bfc <_ZN4ADC_13ADC_interruptC1ERS_>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	33ec      	adds	r3, #236	; 0xec
 8001e44:	68f9      	ldr	r1, [r7, #12]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff04 	bl	8001c54 <_ZN4ADC_17ADC_INJ_interruptC1ERS_>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
	{
		subscribed = false;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	711a      	strb	r2, [r3, #4]
		if (time_refresh > 0)
 8001e6a:	8b3b      	ldrh	r3, [r7, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <_ZN4ADC_C1ER9InterruptS1_ht+0x1cc>
		  subscribe();
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fa08 	bl	8001288 <_ZN14TickSubscriber9subscribeEv>
	}
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	0800b11c 	.word	0x0800b11c

08001e88 <_ZN4ADC_14measure_offsetEv>:

	int16_t offset_I_S{0};
	int16_t offset_I_A{0};
	int16_t offset_I_C{0};

	void measure_offset() {
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
		work = false;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <_ZN4ADC_13measure_valueEv>:

	void measure_value() {
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
		work = true;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
	}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <_ZN4ADC_ixEh>:

	uint16_t operator[](uint8_t i) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
		return buffer[i];
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	3308      	adds	r3, #8
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	88db      	ldrh	r3, [r3, #6]
	}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <_ZN4ADC_5valueEh>:

	uint16_t value(uint8_t i) {
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	70fb      	strb	r3, [r7, #3]
		if (i == PS)
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d10a      	bne.n	8001f06 <_ZN4ADC_5valueEh+0x28>
			return arr_current_S[j];
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	330c      	adds	r3, #12
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	e01a      	b.n	8001f3c <_ZN4ADC_5valueEh+0x5e>
		if (i == phase_A)
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d109      	bne.n	8001f20 <_ZN4ADC_5valueEh+0x42>
			return arr_current_A[j];
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001f12:	461a      	mov	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3218      	adds	r2, #24
 8001f18:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	e00d      	b.n	8001f3c <_ZN4ADC_5valueEh+0x5e>
		if (i == phase_C)
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d10a      	bne.n	8001f3c <_ZN4ADC_5valueEh+0x5e>
			return arr_current_C[j];
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	3320      	adds	r3, #32
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	e7ff      	b.n	8001f3c <_ZN4ADC_5valueEh+0x5e>
//		if (i == HV)
//			return h_voltage;
	}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <_ZN4ADC_7currentEv>:

	uint16_t current(){
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
		return r;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8001f54:	b29b      	uxth	r3, r3
	}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <_ZN4ADC_8value_HVEv>:

	uint16_t value_HV() {
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
		return h_voltage;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
	}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <_ZN4ADC_13reset_measureEv>:

	bool is_measure() { return measure; }
	void reset_measure() { measure = false; }
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <_ZN4ADC_11reset_errorEv>:
	bool is_error(){return error;}
	void reset_error(){error = false;}
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <_ZN4ADC_9is_over_sEv>:
	bool is_over_s(){return over_cur_s;}
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <_ZN4ADC_12reset_over_sEv>:
	void reset_over_s(){over_cur_s = false;}
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <_ZN4ADC_9is_over_aEv>:
	bool is_over_a(){return over_cur_a;}
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 308a 	ldrb.w	r3, [r3, #138]	; 0x8a
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr

08001ff6 <_ZN4ADC_12reset_over_aEv>:
	void reset_over_a(){over_cur_a = false;}
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <_ZN4ADC_9is_over_cEv>:
	bool is_over_c(){return over_cur_c;}
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 308b 	ldrb.w	r3, [r3, #139]	; 0x8b
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <_ZN4ADC_12reset_over_cEv>:
	void reset_over_c(){over_cur_c = false;}
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <_ZN4ADC_11is_error_HVEv>:
	bool is_error_HV(){return error_HV;}
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <_ZN4ADC_14reset_error_HVEv>:
	void reset_error_HV(){error_HV = false;}
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <_ZN4ADC_7what_KmEt>:
	void what_Km(uint16_t k) {Km_check = k > 50 ? true : false;}
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	2b32      	cmp	r3, #50	; 0x32
 8002084:	bf8c      	ite	hi
 8002086:	2301      	movhi	r3, #1
 8002088:	2300      	movls	r3, #0
 800208a:	b2da      	uxtb	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <_ZN4ADC_6notifyEv>:

	void notify(){
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
		if (time++ >= time_refresh) {
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	8a9b      	ldrh	r3, [r3, #20]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	b291      	uxth	r1, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	8291      	strh	r1, [r2, #20]
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	8a52      	ldrh	r2, [r2, #18]
 80020b4:	4293      	cmp	r3, r2
 80020b6:	bf2c      	ite	cs
 80020b8:	2301      	movcs	r3, #1
 80020ba:	2300      	movcc	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00b      	beq.n	80020da <_ZN4ADC_6notifyEv+0x3e>
		   time = 0;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	829a      	strh	r2, [r3, #20]
		   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)buffer, qty_channel);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f103 0116 	add.w	r1, r3, #22
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7c1b      	ldrb	r3, [r3, #16]
 80020d2:	461a      	mov	r2, r3
 80020d4:	480d      	ldr	r0, [pc, #52]	; (800210c <_ZN4ADC_6notifyEv+0x70>)
 80020d6:	f003 fc03 	bl	80058e0 <HAL_ADC_Start_DMA>
		}
		if( not time % 100 and not work)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	8a9b      	ldrh	r3, [r3, #20]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf0c      	ite	eq
 80020e2:	2301      	moveq	r3, #1
 80020e4:	2300      	movne	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <_ZN4ADC_6notifyEv+0x66>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80020f2:	f083 0301 	eor.w	r3, r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <_ZN4ADC_6notifyEv+0x66>
			HAL_ADCEx_InjectedStart_IT(&hadc2);
 80020fc:	4804      	ldr	r0, [pc, #16]	; (8002110 <_ZN4ADC_6notifyEv+0x74>)
 80020fe:	f004 f83d 	bl	800617c <HAL_ADCEx_InjectedStart_IT>
	}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000108 	.word	0x20000108
 8002110:	20000138 	.word	0x20000138

08002114 <_ZN4ADC_15set_max_currentEt>:

	void set_max_current(uint16_t v){
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
		max_current = v;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <_ZN4ADC_21set_max_current_phaseEt>:

	void set_max_current_phase(uint16_t v){
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	807b      	strh	r3, [r7, #2]
		max_current_phase = v;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	887a      	ldrh	r2, [r7, #2]
 8002142:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
	}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <HAL_ADC_ConvCpltCallback>:
};

Interrupt adc_callback;
Interrupt adc_injected_callback;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc){
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1) //check if the interrupt comes from ACD1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_ADC_ConvCpltCallback+0x20>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d102      	bne.n	8002168 <HAL_ADC_ConvCpltCallback+0x18>
	{
		adc_callback.interrupt();
 8002162:	4804      	ldr	r0, [pc, #16]	; (8002174 <HAL_ADC_ConvCpltCallback+0x24>)
 8002164:	f7ff f9b6 	bl	80014d4 <_ZN9Interrupt9interruptEv>
	}
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40012400 	.word	0x40012400
 8002174:	20000350 	.word	0x20000350

08002178 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a04      	ldr	r2, [pc, #16]	; (8002198 <HAL_ADCEx_InjectedConvCpltCallback+0x20>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d102      	bne.n	8002190 <HAL_ADCEx_InjectedConvCpltCallback+0x18>
	{
		adc_injected_callback.interrupt();
 800218a:	4804      	ldr	r0, [pc, #16]	; (800219c <HAL_ADCEx_InjectedConvCpltCallback+0x24>)
 800218c:	f7ff f9a2 	bl	80014d4 <_ZN9Interrupt9interruptEv>
	}
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40012800 	.word	0x40012800
 800219c:	20000354 	.word	0x20000354

080021a0 <_ZN3PinC1EP12GPIO_TypeDeft>:
	GPIO_TypeDef* port;
	uint16_t n;

public:

	Pin (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
	    port = GPIOx;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	601a      	str	r2, [r3, #0]
	    n = GPIO_Pin;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	809a      	strh	r2, [r3, #4]
	  }
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <_ZN3Pin3setEv>:

	  Pin(){}

	  void set()   {HAL_GPIO_WritePin(port, n, GPIO_PIN_SET);}
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	889b      	ldrh	r3, [r3, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	4619      	mov	r1, r3
 80021da:	f005 f9bc 	bl	8007556 <HAL_GPIO_WritePin>
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_ZN3Pin5clearEv>:
	  void clear() {HAL_GPIO_WritePin (port, n, GPIO_PIN_RESET);}
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	889b      	ldrh	r3, [r3, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	4619      	mov	r1, r3
 80021fa:	f005 f9ac 	bl	8007556 <HAL_GPIO_WritePin>
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <_ZN3Pin6is_setEv>:
	  bool is_set(){return HAL_GPIO_ReadPin(port, n);}
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	889b      	ldrh	r3, [r3, #4]
 8002216:	4619      	mov	r1, r3
 8002218:	4610      	mov	r0, r2
 800221a:	f005 f985 	bl	8007528 <HAL_GPIO_ReadPin>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf14      	ite	ne
 8002224:	2301      	movne	r3, #1
 8002226:	2300      	moveq	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <_ZN3PinaSEb>:

	  void toggle() {
		  HAL_GPIO_TogglePin(port, n);
	  }

	  bool operator=(bool v)
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	70fb      	strb	r3, [r7, #3]
	  {
	      v ? set() : clear();
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <_ZN3PinaSEb+0x1a>
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ffbe 	bl	80021c6 <_ZN3Pin3setEv>
 800224a:	e002      	b.n	8002252 <_ZN3PinaSEb+0x20>
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ffca 	bl	80021e6 <_ZN3Pin5clearEv>
	      return v;
 8002252:	78fb      	ldrb	r3, [r7, #3]
	  }
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_ZN3PincvbEv>:
	  {
	     if (v)
	        toggle();
	  }

	  operator bool() {return is_set();}
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ffce 	bl	8002206 <_ZN3Pin6is_setEv>
 800226a:	4603      	mov	r3, r0
 800226c:	4618      	mov	r0, r3
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_ZN3NTCC1Ev>:
    float T_formula; //25 градусов в Кельвин.
    float Temp_formula;

public:

    NTC()
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    {
      R_formula = 10000;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <_ZN3NTCC1Ev+0x20>)
 8002280:	605a      	str	r2, [r3, #4]
      T_formula  =298.15;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <_ZN3NTCC1Ev+0x24>)
 8002286:	609a      	str	r2, [r3, #8]
    }
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	461c4000 	.word	0x461c4000
 8002298:	43951333 	.word	0x43951333

0800229c <_ZN3NTCclEt>:

    uint16_t operator() (uint16_t adc)
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
    {
      //Вычисление температуры в К датчика
        Om_float = (float)4095 - adc;
 80022a8:	887b      	ldrh	r3, [r7, #2]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fd0a 	bl	8000cc4 <__aeabi_i2f>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4619      	mov	r1, r3
 80022b4:	482d      	ldr	r0, [pc, #180]	; (800236c <_ZN3NTCclEt+0xd0>)
 80022b6:	f7fe fc4f 	bl	8000b58 <__aeabi_fsub>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	601a      	str	r2, [r3, #0]
        Om_float = adc / Om_float;
 80022c2:	887b      	ldrh	r3, [r7, #2]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe fcfd 	bl	8000cc4 <__aeabi_i2f>
 80022ca:	4602      	mov	r2, r0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	4610      	mov	r0, r2
 80022d4:	f7fe fdfe 	bl	8000ed4 <__aeabi_fdiv>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	601a      	str	r2, [r3, #0]
        Om_float = Om_float * RESESTIVE_TEMPERATUR_SCHOULDER;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4922      	ldr	r1, [pc, #136]	; (8002370 <_ZN3NTCclEt+0xd4>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fd40 	bl	8000d6c <__aeabi_fmul>
 80022ec:	4603      	mov	r3, r0
 80022ee:	461a      	mov	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	601a      	str	r2, [r3, #0]
        //Вычисляем по формуле T1 = 1 / ((ln(R1) – ln(R2)) / B + 1 / T2) температуру.
        Temp_formula = (1 / ( (log1pf(Om_float) - log1pf(R_formula)) / B_T_1_2 + 1 / T_formula));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f007 fd23 	bl	8009d44 <log1pf>
 80022fe:	4604      	mov	r4, r0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	f007 fd1d 	bl	8009d44 <log1pf>
 800230a:	4603      	mov	r3, r0
 800230c:	4619      	mov	r1, r3
 800230e:	4620      	mov	r0, r4
 8002310:	f7fe fc22 	bl	8000b58 <__aeabi_fsub>
 8002314:	4603      	mov	r3, r0
 8002316:	4917      	ldr	r1, [pc, #92]	; (8002374 <_ZN3NTCclEt+0xd8>)
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fddb 	bl	8000ed4 <__aeabi_fdiv>
 800231e:	4603      	mov	r3, r0
 8002320:	461c      	mov	r4, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	4619      	mov	r1, r3
 8002328:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800232c:	f7fe fdd2 	bl	8000ed4 <__aeabi_fdiv>
 8002330:	4603      	mov	r3, r0
 8002332:	4619      	mov	r1, r3
 8002334:	4620      	mov	r0, r4
 8002336:	f7fe fc11 	bl	8000b5c <__addsf3>
 800233a:	4603      	mov	r3, r0
 800233c:	4619      	mov	r1, r3
 800233e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002342:	f7fe fdc7 	bl	8000ed4 <__aeabi_fdiv>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	60da      	str	r2, [r3, #12]
        return (int16_t)Temp_formula - 273;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fee6 	bl	8001124 <__aeabi_f2iz>
 8002358:	4603      	mov	r3, r0
 800235a:	b21b      	sxth	r3, r3
 800235c:	b29b      	uxth	r3, r3
 800235e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8002362:	b29b      	uxth	r3, r3
    }
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bd90      	pop	{r4, r7, pc}
 800236c:	457ff000 	.word	0x457ff000
 8002370:	461c4000 	.word	0x461c4000
 8002374:	45790000 	.word	0x45790000

08002378 <HAL_UART_TxCpltCallback>:

Interrupt interrupt_dma;
Interrupt interrupt_uart;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_UART_TxCpltCallback+0x20>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d102      	bne.n	8002390 <HAL_UART_TxCpltCallback+0x18>
		interrupt_dma.interrupt();
 800238a:	4804      	ldr	r0, [pc, #16]	; (800239c <HAL_UART_TxCpltCallback+0x24>)
 800238c:	f7ff f8a2 	bl	80014d4 <_ZN9Interrupt9interruptEv>
	}
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40004800 	.word	0x40004800
 800239c:	20000358 	.word	0x20000358

080023a0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <HAL_UARTEx_RxEventCallback+0x24>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d102      	bne.n	80023bc <HAL_UARTEx_RxEventCallback+0x1c>
		interrupt_uart.interrupt();
 80023b6:	4804      	ldr	r0, [pc, #16]	; (80023c8 <HAL_UARTEx_RxEventCallback+0x28>)
 80023b8:	f7ff f88c 	bl	80014d4 <_ZN9Interrupt9interruptEv>
	}
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40004800 	.word	0x40004800
 80023c8:	2000035c 	.word	0x2000035c

080023cc <_ZN9ContactorC1ER4ADC_R7ServiceI7In_data8Out_dataE>:
	bool on_off{false};
	bool enable{false};

public:

	Contactor(ADC_& adc, Service<In_data, Out_data>& service) : adc{adc}, service{service} {}
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3308      	adds	r3, #8
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe ff9f 	bl	800132c <_ZN5TimerC1Ev>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	761a      	strb	r2, [r3, #24]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	765a      	strb	r2, [r3, #25]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	769a      	strb	r2, [r3, #26]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_ZN9Contactor5startEv>:

	void start(){
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
		on_off = true;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	765a      	strb	r2, [r3, #25]
		enable = false;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	769a      	strb	r2, [r3, #26]
		timer.stop();
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3308      	adds	r3, #8
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff f811 	bl	800144a <_ZN5Timer4stopEv>
	}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <_ZN9Contactor4stopEv>:

	void stop(){
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
		TIM4->CCR1 = 0;
 8002438:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <_ZN9Contactor4stopEv+0x34>)
 800243a:	2200      	movs	r2, #0
 800243c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800243e:	2100      	movs	r1, #0
 8002440:	4809      	ldr	r0, [pc, #36]	; (8002468 <_ZN9Contactor4stopEv+0x38>)
 8002442:	f005 ff59 	bl	80082f8 <HAL_TIM_PWM_Stop>
		enable = false;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	769a      	strb	r2, [r3, #26]
		on_off = false;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	765a      	strb	r2, [r3, #25]
		timer.stop();
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3308      	adds	r3, #8
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fff7 	bl	800144a <_ZN5Timer4stopEv>
	}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40000800 	.word	0x40000800
 8002468:	2000023c 	.word	0x2000023c

0800246c <_ZN9Contactor5is_onEv>:

	bool is_on() {
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
		return on;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e1b      	ldrb	r3, [r3, #24]
	}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr
	...

08002484 <_ZN9ContactorclEv>:

	void operator()(){
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
		if(on_off and not enable and service.outData.high_voltage >= 300) {
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7e5b      	ldrb	r3, [r3, #25]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d042      	beq.n	800251a <_ZN9ContactorclEv+0x96>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	7e9b      	ldrb	r3, [r3, #26]
 8002498:	f083 0301 	eor.w	r3, r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d03b      	beq.n	800251a <_ZN9ContactorclEv+0x96>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80024aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80024ae:	d334      	bcc.n	800251a <_ZN9ContactorclEv+0x96>
			HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80024b0:	2100      	movs	r1, #0
 80024b2:	4836      	ldr	r0, [pc, #216]	; (800258c <_ZN9ContactorclEv+0x108>)
 80024b4:	f005 fe66 	bl	8008184 <HAL_TIM_PWM_Start>
			TIM4->CCR1 = 1799;
 80024b8:	4b35      	ldr	r3, [pc, #212]	; (8002590 <_ZN9ContactorclEv+0x10c>)
 80024ba:	f240 7207 	movw	r2, #1799	; 0x707
 80024be:	635a      	str	r2, [r3, #52]	; 0x34
			if(is_on() and not timer.isCount()) {
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ffd3 	bl	800246c <_ZN9Contactor5is_onEv>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00c      	beq.n	80024e6 <_ZN9ContactorclEv+0x62>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3308      	adds	r3, #8
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe ffe7 	bl	80014a4 <_ZN5Timer7isCountEv>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f083 0301 	eor.w	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <_ZN9ContactorclEv+0x62>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <_ZN9ContactorclEv+0x64>
 80024e6:	2300      	movs	r3, #0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <_ZN9ContactorclEv+0x76>
				timer.start(1000);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3308      	adds	r3, #8
 80024f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe ff7b 	bl	80013f0 <_ZN5Timer5startEm>
			}

			if(timer.done()){
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3308      	adds	r3, #8
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe ffb2 	bl	8001468 <_ZN5Timer4doneEv>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <_ZN9ContactorclEv+0x96>
				timer.stop();
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3308      	adds	r3, #8
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe ff9b 	bl	800144a <_ZN5Timer4stopEv>
				enable = true;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	769a      	strb	r2, [r3, #26]
			}
		}

		if(enable){
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7e9b      	ldrb	r3, [r3, #26]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d023      	beq.n	800256a <_ZN9ContactorclEv+0xe6>
			if(service.outData.voltage_board > 240) TIM4->CCR1 = 900;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800252a:	2bf0      	cmp	r3, #240	; 0xf0
 800252c:	d904      	bls.n	8002538 <_ZN9ContactorclEv+0xb4>
 800252e:	4b18      	ldr	r3, [pc, #96]	; (8002590 <_ZN9ContactorclEv+0x10c>)
 8002530:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002534:	635a      	str	r2, [r3, #52]	; 0x34
 8002536:	e018      	b.n	800256a <_ZN9ContactorclEv+0xe6>
			else if (service.outData.voltage_board < 200) TIM4->CCR1 = 1799;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8002540:	2bc7      	cmp	r3, #199	; 0xc7
 8002542:	d804      	bhi.n	800254e <_ZN9ContactorclEv+0xca>
 8002544:	4b12      	ldr	r3, [pc, #72]	; (8002590 <_ZN9ContactorclEv+0x10c>)
 8002546:	f240 7207 	movw	r2, #1799	; 0x707
 800254a:	635a      	str	r2, [r3, #52]	; 0x34
 800254c:	e00d      	b.n	800256a <_ZN9ContactorclEv+0xe6>
			else
				TIM4->CCR1 = 5220 - 18 * service.outData.voltage_board;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8002556:	461a      	mov	r2, r3
 8002558:	f06f 0311 	mvn.w	r3, #17
 800255c:	fb03 f302 	mul.w	r3, r3, r2
 8002560:	f503 53a3 	add.w	r3, r3, #5216	; 0x1460
 8002564:	3304      	adds	r3, #4
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <_ZN9ContactorclEv+0x10c>)
 8002568:	6353      	str	r3, [r2, #52]	; 0x34
		}

		on = HAL_GPIO_ReadPin(GPIOD, Contactor_Pin);
 800256a:	2104      	movs	r1, #4
 800256c:	4809      	ldr	r0, [pc, #36]	; (8002594 <_ZN9ContactorclEv+0x110>)
 800256e:	f004 ffdb 	bl	8007528 <HAL_GPIO_ReadPin>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2da      	uxtb	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	761a      	strb	r2, [r3, #24]
	}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000023c 	.word	0x2000023c
 8002590:	40000800 	.word	0x40000800
 8002594:	40011400 	.word	0x40011400

08002598 <_ZN9Convertor14TIM3_interruptC1ERS_>:

	using Parent = Convertor;

	struct TIM3_interrupt: Interrupting {
		Parent &parent;
		TIM3_interrupt(Parent &parent) :
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
				parent(parent) {
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fb19 	bl	8001bdc <_ZN12InterruptingC1Ev>
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <_ZN9Convertor14TIM3_interruptC1ERS_+0x38>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	605a      	str	r2, [r3, #4]
			parent.period_callback.subscribe(this);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe ff7b 	bl	80014ba <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	0800b0f8 	.word	0x0800b0f8

080025d4 <_ZN9Convertor14TIM3_interrupt9interruptEv>:
		void interrupt() override {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
			parent.period_interrupt();
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f831 	bl	8002648 <_ZN9Convertor16period_interruptEv>
		}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <_ZN9Convertor24adc_comparator_interruptC1ERS_>:
	} tim3_interrupt { *this };

	struct adc_comparator_interrupt: Interrupting {
		Parent &parent;
		adc_comparator_interrupt(Parent &parent) :
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
				parent(parent) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff faed 	bl	8001bdc <_ZN12InterruptingC1Ev>
 8002602:	4a09      	ldr	r2, [pc, #36]	; (8002628 <_ZN9Convertor24adc_comparator_interruptC1ERS_+0x38>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	605a      	str	r2, [r3, #4]
			parent.adc_comparator_callback.subscribe(this);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe ff4f 	bl	80014ba <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	0800b0ec 	.word	0x0800b0ec

0800262c <_ZN9Convertor24adc_comparator_interrupt9interruptEv>:
		void interrupt() override {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
			parent.comparator_interrupt();
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4618      	mov	r0, r3
 800263a:	f000 f879 	bl	8002730 <_ZN9Convertor20comparator_interruptEv>
		}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <_ZN9Convertor16period_interruptEv>:
	} adc_comparator_ { *this };

	void period_interrupt(){
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

		TIM1->CCR1 = Km * sin_table[k++] / 1000;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800265c:	1c59      	adds	r1, r3, #1
 800265e:	b2c8      	uxtb	r0, r1
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	f881 00a1 	strb.w	r0, [r1, #161]	; 0xa1
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	333c      	adds	r3, #60	; 0x3c
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	440b      	add	r3, r1
 800266e:	889b      	ldrh	r3, [r3, #4]
 8002670:	fb03 f302 	mul.w	r3, r3, r2
 8002674:	4a2b      	ldr	r2, [pc, #172]	; (8002724 <_ZN9Convertor16period_interruptEv+0xdc>)
 8002676:	492c      	ldr	r1, [pc, #176]	; (8002728 <_ZN9Convertor16period_interruptEv+0xe0>)
 8002678:	fba1 1303 	umull	r1, r3, r1, r3
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = Km * sin_table[m++] / 1000;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800268c:	1c59      	adds	r1, r3, #1
 800268e:	b2c8      	uxtb	r0, r1
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	f881 00a2 	strb.w	r0, [r1, #162]	; 0xa2
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	333c      	adds	r3, #60	; 0x3c
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	440b      	add	r3, r1
 800269e:	889b      	ldrh	r3, [r3, #4]
 80026a0:	fb03 f302 	mul.w	r3, r3, r2
 80026a4:	4a1f      	ldr	r2, [pc, #124]	; (8002724 <_ZN9Convertor16period_interruptEv+0xdc>)
 80026a6:	4920      	ldr	r1, [pc, #128]	; (8002728 <_ZN9Convertor16period_interruptEv+0xe0>)
 80026a8:	fba1 1303 	umull	r1, r3, r1, r3
 80026ac:	099b      	lsrs	r3, r3, #6
 80026ae:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = Km * sin_table[n++] / 1000;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80026bc:	1c59      	adds	r1, r3, #1
 80026be:	b2c8      	uxtb	r0, r1
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	f881 00a3 	strb.w	r0, [r1, #163]	; 0xa3
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	333c      	adds	r3, #60	; 0x3c
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	440b      	add	r3, r1
 80026ce:	889b      	ldrh	r3, [r3, #4]
 80026d0:	fb03 f302 	mul.w	r3, r3, r2
 80026d4:	4a13      	ldr	r2, [pc, #76]	; (8002724 <_ZN9Convertor16period_interruptEv+0xdc>)
 80026d6:	4914      	ldr	r1, [pc, #80]	; (8002728 <_ZN9Convertor16period_interruptEv+0xe0>)
 80026d8:	fba1 1303 	umull	r1, r3, r1, r3
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	63d3      	str	r3, [r2, #60]	; 0x3c

		if (k >= qty_point) {k = 0;}
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80026e6:	2b11      	cmp	r3, #17
 80026e8:	d903      	bls.n	80026f2 <_ZN9Convertor16period_interruptEv+0xaa>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		if (m >= qty_point) {m = 0;}
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80026f8:	2b11      	cmp	r3, #17
 80026fa:	d903      	bls.n	8002704 <_ZN9Convertor16period_interruptEv+0xbc>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		if (n >= qty_point) {n = 0;}
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800270a:	2b11      	cmp	r3, #17
 800270c:	d903      	bls.n	8002716 <_ZN9Convertor16period_interruptEv+0xce>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

//		TIM3->ARR = (div_f / (frequency)) * 10 - 1;

		HAL_ADCEx_InjectedStart_IT(&hadc2);
 8002716:	4805      	ldr	r0, [pc, #20]	; (800272c <_ZN9Convertor16period_interruptEv+0xe4>)
 8002718:	f003 fd30 	bl	800617c <HAL_ADCEx_InjectedStart_IT>

	}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40012c00 	.word	0x40012c00
 8002728:	10624dd3 	.word	0x10624dd3
 800272c:	20000138 	.word	0x20000138

08002730 <_ZN9Convertor20comparator_interruptEv>:

	void comparator_interrupt() {
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

	}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
	...

08002744 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptSA_R3PinSC_SC_SC_SC_SC_SC_SC_SC_>:

public:

	Convertor(ADC_& adc, Service<In_data, Out_data>& service, Contactor& contactor, Interrupt& period_callback, Interrupt& adc_comparator_callback
 8002744:	b5b0      	push	{r4, r5, r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
			, Pin& led_red, Pin& led_green, Pin& ventilator, Pin& unload, Pin& condens, Pin& TD_DM, Pin& SP, Pin& Start, Pin& Motor)
	: adc{adc}, service{service}, contactor{contactor}, period_callback{period_callback}, adc_comparator_callback{adc_comparator_callback}
	, led_red{led_red}, led_green{led_green}, ventilator{ventilator}, unload{unload}, condens{condens}, TD_DM{TD_DM}, SP{SP}, Start{Start}, Motor{Motor}
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a3a      	ldr	r2, [r7, #32]
 800276e:	611a      	str	r2, [r3, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002774:	615a      	str	r2, [r3, #20]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800277a:	619a      	str	r2, [r3, #24]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002780:	61da      	str	r2, [r3, #28]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002786:	621a      	str	r2, [r3, #32]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800278c:	625a      	str	r2, [r3, #36]	; 0x24
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002798:	62da      	str	r2, [r3, #44]	; 0x2c
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027a4:	635a      	str	r2, [r3, #52]	; 0x34
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027aa:	639a      	str	r2, [r3, #56]	; 0x38
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	333c      	adds	r3, #60	; 0x3c
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fdbb 	bl	800132c <_ZN5TimerC1Ev>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	334c      	adds	r3, #76	; 0x4c
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fdb6 	bl	800132c <_ZN5TimerC1Ev>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	335c      	adds	r3, #92	; 0x5c
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fdb1 	bl	800132c <_ZN5TimerC1Ev>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	336c      	adds	r3, #108	; 0x6c
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fdac 	bl	800132c <_ZN5TimerC1Ev>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4a4b      	ldr	r2, [pc, #300]	; (8002904 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptSA_R3PinSC_SC_SC_SC_SC_SC_SC_SC_+0x1c0>)
 80027d8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 80027dc:	4615      	mov	r5, r2
 80027de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027e6:	682b      	ldr	r3, [r5, #0]
 80027e8:	6023      	str	r3, [r4, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2206      	movs	r2, #6
 80027fe:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	220c      	movs	r2, #12
 8002806:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2205      	movs	r2, #5
 800280e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f240 427e 	movw	r2, #1150	; 0x47e
 8002818:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2264      	movs	r2, #100	; 0x64
 8002820:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2219      	movs	r2, #25
 8002828:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002832:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2202      	movs	r2, #2
 8002842:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2219      	movs	r2, #25
 800286a:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 20bf 	strb.w	r2, [r3, #191]	; 0xbf
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800289c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4a11      	ldr	r2, [pc, #68]	; (8002908 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptSA_R3PinSC_SC_SC_SC_SC_SC_SC_SC_+0x1c4>)
 80028c4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	33cc      	adds	r3, #204	; 0xcc
 80028cc:	68f9      	ldr	r1, [r7, #12]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fe62 	bl	8002598 <_ZN9Convertor14TIM3_interruptC1ERS_>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	33d4      	adds	r3, #212	; 0xd4
 80028d8:	68f9      	ldr	r1, [r7, #12]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fe88 	bl	80025f0 <_ZN9Convertor24adc_comparator_interruptC1ERS_>
	{rerun.time_set = 0; timer_stop.time_set = 0; restart.time_set = 0; stop();}
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	659a      	str	r2, [r3, #88]	; 0x58
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	669a      	str	r2, [r3, #104]	; 0x68
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	679a      	str	r2, [r3, #120]	; 0x78
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 ff66 	bl	80037c4 <_ZN9Convertor4stopEv>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4618      	mov	r0, r3
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bdb0      	pop	{r4, r5, r7, pc}
 8002902:	bf00      	nop
 8002904:	0800b0b0 	.word	0x0800b0b0
 8002908:	000186a0 	.word	0x000186a0

0800290c <_ZN9ConvertorclEv>:

	void operator() (){
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

		service();
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4618      	mov	r0, r3
 800291a:	f001 ff41 	bl	80047a0 <_ZN7ServiceI7In_data8Out_dataEclEv>
		contactor();
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fdae 	bl	8002484 <_ZN9ContactorclEv>

		service.outData.PWM = Km;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	b212      	sxth	r2, r2
 8002934:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
		service.outData.error.on = Start;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689c      	ldr	r4, [r3, #8]
 8002940:	4610      	mov	r0, r2
 8002942:	f7ff fc8b 	bl	800225c <_ZN3PincvbEv>
 8002946:	4603      	mov	r3, r0
 8002948:	461a      	mov	r2, r3
 800294a:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 800294e:	f362 1304 	bfi	r3, r2, #4, #1
 8002952:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
		service.outData.U_phase = U_phase;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	f8b2 20b4 	ldrh.w	r2, [r2, #180]	; 0xb4
 8002960:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		service.outData.error.overheat_c = not bool(TD_DM);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fc77 	bl	800225c <_ZN3PincvbEv>
 800296e:	4603      	mov	r3, r0
 8002970:	4619      	mov	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	f081 0301 	eor.w	r3, r1, #1
 800297a:	b2d9      	uxtb	r1, r3
 800297c:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 8002980:	f361 1386 	bfi	r3, r1, #6, #1
 8002984:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
		service.outData.error.HV_low = /*(service.outData.high_voltage <= 300) or*/ U_stop;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 10b6 	ldrb.w	r1, [r3, #182]	; 0xb6
 8002992:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 8002996:	f361 1345 	bfi	r3, r1, #5, #1
 800299a:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
		service.outData.error.voltage_board_low = (service.outData.voltage_board <= 18);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6892      	ldr	r2, [r2, #8]
 80029aa:	2b12      	cmp	r3, #18
 80029ac:	bf94      	ite	ls
 80029ae:	2301      	movls	r3, #1
 80029b0:	2300      	movhi	r3, #0
 80029b2:	b2d9      	uxtb	r1, r3
 80029b4:	f892 3093 	ldrb.w	r3, [r2, #147]	; 0x93
 80029b8:	f361 0341 	bfi	r3, r1, #1, #1
 80029bc:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
//		service.outData.error.voltage_board_low = false;
//		service.outData.error.HV = adc.is_error_HV();//service.outData.high_voltage >= 850;
		service.outData.max_current_A = min_ARR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 80029ca:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
		service.outData.max_current_C = U_phase_max;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
 80029d8:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e

		service.outData.voltage_board = Kp;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	; 0xa8
 80029e6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		service.outData.max_current = TIM3->ARR;
 80029ea:	4b90      	ldr	r3, [pc, #576]	; (8002c2c <_ZN9ConvertorclEv+0x320>)
 80029ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	b292      	uxth	r2, r2
 80029f4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

		if(service.outData.high_voltage <= 300) U_stop = true;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002a00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002a04:	d804      	bhi.n	8002a10 <_ZN9ConvertorclEv+0x104>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
 8002a0e:	e00f      	b.n	8002a30 <_ZN9ConvertorclEv+0x124>
		else if(service.outData.high_voltage > 300) {U_stop = false; adc.reset_error_HV();}
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002a18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002a1c:	d908      	bls.n	8002a30 <_ZN9ConvertorclEv+0x124>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fb15 	bl	800205a <_ZN4ADC_14reset_error_HVEv>

		if (service.outData.error.overheat_fc |= service.outData.convertor_temp >= 60) {
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002a38:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8002a48:	2b3b      	cmp	r3, #59	; 0x3b
 8002a4a:	bfcc      	ite	gt
 8002a4c:	2301      	movgt	r3, #1
 8002a4e:	2300      	movle	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2a00      	cmp	r2, #0
 8002a5a:	bf14      	ite	ne
 8002a5c:	2201      	movne	r2, #1
 8002a5e:	2200      	moveq	r2, #0
 8002a60:	b2d1      	uxtb	r1, r2
 8002a62:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8002a66:	f361 12c7 	bfi	r2, r1, #7, #1
 8002a6a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8002a6e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002a72:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d010      	beq.n	8002a9e <_ZN9ConvertorclEv+0x192>
			service.outData.error.overheat_fc = service.outData.convertor_temp >= 50;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6892      	ldr	r2, [r2, #8]
 8002a88:	2b31      	cmp	r3, #49	; 0x31
 8002a8a:	bfcc      	ite	gt
 8002a8c:	2301      	movgt	r3, #1
 8002a8e:	2300      	movle	r3, #0
 8002a90:	b2d9      	uxtb	r1, r3
 8002a92:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 8002a96:	f361 13c7 	bfi	r3, r1, #7, #1
 8002a9a:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
		}

		if (cool |= service.outData.convertor_temp >= 40) {
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8002aae:	2b27      	cmp	r3, #39	; 0x27
 8002ab0:	bfcc      	ite	gt
 8002ab2:	2301      	movgt	r3, #1
 8002ab4:	2300      	movle	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf14      	ite	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	2300      	moveq	r3, #0
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00b      	beq.n	8002aec <_ZN9ConvertorclEv+0x1e0>
			cool = service.outData.convertor_temp >= 30;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8002adc:	2b1d      	cmp	r3, #29
 8002ade:	bfcc      	ite	gt
 8002ae0:	2301      	movgt	r3, #1
 8002ae2:	2300      	movle	r3, #0
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		}

		if(enable)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <_ZN9ConvertorclEv+0x1fe>
			ventilator = cool;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a1a      	ldr	r2, [r3, #32]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f7ff fb95 	bl	8002232 <_ZN3PinaSEb>
 8002b08:	e005      	b.n	8002b16 <_ZN9ConvertorclEv+0x20a>
		else
			ventilator = false;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fb8e 	bl	8002232 <_ZN3PinaSEb>

		if(contactor.is_on() and enable) alarm();
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fca6 	bl	800246c <_ZN9Contactor5is_onEv>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <_ZN9ConvertorclEv+0x228>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <_ZN9ConvertorclEv+0x228>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <_ZN9ConvertorclEv+0x22a>
 8002b34:	2300      	movs	r3, #0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <_ZN9ConvertorclEv+0x234>
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fe92 	bl	8003864 <_ZN9Convertor5alarmEv>

		switch(state) {
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d004      	beq.n	8002b52 <_ZN9ConvertorclEv+0x246>
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	f000 81d7 	beq.w	8002efc <_ZN9ConvertorclEv+0x5f0>
			}
	}
} // else if(motor == SYNCHRON) {
			break;
		}
	}
 8002b4e:	f000 bd8c 	b.w	800366a <_ZN9ConvertorclEv+0xd5e>
			motor = Motor;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fb80 	bl	800225c <_ZN3PincvbEv>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
if(motor == ASYNCHRON) {
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d165      	bne.n	8002c3c <_ZN9ConvertorclEv+0x330>
	adc.set_max_current(35);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2123      	movs	r1, #35	; 0x23
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff facc 	bl	8002114 <_ZN4ADC_15set_max_currentEt>
	adc.set_max_current_phase(36);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2124      	movs	r1, #36	; 0x24
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fad5 	bl	8002132 <_ZN4ADC_21set_max_current_phaseEt>
	if (service.outData.high_voltage > 300 and service.outData.high_voltage < 540) {
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002b90:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002b94:	d93f      	bls.n	8002c16 <_ZN9ConvertorclEv+0x30a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002b9e:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8002ba2:	d238      	bcs.n	8002c16 <_ZN9ConvertorclEv+0x30a>
		U_phase_max = ((((service.outData.high_voltage / 20) * 990) / 141) * 115) / 100;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002bac:	4a20      	ldr	r2, [pc, #128]	; (8002c30 <_ZN9ConvertorclEv+0x324>)
 8002bae:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb2:	091b      	lsrs	r3, r3, #4
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f240 33de 	movw	r3, #990	; 0x3de
 8002bbc:	fb03 f302 	mul.w	r3, r3, r2
 8002bc0:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <_ZN9ConvertorclEv+0x328>)
 8002bc2:	fb82 1203 	smull	r1, r2, r2, r3
 8002bc6:	1152      	asrs	r2, r2, #5
 8002bc8:	17db      	asrs	r3, r3, #31
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2273      	movs	r2, #115	; 0x73
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	4a19      	ldr	r2, [pc, #100]	; (8002c38 <_ZN9ConvertorclEv+0x32c>)
 8002bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8002bd8:	1152      	asrs	r2, r2, #5
 8002bda:	17db      	asrs	r3, r3, #31
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		min_ARR = (div_f / ((U_phase_max) * 9)) * 22; // 5/22 = 50/220
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	0092      	lsls	r2, r2, #2
 8002c04:	441a      	add	r2, r3
 8002c06:	0052      	lsls	r2, r2, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8002c14:	e083      	b.n	8002d1e <_ZN9ConvertorclEv+0x412>
		U_phase_max = 220;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	22dc      	movs	r2, #220	; 0xdc
 8002c1a:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		min_ARR = 1100;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f240 424c 	movw	r2, #1100	; 0x44c
 8002c24:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8002c28:	e079      	b.n	8002d1e <_ZN9ConvertorclEv+0x412>
 8002c2a:	bf00      	nop
 8002c2c:	40000400 	.word	0x40000400
 8002c30:	cccccccd 	.word	0xcccccccd
 8002c34:	3a196b1f 	.word	0x3a196b1f
 8002c38:	51eb851f 	.word	0x51eb851f
} else if (motor == SYNCHRON) {
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d16b      	bne.n	8002d1e <_ZN9ConvertorclEv+0x412>
	adc.set_max_current(35);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2123      	movs	r1, #35	; 0x23
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fa61 	bl	8002114 <_ZN4ADC_15set_max_currentEt>
	adc.set_max_current_phase(35);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2123      	movs	r1, #35	; 0x23
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fa6a 	bl	8002132 <_ZN4ADC_21set_max_current_phaseEt>
			unload = true;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	2101      	movs	r1, #1
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fae4 	bl	8002232 <_ZN3PinaSEb>
			if(service.outData.high_voltage > 300 and service.outData.high_voltage < 540) {
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002c72:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002c76:	d949      	bls.n	8002d0c <_ZN9ConvertorclEv+0x400>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002c80:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8002c84:	d242      	bcs.n	8002d0c <_ZN9ConvertorclEv+0x400>
				U_phase_max = ((((service.outData.high_voltage / 20) * 940) / 141) * 115) / 100;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002c8e:	4a97      	ldr	r2, [pc, #604]	; (8002eec <_ZN9ConvertorclEv+0x5e0>)
 8002c90:	fba2 2303 	umull	r2, r3, r2, r3
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f44f 736b 	mov.w	r3, #940	; 0x3ac
 8002c9e:	fb03 f302 	mul.w	r3, r3, r2
 8002ca2:	4a93      	ldr	r2, [pc, #588]	; (8002ef0 <_ZN9ConvertorclEv+0x5e4>)
 8002ca4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ca8:	1152      	asrs	r2, r2, #5
 8002caa:	17db      	asrs	r3, r3, #31
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2273      	movs	r2, #115	; 0x73
 8002cb0:	fb02 f303 	mul.w	r3, r2, r3
 8002cb4:	4a8f      	ldr	r2, [pc, #572]	; (8002ef4 <_ZN9ConvertorclEv+0x5e8>)
 8002cb6:	fb82 1203 	smull	r1, r2, r2, r3
 8002cba:	1152      	asrs	r2, r2, #5
 8002cbc:	17db      	asrs	r3, r3, #31
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
				min_ARR = ( (div_f / (U_phase_max)) * 43) / 55; // 70/53 = 280/212
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
 8002cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cd8:	222b      	movs	r2, #43	; 0x2b
 8002cda:	fb02 f203 	mul.w	r2, r2, r3
 8002cde:	4b86      	ldr	r3, [pc, #536]	; (8002ef8 <_ZN9ConvertorclEv+0x5ec>)
 8002ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce4:	1ad2      	subs	r2, r2, r3
 8002ce6:	0852      	lsrs	r2, r2, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
				if(min_ARR < 362) min_ARR = 362;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002cfa:	f5b3 7fb5 	cmp.w	r3, #362	; 0x16a
 8002cfe:	d20e      	bcs.n	8002d1e <_ZN9ConvertorclEv+0x412>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8002d06:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8002d0a:	e008      	b.n	8002d1e <_ZN9ConvertorclEv+0x412>
				U_phase_max = 215;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	22d7      	movs	r2, #215	; 0xd7
 8002d10:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
				min_ARR = 362;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8002d1a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
			enable = Start and not rerun.isCount() /*and not service.pressure_is_normal()*/
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fa9a 	bl	800225c <_ZN3PincvbEv>
 8002d28:	4603      	mov	r3, r0
					 and not service.outData.error.voltage_board_low and (error < 3) and not U_stop /* and not service.outData.error.contactor*/;
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d049      	beq.n	8002dc2 <_ZN9ConvertorclEv+0x4b6>
			enable = Start and not rerun.isCount() /*and not service.pressure_is_normal()*/
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	334c      	adds	r3, #76	; 0x4c
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fe fbb6 	bl	80014a4 <_ZN5Timer7isCountEv>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f083 0301 	eor.w	r3, r3, #1
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d03e      	beq.n	8002dc2 <_ZN9ConvertorclEv+0x4b6>
					 and not service.outData.error.overheat_fc and not service.outData.error.overheat_c
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002d4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	f083 0301 	eor.w	r3, r3, #1
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d032      	beq.n	8002dc2 <_ZN9ConvertorclEv+0x4b6>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002d64:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f083 0301 	eor.w	r3, r3, #1
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d026      	beq.n	8002dc2 <_ZN9ConvertorclEv+0x4b6>
					 /*and not service.outData.error.HV */and not service.outData.error.HV_low
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002d7c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f083 0301 	eor.w	r3, r3, #1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01a      	beq.n	8002dc2 <_ZN9ConvertorclEv+0x4b6>
					 and not service.outData.error.voltage_board_low and (error < 3) and not U_stop /* and not service.outData.error.contactor*/;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8002d94:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f083 0301 	eor.w	r3, r3, #1
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00e      	beq.n	8002dc2 <_ZN9ConvertorclEv+0x4b6>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d809      	bhi.n	8002dc2 <_ZN9ConvertorclEv+0x4b6>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8002db4:	f083 0301 	eor.w	r3, r3, #1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <_ZN9ConvertorclEv+0x4b6>
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	e000      	b.n	8002dc4 <_ZN9ConvertorclEv+0x4b8>
 8002dc2:	2200      	movs	r2, #0
			enable = Start and not rerun.isCount() /*and not service.pressure_is_normal()*/
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
			if(rerun.done()) rerun.stop();
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	334c      	adds	r3, #76	; 0x4c
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fb4a 	bl	8001468 <_ZN5Timer4doneEv>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d004      	beq.n	8002de4 <_ZN9ConvertorclEv+0x4d8>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	334c      	adds	r3, #76	; 0x4c
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe fb33 	bl	800144a <_ZN5Timer4stopEv>
			if(error >= 3 and not restart.isCount()) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d90c      	bls.n	8002e08 <_ZN9ConvertorclEv+0x4fc>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	336c      	adds	r3, #108	; 0x6c
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe fb56 	bl	80014a4 <_ZN5Timer7isCountEv>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f083 0301 	eor.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <_ZN9ConvertorclEv+0x4fc>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <_ZN9ConvertorclEv+0x4fe>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <_ZN9ConvertorclEv+0x510>
				restart.start(10'000);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	336c      	adds	r3, #108	; 0x6c
 8002e12:	f242 7110 	movw	r1, #10000	; 0x2710
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe faea 	bl	80013f0 <_ZN5Timer5startEm>
			if(error >= 3 and restart.done()) {
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d909      	bls.n	8002e3a <_ZN9ConvertorclEv+0x52e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	336c      	adds	r3, #108	; 0x6c
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe fb1c 	bl	8001468 <_ZN5Timer4doneEv>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <_ZN9ConvertorclEv+0x52e>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <_ZN9ConvertorclEv+0x530>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <_ZN9ConvertorclEv+0x546>
				restart.stop();
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	336c      	adds	r3, #108	; 0x6c
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe fb00 	bl	800144a <_ZN5Timer4stopEv>
				error = 0;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			if (enable){
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d017      	beq.n	8002e8c <_ZN9ConvertorclEv+0x580>
				rerun.stop();
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	334c      	adds	r3, #76	; 0x4c
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fe faf2 	bl	800144a <_ZN5Timer4stopEv>
				contactor.start();
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff facd 	bl	800240a <_ZN9Contactor5startEv>
				if(contactor.is_on()) {
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff faf9 	bl	800246c <_ZN9Contactor5is_onEv>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <_ZN9ConvertorclEv+0x580>
					pusk();
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 fbf9 	bl	8003678 <_ZN9Convertor4puskEv>
					state = State::starting;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
			if (not Start) {
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff f9e3 	bl	800225c <_ZN3PincvbEv>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f083 0301 	eor.w	r3, r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 83e0 	beq.w	8003664 <_ZN9ConvertorclEv+0xd58>
				rerun.stop();
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	334c      	adds	r3, #76	; 0x4c
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe face 	bl	800144a <_ZN5Timer4stopEv>
				rerun.time_set = 0;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	659a      	str	r2, [r3, #88]	; 0x58
				restart.stop();
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	336c      	adds	r3, #108	; 0x6c
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe fac6 	bl	800144a <_ZN5Timer4stopEv>
				restart.time_set = 0;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	679a      	str	r2, [r3, #120]	; 0x78
				error = 0;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
				led_red = false;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff f9ad 	bl	8002232 <_ZN3PinaSEb>
				adc.reset_error();
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff f858 	bl	8001f92 <_ZN4ADC_11reset_errorEv>
				phase = false;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
			break;
 8002eea:	e3bb      	b.n	8003664 <_ZN9ConvertorclEv+0xd58>
 8002eec:	cccccccd 	.word	0xcccccccd
 8002ef0:	3a196b1f 	.word	0x3a196b1f
 8002ef4:	51eb851f 	.word	0x51eb851f
 8002ef8:	29e4129f 	.word	0x29e4129f
			adc.what_Km(Km);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f7ff f8b2 	bl	8002074 <_ZN4ADC_7what_KmEt>
if(motor == ASYNCHRON) {
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	f040 8146 	bne.w	80031a8 <_ZN9ConvertorclEv+0x89c>
	if (service.outData.high_voltage > 400 and service.outData.high_voltage < 540) {
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f24:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002f28:	d93f      	bls.n	8002faa <_ZN9ConvertorclEv+0x69e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f32:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 8002f36:	d238      	bcs.n	8002faa <_ZN9ConvertorclEv+0x69e>
		U_phase_max = ((((service.outData.high_voltage / 20) * 990) / 141) * 115) / 100;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f40:	4a95      	ldr	r2, [pc, #596]	; (8003198 <_ZN9ConvertorclEv+0x88c>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	091b      	lsrs	r3, r3, #4
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f240 33de 	movw	r3, #990	; 0x3de
 8002f50:	fb03 f302 	mul.w	r3, r3, r2
 8002f54:	4a91      	ldr	r2, [pc, #580]	; (800319c <_ZN9ConvertorclEv+0x890>)
 8002f56:	fb82 1203 	smull	r1, r2, r2, r3
 8002f5a:	1152      	asrs	r2, r2, #5
 8002f5c:	17db      	asrs	r3, r3, #31
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2273      	movs	r2, #115	; 0x73
 8002f62:	fb02 f303 	mul.w	r3, r2, r3
 8002f66:	4a8e      	ldr	r2, [pc, #568]	; (80031a0 <_ZN9ConvertorclEv+0x894>)
 8002f68:	fb82 1203 	smull	r1, r2, r2, r3
 8002f6c:	1152      	asrs	r2, r2, #5
 8002f6e:	17db      	asrs	r3, r3, #31
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		min_ARR = (div_f / ((U_phase_max) * 9)) * 22; // 5/22 = 50/220
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8002f86:	4619      	mov	r1, r3
 8002f88:	460b      	mov	r3, r1
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	440b      	add	r3, r1
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	461a      	mov	r2, r3
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	441a      	add	r2, r3
 8002f9a:	0052      	lsls	r2, r2, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8002fa8:	e008      	b.n	8002fbc <_ZN9ConvertorclEv+0x6b0>
		U_phase_max = 220;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	22dc      	movs	r2, #220	; 0xdc
 8002fae:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		min_ARR = 1100;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f240 424c 	movw	r2, #1100	; 0x44c
 8002fb8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
	U_phase = ((((service.outData.high_voltage / 20) * Km) / 141) * 112) / 100; // 31 = 620 / 20; 141 = sqrt(2) * 100; 115 = добавочный
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002fc4:	4a74      	ldr	r2, [pc, #464]	; (8003198 <_ZN9ConvertorclEv+0x88c>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002fd6:	fb03 f302 	mul.w	r3, r3, r2
 8002fda:	4a70      	ldr	r2, [pc, #448]	; (800319c <_ZN9ConvertorclEv+0x890>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	095a      	lsrs	r2, r3, #5
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	461a      	mov	r2, r3
 8002fec:	4b6c      	ldr	r3, [pc, #432]	; (80031a0 <_ZN9ConvertorclEv+0x894>)
 8002fee:	fba3 2302 	umull	r2, r3, r3, r2
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	Km = offset + ((Kp * (div_f / TIM3->ARR) / (service.outData.high_voltage)));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 8003002:	4619      	mov	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800300a:	4618      	mov	r0, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003012:	4b64      	ldr	r3, [pc, #400]	; (80031a4 <_ZN9ConvertorclEv+0x898>)
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	fbb2 f3f3 	udiv	r3, r2, r3
 800301a:	fb03 f300 	mul.w	r3, r3, r0
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6892      	ldr	r2, [r2, #8]
 8003022:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
 8003026:	fbb3 f3f2 	udiv	r3, r3, r2
 800302a:	18ca      	adds	r2, r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	if (TIM3->ARR <= (min_ARR + 10)) {
 8003032:	4b5c      	ldr	r3, [pc, #368]	; (80031a4 <_ZN9ConvertorclEv+0x898>)
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 800303c:	320a      	adds	r2, #10
 800303e:	4293      	cmp	r3, r2
 8003040:	bf94      	ite	ls
 8003042:	2301      	movls	r3, #1
 8003044:	2300      	movhi	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <_ZN9ConvertorclEv+0x748>
		error = 0;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	if (Kp > 12000) {
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800305a:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800305e:	4293      	cmp	r3, r2
 8003060:	d904      	bls.n	800306c <_ZN9ConvertorclEv+0x760>
		Kp = 12000;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8003068:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	if (TIM3->ARR <= min_ARR) {
 800306c:	4b4d      	ldr	r3, [pc, #308]	; (80031a4 <_ZN9ConvertorclEv+0x898>)
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8003076:	4293      	cmp	r3, r2
 8003078:	bf94      	ite	ls
 800307a:	2301      	movls	r3, #1
 800307c:	2300      	movhi	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d040      	beq.n	8003106 <_ZN9ConvertorclEv+0x7fa>
		if (U_phase - U_phase_max > 10) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800308a:	461a      	mov	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b0a      	cmp	r3, #10
 8003096:	dd08      	ble.n	80030aa <_ZN9ConvertorclEv+0x79e>
			Kp--;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80030a8:	e011      	b.n	80030ce <_ZN9ConvertorclEv+0x7c2>
			if((U_phase_max - U_phase > 10))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80030b0:	461a      	mov	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b0a      	cmp	r3, #10
 80030bc:	dd07      	ble.n	80030ce <_ZN9ConvertorclEv+0x7c2>
				Kp++;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80030c4:	3301      	adds	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		if (adc.current() > 200) {
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe ff37 	bl	8001f46 <_ZN4ADC_7currentEv>
 80030d8:	4603      	mov	r3, r0
 80030da:	2bc8      	cmp	r3, #200	; 0xc8
 80030dc:	bf8c      	ite	hi
 80030de:	2301      	movhi	r3, #1
 80030e0:	2300      	movls	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00e      	beq.n	8003106 <_ZN9ConvertorclEv+0x7fa>
			if (Kp > 5000) {
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d907      	bls.n	8003106 <_ZN9ConvertorclEv+0x7fa>
				Kp -= 4;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80030fc:	3b04      	subs	r3, #4
 80030fe:	b29a      	uxth	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	if (adc.current() < 35) {
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe ff1b 	bl	8001f46 <_ZN4ADC_7currentEv>
 8003110:	4603      	mov	r3, r0
 8003112:	2b22      	cmp	r3, #34	; 0x22
 8003114:	bf94      	ite	ls
 8003116:	2301      	movls	r3, #1
 8003118:	2300      	movhi	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00e      	beq.n	800313e <_ZN9ConvertorclEv+0x832>
		if (Kp < 12000) {
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003126:	f642 62df 	movw	r2, #11999	; 0x2edf
 800312a:	4293      	cmp	r3, r2
 800312c:	d807      	bhi.n	800313e <_ZN9ConvertorclEv+0x832>
			Kp++;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003134:	3301      	adds	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	if (TIM3->ARR > (min_ARR + 5)) {
 800313e:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <_ZN9ConvertorclEv+0x898>)
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8003148:	3205      	adds	r2, #5
 800314a:	4293      	cmp	r3, r2
 800314c:	bf8c      	ite	hi
 800314e:	2301      	movhi	r3, #1
 8003150:	2300      	movls	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 81b0 	beq.w	80034ba <_ZN9ConvertorclEv+0xbae>
		if (adc.current() > 75) {
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe fef1 	bl	8001f46 <_ZN4ADC_7currentEv>
 8003164:	4603      	mov	r3, r0
 8003166:	2b4b      	cmp	r3, #75	; 0x4b
 8003168:	bf8c      	ite	hi
 800316a:	2301      	movhi	r3, #1
 800316c:	2300      	movls	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 81a2 	beq.w	80034ba <_ZN9ConvertorclEv+0xbae>
			if (Kp >= 6000) {
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800317c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003180:	4293      	cmp	r3, r2
 8003182:	f240 819a 	bls.w	80034ba <_ZN9ConvertorclEv+0xbae>
				Kp--;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8003196:	e190      	b.n	80034ba <_ZN9ConvertorclEv+0xbae>
 8003198:	cccccccd 	.word	0xcccccccd
 800319c:	3a196b1f 	.word	0x3a196b1f
 80031a0:	51eb851f 	.word	0x51eb851f
 80031a4:	40000400 	.word	0x40000400
} else if(motor == SYNCHRON) {
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f040 8183 	bne.w	80034ba <_ZN9ConvertorclEv+0xbae>
				if (service.outData.high_voltage > 300 and service.outData.high_voltage < 540 and not cold) {
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80031bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80031c0:	d951      	bls.n	8003266 <_ZN9ConvertorclEv+0x95a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80031ca:	f5b3 7f07 	cmp.w	r3, #540	; 0x21c
 80031ce:	d24a      	bcs.n	8003266 <_ZN9ConvertorclEv+0x95a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 80031d6:	f083 0301 	eor.w	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d042      	beq.n	8003266 <_ZN9ConvertorclEv+0x95a>
					U_phase_max = ((((service.outData.high_voltage / 20) * 940) / 141) * 115) / 100;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80031e8:	4a6e      	ldr	r2, [pc, #440]	; (80033a4 <_ZN9ConvertorclEv+0xa98>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	f44f 736b 	mov.w	r3, #940	; 0x3ac
 80031f8:	fb03 f302 	mul.w	r3, r3, r2
 80031fc:	4a6a      	ldr	r2, [pc, #424]	; (80033a8 <_ZN9ConvertorclEv+0xa9c>)
 80031fe:	fb82 1203 	smull	r1, r2, r2, r3
 8003202:	1152      	asrs	r2, r2, #5
 8003204:	17db      	asrs	r3, r3, #31
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2273      	movs	r2, #115	; 0x73
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	4a67      	ldr	r2, [pc, #412]	; (80033ac <_ZN9ConvertorclEv+0xaa0>)
 8003210:	fb82 1203 	smull	r1, r2, r2, r3
 8003214:	1152      	asrs	r2, r2, #5
 8003216:	17db      	asrs	r3, r3, #31
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	b29a      	uxth	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
					min_ARR = ((div_f / (U_phase_max)) * 43) / 55; // 70/53 = 280/212
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
 800322e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003232:	222b      	movs	r2, #43	; 0x2b
 8003234:	fb02 f203 	mul.w	r2, r2, r3
 8003238:	4b5d      	ldr	r3, [pc, #372]	; (80033b0 <_ZN9ConvertorclEv+0xaa4>)
 800323a:	fba3 1302 	umull	r1, r3, r3, r2
 800323e:	1ad2      	subs	r2, r2, r3
 8003240:	0852      	lsrs	r2, r2, #1
 8003242:	4413      	add	r3, r2
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	b29a      	uxth	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
					if(min_ARR < 362) min_ARR = 362;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8003254:	f5b3 7fb5 	cmp.w	r3, #362	; 0x16a
 8003258:	d216      	bcs.n	8003288 <_ZN9ConvertorclEv+0x97c>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8003260:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8003264:	e010      	b.n	8003288 <_ZN9ConvertorclEv+0x97c>
				} else if (not cold){
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800326c:	f083 0301 	eor.w	r3, r3, #1
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d008      	beq.n	8003288 <_ZN9ConvertorclEv+0x97c>
					min_ARR = 362;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800327c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
					U_phase_max = 215;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	22d7      	movs	r2, #215	; 0xd7
 8003284:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
				U_phase = ((((service.outData.high_voltage / 20) * Km) / 141) * 115) / 100; // 31 = 620 / 20; 141 = sqrt(2) * 100; 115 = добавочный
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003290:	4a44      	ldr	r2, [pc, #272]	; (80033a4 <_ZN9ConvertorclEv+0xa98>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	091b      	lsrs	r3, r3, #4
 8003298:	b29b      	uxth	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032a2:	fb03 f302 	mul.w	r3, r3, r2
 80032a6:	4a40      	ldr	r2, [pc, #256]	; (80033a8 <_ZN9ConvertorclEv+0xa9c>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	2273      	movs	r2, #115	; 0x73
 80032b0:	fb02 f303 	mul.w	r3, r2, r3
 80032b4:	4a3d      	ldr	r2, [pc, #244]	; (80033ac <_ZN9ConvertorclEv+0xaa0>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	b29a      	uxth	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
				U_phase += (U_phase_max - U_phase) * 10 / 50;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8b3 20b4 	ldrh.w	r2, [r3, #180]	; 0xb4
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80032d0:	4619      	mov	r1, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80032d8:	1acb      	subs	r3, r1, r3
 80032da:	4936      	ldr	r1, [pc, #216]	; (80033b4 <_ZN9ConvertorclEv+0xaa8>)
 80032dc:	fb81 0103 	smull	r0, r1, r1, r3
 80032e0:	1049      	asrs	r1, r1, #1
 80032e2:	17db      	asrs	r3, r3, #31
 80032e4:	1acb      	subs	r3, r1, r3
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4413      	add	r3, r2
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
				Km = offset + Kp * (div_f / TIM3->ARR) / (service.outData.high_voltage);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 80032f8:	4619      	mov	r1, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003300:	4618      	mov	r0, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003308:	4b2b      	ldr	r3, [pc, #172]	; (80033b8 <_ZN9ConvertorclEv+0xaac>)
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	fb03 f300 	mul.w	r3, r3, r0
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6892      	ldr	r2, [r2, #8]
 8003318:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
 800331c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003320:	18ca      	adds	r2, r1, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
				if (TIM3->ARR <= (min_ARR + 5)) {
 8003328:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <_ZN9ConvertorclEv+0xaac>)
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8003332:	3205      	adds	r2, #5
 8003334:	4293      	cmp	r3, r2
 8003336:	bf94      	ite	ls
 8003338:	2301      	movls	r3, #1
 800333a:	2300      	movhi	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <_ZN9ConvertorclEv+0xa4a>
					unload = false;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f7fe ff72 	bl	8002232 <_ZN3PinaSEb>
					error = 0;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
				if(TIM3->ARR <= min_ARR) {
 8003356:	4b18      	ldr	r3, [pc, #96]	; (80033b8 <_ZN9ConvertorclEv+0xaac>)
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8003360:	4293      	cmp	r3, r2
 8003362:	bf94      	ite	ls
 8003364:	2301      	movls	r3, #1
 8003366:	2300      	movhi	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d054      	beq.n	8003418 <_ZN9ConvertorclEv+0xb0c>
					if ((U_phase > U_phase_max)) {
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8b3 20b4 	ldrh.w	r2, [r3, #180]	; 0xb4
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800337a:	429a      	cmp	r2, r3
 800337c:	d91e      	bls.n	80033bc <_ZN9ConvertorclEv+0xab0>
						if((U_phase - U_phase_max) > 10)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003384:	461a      	mov	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b0a      	cmp	r3, #10
 8003390:	dd26      	ble.n	80033e0 <_ZN9ConvertorclEv+0xad4>
							Kp--;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80033a2:	e01d      	b.n	80033e0 <_ZN9ConvertorclEv+0xad4>
 80033a4:	cccccccd 	.word	0xcccccccd
 80033a8:	3a196b1f 	.word	0x3a196b1f
 80033ac:	51eb851f 	.word	0x51eb851f
 80033b0:	29e4129f 	.word	0x29e4129f
 80033b4:	66666667 	.word	0x66666667
 80033b8:	40000400 	.word	0x40000400
						if ((U_phase_max - U_phase > 10))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 80033c2:	461a      	mov	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b0a      	cmp	r3, #10
 80033ce:	dd07      	ble.n	80033e0 <_ZN9ConvertorclEv+0xad4>
							Kp++;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80033d6:	3301      	adds	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
					if (adc.current() > 160) {
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fe fdae 	bl	8001f46 <_ZN4ADC_7currentEv>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2ba0      	cmp	r3, #160	; 0xa0
 80033ee:	bf8c      	ite	hi
 80033f0:	2301      	movhi	r3, #1
 80033f2:	2300      	movls	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00e      	beq.n	8003418 <_ZN9ConvertorclEv+0xb0c>
						if (Kp > 1250) {
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003400:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8003404:	4293      	cmp	r3, r2
 8003406:	d907      	bls.n	8003418 <_ZN9ConvertorclEv+0xb0c>
							Kp -= 4;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800340e:	3b04      	subs	r3, #4
 8003410:	b29a      	uxth	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
				if (adc.current() < 35) {
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe fd92 	bl	8001f46 <_ZN4ADC_7currentEv>
 8003422:	4603      	mov	r3, r0
 8003424:	2b22      	cmp	r3, #34	; 0x22
 8003426:	bf94      	ite	ls
 8003428:	2301      	movls	r3, #1
 800342a:	2300      	movhi	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00e      	beq.n	8003450 <_ZN9ConvertorclEv+0xb44>
					if (Kp < 2200) {
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003438:	f640 0297 	movw	r2, #2199	; 0x897
 800343c:	4293      	cmp	r3, r2
 800343e:	d807      	bhi.n	8003450 <_ZN9ConvertorclEv+0xb44>
						Kp++;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003446:	3301      	adds	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
				if (TIM3->ARR > (min_ARR + 5)) {
 8003450:	4b88      	ldr	r3, [pc, #544]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 800345a:	3205      	adds	r2, #5
 800345c:	4293      	cmp	r3, r2
 800345e:	bf8c      	ite	hi
 8003460:	2301      	movhi	r3, #1
 8003462:	2300      	movls	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01b      	beq.n	80034a2 <_ZN9ConvertorclEv+0xb96>
					if (adc.current() > 110) {
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe fd69 	bl	8001f46 <_ZN4ADC_7currentEv>
 8003474:	4603      	mov	r3, r0
 8003476:	2b6e      	cmp	r3, #110	; 0x6e
 8003478:	bf8c      	ite	hi
 800347a:	2301      	movhi	r3, #1
 800347c:	2300      	movls	r3, #0
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00e      	beq.n	80034a2 <_ZN9ConvertorclEv+0xb96>
						if(Kp > 1250) {
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800348a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800348e:	4293      	cmp	r3, r2
 8003490:	d907      	bls.n	80034a2 <_ZN9ConvertorclEv+0xb96>
							Kp--;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
				if (Kp >= 2200) {
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80034a8:	f640 0297 	movw	r2, #2199	; 0x897
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d904      	bls.n	80034ba <_ZN9ConvertorclEv+0xbae>
					Kp = 2200;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f640 0298 	movw	r2, #2200	; 0x898
 80034b6:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
			if (Km >= 990) {
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034c0:	f240 32dd 	movw	r2, #989	; 0x3dd
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d904      	bls.n	80034d2 <_ZN9ConvertorclEv+0xbc6>
				Km = 990;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f240 32de 	movw	r2, #990	; 0x3de
 80034ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			if (timer.done()) {
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	333c      	adds	r3, #60	; 0x3c
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd ffc6 	bl	8001468 <_ZN5Timer4doneEv>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80c2 	beq.w	8003668 <_ZN9ConvertorclEv+0xd5c>
				timer.stop();
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	333c      	adds	r3, #60	; 0x3c
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd ffae 	bl	800144a <_ZN5Timer4stopEv>
				timer.start(time);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 80034fa:	4619      	mov	r1, r3
 80034fc:	4610      	mov	r0, r2
 80034fe:	f7fd ff77 	bl	80013f0 <_ZN5Timer5startEm>
if(motor == ASYNCHRON) {
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8003508:	2b01      	cmp	r3, #1
 800350a:	d134      	bne.n	8003576 <_ZN9ConvertorclEv+0xc6a>
	if (TIM3->ARR != min_ARR) {
 800350c:	4b59      	ldr	r3, [pc, #356]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8003516:	4293      	cmp	r3, r2
 8003518:	bf14      	ite	ne
 800351a:	2301      	movne	r3, #1
 800351c:	2300      	moveq	r3, #0
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80a1 	beq.w	8003668 <_ZN9ConvertorclEv+0xd5c>
		if (TIM3->ARR > 6000) {
 8003526:	4b53      	ldr	r3, [pc, #332]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	f241 7270 	movw	r2, #6000	; 0x1770
 800352e:	4293      	cmp	r3, r2
 8003530:	bf8c      	ite	hi
 8003532:	2301      	movhi	r3, #1
 8003534:	2300      	movls	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <_ZN9ConvertorclEv+0xc3c>
			TIM3->ARR -= 10;
 800353c:	4b4d      	ldr	r3, [pc, #308]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	4a4c      	ldr	r2, [pc, #304]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 8003542:	3b0a      	subs	r3, #10
 8003544:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
 8003546:	e08f      	b.n	8003668 <_ZN9ConvertorclEv+0xd5c>
		} else if (TIM3->ARR > min_ARR) {
 8003548:	4b4a      	ldr	r3, [pc, #296]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 8003552:	4293      	cmp	r3, r2
 8003554:	bf8c      	ite	hi
 8003556:	2301      	movhi	r3, #1
 8003558:	2300      	movls	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <_ZN9ConvertorclEv+0xc60>
			TIM3->ARR -= 4;
 8003560:	4b44      	ldr	r3, [pc, #272]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	4a43      	ldr	r2, [pc, #268]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 8003566:	3b04      	subs	r3, #4
 8003568:	62d3      	str	r3, [r2, #44]	; 0x2c
			break;
 800356a:	e07d      	b.n	8003668 <_ZN9ConvertorclEv+0xd5c>
			TIM3->ARR++;
 800356c:	4b41      	ldr	r3, [pc, #260]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	3201      	adds	r2, #1
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 8003574:	e078      	b.n	8003668 <_ZN9ConvertorclEv+0xd5c>
} else if(motor == SYNCHRON) {
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 800357c:	2b00      	cmp	r3, #0
 800357e:	d173      	bne.n	8003668 <_ZN9ConvertorclEv+0xd5c>
			if(TIM3->ARR != min_ARR) {
 8003580:	4b3c      	ldr	r3, [pc, #240]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 800358a:	4293      	cmp	r3, r2
 800358c:	bf14      	ite	ne
 800358e:	2301      	movne	r3, #1
 8003590:	2300      	moveq	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d067      	beq.n	8003668 <_ZN9ConvertorclEv+0xd5c>
				if(TIM3->ARR > min_ARR) {
 8003598:	4b36      	ldr	r3, [pc, #216]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	f8b2 20c0 	ldrh.w	r2, [r2, #192]	; 0xc0
 80035a2:	4293      	cmp	r3, r2
 80035a4:	bf8c      	ite	hi
 80035a6:	2301      	movhi	r3, #1
 80035a8:	2300      	movls	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d026      	beq.n	80035fe <_ZN9ConvertorclEv+0xcf2>
					if(TIM3->ARR > 624) {
 80035b0:	4b30      	ldr	r3, [pc, #192]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80035b8:	bf8c      	ite	hi
 80035ba:	2301      	movhi	r3, #1
 80035bc:	2300      	movls	r3, #0
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d016      	beq.n	80035f2 <_ZN9ConvertorclEv+0xce6>
						if(TIM3->ARR > 1500) {
 80035c4:	4b2b      	ldr	r3, [pc, #172]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80035cc:	4293      	cmp	r3, r2
 80035ce:	bf8c      	ite	hi
 80035d0:	2301      	movhi	r3, #1
 80035d2:	2300      	movls	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <_ZN9ConvertorclEv+0xcda>
							TIM3->ARR -= 32;
 80035da:	4b26      	ldr	r3, [pc, #152]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	4a25      	ldr	r2, [pc, #148]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 80035e0:	3b20      	subs	r3, #32
 80035e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035e4:	e00f      	b.n	8003606 <_ZN9ConvertorclEv+0xcfa>
							TIM3->ARR -= 3;
 80035e6:	4b23      	ldr	r3, [pc, #140]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	4a22      	ldr	r2, [pc, #136]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 80035ec:	3b03      	subs	r3, #3
 80035ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035f0:	e009      	b.n	8003606 <_ZN9ConvertorclEv+0xcfa>
						TIM3->ARR-=1;
 80035f2:	4b20      	ldr	r3, [pc, #128]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	4a1f      	ldr	r2, [pc, #124]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 80035f8:	3b01      	subs	r3, #1
 80035fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035fc:	e003      	b.n	8003606 <_ZN9ConvertorclEv+0xcfa>
					TIM3->ARR++;
 80035fe:	4b1d      	ldr	r3, [pc, #116]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 8003600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003602:	3201      	adds	r2, #1
 8003604:	62da      	str	r2, [r3, #44]	; 0x2c
				if(TIM3->ARR > 624) {
 8003606:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 800360e:	bf8c      	ite	hi
 8003610:	2301      	movhi	r3, #1
 8003612:	2300      	movls	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <_ZN9ConvertorclEv+0xd18>
					time = 3;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2203      	movs	r2, #3
 800361e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
			break;
 8003622:	e021      	b.n	8003668 <_ZN9ConvertorclEv+0xd5c>
				} else if (TIM3->ARR >= 554) {
 8003624:	4b13      	ldr	r3, [pc, #76]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	f240 2229 	movw	r2, #553	; 0x229
 800362c:	4293      	cmp	r3, r2
 800362e:	bf8c      	ite	hi
 8003630:	2301      	movhi	r3, #1
 8003632:	2300      	movls	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d004      	beq.n	8003644 <_ZN9ConvertorclEv+0xd38>
					time = 6;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2206      	movs	r2, #6
 800363e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
			break;
 8003642:	e011      	b.n	8003668 <_ZN9ConvertorclEv+0xd5c>
				} else if (TIM3->ARR < 554) {
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <_ZN9ConvertorclEv+0xd68>)
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	f240 2229 	movw	r2, #553	; 0x229
 800364c:	4293      	cmp	r3, r2
 800364e:	bf94      	ite	ls
 8003650:	2301      	movls	r3, #1
 8003652:	2300      	movhi	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d006      	beq.n	8003668 <_ZN9ConvertorclEv+0xd5c>
					time = 8;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2208      	movs	r2, #8
 800365e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
			break;
 8003662:	e001      	b.n	8003668 <_ZN9ConvertorclEv+0xd5c>
			break;
 8003664:	bf00      	nop
 8003666:	e000      	b.n	800366a <_ZN9ConvertorclEv+0xd5e>
			break;
 8003668:	bf00      	nop
	}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}
 8003672:	bf00      	nop
 8003674:	40000400 	.word	0x40000400

08003678 <_ZN9Convertor4puskEv>:

	void pusk() {
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

if(motor == ASYNCHRON) {
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 8003686:	2b01      	cmp	r3, #1
 8003688:	d111      	bne.n	80036ae <_ZN9Convertor4puskEv+0x36>
		frequency = 60;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	223c      	movs	r2, #60	; 0x3c
 800368e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		Kp = 6000;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f241 7270 	movw	r2, #6000	; 0x1770
 8003698:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		time = 3;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2203      	movs	r2, #3
 80036a0:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		offset = 35;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2223      	movs	r2, #35	; 0x23
 80036a8:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
 80036ac:	e015      	b.n	80036da <_ZN9Convertor4puskEv+0x62>

} else if(motor == SYNCHRON) {
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 30b7 	ldrb.w	r3, [r3, #183]	; 0xb7
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d110      	bne.n	80036da <_ZN9Convertor4puskEv+0x62>
		frequency = 10;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	220a      	movs	r2, #10
 80036bc:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		Kp = 1140;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f240 4274 	movw	r2, #1140	; 0x474
 80036c6:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		time = 2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2202      	movs	r2, #2
 80036ce:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		offset = 30;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	221e      	movs	r2, #30
 80036d6:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
} // else if(motor == SYNCHRON) {

		Km = 5;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2205      	movs	r2, #5
 80036de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		TIM3->ARR = (div_f / (frequency)) * 10 - 1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	f8b2 20aa 	ldrh.w	r2, [r2, #170]	; 0xaa
 80036ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4a2f      	ldr	r2, [pc, #188]	; (80037b8 <_ZN9Convertor4puskEv+0x140>)
 80036fc:	3b01      	subs	r3, #1
 80036fe:	62d3      	str	r3, [r2, #44]	; 0x2c

		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003700:	2100      	movs	r1, #0
 8003702:	482e      	ldr	r0, [pc, #184]	; (80037bc <_ZN9Convertor4puskEv+0x144>)
 8003704:	f004 fd3e 	bl	8008184 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8003708:	2100      	movs	r1, #0
 800370a:	482c      	ldr	r0, [pc, #176]	; (80037bc <_ZN9Convertor4puskEv+0x144>)
 800370c:	f005 faf0 	bl	8008cf0 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003710:	2104      	movs	r1, #4
 8003712:	482a      	ldr	r0, [pc, #168]	; (80037bc <_ZN9Convertor4puskEv+0x144>)
 8003714:	f004 fd36 	bl	8008184 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8003718:	2104      	movs	r1, #4
 800371a:	4828      	ldr	r0, [pc, #160]	; (80037bc <_ZN9Convertor4puskEv+0x144>)
 800371c:	f005 fae8 	bl	8008cf0 <HAL_TIMEx_PWMN_Start>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003720:	2108      	movs	r1, #8
 8003722:	4826      	ldr	r0, [pc, #152]	; (80037bc <_ZN9Convertor4puskEv+0x144>)
 8003724:	f004 fd2e 	bl	8008184 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8003728:	2108      	movs	r1, #8
 800372a:	4824      	ldr	r0, [pc, #144]	; (80037bc <_ZN9Convertor4puskEv+0x144>)
 800372c:	f005 fae0 	bl	8008cf0 <HAL_TIMEx_PWMN_Start>

		HAL_TIM_Base_Start_IT(&htim3);
 8003730:	4823      	ldr	r0, [pc, #140]	; (80037c0 <_ZN9Convertor4puskEv+0x148>)
 8003732:	f004 fbfb 	bl	8007f2c <HAL_TIM_Base_Start_IT>

		timer.start(time);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8003742:	4619      	mov	r1, r3
 8003744:	4610      	mov	r0, r2
 8003746:	f7fd fe53 	bl	80013f0 <_ZN5Timer5startEm>
		adc.measure_value();
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe fba7 	bl	8001ea2 <_ZN4ADC_13measure_valueEv>

		service.outData.error.current_S = false;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 800375c:	f36f 0300 	bfc	r3, #0, #1
 8003760:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
		service.outData.error.current_A = false;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 800376c:	f36f 0341 	bfc	r3, #1, #1
 8003770:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
		service.outData.error.current_C = false;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 800377c:	f36f 0382 	bfc	r3, #2, #1
 8003780:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
		service.outData.error.phase_break = false;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	f892 3093 	ldrb.w	r3, [r2, #147]	; 0x93
 800378c:	f36f 0300 	bfc	r3, #0, #1
 8003790:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
		service.outData.error.HV = false;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 800379c:	f36f 03c3 	bfc	r3, #3, #1
 80037a0:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92

		led_red = false;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe fd41 	bl	8002232 <_ZN3PinaSEb>
	}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40000400 	.word	0x40000400
 80037bc:	200001ac 	.word	0x200001ac
 80037c0:	200001f4 	.word	0x200001f4

080037c4 <_ZN9Convertor4stopEv>:

	void stop() {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

		TIM1->CCR1 = 0;
 80037cc:	4b22      	ldr	r3, [pc, #136]	; (8003858 <_ZN9Convertor4stopEv+0x94>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR1 = 0;
 80037d2:	4b21      	ldr	r3, [pc, #132]	; (8003858 <_ZN9Convertor4stopEv+0x94>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR1 = 0;
 80037d8:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <_ZN9Convertor4stopEv+0x94>)
 80037da:	2200      	movs	r2, #0
 80037dc:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80037de:	2100      	movs	r1, #0
 80037e0:	481e      	ldr	r0, [pc, #120]	; (800385c <_ZN9Convertor4stopEv+0x98>)
 80037e2:	f004 fd89 	bl	80082f8 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80037e6:	2100      	movs	r1, #0
 80037e8:	481c      	ldr	r0, [pc, #112]	; (800385c <_ZN9Convertor4stopEv+0x98>)
 80037ea:	f005 fb2d 	bl	8008e48 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80037ee:	2104      	movs	r1, #4
 80037f0:	481a      	ldr	r0, [pc, #104]	; (800385c <_ZN9Convertor4stopEv+0x98>)
 80037f2:	f004 fd81 	bl	80082f8 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80037f6:	2104      	movs	r1, #4
 80037f8:	4818      	ldr	r0, [pc, #96]	; (800385c <_ZN9Convertor4stopEv+0x98>)
 80037fa:	f005 fb25 	bl	8008e48 <HAL_TIMEx_PWMN_Stop>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80037fe:	2108      	movs	r1, #8
 8003800:	4816      	ldr	r0, [pc, #88]	; (800385c <_ZN9Convertor4stopEv+0x98>)
 8003802:	f004 fd79 	bl	80082f8 <HAL_TIM_PWM_Stop>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8003806:	2108      	movs	r1, #8
 8003808:	4814      	ldr	r0, [pc, #80]	; (800385c <_ZN9Convertor4stopEv+0x98>)
 800380a:	f005 fb1d 	bl	8008e48 <HAL_TIMEx_PWMN_Stop>

		HAL_TIM_Base_Stop_IT(&htim3);
 800380e:	4814      	ldr	r0, [pc, #80]	; (8003860 <_ZN9Convertor4stopEv+0x9c>)
 8003810:	f004 fbec 	bl	8007fec <HAL_TIM_Base_Stop_IT>
		timer.stop();
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	333c      	adds	r3, #60	; 0x3c
 8003818:	4618      	mov	r0, r3
 800381a:	f7fd fe16 	bl	800144a <_ZN5Timer4stopEv>
		contactor.stop();
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fe04 	bl	8002430 <_ZN9Contactor4stopEv>

		k = 0;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
		m = 6;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2206      	movs	r2, #6
 8003834:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		n = 12;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	220c      	movs	r2, #12
 800383c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

//		TIM3->ARR = (div_f / (frequency)) * 10 - 1;

		state = State::wait;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]

		adc.measure_offset();
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe fb1c 	bl	8001e88 <_ZN4ADC_14measure_offsetEv>

	}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40012c00 	.word	0x40012c00
 800385c:	200001ac 	.word	0x200001ac
 8003860:	200001f4 	.word	0x200001f4

08003864 <_ZN9Convertor5alarmEv>:

	void alarm() {
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
		if((not Start or timer_stop.done()) or not contactor.is_on() /*or service.pressure_is_normal()*/
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003870:	4618      	mov	r0, r3
 8003872:	f7fe fcf3 	bl	800225c <_ZN3PincvbEv>
 8003876:	4603      	mov	r3, r0
 8003878:	f083 0301 	eor.w	r3, r3, #1
 800387c:	b2db      	uxtb	r3, r3
				     or service.outData.error.overheat_fc or service.outData.error.overheat_c
				     or service.outData.error.HV_low /*or service.outData.error.HV*/ or service.outData.error.voltage_board_low
 800387e:	2b00      	cmp	r3, #0
 8003880:	d136      	bne.n	80038f0 <_ZN9Convertor5alarmEv+0x8c>
		if((not Start or timer_stop.done()) or not contactor.is_on() /*or service.pressure_is_normal()*/
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	335c      	adds	r3, #92	; 0x5c
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd fdee 	bl	8001468 <_ZN5Timer4doneEv>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d12e      	bne.n	80038f0 <_ZN9Convertor5alarmEv+0x8c>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe fde8 	bl	800246c <_ZN9Contactor5is_onEv>
 800389c:	4603      	mov	r3, r0
 800389e:	f083 0301 	eor.w	r3, r3, #1
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d123      	bne.n	80038f0 <_ZN9Convertor5alarmEv+0x8c>
				     or service.outData.error.overheat_fc or service.outData.error.overheat_c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80038b0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d11a      	bne.n	80038f0 <_ZN9Convertor5alarmEv+0x8c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80038c2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d111      	bne.n	80038f0 <_ZN9Convertor5alarmEv+0x8c>
				     or service.outData.error.HV_low /*or service.outData.error.HV*/ or service.outData.error.voltage_board_low
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80038d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d108      	bne.n	80038f0 <_ZN9Convertor5alarmEv+0x8c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80038e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <_ZN9Convertor5alarmEv+0x90>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <_ZN9Convertor5alarmEv+0x92>
 80038f4:	2300      	movs	r3, #0
		if((not Start or timer_stop.done()) or not contactor.is_on() /*or service.pressure_is_normal()*/
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d07d      	beq.n	80039f6 <_ZN9Convertor5alarmEv+0x192>
					 )
		{
//			if(service.pressure_is_normal()) error = 0;
			if(not Start and not timer_stop.isCount()) {
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe fcac 	bl	800225c <_ZN3PincvbEv>
 8003904:	4603      	mov	r3, r0
 8003906:	f083 0301 	eor.w	r3, r3, #1
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00c      	beq.n	800392a <_ZN9Convertor5alarmEv+0xc6>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	335c      	adds	r3, #92	; 0x5c
 8003914:	4618      	mov	r0, r3
 8003916:	f7fd fdc5 	bl	80014a4 <_ZN5Timer7isCountEv>
 800391a:	4603      	mov	r3, r0
 800391c:	f083 0301 	eor.w	r3, r3, #1
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <_ZN9Convertor5alarmEv+0xc6>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <_ZN9Convertor5alarmEv+0xc8>
 800392a:	2300      	movs	r3, #0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d006      	beq.n	800393e <_ZN9Convertor5alarmEv+0xda>
				timer_stop.start(1000);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	335c      	adds	r3, #92	; 0x5c
 8003934:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd fd59 	bl	80013f0 <_ZN5Timer5startEm>
			}

			if(timer_stop.done() and not Start) {
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	335c      	adds	r3, #92	; 0x5c
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd fd90 	bl	8001468 <_ZN5Timer4doneEv>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00c      	beq.n	8003968 <_ZN9Convertor5alarmEv+0x104>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe fc82 	bl	800225c <_ZN3PincvbEv>
 8003958:	4603      	mov	r3, r0
 800395a:	f083 0301 	eor.w	r3, r3, #1
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <_ZN9Convertor5alarmEv+0x104>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <_ZN9Convertor5alarmEv+0x106>
 8003968:	2300      	movs	r3, #0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <_ZN9Convertor5alarmEv+0x11a>
				stop();
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ff28 	bl	80037c4 <_ZN9Convertor4stopEv>
				timer_stop.stop();
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	335c      	adds	r3, #92	; 0x5c
 8003978:	4618      	mov	r0, r3
 800397a:	f7fd fd66 	bl	800144a <_ZN5Timer4stopEv>
			}

			if(not contactor.is_on() /*or service.pressure_is_normal()*/
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe fd72 	bl	800246c <_ZN9Contactor5is_onEv>
 8003988:	4603      	mov	r3, r0
 800398a:	f083 0301 	eor.w	r3, r3, #1
 800398e:	b2db      	uxtb	r3, r3
				     or service.outData.error.overheat_fc or service.outData.error.overheat_c
				     or service.outData.error.HV_low /*or service.outData.error.HV*/ or service.outData.error.voltage_board_low) {
 8003990:	2b00      	cmp	r3, #0
 8003992:	d123      	bne.n	80039dc <_ZN9Convertor5alarmEv+0x178>
				     or service.outData.error.overheat_fc or service.outData.error.overheat_c
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800399c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d11a      	bne.n	80039dc <_ZN9Convertor5alarmEv+0x178>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80039ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d111      	bne.n	80039dc <_ZN9Convertor5alarmEv+0x178>
				     or service.outData.error.HV_low /*or service.outData.error.HV*/ or service.outData.error.voltage_board_low) {
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80039c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d108      	bne.n	80039dc <_ZN9Convertor5alarmEv+0x178>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80039d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <_ZN9Convertor5alarmEv+0x17c>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <_ZN9Convertor5alarmEv+0x17e>
 80039e0:	2300      	movs	r3, #0
			if(not contactor.is_on() /*or service.pressure_is_normal()*/
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <_ZN9Convertor5alarmEv+0x192>
				stop();
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff feec 	bl	80037c4 <_ZN9Convertor4stopEv>
				timer_stop.stop();
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	335c      	adds	r3, #92	; 0x5c
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fd fd2a 	bl	800144a <_ZN5Timer4stopEv>
			service.outData.error.phase_break = true;
			//rerun.start(5000);

		}*/

		if(adc.is_error_HV()) {
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fb21 	bl	8002042 <_ZN4ADC_11is_error_HVEv>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d024      	beq.n	8003a50 <_ZN9Convertor5alarmEv+0x1ec>
			adc.reset_error_HV();
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fb25 	bl	800205a <_ZN4ADC_14reset_error_HVEv>
			error++;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8003a16:	3301      	adds	r3, #1
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			led_red = true;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2101      	movs	r1, #1
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fc03 	bl	8002232 <_ZN3PinaSEb>
			stop();
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fec9 	bl	80037c4 <_ZN9Convertor4stopEv>
			service.outData.error.HV = true;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 8003a3a:	f043 0308 	orr.w	r3, r3, #8
 8003a3e:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
			rerun.start(5000);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	334c      	adds	r3, #76	; 0x4c
 8003a46:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fd fcd0 	bl	80013f0 <_ZN5Timer5startEm>
		}

		if(adc.is_over_s() and not service.outData.error.current_S) {
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe faa9 	bl	8001fac <_ZN4ADC_9is_over_sEv>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00d      	beq.n	8003a7c <_ZN9Convertor5alarmEv+0x218>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003a68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f083 0301 	eor.w	r3, r3, #1
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <_ZN9Convertor5alarmEv+0x218>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <_ZN9Convertor5alarmEv+0x21a>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d024      	beq.n	8003acc <_ZN9Convertor5alarmEv+0x268>
			adc.reset_over_s();
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe fa9c 	bl	8001fc4 <_ZN4ADC_12reset_over_sEv>
			error++;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8003a92:	3301      	adds	r3, #1
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			led_red = true;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe fbc5 	bl	8002232 <_ZN3PinaSEb>
			stop();
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff fe8b 	bl	80037c4 <_ZN9Convertor4stopEv>
			service.outData.error.current_S = true;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
			rerun.start(5000);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	334c      	adds	r3, #76	; 0x4c
 8003ac2:	f241 3188 	movw	r1, #5000	; 0x1388
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd fc92 	bl	80013f0 <_ZN5Timer5startEm>
		}

		if(adc.is_over_a() and not service.outData.error.current_A) {
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fa84 	bl	8001fde <_ZN4ADC_9is_over_aEv>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00d      	beq.n	8003af8 <_ZN9Convertor5alarmEv+0x294>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003ae4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f083 0301 	eor.w	r3, r3, #1
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <_ZN9Convertor5alarmEv+0x294>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <_ZN9Convertor5alarmEv+0x296>
 8003af8:	2300      	movs	r3, #0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d024      	beq.n	8003b48 <_ZN9Convertor5alarmEv+0x2e4>
			adc.reset_over_a();
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fe fa77 	bl	8001ff6 <_ZN4ADC_12reset_over_aEv>
			error++;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8003b0e:	3301      	adds	r3, #1
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			led_red = true;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fe fb87 	bl	8002232 <_ZN3PinaSEb>
			stop();
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f7ff fe4d 	bl	80037c4 <_ZN9Convertor4stopEv>
			service.outData.error.current_A = true;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 8003b32:	f043 0302 	orr.w	r3, r3, #2
 8003b36:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
			rerun.start(5000);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	334c      	adds	r3, #76	; 0x4c
 8003b3e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fd fc54 	bl	80013f0 <_ZN5Timer5startEm>
		}

		if(adc.is_over_c() and not service.outData.error.current_C) {
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe fa5f 	bl	8002010 <_ZN4ADC_9is_over_cEv>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <_ZN9Convertor5alarmEv+0x310>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003b60:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f083 0301 	eor.w	r3, r3, #1
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <_ZN9Convertor5alarmEv+0x310>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <_ZN9Convertor5alarmEv+0x312>
 8003b74:	2300      	movs	r3, #0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d024      	beq.n	8003bc4 <_ZN9Convertor5alarmEv+0x360>
			adc.reset_over_c();
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe fa52 	bl	8002028 <_ZN4ADC_12reset_over_cEv>
			error++;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
			led_red = true;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fe fb49 	bl	8002232 <_ZN3PinaSEb>
			stop();
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fe0f 	bl	80037c4 <_ZN9Convertor4stopEv>
			service.outData.error.current_C = true;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	f892 3092 	ldrb.w	r3, [r2, #146]	; 0x92
 8003bae:	f043 0304 	orr.w	r3, r3, #4
 8003bb2:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
			rerun.start(5000);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	334c      	adds	r3, #76	; 0x4c
 8003bba:	f241 3188 	movw	r1, #5000	; 0x1388
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fd fc16 	bl	80013f0 <_ZN5Timer5startEm>
		}

		adc.reset_measure();
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fe f9d5 	bl	8001f78 <_ZN4ADC_13reset_measureEv>
	}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_TIM_PeriodElapsedCallback>:
};

Interrupt period_callback;
Interrupt adc_comparator_callback;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3) //check if the interrupt comes from ACD2
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a04      	ldr	r2, [pc, #16]	; (8003bf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d102      	bne.n	8003bf0 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		period_callback.interrupt();
 8003bea:	4804      	ldr	r0, [pc, #16]	; (8003bfc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003bec:	f7fd fc72 	bl	80014d4 <_ZN9Interrupt9interruptEv>
	}
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40000400 	.word	0x40000400
 8003bfc:	20000360 	.word	0x20000360

08003c00 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc){
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC2) //check if the interrupt comes from ACD2
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <HAL_ADC_LevelOutOfWindowCallback+0x20>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d102      	bne.n	8003c18 <HAL_ADC_LevelOutOfWindowCallback+0x18>
	{
		adc_comparator_callback.interrupt();
 8003c12:	4804      	ldr	r0, [pc, #16]	; (8003c24 <HAL_ADC_LevelOutOfWindowCallback+0x24>)
 8003c14:	f7fd fc5e 	bl	80014d4 <_ZN9Interrupt9interruptEv>
	}
}
 8003c18:	bf00      	nop
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40012800 	.word	0x40012800
 8003c24:	20000364 	.word	0x20000364

08003c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8003c2e:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c30:	f001 fd1c 	bl	800566c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c34:	f000 f8c8 	bl	8003dc8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c38:	f000 fc3c 	bl	80044b4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8003c3c:	f000 fc0c 	bl	8004458 <_ZL11MX_DMA_Initv>
//  MX_CAN_Init();
  MX_TIM1_Init();
 8003c40:	f000 fa54 	bl	80040ec <_ZL12MX_TIM1_Initv>
  MX_USART3_UART_Init();
 8003c44:	f000 fbda 	bl	80043fc <_ZL19MX_USART3_UART_Initv>
  MX_TIM4_Init();
 8003c48:	f000 fb70 	bl	800432c <_ZL12MX_TIM4_Initv>

  MX_ADC1_Init();
 8003c4c:	f000 f92a 	bl	8003ea4 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 8003c50:	f000 f9aa 	bl	8003fa8 <_ZL12MX_ADC2_Initv>
  MX_TIM3_Init();
 8003c54:	f000 fb04 	bl	8004260 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

  decltype(auto) led_red    = Pin{GPIOB, LED_RED_Pin  };
 8003c58:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	4951      	ldr	r1, [pc, #324]	; (8003da4 <main+0x17c>)
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fe fa9d 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_green  = Pin{GPIOB, LED_GREEN_Pin};
 8003c66:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	494d      	ldr	r1, [pc, #308]	; (8003da4 <main+0x17c>)
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe fa96 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) led_can    = Pin{GPIOC, LED_CAN_Pin  };
 8003c74:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8003c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c7c:	494a      	ldr	r1, [pc, #296]	; (8003da8 <main+0x180>)
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fe fa8e 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) ventilator = Pin{GPIOB, VENT_Pin     };
 8003c84:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003c88:	2210      	movs	r2, #16
 8003c8a:	4946      	ldr	r1, [pc, #280]	; (8003da4 <main+0x17c>)
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fe fa87 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) unload     = Pin{GPIOA, UNLOAD_Pin   };
 8003c92:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8003c96:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c9a:	4944      	ldr	r1, [pc, #272]	; (8003dac <main+0x184>)
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fe fa7f 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) condens    = Pin{GPIOC, CONDENS_Pin  };
 8003ca2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003ca6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003caa:	493f      	ldr	r1, [pc, #252]	; (8003da8 <main+0x180>)
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fe fa77 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) TD_DM      = Pin{GPIOB, TD_DM_Pin    };
 8003cb2:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003cb6:	2280      	movs	r2, #128	; 0x80
 8003cb8:	493a      	ldr	r1, [pc, #232]	; (8003da4 <main+0x17c>)
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fe fa70 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) SP         = Pin{GPIOB, SP_Pin       };
 8003cc0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cc8:	4936      	ldr	r1, [pc, #216]	; (8003da4 <main+0x17c>)
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7fe fa68 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) Start      = Pin{GPIOB, START_Pin    };
 8003cd0:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cd8:	4932      	ldr	r1, [pc, #200]	; (8003da4 <main+0x17c>)
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fa60 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>
  decltype(auto) Motor      = Pin{GPIOA, ASYNC_Pin    };
 8003ce0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	4931      	ldr	r1, [pc, #196]	; (8003dac <main+0x184>)
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe fa59 	bl	80021a0 <_ZN3PinC1EP12GPIO_TypeDeft>

  decltype(auto) adc = ADC_ {adc_callback, adc_injected_callback, 4, 1};
 8003cee:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2304      	movs	r3, #4
 8003cf8:	4a2d      	ldr	r2, [pc, #180]	; (8003db0 <main+0x188>)
 8003cfa:	492e      	ldr	r1, [pc, #184]	; (8003db4 <main+0x18c>)
 8003cfc:	f7fd ffd6 	bl	8001cac <_ZN4ADC_C1ER9InterruptS1_ht>

  decltype(auto) uart = UART_<>{led_can};
 8003d00:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8003d04:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 ff7c 	bl	8004c08 <_ZN5UART_ILj26EEC1ER3Pin>

  decltype(auto) ntc = NTC{};
 8003d10:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe faad 	bl	8002274 <_ZN3NTCC1Ev>
  decltype(auto) service = Service<In_data, Out_data>{adc, ntc, uart, interrupt_dma, interrupt_uart};
 8003d1a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8003d1e:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8003d22:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8003d26:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8003d2a:	4c23      	ldr	r4, [pc, #140]	; (8003db8 <main+0x190>)
 8003d2c:	9401      	str	r4, [sp, #4]
 8003d2e:	4c23      	ldr	r4, [pc, #140]	; (8003dbc <main+0x194>)
 8003d30:	9400      	str	r4, [sp, #0]
 8003d32:	f000 ff7b 	bl	8004c2c <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R3NTCR5UART_ILj26EER9InterruptSB_>
  decltype(auto) contactor = Contactor{adc, service};
 8003d36:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8003d3a:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8003d3e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fb42 	bl	80023cc <_ZN9ContactorC1ER4ADC_R7ServiceI7In_data8Out_dataE>
//  decltype(auto) cooler = Cooler{service};

  decltype(auto) convertor = Convertor{adc, service, contactor, period_callback, adc_comparator_callback, led_red, led_green, ventilator, unload, condens, TD_DM, SP, Start, Motor};
 8003d48:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 8003d4c:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8003d50:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8003d54:	1d38      	adds	r0, r7, #4
 8003d56:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8003d5a:	930a      	str	r3, [sp, #40]	; 0x28
 8003d5c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8003d60:	9309      	str	r3, [sp, #36]	; 0x24
 8003d62:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003d66:	9308      	str	r3, [sp, #32]
 8003d68:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8003d6c:	9307      	str	r3, [sp, #28]
 8003d6e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8003d72:	9306      	str	r3, [sp, #24]
 8003d74:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8003d78:	9305      	str	r3, [sp, #20]
 8003d7a:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	f507 7340 	add.w	r3, r7, #768	; 0x300
 8003d84:	9303      	str	r3, [sp, #12]
 8003d86:	f507 7342 	add.w	r3, r7, #776	; 0x308
 8003d8a:	9302      	str	r3, [sp, #8]
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <main+0x198>)
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	4b0c      	ldr	r3, [pc, #48]	; (8003dc4 <main+0x19c>)
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	4623      	mov	r3, r4
 8003d96:	f7fe fcd5 	bl	8002744 <_ZN9ConvertorC1ER4ADC_R7ServiceI7In_data8Out_dataER9ContactorR9InterruptSA_R3PinSC_SC_SC_SC_SC_SC_SC_SC_>
  /* USER CODE BEGIN WHILE */

//  contactor.start();
  while (1)
  {
	  convertor();
 8003d9a:	1d3b      	adds	r3, r7, #4
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fe fdb5 	bl	800290c <_ZN9ConvertorclEv>
 8003da2:	e7fa      	b.n	8003d9a <main+0x172>
 8003da4:	40010c00 	.word	0x40010c00
 8003da8:	40011000 	.word	0x40011000
 8003dac:	40010800 	.word	0x40010800
 8003db0:	20000354 	.word	0x20000354
 8003db4:	20000350 	.word	0x20000350
 8003db8:	2000035c 	.word	0x2000035c
 8003dbc:	20000358 	.word	0x20000358
 8003dc0:	20000364 	.word	0x20000364
 8003dc4:	20000360 	.word	0x20000360

08003dc8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b096      	sub	sp, #88	; 0x58
 8003dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dd2:	2228      	movs	r2, #40	; 0x28
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f007 f912 	bl	800b000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ddc:	f107 031c 	add.w	r3, r7, #28
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dec:	1d3b      	adds	r3, r7, #4
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	605a      	str	r2, [r3, #4]
 8003df4:	609a      	str	r2, [r3, #8]
 8003df6:	60da      	str	r2, [r3, #12]
 8003df8:	611a      	str	r2, [r3, #16]
 8003dfa:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003e06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e10:	2302      	movs	r3, #2
 8003e12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e18:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003e1a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003e1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e24:	4618      	mov	r0, r3
 8003e26:	f003 fbaf 	bl	8007588 <HAL_RCC_OscConfig>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf14      	ite	ne
 8003e30:	2301      	movne	r3, #1
 8003e32:	2300      	moveq	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8003e3a:	f000 fbe5 	bl	8004608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e3e:	230f      	movs	r3, #15
 8003e40:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e42:	2302      	movs	r3, #2
 8003e44:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e46:	2300      	movs	r3, #0
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e50:	2300      	movs	r3, #0
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e54:	f107 031c 	add.w	r3, r7, #28
 8003e58:	2102      	movs	r1, #2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f003 fe14 	bl	8007a88 <HAL_RCC_ClockConfig>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bf14      	ite	ne
 8003e66:	2301      	movne	r3, #1
 8003e68:	2300      	moveq	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8003e70:	f000 fbca 	bl	8004608 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003e74:	2302      	movs	r3, #2
 8003e76:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e7e:	1d3b      	adds	r3, r7, #4
 8003e80:	4618      	mov	r0, r3
 8003e82:	f003 ff9d 	bl	8007dc0 <HAL_RCCEx_PeriphCLKConfig>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bf14      	ite	ne
 8003e8c:	2301      	movne	r3, #1
 8003e8e:	2300      	moveq	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8003e96:	f000 fbb7 	bl	8004608 <Error_Handler>
  }
}
 8003e9a:	bf00      	nop
 8003e9c:	3758      	adds	r7, #88	; 0x58
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
	...

08003ea4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003eb4:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <_ZL12MX_ADC1_Initv+0xfc>)
 8003eb6:	4a3b      	ldr	r2, [pc, #236]	; (8003fa4 <_ZL12MX_ADC1_Initv+0x100>)
 8003eb8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003eba:	4b39      	ldr	r3, [pc, #228]	; (8003fa0 <_ZL12MX_ADC1_Initv+0xfc>)
 8003ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ec0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003ec2:	4b37      	ldr	r3, [pc, #220]	; (8003fa0 <_ZL12MX_ADC1_Initv+0xfc>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ec8:	4b35      	ldr	r3, [pc, #212]	; (8003fa0 <_ZL12MX_ADC1_Initv+0xfc>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ece:	4b34      	ldr	r3, [pc, #208]	; (8003fa0 <_ZL12MX_ADC1_Initv+0xfc>)
 8003ed0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003ed4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ed6:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <_ZL12MX_ADC1_Initv+0xfc>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8003edc:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <_ZL12MX_ADC1_Initv+0xfc>)
 8003ede:	2204      	movs	r2, #4
 8003ee0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ee2:	482f      	ldr	r0, [pc, #188]	; (8003fa0 <_ZL12MX_ADC1_Initv+0xfc>)
 8003ee4:	f001 fc12 	bl	800570c <HAL_ADC_Init>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bf14      	ite	ne
 8003eee:	2301      	movne	r3, #1
 8003ef0:	2300      	moveq	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <_ZL12MX_ADC1_Initv+0x58>
  {
    Error_Handler();
 8003ef8:	f000 fb86 	bl	8004608 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003f00:	2301      	movs	r3, #1
 8003f02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8003f04:	2302      	movs	r3, #2
 8003f06:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f08:	1d3b      	adds	r3, r7, #4
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4824      	ldr	r0, [pc, #144]	; (8003fa0 <_ZL12MX_ADC1_Initv+0xfc>)
 8003f0e:	f001 fee5 	bl	8005cdc <HAL_ADC_ConfigChannel>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bf14      	ite	ne
 8003f18:	2301      	movne	r3, #1
 8003f1a:	2300      	moveq	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <_ZL12MX_ADC1_Initv+0x82>
  {
    Error_Handler();
 8003f22:	f000 fb71 	bl	8004608 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003f26:	2301      	movs	r3, #1
 8003f28:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	481b      	ldr	r0, [pc, #108]	; (8003fa0 <_ZL12MX_ADC1_Initv+0xfc>)
 8003f34:	f001 fed2 	bl	8005cdc <HAL_ADC_ConfigChannel>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	bf14      	ite	ne
 8003f3e:	2301      	movne	r3, #1
 8003f40:	2300      	moveq	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8003f48:	f000 fb5e 	bl	8004608 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003f50:	2303      	movs	r3, #3
 8003f52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f54:	1d3b      	adds	r3, r7, #4
 8003f56:	4619      	mov	r1, r3
 8003f58:	4811      	ldr	r0, [pc, #68]	; (8003fa0 <_ZL12MX_ADC1_Initv+0xfc>)
 8003f5a:	f001 febf 	bl	8005cdc <HAL_ADC_ConfigChannel>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf14      	ite	ne
 8003f64:	2301      	movne	r3, #1
 8003f66:	2300      	moveq	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <_ZL12MX_ADC1_Initv+0xce>
  {
    Error_Handler();
 8003f6e:	f000 fb4b 	bl	8004608 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003f72:	2307      	movs	r3, #7
 8003f74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003f76:	2304      	movs	r3, #4
 8003f78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f7a:	1d3b      	adds	r3, r7, #4
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4808      	ldr	r0, [pc, #32]	; (8003fa0 <_ZL12MX_ADC1_Initv+0xfc>)
 8003f80:	f001 feac 	bl	8005cdc <HAL_ADC_ConfigChannel>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	bf14      	ite	ne
 8003f8a:	2301      	movne	r3, #1
 8003f8c:	2300      	moveq	r3, #0
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <_ZL12MX_ADC1_Initv+0xf4>
  {
    Error_Handler();
 8003f94:	f000 fb38 	bl	8004608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000108 	.word	0x20000108
 8003fa4:	40012400 	.word	0x40012400

08003fa8 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08e      	sub	sp, #56	; 0x38
 8003fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8003fae:	f107 0320 	add.w	r3, r7, #32
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	605a      	str	r2, [r3, #4]
 8003fb8:	609a      	str	r2, [r3, #8]
 8003fba:	60da      	str	r2, [r3, #12]
 8003fbc:	611a      	str	r2, [r3, #16]
 8003fbe:	615a      	str	r2, [r3, #20]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003fc0:	1d3b      	adds	r3, r7, #4
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	605a      	str	r2, [r3, #4]
 8003fc8:	609a      	str	r2, [r3, #8]
 8003fca:	60da      	str	r2, [r3, #12]
 8003fcc:	611a      	str	r2, [r3, #16]
 8003fce:	615a      	str	r2, [r3, #20]
 8003fd0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8003fd2:	4b44      	ldr	r3, [pc, #272]	; (80040e4 <_ZL12MX_ADC2_Initv+0x13c>)
 8003fd4:	4a44      	ldr	r2, [pc, #272]	; (80040e8 <_ZL12MX_ADC2_Initv+0x140>)
 8003fd6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003fd8:	4b42      	ldr	r3, [pc, #264]	; (80040e4 <_ZL12MX_ADC2_Initv+0x13c>)
 8003fda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fde:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003fe0:	4b40      	ldr	r3, [pc, #256]	; (80040e4 <_ZL12MX_ADC2_Initv+0x13c>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003fe6:	4b3f      	ldr	r3, [pc, #252]	; (80040e4 <_ZL12MX_ADC2_Initv+0x13c>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003fec:	4b3d      	ldr	r3, [pc, #244]	; (80040e4 <_ZL12MX_ADC2_Initv+0x13c>)
 8003fee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003ff2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ff4:	4b3b      	ldr	r3, [pc, #236]	; (80040e4 <_ZL12MX_ADC2_Initv+0x13c>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8003ffa:	4b3a      	ldr	r3, [pc, #232]	; (80040e4 <_ZL12MX_ADC2_Initv+0x13c>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004000:	4838      	ldr	r0, [pc, #224]	; (80040e4 <_ZL12MX_ADC2_Initv+0x13c>)
 8004002:	f001 fb83 	bl	800570c <HAL_ADC_Init>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	bf14      	ite	ne
 800400c:	2301      	movne	r3, #1
 800400e:	2300      	moveq	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <_ZL12MX_ADC2_Initv+0x72>
  {
    Error_Handler();
 8004016:	f000 faf7 	bl	8004608 <Error_Handler>
  }
  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_ALL_INJEC;
 800401a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800401e:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.HighThreshold = 2700;
 8004020:	f640 238c 	movw	r3, #2700	; 0xa8c
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.LowThreshold = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.ITMode = ENABLE;
 800402a:	2301      	movs	r3, #1
 800402c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8004030:	f107 0320 	add.w	r3, r7, #32
 8004034:	4619      	mov	r1, r3
 8004036:	482b      	ldr	r0, [pc, #172]	; (80040e4 <_ZL12MX_ADC2_Initv+0x13c>)
 8004038:	f001 ff48 	bl	8005ecc <HAL_ADC_AnalogWDGConfig>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <_ZL12MX_ADC2_Initv+0xa8>
  {
    Error_Handler();
 800404c:	f000 fadc 	bl	8004608 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8004050:	2304      	movs	r3, #4
 8004052:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8004054:	2301      	movs	r3, #1
 8004056:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8004058:	2303      	movs	r3, #3
 800405a:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800405c:	2303      	movs	r3, #3
 800405e:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8004060:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004064:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8004066:	2300      	movs	r3, #0
 8004068:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800406a:	2300      	movs	r3, #0
 800406c:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8004072:	1d3b      	adds	r3, r7, #4
 8004074:	4619      	mov	r1, r3
 8004076:	481b      	ldr	r0, [pc, #108]	; (80040e4 <_ZL12MX_ADC2_Initv+0x13c>)
 8004078:	f002 f986 	bl	8006388 <HAL_ADCEx_InjectedConfigChannel>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	bf14      	ite	ne
 8004082:	2301      	movne	r3, #1
 8004084:	2300      	moveq	r3, #0
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <_ZL12MX_ADC2_Initv+0xe8>
  {
    Error_Handler();
 800408c:	f000 fabc 	bl	8004608 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8004090:	2305      	movs	r3, #5
 8004092:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8004094:	2302      	movs	r3, #2
 8004096:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	4619      	mov	r1, r3
 800409c:	4811      	ldr	r0, [pc, #68]	; (80040e4 <_ZL12MX_ADC2_Initv+0x13c>)
 800409e:	f002 f973 	bl	8006388 <HAL_ADCEx_InjectedConfigChannel>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <_ZL12MX_ADC2_Initv+0x10e>
  {
    Error_Handler();
 80040b2:	f000 faa9 	bl	8004608 <Error_Handler>
  }
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 80040b6:	2306      	movs	r3, #6
 80040b8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80040ba:	2303      	movs	r3, #3
 80040bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80040be:	1d3b      	adds	r3, r7, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4808      	ldr	r0, [pc, #32]	; (80040e4 <_ZL12MX_ADC2_Initv+0x13c>)
 80040c4:	f002 f960 	bl	8006388 <HAL_ADCEx_InjectedConfigChannel>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bf14      	ite	ne
 80040ce:	2301      	movne	r3, #1
 80040d0:	2300      	moveq	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <_ZL12MX_ADC2_Initv+0x134>
  {
    Error_Handler();
 80040d8:	f000 fa96 	bl	8004608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80040dc:	bf00      	nop
 80040de:	3738      	adds	r7, #56	; 0x38
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20000138 	.word	0x20000138
 80040e8:	40012800 	.word	0x40012800

080040ec <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b092      	sub	sp, #72	; 0x48
 80040f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	609a      	str	r2, [r3, #8]
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	611a      	str	r2, [r3, #16]
 800410c:	615a      	str	r2, [r3, #20]
 800410e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004110:	1d3b      	adds	r3, r7, #4
 8004112:	2220      	movs	r2, #32
 8004114:	2100      	movs	r1, #0
 8004116:	4618      	mov	r0, r3
 8004118:	f006 ff72 	bl	800b000 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800411c:	4b4e      	ldr	r3, [pc, #312]	; (8004258 <_ZL12MX_TIM1_Initv+0x16c>)
 800411e:	4a4f      	ldr	r2, [pc, #316]	; (800425c <_ZL12MX_TIM1_Initv+0x170>)
 8004120:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004122:	4b4d      	ldr	r3, [pc, #308]	; (8004258 <_ZL12MX_TIM1_Initv+0x16c>)
 8004124:	2200      	movs	r2, #0
 8004126:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8004128:	4b4b      	ldr	r3, [pc, #300]	; (8004258 <_ZL12MX_TIM1_Initv+0x16c>)
 800412a:	2220      	movs	r2, #32
 800412c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 800412e:	4b4a      	ldr	r3, [pc, #296]	; (8004258 <_ZL12MX_TIM1_Initv+0x16c>)
 8004130:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8004134:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004136:	4b48      	ldr	r3, [pc, #288]	; (8004258 <_ZL12MX_TIM1_Initv+0x16c>)
 8004138:	2200      	movs	r2, #0
 800413a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800413c:	4b46      	ldr	r3, [pc, #280]	; (8004258 <_ZL12MX_TIM1_Initv+0x16c>)
 800413e:	2200      	movs	r2, #0
 8004140:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004142:	4b45      	ldr	r3, [pc, #276]	; (8004258 <_ZL12MX_TIM1_Initv+0x16c>)
 8004144:	2200      	movs	r2, #0
 8004146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004148:	4843      	ldr	r0, [pc, #268]	; (8004258 <_ZL12MX_TIM1_Initv+0x16c>)
 800414a:	f003 ffcc 	bl	80080e6 <HAL_TIM_PWM_Init>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf14      	ite	ne
 8004154:	2301      	movne	r3, #1
 8004156:	2300      	moveq	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800415e:	f000 fa53 	bl	8004608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004162:	2300      	movs	r3, #0
 8004164:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004166:	2300      	movs	r3, #0
 8004168:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800416a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800416e:	4619      	mov	r1, r3
 8004170:	4839      	ldr	r0, [pc, #228]	; (8004258 <_ZL12MX_TIM1_Initv+0x16c>)
 8004172:	f004 fec7 	bl	8008f04 <HAL_TIMEx_MasterConfigSynchronization>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf14      	ite	ne
 800417c:	2301      	movne	r3, #1
 800417e:	2300      	moveq	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8004186:	f000 fa3f 	bl	8004608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800418a:	2360      	movs	r3, #96	; 0x60
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800418e:	2300      	movs	r3, #0
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004192:	2300      	movs	r3, #0
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004196:	2300      	movs	r3, #0
 8004198:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800419a:	2300      	movs	r3, #0
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800419e:	2300      	movs	r3, #0
 80041a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041a2:	2300      	movs	r3, #0
 80041a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041aa:	2200      	movs	r2, #0
 80041ac:	4619      	mov	r1, r3
 80041ae:	482a      	ldr	r0, [pc, #168]	; (8004258 <_ZL12MX_TIM1_Initv+0x16c>)
 80041b0:	f004 fa72 	bl	8008698 <HAL_TIM_PWM_ConfigChannel>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bf14      	ite	ne
 80041ba:	2301      	movne	r3, #1
 80041bc:	2300      	moveq	r3, #0
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 80041c4:	f000 fa20 	bl	8004608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041cc:	2204      	movs	r2, #4
 80041ce:	4619      	mov	r1, r3
 80041d0:	4821      	ldr	r0, [pc, #132]	; (8004258 <_ZL12MX_TIM1_Initv+0x16c>)
 80041d2:	f004 fa61 	bl	8008698 <HAL_TIM_PWM_ConfigChannel>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf14      	ite	ne
 80041dc:	2301      	movne	r3, #1
 80041de:	2300      	moveq	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 80041e6:	f000 fa0f 	bl	8004608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ee:	2208      	movs	r2, #8
 80041f0:	4619      	mov	r1, r3
 80041f2:	4819      	ldr	r0, [pc, #100]	; (8004258 <_ZL12MX_TIM1_Initv+0x16c>)
 80041f4:	f004 fa50 	bl	8008698 <HAL_TIM_PWM_ConfigChannel>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	bf14      	ite	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	2300      	moveq	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8004208:	f000 f9fe 	bl	8004608 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800420c:	2300      	movs	r3, #0
 800420e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004210:	2300      	movs	r3, #0
 8004212:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 115;
 8004218:	2373      	movs	r3, #115	; 0x73
 800421a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800421c:	2300      	movs	r3, #0
 800421e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004220:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004224:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004226:	2300      	movs	r3, #0
 8004228:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800422a:	1d3b      	adds	r3, r7, #4
 800422c:	4619      	mov	r1, r3
 800422e:	480a      	ldr	r0, [pc, #40]	; (8004258 <_ZL12MX_TIM1_Initv+0x16c>)
 8004230:	f004 fed4 	bl	8008fdc <HAL_TIMEx_ConfigBreakDeadTime>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf14      	ite	ne
 800423a:	2301      	movne	r3, #1
 800423c:	2300      	moveq	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <_ZL12MX_TIM1_Initv+0x15c>
  {
    Error_Handler();
 8004244:	f000 f9e0 	bl	8004608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004248:	4803      	ldr	r0, [pc, #12]	; (8004258 <_ZL12MX_TIM1_Initv+0x16c>)
 800424a:	f001 f82d 	bl	80052a8 <HAL_TIM_MspPostInit>

}
 800424e:	bf00      	nop
 8004250:	3748      	adds	r7, #72	; 0x48
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	200001ac 	.word	0x200001ac
 800425c:	40012c00 	.word	0x40012c00

08004260 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08a      	sub	sp, #40	; 0x28
 8004264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004266:	f107 0320 	add.w	r3, r7, #32
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004270:	1d3b      	adds	r3, r7, #4
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	605a      	str	r2, [r3, #4]
 8004278:	609a      	str	r2, [r3, #8]
 800427a:	60da      	str	r2, [r3, #12]
 800427c:	611a      	str	r2, [r3, #16]
 800427e:	615a      	str	r2, [r3, #20]
 8004280:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004282:	4b28      	ldr	r3, [pc, #160]	; (8004324 <_ZL12MX_TIM3_Initv+0xc4>)
 8004284:	4a28      	ldr	r2, [pc, #160]	; (8004328 <_ZL12MX_TIM3_Initv+0xc8>)
 8004286:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 8004288:	4b26      	ldr	r3, [pc, #152]	; (8004324 <_ZL12MX_TIM3_Initv+0xc4>)
 800428a:	2227      	movs	r2, #39	; 0x27
 800428c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800428e:	4b25      	ldr	r3, [pc, #148]	; (8004324 <_ZL12MX_TIM3_Initv+0xc4>)
 8004290:	2200      	movs	r2, #0
 8004292:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8004294:	4b23      	ldr	r3, [pc, #140]	; (8004324 <_ZL12MX_TIM3_Initv+0xc4>)
 8004296:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800429a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800429c:	4b21      	ldr	r3, [pc, #132]	; (8004324 <_ZL12MX_TIM3_Initv+0xc4>)
 800429e:	2200      	movs	r2, #0
 80042a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042a2:	4b20      	ldr	r3, [pc, #128]	; (8004324 <_ZL12MX_TIM3_Initv+0xc4>)
 80042a4:	2280      	movs	r2, #128	; 0x80
 80042a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80042a8:	481e      	ldr	r0, [pc, #120]	; (8004324 <_ZL12MX_TIM3_Initv+0xc4>)
 80042aa:	f003 fecd 	bl	8008048 <HAL_TIM_OC_Init>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bf14      	ite	ne
 80042b4:	2301      	movne	r3, #1
 80042b6:	2300      	moveq	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80042be:	f000 f9a3 	bl	8004608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042c2:	2300      	movs	r3, #0
 80042c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042c6:	2300      	movs	r3, #0
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042ca:	f107 0320 	add.w	r3, r7, #32
 80042ce:	4619      	mov	r1, r3
 80042d0:	4814      	ldr	r0, [pc, #80]	; (8004324 <_ZL12MX_TIM3_Initv+0xc4>)
 80042d2:	f004 fe17 	bl	8008f04 <HAL_TIMEx_MasterConfigSynchronization>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf14      	ite	ne
 80042dc:	2301      	movne	r3, #1
 80042de:	2300      	moveq	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80042e6:	f000 f98f 	bl	8004608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80042ea:	2300      	movs	r3, #0
 80042ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042fa:	1d3b      	adds	r3, r7, #4
 80042fc:	2200      	movs	r2, #0
 80042fe:	4619      	mov	r1, r3
 8004300:	4808      	ldr	r0, [pc, #32]	; (8004324 <_ZL12MX_TIM3_Initv+0xc4>)
 8004302:	f004 f971 	bl	80085e8 <HAL_TIM_OC_ConfigChannel>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	bf14      	ite	ne
 800430c:	2301      	movne	r3, #1
 800430e:	2300      	moveq	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8004316:	f000 f977 	bl	8004608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800431a:	bf00      	nop
 800431c:	3728      	adds	r7, #40	; 0x28
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	200001f4 	.word	0x200001f4
 8004328:	40000400 	.word	0x40000400

0800432c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004332:	f107 0320 	add.w	r3, r7, #32
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800433c:	1d3b      	adds	r3, r7, #4
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	605a      	str	r2, [r3, #4]
 8004344:	609a      	str	r2, [r3, #8]
 8004346:	60da      	str	r2, [r3, #12]
 8004348:	611a      	str	r2, [r3, #16]
 800434a:	615a      	str	r2, [r3, #20]
 800434c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800434e:	4b29      	ldr	r3, [pc, #164]	; (80043f4 <_ZL12MX_TIM4_Initv+0xc8>)
 8004350:	4a29      	ldr	r2, [pc, #164]	; (80043f8 <_ZL12MX_TIM4_Initv+0xcc>)
 8004352:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004354:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <_ZL12MX_TIM4_Initv+0xc8>)
 8004356:	2200      	movs	r2, #0
 8004358:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <_ZL12MX_TIM4_Initv+0xc8>)
 800435c:	2200      	movs	r2, #0
 800435e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8004360:	4b24      	ldr	r3, [pc, #144]	; (80043f4 <_ZL12MX_TIM4_Initv+0xc8>)
 8004362:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004366:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004368:	4b22      	ldr	r3, [pc, #136]	; (80043f4 <_ZL12MX_TIM4_Initv+0xc8>)
 800436a:	2200      	movs	r2, #0
 800436c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800436e:	4b21      	ldr	r3, [pc, #132]	; (80043f4 <_ZL12MX_TIM4_Initv+0xc8>)
 8004370:	2200      	movs	r2, #0
 8004372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004374:	481f      	ldr	r0, [pc, #124]	; (80043f4 <_ZL12MX_TIM4_Initv+0xc8>)
 8004376:	f003 feb6 	bl	80080e6 <HAL_TIM_PWM_Init>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf14      	ite	ne
 8004380:	2301      	movne	r3, #1
 8004382:	2300      	moveq	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 800438a:	f000 f93d 	bl	8004608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800438e:	2300      	movs	r3, #0
 8004390:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004392:	2300      	movs	r3, #0
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004396:	f107 0320 	add.w	r3, r7, #32
 800439a:	4619      	mov	r1, r3
 800439c:	4815      	ldr	r0, [pc, #84]	; (80043f4 <_ZL12MX_TIM4_Initv+0xc8>)
 800439e:	f004 fdb1 	bl	8008f04 <HAL_TIMEx_MasterConfigSynchronization>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	bf14      	ite	ne
 80043a8:	2301      	movne	r3, #1
 80043aa:	2300      	moveq	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 80043b2:	f000 f929 	bl	8004608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043b6:	2360      	movs	r3, #96	; 0x60
 80043b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043c6:	1d3b      	adds	r3, r7, #4
 80043c8:	2200      	movs	r2, #0
 80043ca:	4619      	mov	r1, r3
 80043cc:	4809      	ldr	r0, [pc, #36]	; (80043f4 <_ZL12MX_TIM4_Initv+0xc8>)
 80043ce:	f004 f963 	bl	8008698 <HAL_TIM_PWM_ConfigChannel>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf14      	ite	ne
 80043d8:	2301      	movne	r3, #1
 80043da:	2300      	moveq	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 80043e2:	f000 f911 	bl	8004608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80043e6:	4803      	ldr	r0, [pc, #12]	; (80043f4 <_ZL12MX_TIM4_Initv+0xc8>)
 80043e8:	f000 ff5e 	bl	80052a8 <HAL_TIM_MspPostInit>

}
 80043ec:	bf00      	nop
 80043ee:	3728      	adds	r7, #40	; 0x28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	2000023c 	.word	0x2000023c
 80043f8:	40000800 	.word	0x40000800

080043fc <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004402:	4a14      	ldr	r2, [pc, #80]	; (8004454 <_ZL19MX_USART3_UART_Initv+0x58>)
 8004404:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004406:	4b12      	ldr	r3, [pc, #72]	; (8004450 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004408:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800440c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800440e:	4b10      	ldr	r3, [pc, #64]	; (8004450 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004410:	2200      	movs	r2, #0
 8004412:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004414:	4b0e      	ldr	r3, [pc, #56]	; (8004450 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004416:	2200      	movs	r2, #0
 8004418:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800441a:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <_ZL19MX_USART3_UART_Initv+0x54>)
 800441c:	2200      	movs	r2, #0
 800441e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004422:	220c      	movs	r2, #12
 8004424:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004426:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004428:	2200      	movs	r2, #0
 800442a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800442c:	4b08      	ldr	r3, [pc, #32]	; (8004450 <_ZL19MX_USART3_UART_Initv+0x54>)
 800442e:	2200      	movs	r2, #0
 8004430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004432:	4807      	ldr	r0, [pc, #28]	; (8004450 <_ZL19MX_USART3_UART_Initv+0x54>)
 8004434:	f004 fe59 	bl	80090ea <HAL_UART_Init>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf14      	ite	ne
 800443e:	2301      	movne	r3, #1
 8004440:	2300      	moveq	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8004448:	f000 f8de 	bl	8004608 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800444c:	bf00      	nop
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20000284 	.word	0x20000284
 8004454:	40004800 	.word	0x40004800

08004458 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800445e:	4b14      	ldr	r3, [pc, #80]	; (80044b0 <_ZL11MX_DMA_Initv+0x58>)
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	4a13      	ldr	r2, [pc, #76]	; (80044b0 <_ZL11MX_DMA_Initv+0x58>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6153      	str	r3, [r2, #20]
 800446a:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <_ZL11MX_DMA_Initv+0x58>)
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	607b      	str	r3, [r7, #4]
 8004474:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004476:	2200      	movs	r2, #0
 8004478:	2100      	movs	r1, #0
 800447a:	200b      	movs	r0, #11
 800447c:	f002 fa07 	bl	800688e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004480:	200b      	movs	r0, #11
 8004482:	f002 fa20 	bl	80068c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004486:	2200      	movs	r2, #0
 8004488:	2100      	movs	r1, #0
 800448a:	200c      	movs	r0, #12
 800448c:	f002 f9ff 	bl	800688e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004490:	200c      	movs	r0, #12
 8004492:	f002 fa18 	bl	80068c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004496:	2200      	movs	r2, #0
 8004498:	2100      	movs	r1, #0
 800449a:	200d      	movs	r0, #13
 800449c:	f002 f9f7 	bl	800688e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80044a0:	200d      	movs	r0, #13
 80044a2:	f002 fa10 	bl	80068c6 <HAL_NVIC_EnableIRQ>

}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40021000 	.word	0x40021000

080044b4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ba:	f107 0310 	add.w	r3, r7, #16
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	605a      	str	r2, [r3, #4]
 80044c4:	609a      	str	r2, [r3, #8]
 80044c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044c8:	4b4a      	ldr	r3, [pc, #296]	; (80045f4 <_ZL12MX_GPIO_Initv+0x140>)
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	4a49      	ldr	r2, [pc, #292]	; (80045f4 <_ZL12MX_GPIO_Initv+0x140>)
 80044ce:	f043 0320 	orr.w	r3, r3, #32
 80044d2:	6193      	str	r3, [r2, #24]
 80044d4:	4b47      	ldr	r3, [pc, #284]	; (80045f4 <_ZL12MX_GPIO_Initv+0x140>)
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044e0:	4b44      	ldr	r3, [pc, #272]	; (80045f4 <_ZL12MX_GPIO_Initv+0x140>)
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	4a43      	ldr	r2, [pc, #268]	; (80045f4 <_ZL12MX_GPIO_Initv+0x140>)
 80044e6:	f043 0310 	orr.w	r3, r3, #16
 80044ea:	6193      	str	r3, [r2, #24]
 80044ec:	4b41      	ldr	r3, [pc, #260]	; (80045f4 <_ZL12MX_GPIO_Initv+0x140>)
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f003 0310 	and.w	r3, r3, #16
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044f8:	4b3e      	ldr	r3, [pc, #248]	; (80045f4 <_ZL12MX_GPIO_Initv+0x140>)
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	4a3d      	ldr	r2, [pc, #244]	; (80045f4 <_ZL12MX_GPIO_Initv+0x140>)
 80044fe:	f043 0304 	orr.w	r3, r3, #4
 8004502:	6193      	str	r3, [r2, #24]
 8004504:	4b3b      	ldr	r3, [pc, #236]	; (80045f4 <_ZL12MX_GPIO_Initv+0x140>)
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004510:	4b38      	ldr	r3, [pc, #224]	; (80045f4 <_ZL12MX_GPIO_Initv+0x140>)
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	4a37      	ldr	r2, [pc, #220]	; (80045f4 <_ZL12MX_GPIO_Initv+0x140>)
 8004516:	f043 0308 	orr.w	r3, r3, #8
 800451a:	6193      	str	r3, [r2, #24]
 800451c:	4b35      	ldr	r3, [pc, #212]	; (80045f4 <_ZL12MX_GPIO_Initv+0x140>)
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	603b      	str	r3, [r7, #0]
 8004526:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin|LED_CAN_Pin|CONDENS_Pin, GPIO_PIN_RESET);
 8004528:	2200      	movs	r2, #0
 800452a:	f241 2101 	movw	r1, #4609	; 0x1201
 800452e:	4832      	ldr	r0, [pc, #200]	; (80045f8 <_ZL12MX_GPIO_Initv+0x144>)
 8004530:	f003 f811 	bl	8007556 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UNLOAD_GPIO_Port, UNLOAD_Pin, GPIO_PIN_RESET);
 8004534:	2200      	movs	r2, #0
 8004536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800453a:	4830      	ldr	r0, [pc, #192]	; (80045fc <_ZL12MX_GPIO_Initv+0x148>)
 800453c:	f003 f80b 	bl	8007556 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VENT_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8004540:	2200      	movs	r2, #0
 8004542:	2130      	movs	r1, #48	; 0x30
 8004544:	482e      	ldr	r0, [pc, #184]	; (8004600 <_ZL12MX_GPIO_Initv+0x14c>)
 8004546:	f003 f806 	bl	8007556 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin LED_CAN_Pin CONDENS_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_CAN_Pin|CONDENS_Pin;
 800454a:	f241 2301 	movw	r3, #4609	; 0x1201
 800454e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004550:	2301      	movs	r3, #1
 8004552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004554:	2300      	movs	r3, #0
 8004556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004558:	2302      	movs	r3, #2
 800455a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800455c:	f107 0310 	add.w	r3, r7, #16
 8004560:	4619      	mov	r1, r3
 8004562:	4825      	ldr	r0, [pc, #148]	; (80045f8 <_ZL12MX_GPIO_Initv+0x144>)
 8004564:	f002 fe4c 	bl	8007200 <HAL_GPIO_Init>

  /*Configure GPIO pin : ASYNC_Pin */
  GPIO_InitStruct.Pin = ASYNC_Pin;
 8004568:	2304      	movs	r3, #4
 800456a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ASYNC_GPIO_Port, &GPIO_InitStruct);
 8004574:	f107 0310 	add.w	r3, r7, #16
 8004578:	4619      	mov	r1, r3
 800457a:	4820      	ldr	r0, [pc, #128]	; (80045fc <_ZL12MX_GPIO_Initv+0x148>)
 800457c:	f002 fe40 	bl	8007200 <HAL_GPIO_Init>

  /*Configure GPIO pin : UNLOAD_Pin */
  GPIO_InitStruct.Pin = UNLOAD_Pin;
 8004580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004586:	2301      	movs	r3, #1
 8004588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458a:	2300      	movs	r3, #0
 800458c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800458e:	2302      	movs	r3, #2
 8004590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UNLOAD_GPIO_Port, &GPIO_InitStruct);
 8004592:	f107 0310 	add.w	r3, r7, #16
 8004596:	4619      	mov	r1, r3
 8004598:	4818      	ldr	r0, [pc, #96]	; (80045fc <_ZL12MX_GPIO_Initv+0x148>)
 800459a:	f002 fe31 	bl	8007200 <HAL_GPIO_Init>

  /*Configure GPIO pin : Contactor_Pin */
  GPIO_InitStruct.Pin = Contactor_Pin;
 800459e:	2304      	movs	r3, #4
 80045a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Contactor_GPIO_Port, &GPIO_InitStruct);
 80045aa:	f107 0310 	add.w	r3, r7, #16
 80045ae:	4619      	mov	r1, r3
 80045b0:	4814      	ldr	r0, [pc, #80]	; (8004604 <_ZL12MX_GPIO_Initv+0x150>)
 80045b2:	f002 fe25 	bl	8007200 <HAL_GPIO_Init>

  /*Configure GPIO pins : VENT_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = VENT_Pin|LED_GREEN_Pin;
 80045b6:	2330      	movs	r3, #48	; 0x30
 80045b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ba:	2301      	movs	r3, #1
 80045bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c2:	2302      	movs	r3, #2
 80045c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c6:	f107 0310 	add.w	r3, r7, #16
 80045ca:	4619      	mov	r1, r3
 80045cc:	480c      	ldr	r0, [pc, #48]	; (8004600 <_ZL12MX_GPIO_Initv+0x14c>)
 80045ce:	f002 fe17 	bl	8007200 <HAL_GPIO_Init>

  /*Configure GPIO pins : TD_DM_Pin SP_Pin START_Pin */
  GPIO_InitStruct.Pin = TD_DM_Pin|SP_Pin|START_Pin;
 80045d2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80045d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045e0:	f107 0310 	add.w	r3, r7, #16
 80045e4:	4619      	mov	r1, r3
 80045e6:	4806      	ldr	r0, [pc, #24]	; (8004600 <_ZL12MX_GPIO_Initv+0x14c>)
 80045e8:	f002 fe0a 	bl	8007200 <HAL_GPIO_Init>

}
 80045ec:	bf00      	nop
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40021000 	.word	0x40021000
 80045f8:	40011000 	.word	0x40011000
 80045fc:	40010800 	.word	0x40010800
 8004600:	40010c00 	.word	0x40010c00
 8004604:	40011400 	.word	0x40011400

08004608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800460c:	b672      	cpsid	i
}
 800460e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004610:	e7fe      	b.n	8004610 <Error_Handler+0x8>

08004612 <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_>:
public:
    Static_vector (){}
    void clear()  {end_i = 0;}
    uint8_t cend  () const {return end_i;}
    size_t size ()  {return end_i;}
    void push_back(T p)
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
    {
        if (end_i < size_)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	2b0b      	cmp	r3, #11
 8004622:	d808      	bhi.n	8004636 <_ZN13Static_vectorIP10SubscriberLj12EE9push_backES1_+0x24>
            vector[end_i++] = p;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	1c59      	adds	r1, r3, #1
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6311      	str	r1, [r2, #48]	; 0x30
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6839      	ldr	r1, [r7, #0]
 8004632:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr

08004640 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_>:
    void remove (T p)
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
    {
      uint8_t index = 0;
 800464a:	2300      	movs	r3, #0
 800464c:	73fb      	strb	r3, [r7, #15]

      for (uint8_t i = 0; i < end_i; i++) {
 800464e:	2300      	movs	r3, #0
 8004650:	73bb      	strb	r3, [r7, #14]
 8004652:	7bba      	ldrb	r2, [r7, #14]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	429a      	cmp	r2, r3
 800465a:	d20d      	bcs.n	8004678 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
        if (vector[i] == p) {
 800465c:	7bba      	ldrb	r2, [r7, #14]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d102      	bne.n	8004670 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x30>
          index = i;
 800466a:	7bbb      	ldrb	r3, [r7, #14]
 800466c:	73fb      	strb	r3, [r7, #15]
          break;
 800466e:	e003      	b.n	8004678 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x38>
      for (uint8_t i = 0; i < end_i; i++) {
 8004670:	7bbb      	ldrb	r3, [r7, #14]
 8004672:	3301      	adds	r3, #1
 8004674:	73bb      	strb	r3, [r7, #14]
 8004676:	e7ec      	b.n	8004652 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x12>
        }
      }

      for (uint8_t i = index; i < end_i; i++) {
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	737b      	strb	r3, [r7, #13]
 800467c:	7b7a      	ldrb	r2, [r7, #13]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	429a      	cmp	r2, r3
 8004684:	d20c      	bcs.n	80046a0 <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x60>
          vector[i] = vector[i+1];
 8004686:	7b7b      	ldrb	r3, [r7, #13]
 8004688:	1c59      	adds	r1, r3, #1
 800468a:	7b7a      	ldrb	r2, [r7, #13]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (uint8_t i = index; i < end_i; i++) {
 8004698:	7b7b      	ldrb	r3, [r7, #13]
 800469a:	3301      	adds	r3, #1
 800469c:	737b      	strb	r3, [r7, #13]
 800469e:	e7ed      	b.n	800467c <_ZN13Static_vectorIP10SubscriberLj12EE6removeES1_+0x3c>
      }
      end_i--;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	1e5a      	subs	r2, r3, #1
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr

080046b4 <_ZNK13Static_vectorIP10SubscriberLj12EE4cendEv>:
    uint8_t cend  () const {return end_i;}
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr

080046cc <_ZNK13Static_vectorIP10SubscriberLj12EEixEj>:

    T operator[] (const size_t index) const
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
    {
        return vector[index];
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <_ZN13Static_vectorIP10SubscriberLj12EEC1Ev>:
    Static_vector (){}
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4618      	mov	r0, r3
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <_ZN10SystemTick13initInterruptILt1000EEEvv>:
#ifndef SYSTICK_H_
#define SYSTICK_H_

class SystemTick {
public:
	template <uint16_t us> void initInterrupt()
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	{
		HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000 / (1000/us) - 1);
 8004704:	f003 fb0c 	bl	8007d20 <HAL_RCC_GetHCLKFreq>
 8004708:	4603      	mov	r3, r0
 800470a:	4a06      	ldr	r2, [pc, #24]	; (8004724 <_ZN10SystemTick13initInterruptILt1000EEEvv+0x28>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	3b01      	subs	r3, #1
 8004714:	4618      	mov	r0, r3
 8004716:	f002 f8e4 	bl	80068e2 <HAL_SYSTICK_Config>
	}
 800471a:	bf00      	nop
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	10624dd3 	.word	0x10624dd3

08004728 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_>:
inline void every_qty_cnt_call(size_t& cnt, size_t qty, Function call)
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
    if (not(cnt++ % qty))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	1c59      	adds	r1, r3, #1
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	6011      	str	r1, [r2, #0]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	fbb3 f2f2 	udiv	r2, r3, r2
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	fb01 f202 	mul.w	r2, r1, r2
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf0c      	ite	eq
 8004750:	2301      	moveq	r3, #1
 8004752:	2300      	movne	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <_Z18every_qty_cnt_callIZN11TickUpdater9interruptEvEUlvE_EvRjjT_+0x3a>
        call();
 800475a:	1d3b      	adds	r3, r7, #4
 800475c:	4618      	mov	r0, r3
 800475e:	f7fc fe29 	bl	80013b4 <_ZZN11TickUpdater9interruptEvENKUlvE_clEv>
}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800476a:	b5b0      	push	{r4, r5, r7, lr}
 800476c:	b082      	sub	sp, #8
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f7fb fea9 	bl	80004cc <__aeabi_i2d>
 800477a:	4604      	mov	r4, r0
 800477c:	460d      	mov	r5, r1
 800477e:	6838      	ldr	r0, [r7, #0]
 8004780:	f7fb fea4 	bl	80004cc <__aeabi_i2d>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4620      	mov	r0, r4
 800478a:	4629      	mov	r1, r5
 800478c:	f005 fc1a 	bl	8009fc4 <pow>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
    }
 8004794:	4610      	mov	r0, r2
 8004796:	4619      	mov	r1, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080047a0 <_ZN7ServiceI7In_data8Out_dataEclEv>:
	void operator()(){
 80047a0:	b590      	push	{r4, r7, lr}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
		outData.convertor_temp  = ntc(adc[Trad]);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685c      	ldr	r4, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2102      	movs	r1, #2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fd fb82 	bl	8001ebc <_ZN4ADC_ixEh>
 80047b8:	4603      	mov	r3, r0
 80047ba:	4619      	mov	r1, r3
 80047bc:	4620      	mov	r0, r4
 80047be:	f7fd fd6d 	bl	800229c <_ZN3NTCclEt>
 80047c2:	4603      	mov	r3, r0
 80047c4:	b21a      	sxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		new_pressure = (((k_adc * adc[Press]) * 100) * 3) / 2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2101      	movs	r1, #1
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fd fb72 	bl	8001ebc <_ZN4ADC_ixEh>
 80047d8:	4603      	mov	r3, r0
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fc fa72 	bl	8000cc4 <__aeabi_i2f>
 80047e0:	4603      	mov	r3, r0
 80047e2:	49a4      	ldr	r1, [pc, #656]	; (8004a74 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2d4>)
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fc fac1 	bl	8000d6c <__aeabi_fmul>
 80047ea:	4603      	mov	r3, r0
 80047ec:	49a2      	ldr	r1, [pc, #648]	; (8004a78 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2d8>)
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fc fabc 	bl	8000d6c <__aeabi_fmul>
 80047f4:	4603      	mov	r3, r0
 80047f6:	49a1      	ldr	r1, [pc, #644]	; (8004a7c <_ZN7ServiceI7In_data8Out_dataEclEv+0x2dc>)
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fc fab7 	bl	8000d6c <__aeabi_fmul>
 80047fe:	4603      	mov	r3, r0
 8004800:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004804:	4618      	mov	r0, r3
 8004806:	f7fc fb65 	bl	8000ed4 <__aeabi_fdiv>
 800480a:	4603      	mov	r3, r0
 800480c:	4618      	mov	r0, r3
 800480e:	f7fc fc89 	bl	8001124 <__aeabi_f2iz>
 8004812:	4603      	mov	r3, r0
 8004814:	b21a      	sxth	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		outData.pressure += (new_pressure - outData.pressure) / 2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 8004828:	4619      	mov	r1, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8004830:	1acb      	subs	r3, r1, r3
 8004832:	0fd9      	lsrs	r1, r3, #31
 8004834:	440b      	add	r3, r1
 8004836:	105b      	asrs	r3, r3, #1
 8004838:	b29b      	uxth	r3, r3
 800483a:	4413      	add	r3, r2
 800483c:	b29a      	uxth	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
		outData.current        = (abs(adc.value(PS) - adc.offset_I_S)) * 100 / 21;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2101      	movs	r1, #1
 800484a:	4618      	mov	r0, r3
 800484c:	f7fd fb47 	bl	8001ede <_ZN4ADC_5valueEh>
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f9b3 30f4 	ldrsh.w	r3, [r3, #244]	; 0xf4
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	bfb8      	it	lt
 8004862:	425b      	neglt	r3, r3
 8004864:	2264      	movs	r2, #100	; 0x64
 8004866:	fb02 f303 	mul.w	r3, r2, r3
 800486a:	4a85      	ldr	r2, [pc, #532]	; (8004a80 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2e0>)
 800486c:	fb82 1203 	smull	r1, r2, r2, r3
 8004870:	1092      	asrs	r2, r2, #2
 8004872:	17db      	asrs	r3, r3, #31
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	b29a      	uxth	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		outData.current_A      = adc.current();
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7fd fb5f 	bl	8001f46 <_ZN4ADC_7currentEv>
 8004888:	4603      	mov	r3, r0
 800488a:	461a      	mov	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		new_hv = (adc.value_HV() * 350 / 4095 * 45) / 10;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fd fb62 	bl	8001f60 <_ZN4ADC_8value_HVEv>
 800489c:	4603      	mov	r3, r0
 800489e:	461a      	mov	r2, r3
 80048a0:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80048a4:	fb03 f302 	mul.w	r3, r3, r2
 80048a8:	4a76      	ldr	r2, [pc, #472]	; (8004a84 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2e4>)
 80048aa:	fb82 1203 	smull	r1, r2, r2, r3
 80048ae:	441a      	add	r2, r3
 80048b0:	12d2      	asrs	r2, r2, #11
 80048b2:	17db      	asrs	r3, r3, #31
 80048b4:	1ad2      	subs	r2, r2, r3
 80048b6:	4613      	mov	r3, r2
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	4413      	add	r3, r2
 80048bc:	011a      	lsls	r2, r3, #4
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	4a71      	ldr	r2, [pc, #452]	; (8004a88 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2e8>)
 80048c2:	fb82 1203 	smull	r1, r2, r2, r3
 80048c6:	1092      	asrs	r2, r2, #2
 80048c8:	17db      	asrs	r3, r3, #31
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	b21a      	sxth	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		if(measure_timer.done()) {
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	334c      	adds	r3, #76	; 0x4c
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fc fdc5 	bl	8001468 <_ZN5Timer4doneEv>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d065      	beq.n	80049b0 <_ZN7ServiceI7In_data8Out_dataEclEv+0x210>
			measure_timer.stop();
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	334c      	adds	r3, #76	; 0x4c
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fc fdae 	bl	800144a <_ZN5Timer4stopEv>
			measure_timer.start();
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	334c      	adds	r3, #76	; 0x4c
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fc fdca 	bl	800148c <_ZN5Timer5startEv>
			arr_new_hv[m] = new_hv;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f9b3 205e 	ldrsh.w	r2, [r3, #94]	; 0x5e
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004904:	b291      	uxth	r1, r2
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	3308      	adds	r3, #8
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4413      	add	r3, r2
 800490e:	460a      	mov	r2, r1
 8004910:	809a      	strh	r2, [r3, #4]
			if (m < (qty_measure - 1)) m++;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004918:	2b08      	cmp	r3, #8
 800491a:	d808      	bhi.n	800492e <_ZN7ServiceI7In_data8Out_dataEclEv+0x18e>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004922:	3301      	adds	r3, #1
 8004924:	b2da      	uxtb	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800492c:	e003      	b.n	8004936 <_ZN7ServiceI7In_data8Out_dataEclEv+0x196>
			else m = 0;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			HV_avarage = 0;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	855a      	strh	r2, [r3, #42]	; 0x2a
			for (auto i = 0; i < qty_measure; i++) {
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b09      	cmp	r3, #9
 8004944:	dc12      	bgt.n	800496c <_ZN7ServiceI7In_data8Out_dataEclEv+0x1cc>
				HV_avarage += arr_new_hv[i];
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800494c:	b29a      	uxth	r2, r3
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3308      	adds	r3, #8
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	440b      	add	r3, r1
 8004958:	889b      	ldrh	r3, [r3, #4]
 800495a:	4413      	add	r3, r2
 800495c:	b29b      	uxth	r3, r3
 800495e:	b21a      	sxth	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	855a      	strh	r2, [r3, #42]	; 0x2a
			for (auto i = 0; i < qty_measure; i++) {
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3301      	adds	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	e7e9      	b.n	8004940 <_ZN7ServiceI7In_data8Out_dataEclEv+0x1a0>
			HV_avarage /= qty_measure;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8004972:	4a45      	ldr	r2, [pc, #276]	; (8004a88 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2e8>)
 8004974:	fb82 1203 	smull	r1, r2, r2, r3
 8004978:	1092      	asrs	r2, r2, #2
 800497a:	17db      	asrs	r3, r3, #31
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	b21a      	sxth	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	855a      	strh	r2, [r3, #42]	; 0x2a
			outData.high_voltage  += (HV_avarage - outData.high_voltage) * 10 / 60;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8004990:	4619      	mov	r1, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004998:	1acb      	subs	r3, r1, r3
 800499a:	493c      	ldr	r1, [pc, #240]	; (8004a8c <_ZN7ServiceI7In_data8Out_dataEclEv+0x2ec>)
 800499c:	fb81 0103 	smull	r0, r1, r1, r3
 80049a0:	17db      	asrs	r3, r3, #31
 80049a2:	1acb      	subs	r3, r1, r3
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
		if(outData.pressure >= 360) {
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80049b6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80049ba:	d31c      	bcc.n	80049f6 <_ZN7ServiceI7In_data8Out_dataEclEv+0x256>
			if(press_delay.isCount()) {
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	333c      	adds	r3, #60	; 0x3c
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fc fd6f 	bl	80014a4 <_ZN5Timer7isCountEv>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00c      	beq.n	80049e6 <_ZN7ServiceI7In_data8Out_dataEclEv+0x246>
				if(press_delay.done()) {
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	333c      	adds	r3, #60	; 0x3c
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fc fd49 	bl	8001468 <_ZN5Timer4doneEv>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d011      	beq.n	8004a00 <_ZN7ServiceI7In_data8Out_dataEclEv+0x260>
					done = true;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80049e4:	e00c      	b.n	8004a00 <_ZN7ServiceI7In_data8Out_dataEclEv+0x260>
				press_delay.start(1000);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	333c      	adds	r3, #60	; 0x3c
 80049ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fc fcfe 	bl	80013f0 <_ZN5Timer5startEm>
 80049f4:	e004      	b.n	8004a00 <_ZN7ServiceI7In_data8Out_dataEclEv+0x260>
			press_delay.stop();
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	333c      	adds	r3, #60	; 0x3c
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fc fd25 	bl	800144a <_ZN5Timer4stopEv>
		if(outData.pressure < 280) done = false;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8004a06:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8004a0a:	d203      	bcs.n	8004a14 <_ZN7ServiceI7In_data8Out_dataEclEv+0x274>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		kolhoz ^= timer.event();
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	332c      	adds	r3, #44	; 0x2c
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fc fcfc 	bl	8001416 <_ZN5Timer5eventEv>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	461a      	mov	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8004a28:	4053      	eors	r3, r2
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	bf14      	ite	ne
 8004a30:	2301      	movne	r3, #1
 8004a32:	2300      	moveq	r3, #0
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		if (event or kolhoz) {
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d105      	bne.n	8004a52 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2b2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80d7 	beq.w	8004c00 <_ZN7ServiceI7In_data8Out_dataEclEv+0x460>
			if(uart.buffer[0] == 4 or kolhoz) {
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	3304      	adds	r3, #4
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f958 	bl	8004d10 <_ZN10Net_bufferILh26EEixEi>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d004      	beq.n	8004a70 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2d0>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00f      	beq.n	8004a90 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2f0>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e00e      	b.n	8004a92 <_ZN7ServiceI7In_data8Out_dataEclEv+0x2f2>
 8004a74:	3a534067 	.word	0x3a534067
 8004a78:	42c80000 	.word	0x42c80000
 8004a7c:	40400000 	.word	0x40400000
 8004a80:	30c30c31 	.word	0x30c30c31
 8004a84:	80080081 	.word	0x80080081
 8004a88:	66666667 	.word	0x66666667
 8004a8c:	2aaaaaab 	.word	0x2aaaaaab
 8004a90:	2300      	movs	r3, #0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d070      	beq.n	8004b78 <_ZN7ServiceI7In_data8Out_dataEclEv+0x3d8>
				uart.buffer.clear();
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 f946 	bl	8004d2e <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << outData.voltage_board
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	1d1a      	adds	r2, r3, #4
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f000 f94b 	bl	8004d4c <_ZN10Net_bufferILh26EElsEt>
 8004ab6:	4602      	mov	r2, r0
						    << outData.pressure
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f000 f943 	bl	8004d4c <_ZN10Net_bufferILh26EElsEt>
 8004ac6:	4602      	mov	r2, r0
							<< outData.PWM
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f000 f959 	bl	8004d88 <_ZN10Net_bufferILh26EElsEs>
 8004ad6:	4602      	mov	r2, r0
							<< outData.convertor_temp
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f9b3 3080 	ldrsh.w	r3, [r3, #128]	; 0x80
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f000 f951 	bl	8004d88 <_ZN10Net_bufferILh26EElsEs>
 8004ae6:	4602      	mov	r2, r0
							<< outData.current
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8004aee:	4619      	mov	r1, r3
 8004af0:	4610      	mov	r0, r2
 8004af2:	f000 f92b 	bl	8004d4c <_ZN10Net_bufferILh26EElsEt>
 8004af6:	4602      	mov	r2, r0
							<< outData.current_A
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8004afe:	4619      	mov	r1, r3
 8004b00:	4610      	mov	r0, r2
 8004b02:	f000 f923 	bl	8004d4c <_ZN10Net_bufferILh26EElsEt>
 8004b06:	4602      	mov	r2, r0
							<< outData.current_C
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4610      	mov	r0, r2
 8004b12:	f000 f91b 	bl	8004d4c <_ZN10Net_bufferILh26EElsEt>
 8004b16:	4602      	mov	r2, r0
							<< outData.high_voltage
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f000 f913 	bl	8004d4c <_ZN10Net_bufferILh26EElsEt>
 8004b26:	4602      	mov	r2, r0
							<< outData.max_current
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4610      	mov	r0, r2
 8004b32:	f000 f90b 	bl	8004d4c <_ZN10Net_bufferILh26EElsEt>
 8004b36:	4602      	mov	r2, r0
							<< outData.max_current_A
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4610      	mov	r0, r2
 8004b42:	f000 f903 	bl	8004d4c <_ZN10Net_bufferILh26EElsEt>
 8004b46:	4602      	mov	r2, r0
							<< outData.max_current_C
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4610      	mov	r0, r2
 8004b52:	f000 f8fb 	bl	8004d4c <_ZN10Net_bufferILh26EElsEt>
 8004b56:	4602      	mov	r2, r0
							<< outData.U_phase
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4610      	mov	r0, r2
 8004b62:	f000 f8f3 	bl	8004d4c <_ZN10Net_bufferILh26EElsEt>
 8004b66:	4602      	mov	r2, r0
							<< arOutData[12];
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f000 f8eb 	bl	8004d4c <_ZN10Net_bufferILh26EElsEt>
 8004b76:	e022      	b.n	8004bbe <_ZN7ServiceI7In_data8Out_dataEclEv+0x41e>
			} else if(uart.buffer[0] == '+') {
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 f8c5 	bl	8004d10 <_ZN10Net_bufferILh26EEixEi>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b2b      	cmp	r3, #43	; 0x2b
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d013      	beq.n	8004bbe <_ZN7ServiceI7In_data8Out_dataEclEv+0x41e>
				uart.buffer.clear();
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 f8c6 	bl	8004d2e <_ZN10Net_bufferILh26EE5clearEv>
				uart.buffer << 'O';
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	214f      	movs	r1, #79	; 0x4f
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f90a 	bl	8004dc4 <_ZN10Net_bufferILh26EElsEc>
				uart.buffer << 'K';
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	214b      	movs	r1, #75	; 0x4b
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 f903 	bl	8004dc4 <_ZN10Net_bufferILh26EElsEc>
			event = false;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			kolhoz = false;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
			if(uart.buffer.size())
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 f912 	bl	8004dfe <_ZN10Net_bufferILh26EE4sizeEv>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	bf14      	ite	ne
 8004be0:	2301      	movne	r3, #1
 8004be2:	2300      	moveq	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <_ZN7ServiceI7In_data8Out_dataEclEv+0x456>
				uart.transmit();
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f914 	bl	8004e1c <_ZN5UART_ILj26EE8transmitEv>
	}
 8004bf4:	e004      	b.n	8004c00 <_ZN7ServiceI7In_data8Out_dataEclEv+0x460>
				uart.receive();
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 f930 	bl	8004e60 <_ZN5UART_ILj26EE7receiveEv>
	}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd90      	pop	{r4, r7, pc}

08004c08 <_ZN5UART_ILj26EEC1ER3Pin>:

public:

	Pin& led_red;

	UART_(Pin& led_red) : led_red{led_red}{}
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 f93b 	bl	8004e98 <_ZN10Net_bufferILh26EEC1Ev>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <_ZN7ServiceI7In_data8Out_dataEC1ER4ADC_R3NTCR5UART_ILj26EER9InterruptSB_>:
	Service (
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	603b      	str	r3, [r7, #0]
      , arInData { }, arOutData { }, arInDataMin { }, arInDataMax {}
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	609a      	str	r2, [r3, #8]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	60da      	str	r2, [r3, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	69fa      	ldr	r2, [r7, #28]
 8004c56:	611a      	str	r2, [r3, #16]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	3314      	adds	r3, #20
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	605a      	str	r2, [r3, #4]
 8004c62:	609a      	str	r2, [r3, #8]
 8004c64:	60da      	str	r2, [r3, #12]
 8004c66:	611a      	str	r2, [r3, #16]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	332c      	adds	r3, #44	; 0x2c
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fc fb56 	bl	800132c <_ZN5TimerC1Ev>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	333c      	adds	r3, #60	; 0x3c
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fc fb51 	bl	800132c <_ZN5TimerC1Ev>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	334c      	adds	r3, #76	; 0x4c
 8004c8e:	2119      	movs	r1, #25
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fc fb63 	bl	800135c <_ZN5TimerC1Em>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3368      	adds	r3, #104	; 0x68
 8004cca:	68f9      	ldr	r1, [r7, #12]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 f8ef 	bl	8004eb0 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3370      	adds	r3, #112	; 0x70
 8004cd6:	68f9      	ldr	r1, [r7, #12]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f907 	bl	8004eec <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	337a      	adds	r3, #122	; 0x7a
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	605a      	str	r2, [r3, #4]
 8004ce8:	609a      	str	r2, [r3, #8]
 8004cea:	60da      	str	r2, [r3, #12]
 8004cec:	611a      	str	r2, [r3, #16]
 8004cee:	615a      	str	r2, [r3, #20]
 8004cf0:	831a      	strh	r2, [r3, #24]
		uart.receive();
 8004cf2:	6838      	ldr	r0, [r7, #0]
 8004cf4:	f000 f8b4 	bl	8004e60 <_ZN5UART_ILj26EE7receiveEv>
		timer.start(2000);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	332c      	adds	r3, #44	; 0x2c
 8004cfc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fc fb75 	bl	80013f0 <_ZN5Timer5startEm>
	}
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <_ZN10Net_bufferILh26EEixEi>:
    Net_buffer& operator>> (uint16_t&);

    Net_buffer& operator<< (char*);


    uint8_t operator[](int n){return buffer[n];}
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	4413      	add	r3, r2
 8004d20:	3302      	adds	r3, #2
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr

08004d2e <_ZN10Net_bufferILh26EE5clearEv>:
    void clear() { begin_i = 0; end_i = 0; }
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	705a      	strb	r2, [r3, #1]
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr

08004d4c <_ZN10Net_bufferILh26EElsEt>:
        end_i++;
   }
}

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint16_t v)
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 8004d58:	f107 030e 	add.w	r3, r7, #14
 8004d5c:	f107 020f 	add.w	r2, r7, #15
 8004d60:	8879      	ldrh	r1, [r7, #2]
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8e0 	bl	8004f28 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 8004d68:	7bbb      	ldrb	r3, [r7, #14]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f8f0 	bl	8004f52 <_ZN10Net_bufferILh26EElsEh>
 8004d72:	4602      	mov	r2, r0
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f000 f8ea 	bl	8004f52 <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8004d7e:	687b      	ldr	r3, [r7, #4]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <_ZN10Net_bufferILh26EElsEs>:

template<uint8_t size_>
Net_buffer<size_>& Net_buffer<size_>::operator<< (int16_t v)
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	807b      	strh	r3, [r7, #2]
{
    uint8_t low, hi;
    to_bytes(v, low, hi);
 8004d94:	8879      	ldrh	r1, [r7, #2]
 8004d96:	f107 030e 	add.w	r3, r7, #14
 8004d9a:	f107 020f 	add.w	r2, r7, #15
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f8c2 	bl	8004f28 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>
    *this << hi << low;
 8004da4:	7bbb      	ldrb	r3, [r7, #14]
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f8d2 	bl	8004f52 <_ZN10Net_bufferILh26EElsEh>
 8004dae:	4602      	mov	r2, r0
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f000 f8cc 	bl	8004f52 <_ZN10Net_bufferILh26EElsEh>
    return *this;
 8004dba:	687b      	ldr	r3, [r7, #4]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <_ZN10Net_bufferILh26EElsEc>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (char v)
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	2b19      	cmp	r3, #25
 8004dd6:	d80c      	bhi.n	8004df2 <_ZN10Net_bufferILh26EElsEc+0x2e>
      buffer[end_i] = v;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	785b      	ldrb	r3, [r3, #1]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4413      	add	r3, r2
 8004de2:	78fa      	ldrb	r2, [r7, #3]
 8004de4:	709a      	strb	r2, [r3, #2]
      end_i++;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	785b      	ldrb	r3, [r3, #1]
 8004dea:	3301      	adds	r3, #1
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	705a      	strb	r2, [r3, #1]
    return *this;
 8004df2:	687b      	ldr	r3, [r7, #4]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr

08004dfe <_ZN10Net_bufferILh26EE4sizeEv>:
    uint8_t size()  { return end_i - begin_i; }
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	785a      	ldrb	r2, [r3, #1]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr

08004e1c <_ZN5UART_ILj26EE8transmitEv>:

	Net_buffer<buffer_size> buffer;

	void transmit(){
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
//		buffer.set_size(buffer_size - DMA1_Channel3->CNDTR);
		HAL_UART_Transmit_DMA(&huart3, buffer.ptr(), buffer.size());
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3304      	adds	r3, #4
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 f8af 	bl	8004f8c <_ZN10Net_bufferILh26EE3ptrEv>
 8004e2e:	4604      	mov	r4, r0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3304      	adds	r3, #4
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff ffe2 	bl	8004dfe <_ZN10Net_bufferILh26EE4sizeEv>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	4621      	mov	r1, r4
 8004e42:	4806      	ldr	r0, [pc, #24]	; (8004e5c <_ZN5UART_ILj26EE8transmitEv+0x40>)
 8004e44:	f004 f99e 	bl	8009184 <HAL_UART_Transmit_DMA>
		led_red = true;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fd f9ef 	bl	8002232 <_ZN3PinaSEb>
	}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd90      	pop	{r4, r7, pc}
 8004e5c:	20000284 	.word	0x20000284

08004e60 <_ZN5UART_ILj26EE7receiveEv>:

	void receive(){
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, buffer.ptr(), buffer_size);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 f88d 	bl	8004f8c <_ZN10Net_bufferILh26EE3ptrEv>
 8004e72:	4603      	mov	r3, r0
 8004e74:	221a      	movs	r2, #26
 8004e76:	4619      	mov	r1, r3
 8004e78:	4806      	ldr	r0, [pc, #24]	; (8004e94 <_ZN5UART_ILj26EE7receiveEv+0x34>)
 8004e7a:	f004 f9ef 	bl	800925c <HAL_UARTEx_ReceiveToIdle_DMA>
		led_red = false;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2100      	movs	r1, #0
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fd f9d4 	bl	8002232 <_ZN3PinaSEb>
	}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000284 	.word	0x20000284

08004e98 <_ZN10Net_bufferILh26EEC1Ev>:
    Net_buffer() {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
      clear();
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff ff44 	bl	8004d2e <_ZN10Net_bufferILh26EE5clearEv>
    }
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_>:
		uart_interrupt(Parent &parent) :
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fc fe8d 	bl	8001bdc <_ZN12InterruptingC1Ev>
 8004ec2:	4a09      	ldr	r2, [pc, #36]	; (8004ee8 <_ZN7ServiceI7In_data8Out_dataE14uart_interruptC1ERS2_+0x38>)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	605a      	str	r2, [r3, #4]
			parent.interrupt_usart.subscribe(this);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fc faef 	bl	80014ba <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	0800b110 	.word	0x0800b110

08004eec <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_>:
		dma_interrupt(Parent &parent) :
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
				parent(parent) {
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fc fe6f 	bl	8001bdc <_ZN12InterruptingC1Ev>
 8004efe:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <_ZN7ServiceI7In_data8Out_dataE13dma_interruptC1ERS2_+0x38>)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	605a      	str	r2, [r3, #4]
			parent.interrupt_DMA.subscribe(this);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	4611      	mov	r1, r2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fc fad1 	bl	80014ba <_ZN9Interrupt9subscribeEP12Interrupting>
		}
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	0800b104 	.word	0x0800b104

08004f28 <_ZN10Net_bufferILh26EE8to_bytesEtRhS1_>:
    void to_bytes (uint16_t v, uint8_t& low, uint8_t& hi)
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	607a      	str	r2, [r7, #4]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	460b      	mov	r3, r1
 8004f36:	817b      	strh	r3, [r7, #10]
        u.d16 = v;
 8004f38:	897b      	ldrh	r3, [r7, #10]
 8004f3a:	82bb      	strh	r3, [r7, #20]
        low = u.d8[0];
 8004f3c:	7d3a      	ldrb	r2, [r7, #20]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	701a      	strb	r2, [r3, #0]
        hi = u.d8[1];
 8004f42:	7d7a      	ldrb	r2, [r7, #21]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	701a      	strb	r2, [r3, #0]
    }
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <_ZN10Net_bufferILh26EElsEh>:
Net_buffer<size_>& Net_buffer<size_>::operator<< (uint8_t v)
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	70fb      	strb	r3, [r7, #3]
    if (end_i < size_) {
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	785b      	ldrb	r3, [r3, #1]
 8004f62:	2b19      	cmp	r3, #25
 8004f64:	d80c      	bhi.n	8004f80 <_ZN10Net_bufferILh26EElsEh+0x2e>
      buffer[end_i] = v;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	785b      	ldrb	r3, [r3, #1]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4413      	add	r3, r2
 8004f70:	78fa      	ldrb	r2, [r7, #3]
 8004f72:	709a      	strb	r2, [r3, #2]
      end_i++;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	785b      	ldrb	r3, [r3, #1]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	705a      	strb	r2, [r3, #1]
    return *this;
 8004f80:	687b      	ldr	r3, [r7, #4]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr

08004f8c <_ZN10Net_bufferILh26EE3ptrEv>:
    uint8_t* ptr() {return &buffer[0];}
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3302      	adds	r3, #2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr
	...

08004fa4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d107      	bne.n	8004fc4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d102      	bne.n	8004fc4 <_Z41__static_initialization_and_destruction_0ii+0x20>
} tickUpdater{};
 8004fbe:	4803      	ldr	r0, [pc, #12]	; (8004fcc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8004fc0:	f7fc f934 	bl	800122c <_ZN11TickUpdaterC1Ev>
 8004fc4:	bf00      	nop
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000098 	.word	0x20000098

08004fd0 <_ZN7ServiceI7In_data8Out_dataE13dma_interrupt9interruptEv>:
		void interrupt() override {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
			parent.dmaInterrupt();
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 f811 	bl	8005004 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>
		}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <_ZN7ServiceI7In_data8Out_dataE14uart_interrupt9interruptEv>:
		void interrupt() override {
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
			parent.uartInterrupt();
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 f811 	bl	800501e <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>
		}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <_ZN7ServiceI7In_data8Out_dataE12dmaInterruptEv>:
	void dmaInterrupt(){
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
		uart.receive();
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4618      	mov	r0, r3
 8005012:	f7ff ff25 	bl	8004e60 <_ZN5UART_ILj26EE7receiveEv>
	}
 8005016:	bf00      	nop
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <_ZN7ServiceI7In_data8Out_dataE13uartInterruptEv>:
	void uartInterrupt(){
 800501e:	b580      	push	{r7, lr}
 8005020:	b082      	sub	sp, #8
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
		event = true;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		timer.stop();
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	332c      	adds	r3, #44	; 0x2c
 8005032:	4618      	mov	r0, r3
 8005034:	f7fc fa09 	bl	800144a <_ZN5Timer4stopEv>
	}
 8005038:	bf00      	nop
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <_GLOBAL__sub_I_systemtick>:
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
 8005044:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005048:	2001      	movs	r0, #1
 800504a:	f7ff ffab 	bl	8004fa4 <_Z41__static_initialization_and_destruction_0ii>
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005056:	4b15      	ldr	r3, [pc, #84]	; (80050ac <HAL_MspInit+0x5c>)
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	4a14      	ldr	r2, [pc, #80]	; (80050ac <HAL_MspInit+0x5c>)
 800505c:	f043 0301 	orr.w	r3, r3, #1
 8005060:	6193      	str	r3, [r2, #24]
 8005062:	4b12      	ldr	r3, [pc, #72]	; (80050ac <HAL_MspInit+0x5c>)
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800506e:	4b0f      	ldr	r3, [pc, #60]	; (80050ac <HAL_MspInit+0x5c>)
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	4a0e      	ldr	r2, [pc, #56]	; (80050ac <HAL_MspInit+0x5c>)
 8005074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005078:	61d3      	str	r3, [r2, #28]
 800507a:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <HAL_MspInit+0x5c>)
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005082:	607b      	str	r3, [r7, #4]
 8005084:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005086:	4b0a      	ldr	r3, [pc, #40]	; (80050b0 <HAL_MspInit+0x60>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	4a04      	ldr	r2, [pc, #16]	; (80050b0 <HAL_MspInit+0x60>)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050a2:	bf00      	nop
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr
 80050ac:	40021000 	.word	0x40021000
 80050b0:	40010000 	.word	0x40010000

080050b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	; 0x28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050bc:	f107 0318 	add.w	r3, r7, #24
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	605a      	str	r2, [r3, #4]
 80050c6:	609a      	str	r2, [r3, #8]
 80050c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a44      	ldr	r2, [pc, #272]	; (80051e0 <HAL_ADC_MspInit+0x12c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d152      	bne.n	800517a <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80050d4:	4b43      	ldr	r3, [pc, #268]	; (80051e4 <HAL_ADC_MspInit+0x130>)
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	4a42      	ldr	r2, [pc, #264]	; (80051e4 <HAL_ADC_MspInit+0x130>)
 80050da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050de:	6193      	str	r3, [r2, #24]
 80050e0:	4b40      	ldr	r3, [pc, #256]	; (80051e4 <HAL_ADC_MspInit+0x130>)
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ec:	4b3d      	ldr	r3, [pc, #244]	; (80051e4 <HAL_ADC_MspInit+0x130>)
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	4a3c      	ldr	r2, [pc, #240]	; (80051e4 <HAL_ADC_MspInit+0x130>)
 80050f2:	f043 0304 	orr.w	r3, r3, #4
 80050f6:	6193      	str	r3, [r2, #24]
 80050f8:	4b3a      	ldr	r3, [pc, #232]	; (80051e4 <HAL_ADC_MspInit+0x130>)
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 8005104:	238b      	movs	r3, #139	; 0x8b
 8005106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005108:	2303      	movs	r3, #3
 800510a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800510c:	f107 0318 	add.w	r3, r7, #24
 8005110:	4619      	mov	r1, r3
 8005112:	4835      	ldr	r0, [pc, #212]	; (80051e8 <HAL_ADC_MspInit+0x134>)
 8005114:	f002 f874 	bl	8007200 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005118:	4b34      	ldr	r3, [pc, #208]	; (80051ec <HAL_ADC_MspInit+0x138>)
 800511a:	4a35      	ldr	r2, [pc, #212]	; (80051f0 <HAL_ADC_MspInit+0x13c>)
 800511c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800511e:	4b33      	ldr	r3, [pc, #204]	; (80051ec <HAL_ADC_MspInit+0x138>)
 8005120:	2200      	movs	r2, #0
 8005122:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005124:	4b31      	ldr	r3, [pc, #196]	; (80051ec <HAL_ADC_MspInit+0x138>)
 8005126:	2200      	movs	r2, #0
 8005128:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800512a:	4b30      	ldr	r3, [pc, #192]	; (80051ec <HAL_ADC_MspInit+0x138>)
 800512c:	2280      	movs	r2, #128	; 0x80
 800512e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005130:	4b2e      	ldr	r3, [pc, #184]	; (80051ec <HAL_ADC_MspInit+0x138>)
 8005132:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005136:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005138:	4b2c      	ldr	r3, [pc, #176]	; (80051ec <HAL_ADC_MspInit+0x138>)
 800513a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800513e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005140:	4b2a      	ldr	r3, [pc, #168]	; (80051ec <HAL_ADC_MspInit+0x138>)
 8005142:	2200      	movs	r2, #0
 8005144:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005146:	4b29      	ldr	r3, [pc, #164]	; (80051ec <HAL_ADC_MspInit+0x138>)
 8005148:	2200      	movs	r2, #0
 800514a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800514c:	4827      	ldr	r0, [pc, #156]	; (80051ec <HAL_ADC_MspInit+0x138>)
 800514e:	f001 fbd5 	bl	80068fc <HAL_DMA_Init>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8005158:	f7ff fa56 	bl	8004608 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a23      	ldr	r2, [pc, #140]	; (80051ec <HAL_ADC_MspInit+0x138>)
 8005160:	621a      	str	r2, [r3, #32]
 8005162:	4a22      	ldr	r2, [pc, #136]	; (80051ec <HAL_ADC_MspInit+0x138>)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8005168:	2200      	movs	r2, #0
 800516a:	2101      	movs	r1, #1
 800516c:	2012      	movs	r0, #18
 800516e:	f001 fb8e 	bl	800688e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005172:	2012      	movs	r0, #18
 8005174:	f001 fba7 	bl	80068c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005178:	e02e      	b.n	80051d8 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC2)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <HAL_ADC_MspInit+0x140>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d129      	bne.n	80051d8 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005184:	4b17      	ldr	r3, [pc, #92]	; (80051e4 <HAL_ADC_MspInit+0x130>)
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	4a16      	ldr	r2, [pc, #88]	; (80051e4 <HAL_ADC_MspInit+0x130>)
 800518a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800518e:	6193      	str	r3, [r2, #24]
 8005190:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <HAL_ADC_MspInit+0x130>)
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800519c:	4b11      	ldr	r3, [pc, #68]	; (80051e4 <HAL_ADC_MspInit+0x130>)
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	4a10      	ldr	r2, [pc, #64]	; (80051e4 <HAL_ADC_MspInit+0x130>)
 80051a2:	f043 0304 	orr.w	r3, r3, #4
 80051a6:	6193      	str	r3, [r2, #24]
 80051a8:	4b0e      	ldr	r3, [pc, #56]	; (80051e4 <HAL_ADC_MspInit+0x130>)
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80051b4:	2370      	movs	r3, #112	; 0x70
 80051b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051b8:	2303      	movs	r3, #3
 80051ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051bc:	f107 0318 	add.w	r3, r7, #24
 80051c0:	4619      	mov	r1, r3
 80051c2:	4809      	ldr	r0, [pc, #36]	; (80051e8 <HAL_ADC_MspInit+0x134>)
 80051c4:	f002 f81c 	bl	8007200 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 80051c8:	2200      	movs	r2, #0
 80051ca:	2101      	movs	r1, #1
 80051cc:	2012      	movs	r0, #18
 80051ce:	f001 fb5e 	bl	800688e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80051d2:	2012      	movs	r0, #18
 80051d4:	f001 fb77 	bl	80068c6 <HAL_NVIC_EnableIRQ>
}
 80051d8:	bf00      	nop
 80051da:	3728      	adds	r7, #40	; 0x28
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40012400 	.word	0x40012400
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40010800 	.word	0x40010800
 80051ec:	20000168 	.word	0x20000168
 80051f0:	40020008 	.word	0x40020008
 80051f4:	40012800 	.word	0x40012800

080051f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a12      	ldr	r2, [pc, #72]	; (8005250 <HAL_TIM_PWM_MspInit+0x58>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d10c      	bne.n	8005224 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800520a:	4b12      	ldr	r3, [pc, #72]	; (8005254 <HAL_TIM_PWM_MspInit+0x5c>)
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	4a11      	ldr	r2, [pc, #68]	; (8005254 <HAL_TIM_PWM_MspInit+0x5c>)
 8005210:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005214:	6193      	str	r3, [r2, #24]
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <HAL_TIM_PWM_MspInit+0x5c>)
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005222:	e010      	b.n	8005246 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a0b      	ldr	r2, [pc, #44]	; (8005258 <HAL_TIM_PWM_MspInit+0x60>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d10b      	bne.n	8005246 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800522e:	4b09      	ldr	r3, [pc, #36]	; (8005254 <HAL_TIM_PWM_MspInit+0x5c>)
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	4a08      	ldr	r2, [pc, #32]	; (8005254 <HAL_TIM_PWM_MspInit+0x5c>)
 8005234:	f043 0304 	orr.w	r3, r3, #4
 8005238:	61d3      	str	r3, [r2, #28]
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <HAL_TIM_PWM_MspInit+0x5c>)
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	68bb      	ldr	r3, [r7, #8]
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr
 8005250:	40012c00 	.word	0x40012c00
 8005254:	40021000 	.word	0x40021000
 8005258:	40000800 	.word	0x40000800

0800525c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a0d      	ldr	r2, [pc, #52]	; (80052a0 <HAL_TIM_OC_MspInit+0x44>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d113      	bne.n	8005296 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800526e:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <HAL_TIM_OC_MspInit+0x48>)
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	4a0c      	ldr	r2, [pc, #48]	; (80052a4 <HAL_TIM_OC_MspInit+0x48>)
 8005274:	f043 0302 	orr.w	r3, r3, #2
 8005278:	61d3      	str	r3, [r2, #28]
 800527a:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <HAL_TIM_OC_MspInit+0x48>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005286:	2200      	movs	r2, #0
 8005288:	2100      	movs	r1, #0
 800528a:	201d      	movs	r0, #29
 800528c:	f001 faff 	bl	800688e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005290:	201d      	movs	r0, #29
 8005292:	f001 fb18 	bl	80068c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005296:	bf00      	nop
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40000400 	.word	0x40000400
 80052a4:	40021000 	.word	0x40021000

080052a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	; 0x28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052b0:	f107 0318 	add.w	r3, r7, #24
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	609a      	str	r2, [r3, #8]
 80052bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a2b      	ldr	r2, [pc, #172]	; (8005370 <HAL_TIM_MspPostInit+0xc8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d132      	bne.n	800532e <HAL_TIM_MspPostInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052c8:	4b2a      	ldr	r3, [pc, #168]	; (8005374 <HAL_TIM_MspPostInit+0xcc>)
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	4a29      	ldr	r2, [pc, #164]	; (8005374 <HAL_TIM_MspPostInit+0xcc>)
 80052ce:	f043 0308 	orr.w	r3, r3, #8
 80052d2:	6193      	str	r3, [r2, #24]
 80052d4:	4b27      	ldr	r3, [pc, #156]	; (8005374 <HAL_TIM_MspPostInit+0xcc>)
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052e0:	4b24      	ldr	r3, [pc, #144]	; (8005374 <HAL_TIM_MspPostInit+0xcc>)
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	4a23      	ldr	r2, [pc, #140]	; (8005374 <HAL_TIM_MspPostInit+0xcc>)
 80052e6:	f043 0304 	orr.w	r3, r3, #4
 80052ea:	6193      	str	r3, [r2, #24]
 80052ec:	4b21      	ldr	r3, [pc, #132]	; (8005374 <HAL_TIM_MspPostInit+0xcc>)
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	693b      	ldr	r3, [r7, #16]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80052f8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80052fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052fe:	2302      	movs	r3, #2
 8005300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005302:	2302      	movs	r3, #2
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005306:	f107 0318 	add.w	r3, r7, #24
 800530a:	4619      	mov	r1, r3
 800530c:	481a      	ldr	r0, [pc, #104]	; (8005378 <HAL_TIM_MspPostInit+0xd0>)
 800530e:	f001 ff77 	bl	8007200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005312:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005318:	2302      	movs	r3, #2
 800531a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800531c:	2302      	movs	r3, #2
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005320:	f107 0318 	add.w	r3, r7, #24
 8005324:	4619      	mov	r1, r3
 8005326:	4815      	ldr	r0, [pc, #84]	; (800537c <HAL_TIM_MspPostInit+0xd4>)
 8005328:	f001 ff6a 	bl	8007200 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800532c:	e01c      	b.n	8005368 <HAL_TIM_MspPostInit+0xc0>
  else if(htim->Instance==TIM4)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a13      	ldr	r2, [pc, #76]	; (8005380 <HAL_TIM_MspPostInit+0xd8>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d117      	bne.n	8005368 <HAL_TIM_MspPostInit+0xc0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005338:	4b0e      	ldr	r3, [pc, #56]	; (8005374 <HAL_TIM_MspPostInit+0xcc>)
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	4a0d      	ldr	r2, [pc, #52]	; (8005374 <HAL_TIM_MspPostInit+0xcc>)
 800533e:	f043 0308 	orr.w	r3, r3, #8
 8005342:	6193      	str	r3, [r2, #24]
 8005344:	4b0b      	ldr	r3, [pc, #44]	; (8005374 <HAL_TIM_MspPostInit+0xcc>)
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005350:	2340      	movs	r3, #64	; 0x40
 8005352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005354:	2302      	movs	r3, #2
 8005356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005358:	2302      	movs	r3, #2
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800535c:	f107 0318 	add.w	r3, r7, #24
 8005360:	4619      	mov	r1, r3
 8005362:	4805      	ldr	r0, [pc, #20]	; (8005378 <HAL_TIM_MspPostInit+0xd0>)
 8005364:	f001 ff4c 	bl	8007200 <HAL_GPIO_Init>
}
 8005368:	bf00      	nop
 800536a:	3728      	adds	r7, #40	; 0x28
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	40012c00 	.word	0x40012c00
 8005374:	40021000 	.word	0x40021000
 8005378:	40010c00 	.word	0x40010c00
 800537c:	40010800 	.word	0x40010800
 8005380:	40000800 	.word	0x40000800

08005384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800538c:	f107 0314 	add.w	r3, r7, #20
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	605a      	str	r2, [r3, #4]
 8005396:	609a      	str	r2, [r3, #8]
 8005398:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a50      	ldr	r2, [pc, #320]	; (80054e0 <HAL_UART_MspInit+0x15c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	f040 8099 	bne.w	80054d8 <HAL_UART_MspInit+0x154>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80053a6:	4b4f      	ldr	r3, [pc, #316]	; (80054e4 <HAL_UART_MspInit+0x160>)
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	4a4e      	ldr	r2, [pc, #312]	; (80054e4 <HAL_UART_MspInit+0x160>)
 80053ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053b0:	61d3      	str	r3, [r2, #28]
 80053b2:	4b4c      	ldr	r3, [pc, #304]	; (80054e4 <HAL_UART_MspInit+0x160>)
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053be:	4b49      	ldr	r3, [pc, #292]	; (80054e4 <HAL_UART_MspInit+0x160>)
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	4a48      	ldr	r2, [pc, #288]	; (80054e4 <HAL_UART_MspInit+0x160>)
 80053c4:	f043 0310 	orr.w	r3, r3, #16
 80053c8:	6193      	str	r3, [r2, #24]
 80053ca:	4b46      	ldr	r3, [pc, #280]	; (80054e4 <HAL_UART_MspInit+0x160>)
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80053d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053dc:	2302      	movs	r3, #2
 80053de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053e0:	2303      	movs	r3, #3
 80053e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053e4:	f107 0314 	add.w	r3, r7, #20
 80053e8:	4619      	mov	r1, r3
 80053ea:	483f      	ldr	r0, [pc, #252]	; (80054e8 <HAL_UART_MspInit+0x164>)
 80053ec:	f001 ff08 	bl	8007200 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80053f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053fe:	f107 0314 	add.w	r3, r7, #20
 8005402:	4619      	mov	r1, r3
 8005404:	4838      	ldr	r0, [pc, #224]	; (80054e8 <HAL_UART_MspInit+0x164>)
 8005406:	f001 fefb 	bl	8007200 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800540a:	4b38      	ldr	r3, [pc, #224]	; (80054ec <HAL_UART_MspInit+0x168>)
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	f043 0310 	orr.w	r3, r3, #16
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
 8005428:	4a30      	ldr	r2, [pc, #192]	; (80054ec <HAL_UART_MspInit+0x168>)
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800542e:	4b30      	ldr	r3, [pc, #192]	; (80054f0 <HAL_UART_MspInit+0x16c>)
 8005430:	4a30      	ldr	r2, [pc, #192]	; (80054f4 <HAL_UART_MspInit+0x170>)
 8005432:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005434:	4b2e      	ldr	r3, [pc, #184]	; (80054f0 <HAL_UART_MspInit+0x16c>)
 8005436:	2210      	movs	r2, #16
 8005438:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800543a:	4b2d      	ldr	r3, [pc, #180]	; (80054f0 <HAL_UART_MspInit+0x16c>)
 800543c:	2200      	movs	r2, #0
 800543e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005440:	4b2b      	ldr	r3, [pc, #172]	; (80054f0 <HAL_UART_MspInit+0x16c>)
 8005442:	2280      	movs	r2, #128	; 0x80
 8005444:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005446:	4b2a      	ldr	r3, [pc, #168]	; (80054f0 <HAL_UART_MspInit+0x16c>)
 8005448:	2200      	movs	r2, #0
 800544a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800544c:	4b28      	ldr	r3, [pc, #160]	; (80054f0 <HAL_UART_MspInit+0x16c>)
 800544e:	2200      	movs	r2, #0
 8005450:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005452:	4b27      	ldr	r3, [pc, #156]	; (80054f0 <HAL_UART_MspInit+0x16c>)
 8005454:	2200      	movs	r2, #0
 8005456:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005458:	4b25      	ldr	r3, [pc, #148]	; (80054f0 <HAL_UART_MspInit+0x16c>)
 800545a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800545e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005460:	4823      	ldr	r0, [pc, #140]	; (80054f0 <HAL_UART_MspInit+0x16c>)
 8005462:	f001 fa4b 	bl	80068fc <HAL_DMA_Init>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 800546c:	f7ff f8cc 	bl	8004608 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a1f      	ldr	r2, [pc, #124]	; (80054f0 <HAL_UART_MspInit+0x16c>)
 8005474:	635a      	str	r2, [r3, #52]	; 0x34
 8005476:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <HAL_UART_MspInit+0x16c>)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800547c:	4b1e      	ldr	r3, [pc, #120]	; (80054f8 <HAL_UART_MspInit+0x174>)
 800547e:	4a1f      	ldr	r2, [pc, #124]	; (80054fc <HAL_UART_MspInit+0x178>)
 8005480:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005482:	4b1d      	ldr	r3, [pc, #116]	; (80054f8 <HAL_UART_MspInit+0x174>)
 8005484:	2200      	movs	r2, #0
 8005486:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005488:	4b1b      	ldr	r3, [pc, #108]	; (80054f8 <HAL_UART_MspInit+0x174>)
 800548a:	2200      	movs	r2, #0
 800548c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800548e:	4b1a      	ldr	r3, [pc, #104]	; (80054f8 <HAL_UART_MspInit+0x174>)
 8005490:	2280      	movs	r2, #128	; 0x80
 8005492:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005494:	4b18      	ldr	r3, [pc, #96]	; (80054f8 <HAL_UART_MspInit+0x174>)
 8005496:	2200      	movs	r2, #0
 8005498:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800549a:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <HAL_UART_MspInit+0x174>)
 800549c:	2200      	movs	r2, #0
 800549e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80054a0:	4b15      	ldr	r3, [pc, #84]	; (80054f8 <HAL_UART_MspInit+0x174>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80054a6:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <HAL_UART_MspInit+0x174>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80054ac:	4812      	ldr	r0, [pc, #72]	; (80054f8 <HAL_UART_MspInit+0x174>)
 80054ae:	f001 fa25 	bl	80068fc <HAL_DMA_Init>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80054b8:	f7ff f8a6 	bl	8004608 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a0e      	ldr	r2, [pc, #56]	; (80054f8 <HAL_UART_MspInit+0x174>)
 80054c0:	639a      	str	r2, [r3, #56]	; 0x38
 80054c2:	4a0d      	ldr	r2, [pc, #52]	; (80054f8 <HAL_UART_MspInit+0x174>)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 80054c8:	2200      	movs	r2, #0
 80054ca:	2102      	movs	r1, #2
 80054cc:	2027      	movs	r0, #39	; 0x27
 80054ce:	f001 f9de 	bl	800688e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80054d2:	2027      	movs	r0, #39	; 0x27
 80054d4:	f001 f9f7 	bl	80068c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80054d8:	bf00      	nop
 80054da:	3728      	adds	r7, #40	; 0x28
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40004800 	.word	0x40004800
 80054e4:	40021000 	.word	0x40021000
 80054e8:	40011000 	.word	0x40011000
 80054ec:	40010000 	.word	0x40010000
 80054f0:	200002c8 	.word	0x200002c8
 80054f4:	4002001c 	.word	0x4002001c
 80054f8:	2000030c 	.word	0x2000030c
 80054fc:	40020030 	.word	0x40020030

08005500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005504:	e7fe      	b.n	8005504 <NMI_Handler+0x4>

08005506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005506:	b480      	push	{r7}
 8005508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800550a:	e7fe      	b.n	800550a <HardFault_Handler+0x4>

0800550c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005510:	e7fe      	b.n	8005510 <MemManage_Handler+0x4>

08005512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005512:	b480      	push	{r7}
 8005514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005516:	e7fe      	b.n	8005516 <BusFault_Handler+0x4>

08005518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800551c:	e7fe      	b.n	800551c <UsageFault_Handler+0x4>

0800551e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800551e:	b480      	push	{r7}
 8005520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005522:	bf00      	nop
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr

0800552a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800552a:	b480      	push	{r7}
 800552c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800552e:	bf00      	nop
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005536:	b480      	push	{r7}
 8005538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800553a:	bf00      	nop
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr

08005542 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005546:	f7fb fe95 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005554:	4802      	ldr	r0, [pc, #8]	; (8005560 <DMA1_Channel1_IRQHandler+0x10>)
 8005556:	f001 fbe9 	bl	8006d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800555a:	bf00      	nop
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20000168 	.word	0x20000168

08005564 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005568:	4802      	ldr	r0, [pc, #8]	; (8005574 <DMA1_Channel2_IRQHandler+0x10>)
 800556a:	f001 fbdf 	bl	8006d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800556e:	bf00      	nop
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	200002c8 	.word	0x200002c8

08005578 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800557c:	4802      	ldr	r0, [pc, #8]	; (8005588 <DMA1_Channel3_IRQHandler+0x10>)
 800557e:	f001 fbd5 	bl	8006d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005582:	bf00      	nop
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	2000030c 	.word	0x2000030c

0800558c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005590:	4803      	ldr	r0, [pc, #12]	; (80055a0 <ADC1_2_IRQHandler+0x14>)
 8005592:	f000 face 	bl	8005b32 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005596:	4803      	ldr	r0, [pc, #12]	; (80055a4 <ADC1_2_IRQHandler+0x18>)
 8005598:	f000 facb 	bl	8005b32 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800559c:	bf00      	nop
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20000108 	.word	0x20000108
 80055a4:	20000138 	.word	0x20000138

080055a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80055ac:	4802      	ldr	r0, [pc, #8]	; (80055b8 <TIM3_IRQHandler+0x10>)
 80055ae:	f002 ff13 	bl	80083d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80055b2:	bf00      	nop
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	200001f4 	.word	0x200001f4

080055bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80055c0:	4802      	ldr	r0, [pc, #8]	; (80055cc <USART3_IRQHandler+0x10>)
 80055c2:	f003 fe9b 	bl	80092fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80055c6:	bf00      	nop
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000284 	.word	0x20000284

080055d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
	return 1;
 80055d4:	2301      	movs	r3, #1
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	4770      	bx	lr

080055de <_kill>:

int _kill(int pid, int sig)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80055e8:	f005 fce0 	bl	800afac <__errno>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2216      	movs	r2, #22
 80055f0:	601a      	str	r2, [r3, #0]
	return -1;
 80055f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <_exit>:

void _exit (int status)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b082      	sub	sp, #8
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005606:	f04f 31ff 	mov.w	r1, #4294967295
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff ffe7 	bl	80055de <_kill>
	while (1) {}		/* Make sure we hang here */
 8005610:	e7fe      	b.n	8005610 <_exit+0x12>

08005612 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005612:	b480      	push	{r7}
 8005614:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005616:	bf00      	nop
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr
	...

08005620 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8005620:	480c      	ldr	r0, [pc, #48]	; (8005654 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005622:	490d      	ldr	r1, [pc, #52]	; (8005658 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005624:	4a0d      	ldr	r2, [pc, #52]	; (800565c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005628:	e002      	b.n	8005630 <LoopCopyDataInit>

0800562a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800562a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800562c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800562e:	3304      	adds	r3, #4

08005630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005634:	d3f9      	bcc.n	800562a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005636:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005638:	4c0a      	ldr	r4, [pc, #40]	; (8005664 <LoopFillZerobss+0x22>)
  movs r3, #0
 800563a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800563c:	e001      	b.n	8005642 <LoopFillZerobss>

0800563e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800563e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005640:	3204      	adds	r2, #4

08005642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005644:	d3fb      	bcc.n	800563e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005646:	f7ff ffe4 	bl	8005612 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800564a:	f005 fcb5 	bl	800afb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800564e:	f7fe faeb 	bl	8003c28 <main>
  bx lr
 8005652:	4770      	bx	lr
  ldr r0, =_sdata
 8005654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005658:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800565c:	0800b1d4 	.word	0x0800b1d4
  ldr r2, =_sbss
 8005660:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8005664:	20000370 	.word	0x20000370

08005668 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005668:	e7fe      	b.n	8005668 <ADC3_IRQHandler>
	...

0800566c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005670:	4b08      	ldr	r3, [pc, #32]	; (8005694 <HAL_Init+0x28>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a07      	ldr	r2, [pc, #28]	; (8005694 <HAL_Init+0x28>)
 8005676:	f043 0310 	orr.w	r3, r3, #16
 800567a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800567c:	2003      	movs	r0, #3
 800567e:	f001 f8fb 	bl	8006878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005682:	2001      	movs	r0, #1
 8005684:	f000 f808 	bl	8005698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005688:	f7ff fce2 	bl	8005050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40022000 	.word	0x40022000

08005698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056a0:	4b12      	ldr	r3, [pc, #72]	; (80056ec <HAL_InitTick+0x54>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	4b12      	ldr	r3, [pc, #72]	; (80056f0 <HAL_InitTick+0x58>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	4619      	mov	r1, r3
 80056aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 f913 	bl	80068e2 <HAL_SYSTICK_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e00e      	b.n	80056e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b0f      	cmp	r3, #15
 80056ca:	d80a      	bhi.n	80056e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056cc:	2200      	movs	r2, #0
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	f04f 30ff 	mov.w	r0, #4294967295
 80056d4:	f001 f8db 	bl	800688e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80056d8:	4a06      	ldr	r2, [pc, #24]	; (80056f4 <HAL_InitTick+0x5c>)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	e000      	b.n	80056e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	20000000 	.word	0x20000000
 80056f0:	20000008 	.word	0x20000008
 80056f4:	20000004 	.word	0x20000004

080056f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  return uwTick;
 80056fc:	4b02      	ldr	r3, [pc, #8]	; (8005708 <HAL_GetTick+0x10>)
 80056fe:	681b      	ldr	r3, [r3, #0]
}
 8005700:	4618      	mov	r0, r3
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr
 8005708:	20000368 	.word	0x20000368

0800570c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e0ce      	b.n	80058cc <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005738:	2b00      	cmp	r3, #0
 800573a:	d109      	bne.n	8005750 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff fcb2 	bl	80050b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 fc6b 	bl	800602c <ADC_ConversionStop_Disable>
 8005756:	4603      	mov	r3, r0
 8005758:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	f003 0310 	and.w	r3, r3, #16
 8005762:	2b00      	cmp	r3, #0
 8005764:	f040 80a9 	bne.w	80058ba <HAL_ADC_Init+0x1ae>
 8005768:	7dfb      	ldrb	r3, [r7, #23]
 800576a:	2b00      	cmp	r3, #0
 800576c:	f040 80a5 	bne.w	80058ba <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005778:	f023 0302 	bic.w	r3, r3, #2
 800577c:	f043 0202 	orr.w	r2, r3, #2
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4951      	ldr	r1, [pc, #324]	; (80058d4 <HAL_ADC_Init+0x1c8>)
 800578e:	428b      	cmp	r3, r1
 8005790:	d10a      	bne.n	80057a8 <HAL_ADC_Init+0x9c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800579a:	d002      	beq.n	80057a2 <HAL_ADC_Init+0x96>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	e004      	b.n	80057ac <HAL_ADC_Init+0xa0>
 80057a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80057a6:	e001      	b.n	80057ac <HAL_ADC_Init+0xa0>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80057ac:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	7b1b      	ldrb	r3, [r3, #12]
 80057b2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80057b4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c4:	d003      	beq.n	80057ce <HAL_ADC_Init+0xc2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d102      	bne.n	80057d4 <HAL_ADC_Init+0xc8>
 80057ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057d2:	e000      	b.n	80057d6 <HAL_ADC_Init+0xca>
 80057d4:	2300      	movs	r3, #0
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	7d1b      	ldrb	r3, [r3, #20]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d119      	bne.n	8005818 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	7b1b      	ldrb	r3, [r3, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d109      	bne.n	8005800 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	3b01      	subs	r3, #1
 80057f2:	035a      	lsls	r2, r3, #13
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	e00b      	b.n	8005818 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	f043 0220 	orr.w	r2, r3, #32
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	f043 0201 	orr.w	r2, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	430a      	orrs	r2, r1
 800582a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	4b29      	ldr	r3, [pc, #164]	; (80058d8 <HAL_ADC_Init+0x1cc>)
 8005834:	4013      	ands	r3, r2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	430b      	orrs	r3, r1
 800583e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005848:	d003      	beq.n	8005852 <HAL_ADC_Init+0x146>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d104      	bne.n	800585c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	3b01      	subs	r3, #1
 8005858:	051b      	lsls	r3, r3, #20
 800585a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	430a      	orrs	r2, r1
 800586e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	4b19      	ldr	r3, [pc, #100]	; (80058dc <HAL_ADC_Init+0x1d0>)
 8005878:	4013      	ands	r3, r2
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	429a      	cmp	r2, r3
 800587e:	d10b      	bne.n	8005898 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588a:	f023 0303 	bic.w	r3, r3, #3
 800588e:	f043 0201 	orr.w	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005896:	e018      	b.n	80058ca <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589c:	f023 0312 	bic.w	r3, r3, #18
 80058a0:	f043 0210 	orr.w	r2, r3, #16
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	f043 0201 	orr.w	r2, r3, #1
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80058b8:	e007      	b.n	80058ca <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058be:	f043 0210 	orr.w	r2, r3, #16
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80058ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40013c00 	.word	0x40013c00
 80058d8:	ffe1f7fd 	.word	0xffe1f7fd
 80058dc:	ff1f0efe 	.word	0xff1f0efe

080058e0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a64      	ldr	r2, [pc, #400]	; (8005a88 <HAL_ADC_Start_DMA+0x1a8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d004      	beq.n	8005904 <HAL_ADC_Start_DMA+0x24>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a63      	ldr	r2, [pc, #396]	; (8005a8c <HAL_ADC_Start_DMA+0x1ac>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d106      	bne.n	8005912 <HAL_ADC_Start_DMA+0x32>
 8005904:	4b60      	ldr	r3, [pc, #384]	; (8005a88 <HAL_ADC_Start_DMA+0x1a8>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800590c:	2b00      	cmp	r3, #0
 800590e:	f040 80b3 	bne.w	8005a78 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_ADC_Start_DMA+0x40>
 800591c:	2302      	movs	r3, #2
 800591e:	e0ae      	b.n	8005a7e <HAL_ADC_Start_DMA+0x19e>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 fb25 	bl	8005f78 <ADC_Enable>
 800592e:	4603      	mov	r3, r0
 8005930:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005932:	7dfb      	ldrb	r3, [r7, #23]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f040 809a 	bne.w	8005a6e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005942:	f023 0301 	bic.w	r3, r3, #1
 8005946:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a4e      	ldr	r2, [pc, #312]	; (8005a8c <HAL_ADC_Start_DMA+0x1ac>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d105      	bne.n	8005964 <HAL_ADC_Start_DMA+0x84>
 8005958:	4b4b      	ldr	r3, [pc, #300]	; (8005a88 <HAL_ADC_Start_DMA+0x1a8>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d115      	bne.n	8005990 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005968:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800597a:	2b00      	cmp	r3, #0
 800597c:	d026      	beq.n	80059cc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005982:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005986:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800598e:	e01d      	b.n	80059cc <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005994:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a39      	ldr	r2, [pc, #228]	; (8005a88 <HAL_ADC_Start_DMA+0x1a8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_ADC_Start_DMA+0xd0>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a38      	ldr	r2, [pc, #224]	; (8005a8c <HAL_ADC_Start_DMA+0x1ac>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10d      	bne.n	80059cc <HAL_ADC_Start_DMA+0xec>
 80059b0:	4b35      	ldr	r3, [pc, #212]	; (8005a88 <HAL_ADC_Start_DMA+0x1a8>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80059c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d006      	beq.n	80059e6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	f023 0206 	bic.w	r2, r3, #6
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80059e4:	e002      	b.n	80059ec <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	4a25      	ldr	r2, [pc, #148]	; (8005a90 <HAL_ADC_Start_DMA+0x1b0>)
 80059fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	4a24      	ldr	r2, [pc, #144]	; (8005a94 <HAL_ADC_Start_DMA+0x1b4>)
 8005a02:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	4a23      	ldr	r2, [pc, #140]	; (8005a98 <HAL_ADC_Start_DMA+0x1b8>)
 8005a0a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0202 	mvn.w	r2, #2
 8005a14:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a24:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a18      	ldr	r0, [r3, #32]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	334c      	adds	r3, #76	; 0x4c
 8005a30:	4619      	mov	r1, r3
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f000 ffd7 	bl	80069e8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005a44:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005a48:	d108      	bne.n	8005a5c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005a58:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005a5a:	e00f      	b.n	8005a7c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a6a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8005a6c:	e006      	b.n	8005a7c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8005a76:	e001      	b.n	8005a7c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	40012400 	.word	0x40012400
 8005a8c:	40012800 	.word	0x40012800
 8005a90:	080060af 	.word	0x080060af
 8005a94:	0800612b 	.word	0x0800612b
 8005a98:	08006147 	.word	0x08006147

08005a9c <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_ADC_Stop_DMA+0x1a>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e039      	b.n	8005b2a <HAL_ADC_Stop_DMA+0x8e>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fab4 	bl	800602c <ADC_ConversionStop_Disable>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d128      	bne.n	8005b20 <HAL_ADC_Stop_DMA+0x84>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005adc:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d11a      	bne.n	8005b20 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 ffd9 	bl	8006aa6 <HAL_DMA_Abort>
 8005af4:	4603      	mov	r3, r0
 8005af6:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10a      	bne.n	8005b14 <HAL_ADC_Stop_DMA+0x78>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005b06:	f023 0301 	bic.w	r3, r3, #1
 8005b0a:	f043 0201 	orr.w	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	629a      	str	r2, [r3, #40]	; 0x28
 8005b12:	e005      	b.n	8005b20 <HAL_ADC_Stop_DMA+0x84>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b082      	sub	sp, #8
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f003 0320 	and.w	r3, r3, #32
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	d140      	bne.n	8005bca <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d139      	bne.n	8005bca <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	f003 0310 	and.w	r3, r3, #16
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d105      	bne.n	8005b6e <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005b78:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005b7c:	d11d      	bne.n	8005bba <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d119      	bne.n	8005bba <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0220 	bic.w	r2, r2, #32
 8005b94:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d105      	bne.n	8005bba <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb2:	f043 0201 	orr.w	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7fc fac8 	bl	8002150 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f06f 0212 	mvn.w	r2, #18
 8005bc8:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd4:	2b80      	cmp	r3, #128	; 0x80
 8005bd6:	d14f      	bne.n	8005c78 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d148      	bne.n	8005c78 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d105      	bne.n	8005bfe <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005c08:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8005c0c:	d012      	beq.n	8005c34 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d125      	bne.n	8005c68 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8005c26:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005c2a:	d11d      	bne.n	8005c68 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d119      	bne.n	8005c68 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c42:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d105      	bne.n	8005c68 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c60:	f043 0201 	orr.w	r2, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7fc fa85 	bl	8002178 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f06f 020c 	mvn.w	r2, #12
 8005c76:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c82:	2b40      	cmp	r3, #64	; 0x40
 8005c84:	d114      	bne.n	8005cb0 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d10d      	bne.n	8005cb0 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fd ffad 	bl	8003c00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f06f 0201 	mvn.w	r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8005cb0:	bf00      	nop
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr

08005cca <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_ADC_ConfigChannel+0x20>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e0dc      	b.n	8005eb6 <HAL_ADC_ConfigChannel+0x1da>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b06      	cmp	r3, #6
 8005d0a:	d81c      	bhi.n	8005d46 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3b05      	subs	r3, #5
 8005d1e:	221f      	movs	r2, #31
 8005d20:	fa02 f303 	lsl.w	r3, r2, r3
 8005d24:	43db      	mvns	r3, r3
 8005d26:	4019      	ands	r1, r3
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	6818      	ldr	r0, [r3, #0]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	3b05      	subs	r3, #5
 8005d38:	fa00 f203 	lsl.w	r2, r0, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	635a      	str	r2, [r3, #52]	; 0x34
 8005d44:	e03c      	b.n	8005dc0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2b0c      	cmp	r3, #12
 8005d4c:	d81c      	bhi.n	8005d88 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	3b23      	subs	r3, #35	; 0x23
 8005d60:	221f      	movs	r2, #31
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	43db      	mvns	r3, r3
 8005d68:	4019      	ands	r1, r3
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6818      	ldr	r0, [r3, #0]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	3b23      	subs	r3, #35	; 0x23
 8005d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	631a      	str	r2, [r3, #48]	; 0x30
 8005d86:	e01b      	b.n	8005dc0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	3b41      	subs	r3, #65	; 0x41
 8005d9a:	221f      	movs	r2, #31
 8005d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005da0:	43db      	mvns	r3, r3
 8005da2:	4019      	ands	r1, r3
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	6818      	ldr	r0, [r3, #0]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	3b41      	subs	r3, #65	; 0x41
 8005db4:	fa00 f203 	lsl.w	r2, r0, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b09      	cmp	r3, #9
 8005dc6:	d91c      	bls.n	8005e02 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68d9      	ldr	r1, [r3, #12]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3b1e      	subs	r3, #30
 8005dda:	2207      	movs	r2, #7
 8005ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8005de0:	43db      	mvns	r3, r3
 8005de2:	4019      	ands	r1, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	6898      	ldr	r0, [r3, #8]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	4413      	add	r3, r2
 8005df2:	3b1e      	subs	r3, #30
 8005df4:	fa00 f203 	lsl.w	r2, r0, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	60da      	str	r2, [r3, #12]
 8005e00:	e019      	b.n	8005e36 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6919      	ldr	r1, [r3, #16]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	4413      	add	r3, r2
 8005e12:	2207      	movs	r2, #7
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	4019      	ands	r1, r3
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	6898      	ldr	r0, [r3, #8]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	4613      	mov	r3, r2
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	4413      	add	r3, r2
 8005e2a:	fa00 f203 	lsl.w	r2, r0, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b10      	cmp	r3, #16
 8005e3c:	d003      	beq.n	8005e46 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005e42:	2b11      	cmp	r3, #17
 8005e44:	d132      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1d      	ldr	r2, [pc, #116]	; (8005ec0 <HAL_ADC_ConfigChannel+0x1e4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d125      	bne.n	8005e9c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d126      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005e6c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b10      	cmp	r3, #16
 8005e74:	d11a      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005e76:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <HAL_ADC_ConfigChannel+0x1e8>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a13      	ldr	r2, [pc, #76]	; (8005ec8 <HAL_ADC_ConfigChannel+0x1ec>)
 8005e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e80:	0c9a      	lsrs	r2, r3, #18
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005e8c:	e002      	b.n	8005e94 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f9      	bne.n	8005e8e <HAL_ADC_ConfigChannel+0x1b2>
 8005e9a:	e007      	b.n	8005eac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea0:	f043 0220 	orr.w	r2, r3, #32
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr
 8005ec0:	40012400 	.word	0x40012400
 8005ec4:	20000000 	.word	0x20000000
 8005ec8:	431bde83 	.word	0x431bde83

08005ecc <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a24      	ldr	r2, [pc, #144]	; (8005f6c <HAL_ADC_AnalogWDGConfig+0xa0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d003      	beq.n	8005ee8 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005ee4:	4a22      	ldr	r2, [pc, #136]	; (8005f70 <HAL_ADC_AnalogWDGConfig+0xa4>)
 8005ee6:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_ADC_AnalogWDGConfig+0x2a>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e035      	b.n	8005f62 <HAL_ADC_AnalogWDGConfig+0x96>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	7a1b      	ldrb	r3, [r3, #8]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d108      	bne.n	8005f18 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f14:	605a      	str	r2, [r3, #4]
 8005f16:	e007      	b.n	8005f28 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f26:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	4b11      	ldr	r3, [pc, #68]	; (8005f74 <HAL_ADC_AnalogWDGConfig+0xa8>)
 8005f30:	4013      	ands	r3, r2
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	6811      	ldr	r1, [r2, #0]
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	6852      	ldr	r2, [r2, #4]
 8005f3a:	4311      	orrs	r1, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6812      	ldr	r2, [r2, #0]
 8005f40:	430b      	orrs	r3, r1
 8005f42:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	68d2      	ldr	r2, [r2, #12]
 8005f4c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	6912      	ldr	r2, [r2, #16]
 8005f56:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr
 8005f6c:	00800200 	.word	0x00800200
 8005f70:	00400200 	.word	0x00400200
 8005f74:	ff3ffde0 	.word	0xff3ffde0

08005f78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d040      	beq.n	8006018 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005fa6:	4b1f      	ldr	r3, [pc, #124]	; (8006024 <ADC_Enable+0xac>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1f      	ldr	r2, [pc, #124]	; (8006028 <ADC_Enable+0xb0>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	0c9b      	lsrs	r3, r3, #18
 8005fb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005fb4:	e002      	b.n	8005fbc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1f9      	bne.n	8005fb6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005fc2:	f7ff fb99 	bl	80056f8 <HAL_GetTick>
 8005fc6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005fc8:	e01f      	b.n	800600a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005fca:	f7ff fb95 	bl	80056f8 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d918      	bls.n	800600a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d011      	beq.n	800600a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fea:	f043 0210 	orr.w	r2, r3, #16
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	f043 0201 	orr.w	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e007      	b.n	800601a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b01      	cmp	r3, #1
 8006016:	d1d8      	bne.n	8005fca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000000 	.word	0x20000000
 8006028:	431bde83 	.word	0x431bde83

0800602c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b01      	cmp	r3, #1
 8006044:	d12e      	bne.n	80060a4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 0201 	bic.w	r2, r2, #1
 8006054:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006056:	f7ff fb4f 	bl	80056f8 <HAL_GetTick>
 800605a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800605c:	e01b      	b.n	8006096 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800605e:	f7ff fb4b 	bl	80056f8 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d914      	bls.n	8006096 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b01      	cmp	r3, #1
 8006078:	d10d      	bne.n	8006096 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	f043 0210 	orr.w	r2, r3, #16
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	f043 0201 	orr.w	r2, r3, #1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e007      	b.n	80060a6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d0dc      	beq.n	800605e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d127      	bne.n	8006118 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80060de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80060e2:	d115      	bne.n	8006110 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d111      	bne.n	8006110 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d105      	bne.n	8006110 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006108:	f043 0201 	orr.w	r2, r3, #1
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f7fc f81d 	bl	8002150 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006116:	e004      	b.n	8006122 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
}
 8006122:	bf00      	nop
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7ff fdbd 	bl	8005cb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800613e:	bf00      	nop
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b084      	sub	sp, #16
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	f043 0204 	orr.w	r2, r3, #4
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f7ff fdac 	bl	8005cca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006172:	bf00      	nop
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <HAL_ADCEx_InjectedStart_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800618e:	2b01      	cmp	r3, #1
 8006190:	d101      	bne.n	8006196 <HAL_ADCEx_InjectedStart_IT+0x1a>
 8006192:	2302      	movs	r3, #2
 8006194:	e078      	b.n	8006288 <HAL_ADCEx_InjectedStart_IT+0x10c>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff feea 	bl	8005f78 <ADC_Enable>
 80061a4:	4603      	mov	r3, r0
 80061a6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d167      	bne.n	800627e <HAL_ADCEx_InjectedStart_IT+0x102>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80061b6:	f023 0301 	bic.w	r3, r3, #1
 80061ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a32      	ldr	r2, [pc, #200]	; (8006290 <HAL_ADCEx_InjectedStart_IT+0x114>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d105      	bne.n	80061d8 <HAL_ADCEx_InjectedStart_IT+0x5c>
 80061cc:	4b31      	ldr	r3, [pc, #196]	; (8006294 <HAL_ADCEx_InjectedStart_IT+0x118>)
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d106      	bne.n	80061e6 <HAL_ADCEx_InjectedStart_IT+0x6a>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	629a      	str	r2, [r3, #40]	; 0x28
 80061e4:	e005      	b.n	80061f2 <HAL_ADCEx_InjectedStart_IT+0x76>
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d102      	bne.n	8006204 <HAL_ADCEx_InjectedStart_IT+0x88>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0204 	mvn.w	r2, #4
 8006214:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006224:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006230:	2b00      	cmp	r3, #0
 8006232:	d128      	bne.n	8006286 <HAL_ADCEx_InjectedStart_IT+0x10a>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800623e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8006242:	d113      	bne.n	800626c <HAL_ADCEx_InjectedStart_IT+0xf0>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8006248:	4a11      	ldr	r2, [pc, #68]	; (8006290 <HAL_ADCEx_InjectedStart_IT+0x114>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d105      	bne.n	800625a <HAL_ADCEx_InjectedStart_IT+0xde>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800624e:	4b11      	ldr	r3, [pc, #68]	; (8006294 <HAL_ADCEx_InjectedStart_IT+0x118>)
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8006256:	2b00      	cmp	r3, #0
 8006258:	d108      	bne.n	800626c <HAL_ADCEx_InjectedStart_IT+0xf0>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
 8006268:	609a      	str	r2, [r3, #8]
 800626a:	e00c      	b.n	8006286 <HAL_ADCEx_InjectedStart_IT+0x10a>
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800627a:	609a      	str	r2, [r3, #8]
 800627c:	e003      	b.n	8006286 <HAL_ADCEx_InjectedStart_IT+0x10a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006286:	7bfb      	ldrb	r3, [r7, #15]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40012800 	.word	0x40012800
 8006294:	40012400 	.word	0x40012400

08006298 <HAL_ADCEx_InjectedStop_IT>:
  *         function HAL_ADC_Stop must be used.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d101      	bne.n	80062b2 <HAL_ADCEx_InjectedStop_IT+0x1a>
 80062ae:	2302      	movs	r3, #2
 80062b0:	e038      	b.n	8006324 <HAL_ADCEx_InjectedStop_IT+0x8c>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d121      	bne.n	800630a <HAL_ADCEx_InjectedStop_IT+0x72>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d11a      	bne.n	800630a <HAL_ADCEx_InjectedStop_IT+0x72>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff fea9 	bl	800602c <ADC_ConversionStop_Disable>
 80062da:	4603      	mov	r3, r0
 80062dc:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d11a      	bne.n	800631a <HAL_ADCEx_InjectedStop_IT+0x82>
    {
      /* Disable ADC end of conversion interrupt for injected channels */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80062fc:	f023 0301 	bic.w	r3, r3, #1
 8006300:	f043 0201 	orr.w	r2, r3, #1
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	629a      	str	r2, [r3, #40]	; 0x28
    if (tmp_hal_status == HAL_OK)
 8006308:	e007      	b.n	800631a <HAL_ADCEx_InjectedStop_IT+0x82>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630e:	f043 0220 	orr.w	r2, r3, #32
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	629a      	str	r2, [r3, #40]	; 0x28
      
    tmp_hal_status = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006322:	7bfb      	ldrb	r3, [r7, #15]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b04      	cmp	r3, #4
 800633e:	d009      	beq.n	8006354 <HAL_ADCEx_InjectedGetValue+0x28>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b04      	cmp	r3, #4
 8006344:	d815      	bhi.n	8006372 <HAL_ADCEx_InjectedGetValue+0x46>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b02      	cmp	r3, #2
 800634a:	d00d      	beq.n	8006368 <HAL_ADCEx_InjectedGetValue+0x3c>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b03      	cmp	r3, #3
 8006350:	d005      	beq.n	800635e <HAL_ADCEx_InjectedGetValue+0x32>
 8006352:	e00e      	b.n	8006372 <HAL_ADCEx_InjectedGetValue+0x46>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800635a:	60fb      	str	r3, [r7, #12]
      break;
 800635c:	e00e      	b.n	800637c <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006364:	60fb      	str	r3, [r7, #12]
      break;
 8006366:	e009      	b.n	800637c <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	60fb      	str	r3, [r7, #12]
      break;
 8006370:	e004      	b.n	800637c <HAL_ADCEx_InjectedGetValue+0x50>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006378:	60fb      	str	r3, [r7, #12]
      break;
 800637a:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 800637c:	68fb      	ldr	r3, [r7, #12]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	bc80      	pop	{r7}
 8006386:	4770      	bx	lr

08006388 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8006388:	b490      	push	{r4, r7}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_ADCEx_InjectedConfigChannel+0x20>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e18d      	b.n	80066c4 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d119      	bne.n	80063ec <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d10c      	bne.n	80063da <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c6:	0d9b      	lsrs	r3, r3, #22
 80063c8:	059b      	lsls	r3, r3, #22
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	03d1      	lsls	r1, r2, #15
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6812      	ldr	r2, [r2, #0]
 80063d4:	430b      	orrs	r3, r1
 80063d6:	6393      	str	r3, [r2, #56]	; 0x38
 80063d8:	e04f      	b.n	800647a <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063de:	f043 0220 	orr.w	r2, r3, #32
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	73fb      	strb	r3, [r7, #15]
 80063ea:	e046      	b.n	800647a <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d82a      	bhi.n	800644e <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	1ad2      	subs	r2, r2, r3
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	330f      	adds	r3, #15
 8006410:	221f      	movs	r2, #31
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800641a:	43db      	mvns	r3, r3
 800641c:	4019      	ands	r1, r3
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	3b01      	subs	r3, #1
 8006424:	0518      	lsls	r0, r3, #20
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681c      	ldr	r4, [r3, #0]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	1ad2      	subs	r2, r2, r3
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	330f      	adds	r3, #15
 800643c:	fa04 f303 	lsl.w	r3, r4, r3
 8006440:	ea40 0203 	orr.w	r2, r0, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	639a      	str	r2, [r3, #56]	; 0x38
 800644c:	e015      	b.n	800647a <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	1ad2      	subs	r2, r2, r3
 800645e:	4613      	mov	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	330f      	adds	r3, #15
 8006466:	221f      	movs	r2, #31
 8006468:	fa02 f303 	lsl.w	r3, r2, r3
 800646c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006470:	43da      	mvns	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	400a      	ands	r2, r1
 8006478:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	2b01      	cmp	r3, #1
 8006486:	d01c      	beq.n	80064c2 <HAL_ADCEx_InjectedConfigChannel+0x13a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006492:	f023 0301 	bic.w	r3, r3, #1
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	6812      	ldr	r2, [r2, #0]
 800649a:	498d      	ldr	r1, [pc, #564]	; (80066d0 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 800649c:	428a      	cmp	r2, r1
 800649e:	d10a      	bne.n	80064b6 <HAL_ADCEx_InjectedConfigChannel+0x12e>
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	6992      	ldr	r2, [r2, #24]
 80064a4:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 80064a8:	d002      	beq.n	80064b0 <HAL_ADCEx_InjectedConfigChannel+0x128>
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	6992      	ldr	r2, [r2, #24]
 80064ae:	e004      	b.n	80064ba <HAL_ADCEx_InjectedConfigChannel+0x132>
 80064b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064b4:	e001      	b.n	80064ba <HAL_ADCEx_InjectedConfigChannel+0x132>
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	6992      	ldr	r2, [r2, #24]
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	6809      	ldr	r1, [r1, #0]
 80064be:	4313      	orrs	r3, r2
 80064c0:	608b      	str	r3, [r1, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	7d5b      	ldrb	r3, [r3, #21]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d115      	bne.n	80064f6 <HAL_ADCEx_InjectedConfigChannel+0x16e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80064d2:	d108      	bne.n	80064e6 <HAL_ADCEx_InjectedConfigChannel+0x15e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064e2:	605a      	str	r2, [r3, #4]
 80064e4:	e007      	b.n	80064f6 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ea:	f043 0220 	orr.w	r2, r3, #32
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	7d1b      	ldrb	r3, [r3, #20]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d114      	bne.n	8006528 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	7d5b      	ldrb	r3, [r3, #21]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d108      	bne.n	8006518 <HAL_ADCEx_InjectedConfigChannel+0x190>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006514:	605a      	str	r2, [r3, #4]
 8006516:	e007      	b.n	8006528 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651c:	f043 0220 	orr.w	r2, r3, #32
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b09      	cmp	r3, #9
 800652e:	d91c      	bls.n	800656a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68d9      	ldr	r1, [r3, #12]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	4613      	mov	r3, r2
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	4413      	add	r3, r2
 8006540:	3b1e      	subs	r3, #30
 8006542:	2207      	movs	r2, #7
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	43db      	mvns	r3, r3
 800654a:	4019      	ands	r1, r3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	6898      	ldr	r0, [r3, #8]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	4413      	add	r3, r2
 800655a:	3b1e      	subs	r3, #30
 800655c:	fa00 f203 	lsl.w	r2, r0, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	60da      	str	r2, [r3, #12]
 8006568:	e019      	b.n	800659e <HAL_ADCEx_InjectedConfigChannel+0x216>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6919      	ldr	r1, [r3, #16]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	4613      	mov	r3, r2
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	4413      	add	r3, r2
 800657a:	2207      	movs	r2, #7
 800657c:	fa02 f303 	lsl.w	r3, r2, r3
 8006580:	43db      	mvns	r3, r3
 8006582:	4019      	ands	r1, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	6898      	ldr	r0, [r3, #8]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	4613      	mov	r3, r2
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	4413      	add	r3, r2
 8006592:	fa00 f203 	lsl.w	r2, r0, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b10      	cmp	r3, #16
 80065a4:	d003      	beq.n	80065ae <HAL_ADCEx_InjectedConfigChannel+0x226>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80065aa:	2b11      	cmp	r3, #17
 80065ac:	d107      	bne.n	80065be <HAL_ADCEx_InjectedConfigChannel+0x236>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80065bc:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d022      	beq.n	800660c <HAL_ADCEx_InjectedConfigChannel+0x284>
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d82e      	bhi.n	8006628 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d002      	beq.n	80065d4 <HAL_ADCEx_InjectedConfigChannel+0x24c>
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d00e      	beq.n	80065f0 <HAL_ADCEx_InjectedConfigChannel+0x268>
 80065d2:	e029      	b.n	8006628 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80065de:	f023 030f 	bic.w	r3, r3, #15
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	68d1      	ldr	r1, [r2, #12]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6812      	ldr	r2, [r2, #0]
 80065ea:	430b      	orrs	r3, r1
 80065ec:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 80065ee:	e029      	b.n	8006644 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80065fa:	f023 030f 	bic.w	r3, r3, #15
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	68d1      	ldr	r1, [r2, #12]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	430b      	orrs	r3, r1
 8006608:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 800660a:	e01b      	b.n	8006644 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006616:	f023 030f 	bic.w	r3, r3, #15
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	68d1      	ldr	r1, [r2, #12]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6812      	ldr	r2, [r2, #0]
 8006622:	430b      	orrs	r3, r1
 8006624:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8006626:	e00d      	b.n	8006644 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006632:	f023 030f 	bic.w	r3, r3, #15
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	68d1      	ldr	r1, [r2, #12]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	6812      	ldr	r2, [r2, #0]
 800663e:	430b      	orrs	r3, r1
 8006640:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8006642:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b10      	cmp	r3, #16
 800664a:	d003      	beq.n	8006654 <HAL_ADCEx_InjectedConfigChannel+0x2cc>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8006650:	2b11      	cmp	r3, #17
 8006652:	d132      	bne.n	80066ba <HAL_ADCEx_InjectedConfigChannel+0x332>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1e      	ldr	r2, [pc, #120]	; (80066d4 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d125      	bne.n	80066aa <HAL_ADCEx_InjectedConfigChannel+0x322>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d126      	bne.n	80066ba <HAL_ADCEx_InjectedConfigChannel+0x332>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800667a:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b10      	cmp	r3, #16
 8006682:	d11a      	bne.n	80066ba <HAL_ADCEx_InjectedConfigChannel+0x332>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006684:	4b14      	ldr	r3, [pc, #80]	; (80066d8 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a14      	ldr	r2, [pc, #80]	; (80066dc <HAL_ADCEx_InjectedConfigChannel+0x354>)
 800668a:	fba2 2303 	umull	r2, r3, r2, r3
 800668e:	0c9a      	lsrs	r2, r3, #18
 8006690:	4613      	mov	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800669a:	e002      	b.n	80066a2 <HAL_ADCEx_InjectedConfigChannel+0x31a>
          {
            wait_loop_index--;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	3b01      	subs	r3, #1
 80066a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1f9      	bne.n	800669c <HAL_ADCEx_InjectedConfigChannel+0x314>
 80066a8:	e007      	b.n	80066ba <HAL_ADCEx_InjectedConfigChannel+0x332>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ae:	f043 0220 	orr.w	r2, r3, #32
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bc90      	pop	{r4, r7}
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40013c00 	.word	0x40013c00
 80066d4:	40012400 	.word	0x40012400
 80066d8:	20000000 	.word	0x20000000
 80066dc:	431bde83 	.word	0x431bde83

080066e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066f0:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <__NVIC_SetPriorityGrouping+0x44>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80066fc:	4013      	ands	r3, r2
 80066fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800670c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006712:	4a04      	ldr	r2, [pc, #16]	; (8006724 <__NVIC_SetPriorityGrouping+0x44>)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	60d3      	str	r3, [r2, #12]
}
 8006718:	bf00      	nop
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	bc80      	pop	{r7}
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	e000ed00 	.word	0xe000ed00

08006728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006728:	b480      	push	{r7}
 800672a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800672c:	4b04      	ldr	r3, [pc, #16]	; (8006740 <__NVIC_GetPriorityGrouping+0x18>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	0a1b      	lsrs	r3, r3, #8
 8006732:	f003 0307 	and.w	r3, r3, #7
}
 8006736:	4618      	mov	r0, r3
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	e000ed00 	.word	0xe000ed00

08006744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	4603      	mov	r3, r0
 800674c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800674e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006752:	2b00      	cmp	r3, #0
 8006754:	db0b      	blt.n	800676e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006756:	79fb      	ldrb	r3, [r7, #7]
 8006758:	f003 021f 	and.w	r2, r3, #31
 800675c:	4906      	ldr	r1, [pc, #24]	; (8006778 <__NVIC_EnableIRQ+0x34>)
 800675e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006762:	095b      	lsrs	r3, r3, #5
 8006764:	2001      	movs	r0, #1
 8006766:	fa00 f202 	lsl.w	r2, r0, r2
 800676a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr
 8006778:	e000e100 	.word	0xe000e100

0800677c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	4603      	mov	r3, r0
 8006784:	6039      	str	r1, [r7, #0]
 8006786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800678c:	2b00      	cmp	r3, #0
 800678e:	db0a      	blt.n	80067a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	b2da      	uxtb	r2, r3
 8006794:	490c      	ldr	r1, [pc, #48]	; (80067c8 <__NVIC_SetPriority+0x4c>)
 8006796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800679a:	0112      	lsls	r2, r2, #4
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	440b      	add	r3, r1
 80067a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067a4:	e00a      	b.n	80067bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	4908      	ldr	r1, [pc, #32]	; (80067cc <__NVIC_SetPriority+0x50>)
 80067ac:	79fb      	ldrb	r3, [r7, #7]
 80067ae:	f003 030f 	and.w	r3, r3, #15
 80067b2:	3b04      	subs	r3, #4
 80067b4:	0112      	lsls	r2, r2, #4
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	440b      	add	r3, r1
 80067ba:	761a      	strb	r2, [r3, #24]
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc80      	pop	{r7}
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	e000e100 	.word	0xe000e100
 80067cc:	e000ed00 	.word	0xe000ed00

080067d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b089      	sub	sp, #36	; 0x24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	f1c3 0307 	rsb	r3, r3, #7
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	bf28      	it	cs
 80067ee:	2304      	movcs	r3, #4
 80067f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	3304      	adds	r3, #4
 80067f6:	2b06      	cmp	r3, #6
 80067f8:	d902      	bls.n	8006800 <NVIC_EncodePriority+0x30>
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	3b03      	subs	r3, #3
 80067fe:	e000      	b.n	8006802 <NVIC_EncodePriority+0x32>
 8006800:	2300      	movs	r3, #0
 8006802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006804:	f04f 32ff 	mov.w	r2, #4294967295
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	fa02 f303 	lsl.w	r3, r2, r3
 800680e:	43da      	mvns	r2, r3
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	401a      	ands	r2, r3
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006818:	f04f 31ff 	mov.w	r1, #4294967295
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	fa01 f303 	lsl.w	r3, r1, r3
 8006822:	43d9      	mvns	r1, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006828:	4313      	orrs	r3, r2
         );
}
 800682a:	4618      	mov	r0, r3
 800682c:	3724      	adds	r7, #36	; 0x24
 800682e:	46bd      	mov	sp, r7
 8006830:	bc80      	pop	{r7}
 8006832:	4770      	bx	lr

08006834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	3b01      	subs	r3, #1
 8006840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006844:	d301      	bcc.n	800684a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006846:	2301      	movs	r3, #1
 8006848:	e00f      	b.n	800686a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800684a:	4a0a      	ldr	r2, [pc, #40]	; (8006874 <SysTick_Config+0x40>)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3b01      	subs	r3, #1
 8006850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006852:	210f      	movs	r1, #15
 8006854:	f04f 30ff 	mov.w	r0, #4294967295
 8006858:	f7ff ff90 	bl	800677c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800685c:	4b05      	ldr	r3, [pc, #20]	; (8006874 <SysTick_Config+0x40>)
 800685e:	2200      	movs	r2, #0
 8006860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006862:	4b04      	ldr	r3, [pc, #16]	; (8006874 <SysTick_Config+0x40>)
 8006864:	2207      	movs	r2, #7
 8006866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	e000e010 	.word	0xe000e010

08006878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff ff2d 	bl	80066e0 <__NVIC_SetPriorityGrouping>
}
 8006886:	bf00      	nop
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800688e:	b580      	push	{r7, lr}
 8006890:	b086      	sub	sp, #24
 8006892:	af00      	add	r7, sp, #0
 8006894:	4603      	mov	r3, r0
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	607a      	str	r2, [r7, #4]
 800689a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068a0:	f7ff ff42 	bl	8006728 <__NVIC_GetPriorityGrouping>
 80068a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	6978      	ldr	r0, [r7, #20]
 80068ac:	f7ff ff90 	bl	80067d0 <NVIC_EncodePriority>
 80068b0:	4602      	mov	r2, r0
 80068b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068b6:	4611      	mov	r1, r2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff ff5f 	bl	800677c <__NVIC_SetPriority>
}
 80068be:	bf00      	nop
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b082      	sub	sp, #8
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	4603      	mov	r3, r0
 80068ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff ff35 	bl	8006744 <__NVIC_EnableIRQ>
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b082      	sub	sp, #8
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff ffa2 	bl	8006834 <SysTick_Config>
 80068f0:	4603      	mov	r3, r0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e059      	b.n	80069c6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	4b2d      	ldr	r3, [pc, #180]	; (80069d0 <HAL_DMA_Init+0xd4>)
 800691a:	429a      	cmp	r2, r3
 800691c:	d80f      	bhi.n	800693e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	4b2b      	ldr	r3, [pc, #172]	; (80069d4 <HAL_DMA_Init+0xd8>)
 8006926:	4413      	add	r3, r2
 8006928:	4a2b      	ldr	r2, [pc, #172]	; (80069d8 <HAL_DMA_Init+0xdc>)
 800692a:	fba2 2303 	umull	r2, r3, r2, r3
 800692e:	091b      	lsrs	r3, r3, #4
 8006930:	009a      	lsls	r2, r3, #2
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a28      	ldr	r2, [pc, #160]	; (80069dc <HAL_DMA_Init+0xe0>)
 800693a:	63da      	str	r2, [r3, #60]	; 0x3c
 800693c:	e00e      	b.n	800695c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	4b26      	ldr	r3, [pc, #152]	; (80069e0 <HAL_DMA_Init+0xe4>)
 8006946:	4413      	add	r3, r2
 8006948:	4a23      	ldr	r2, [pc, #140]	; (80069d8 <HAL_DMA_Init+0xdc>)
 800694a:	fba2 2303 	umull	r2, r3, r2, r3
 800694e:	091b      	lsrs	r3, r3, #4
 8006950:	009a      	lsls	r2, r3, #2
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a22      	ldr	r2, [pc, #136]	; (80069e4 <HAL_DMA_Init+0xe8>)
 800695a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006972:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006976:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006980:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800698c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006998:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr
 80069d0:	40020407 	.word	0x40020407
 80069d4:	bffdfff8 	.word	0xbffdfff8
 80069d8:	cccccccd 	.word	0xcccccccd
 80069dc:	40020000 	.word	0x40020000
 80069e0:	bffdfbf8 	.word	0xbffdfbf8
 80069e4:	40020400 	.word	0x40020400

080069e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_DMA_Start_IT+0x20>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e04a      	b.n	8006a9e <HAL_DMA_Start_IT+0xb6>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d13a      	bne.n	8006a90 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0201 	bic.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 fbb0 	bl	80071a4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d008      	beq.n	8006a5e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f042 020e 	orr.w	r2, r2, #14
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	e00f      	b.n	8006a7e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0204 	bic.w	r2, r2, #4
 8006a6c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f042 020a 	orr.w	r2, r2, #10
 8006a7c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f042 0201 	orr.w	r2, r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	e005      	b.n	8006a9c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b085      	sub	sp, #20
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d008      	beq.n	8006ace <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2204      	movs	r2, #4
 8006ac0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e020      	b.n	8006b10 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 020e 	bic.w	r2, r2, #14
 8006adc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0201 	bic.w	r2, r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006af6:	2101      	movs	r1, #1
 8006af8:	fa01 f202 	lsl.w	r2, r1, r2
 8006afc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bc80      	pop	{r7}
 8006b18:	4770      	bx	lr
	...

08006b1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d005      	beq.n	8006b3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2204      	movs	r2, #4
 8006b36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	73fb      	strb	r3, [r7, #15]
 8006b3c:	e0d6      	b.n	8006cec <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 020e 	bic.w	r2, r2, #14
 8006b4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0201 	bic.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	461a      	mov	r2, r3
 8006b64:	4b64      	ldr	r3, [pc, #400]	; (8006cf8 <HAL_DMA_Abort_IT+0x1dc>)
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d958      	bls.n	8006c1c <HAL_DMA_Abort_IT+0x100>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a63      	ldr	r2, [pc, #396]	; (8006cfc <HAL_DMA_Abort_IT+0x1e0>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d04f      	beq.n	8006c14 <HAL_DMA_Abort_IT+0xf8>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a61      	ldr	r2, [pc, #388]	; (8006d00 <HAL_DMA_Abort_IT+0x1e4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d048      	beq.n	8006c10 <HAL_DMA_Abort_IT+0xf4>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a60      	ldr	r2, [pc, #384]	; (8006d04 <HAL_DMA_Abort_IT+0x1e8>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d040      	beq.n	8006c0a <HAL_DMA_Abort_IT+0xee>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a5e      	ldr	r2, [pc, #376]	; (8006d08 <HAL_DMA_Abort_IT+0x1ec>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d038      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xe8>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a5d      	ldr	r2, [pc, #372]	; (8006d0c <HAL_DMA_Abort_IT+0x1f0>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d030      	beq.n	8006bfe <HAL_DMA_Abort_IT+0xe2>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a5b      	ldr	r2, [pc, #364]	; (8006d10 <HAL_DMA_Abort_IT+0x1f4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d028      	beq.n	8006bf8 <HAL_DMA_Abort_IT+0xdc>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a53      	ldr	r2, [pc, #332]	; (8006cf8 <HAL_DMA_Abort_IT+0x1dc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d020      	beq.n	8006bf2 <HAL_DMA_Abort_IT+0xd6>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a57      	ldr	r2, [pc, #348]	; (8006d14 <HAL_DMA_Abort_IT+0x1f8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d019      	beq.n	8006bee <HAL_DMA_Abort_IT+0xd2>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a56      	ldr	r2, [pc, #344]	; (8006d18 <HAL_DMA_Abort_IT+0x1fc>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d012      	beq.n	8006bea <HAL_DMA_Abort_IT+0xce>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a54      	ldr	r2, [pc, #336]	; (8006d1c <HAL_DMA_Abort_IT+0x200>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00a      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a53      	ldr	r2, [pc, #332]	; (8006d20 <HAL_DMA_Abort_IT+0x204>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d102      	bne.n	8006bde <HAL_DMA_Abort_IT+0xc2>
 8006bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bdc:	e01b      	b.n	8006c16 <HAL_DMA_Abort_IT+0xfa>
 8006bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006be2:	e018      	b.n	8006c16 <HAL_DMA_Abort_IT+0xfa>
 8006be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006be8:	e015      	b.n	8006c16 <HAL_DMA_Abort_IT+0xfa>
 8006bea:	2310      	movs	r3, #16
 8006bec:	e013      	b.n	8006c16 <HAL_DMA_Abort_IT+0xfa>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e011      	b.n	8006c16 <HAL_DMA_Abort_IT+0xfa>
 8006bf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bf6:	e00e      	b.n	8006c16 <HAL_DMA_Abort_IT+0xfa>
 8006bf8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006bfc:	e00b      	b.n	8006c16 <HAL_DMA_Abort_IT+0xfa>
 8006bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c02:	e008      	b.n	8006c16 <HAL_DMA_Abort_IT+0xfa>
 8006c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c08:	e005      	b.n	8006c16 <HAL_DMA_Abort_IT+0xfa>
 8006c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c0e:	e002      	b.n	8006c16 <HAL_DMA_Abort_IT+0xfa>
 8006c10:	2310      	movs	r3, #16
 8006c12:	e000      	b.n	8006c16 <HAL_DMA_Abort_IT+0xfa>
 8006c14:	2301      	movs	r3, #1
 8006c16:	4a43      	ldr	r2, [pc, #268]	; (8006d24 <HAL_DMA_Abort_IT+0x208>)
 8006c18:	6053      	str	r3, [r2, #4]
 8006c1a:	e057      	b.n	8006ccc <HAL_DMA_Abort_IT+0x1b0>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a36      	ldr	r2, [pc, #216]	; (8006cfc <HAL_DMA_Abort_IT+0x1e0>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d04f      	beq.n	8006cc6 <HAL_DMA_Abort_IT+0x1aa>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a35      	ldr	r2, [pc, #212]	; (8006d00 <HAL_DMA_Abort_IT+0x1e4>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d048      	beq.n	8006cc2 <HAL_DMA_Abort_IT+0x1a6>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a33      	ldr	r2, [pc, #204]	; (8006d04 <HAL_DMA_Abort_IT+0x1e8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d040      	beq.n	8006cbc <HAL_DMA_Abort_IT+0x1a0>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a32      	ldr	r2, [pc, #200]	; (8006d08 <HAL_DMA_Abort_IT+0x1ec>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d038      	beq.n	8006cb6 <HAL_DMA_Abort_IT+0x19a>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a30      	ldr	r2, [pc, #192]	; (8006d0c <HAL_DMA_Abort_IT+0x1f0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d030      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0x194>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a2f      	ldr	r2, [pc, #188]	; (8006d10 <HAL_DMA_Abort_IT+0x1f4>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d028      	beq.n	8006caa <HAL_DMA_Abort_IT+0x18e>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a26      	ldr	r2, [pc, #152]	; (8006cf8 <HAL_DMA_Abort_IT+0x1dc>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d020      	beq.n	8006ca4 <HAL_DMA_Abort_IT+0x188>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a2b      	ldr	r2, [pc, #172]	; (8006d14 <HAL_DMA_Abort_IT+0x1f8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d019      	beq.n	8006ca0 <HAL_DMA_Abort_IT+0x184>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a29      	ldr	r2, [pc, #164]	; (8006d18 <HAL_DMA_Abort_IT+0x1fc>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d012      	beq.n	8006c9c <HAL_DMA_Abort_IT+0x180>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a28      	ldr	r2, [pc, #160]	; (8006d1c <HAL_DMA_Abort_IT+0x200>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00a      	beq.n	8006c96 <HAL_DMA_Abort_IT+0x17a>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a26      	ldr	r2, [pc, #152]	; (8006d20 <HAL_DMA_Abort_IT+0x204>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d102      	bne.n	8006c90 <HAL_DMA_Abort_IT+0x174>
 8006c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c8e:	e01b      	b.n	8006cc8 <HAL_DMA_Abort_IT+0x1ac>
 8006c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c94:	e018      	b.n	8006cc8 <HAL_DMA_Abort_IT+0x1ac>
 8006c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c9a:	e015      	b.n	8006cc8 <HAL_DMA_Abort_IT+0x1ac>
 8006c9c:	2310      	movs	r3, #16
 8006c9e:	e013      	b.n	8006cc8 <HAL_DMA_Abort_IT+0x1ac>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e011      	b.n	8006cc8 <HAL_DMA_Abort_IT+0x1ac>
 8006ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ca8:	e00e      	b.n	8006cc8 <HAL_DMA_Abort_IT+0x1ac>
 8006caa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006cae:	e00b      	b.n	8006cc8 <HAL_DMA_Abort_IT+0x1ac>
 8006cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006cb4:	e008      	b.n	8006cc8 <HAL_DMA_Abort_IT+0x1ac>
 8006cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cba:	e005      	b.n	8006cc8 <HAL_DMA_Abort_IT+0x1ac>
 8006cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cc0:	e002      	b.n	8006cc8 <HAL_DMA_Abort_IT+0x1ac>
 8006cc2:	2310      	movs	r3, #16
 8006cc4:	e000      	b.n	8006cc8 <HAL_DMA_Abort_IT+0x1ac>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	4a17      	ldr	r2, [pc, #92]	; (8006d28 <HAL_DMA_Abort_IT+0x20c>)
 8006cca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	4798      	blx	r3
    } 
  }
  return status;
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	40020080 	.word	0x40020080
 8006cfc:	40020008 	.word	0x40020008
 8006d00:	4002001c 	.word	0x4002001c
 8006d04:	40020030 	.word	0x40020030
 8006d08:	40020044 	.word	0x40020044
 8006d0c:	40020058 	.word	0x40020058
 8006d10:	4002006c 	.word	0x4002006c
 8006d14:	40020408 	.word	0x40020408
 8006d18:	4002041c 	.word	0x4002041c
 8006d1c:	40020430 	.word	0x40020430
 8006d20:	40020444 	.word	0x40020444
 8006d24:	40020400 	.word	0x40020400
 8006d28:	40020000 	.word	0x40020000

08006d2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	2204      	movs	r2, #4
 8006d4a:	409a      	lsls	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 80d6 	beq.w	8006f02 <HAL_DMA_IRQHandler+0x1d6>
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f003 0304 	and.w	r3, r3, #4
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 80d0 	beq.w	8006f02 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0320 	and.w	r3, r3, #32
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d107      	bne.n	8006d80 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0204 	bic.w	r2, r2, #4
 8006d7e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	461a      	mov	r2, r3
 8006d86:	4b9b      	ldr	r3, [pc, #620]	; (8006ff4 <HAL_DMA_IRQHandler+0x2c8>)
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d958      	bls.n	8006e3e <HAL_DMA_IRQHandler+0x112>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a99      	ldr	r2, [pc, #612]	; (8006ff8 <HAL_DMA_IRQHandler+0x2cc>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d04f      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x10a>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a98      	ldr	r2, [pc, #608]	; (8006ffc <HAL_DMA_IRQHandler+0x2d0>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d048      	beq.n	8006e32 <HAL_DMA_IRQHandler+0x106>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a96      	ldr	r2, [pc, #600]	; (8007000 <HAL_DMA_IRQHandler+0x2d4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d040      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x100>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a95      	ldr	r2, [pc, #596]	; (8007004 <HAL_DMA_IRQHandler+0x2d8>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d038      	beq.n	8006e26 <HAL_DMA_IRQHandler+0xfa>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a93      	ldr	r2, [pc, #588]	; (8007008 <HAL_DMA_IRQHandler+0x2dc>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d030      	beq.n	8006e20 <HAL_DMA_IRQHandler+0xf4>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a92      	ldr	r2, [pc, #584]	; (800700c <HAL_DMA_IRQHandler+0x2e0>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d028      	beq.n	8006e1a <HAL_DMA_IRQHandler+0xee>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a89      	ldr	r2, [pc, #548]	; (8006ff4 <HAL_DMA_IRQHandler+0x2c8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d020      	beq.n	8006e14 <HAL_DMA_IRQHandler+0xe8>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a8e      	ldr	r2, [pc, #568]	; (8007010 <HAL_DMA_IRQHandler+0x2e4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d019      	beq.n	8006e10 <HAL_DMA_IRQHandler+0xe4>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a8c      	ldr	r2, [pc, #560]	; (8007014 <HAL_DMA_IRQHandler+0x2e8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d012      	beq.n	8006e0c <HAL_DMA_IRQHandler+0xe0>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a8b      	ldr	r2, [pc, #556]	; (8007018 <HAL_DMA_IRQHandler+0x2ec>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d00a      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xda>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a89      	ldr	r2, [pc, #548]	; (800701c <HAL_DMA_IRQHandler+0x2f0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d102      	bne.n	8006e00 <HAL_DMA_IRQHandler+0xd4>
 8006dfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006dfe:	e01b      	b.n	8006e38 <HAL_DMA_IRQHandler+0x10c>
 8006e00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e04:	e018      	b.n	8006e38 <HAL_DMA_IRQHandler+0x10c>
 8006e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e0a:	e015      	b.n	8006e38 <HAL_DMA_IRQHandler+0x10c>
 8006e0c:	2340      	movs	r3, #64	; 0x40
 8006e0e:	e013      	b.n	8006e38 <HAL_DMA_IRQHandler+0x10c>
 8006e10:	2304      	movs	r3, #4
 8006e12:	e011      	b.n	8006e38 <HAL_DMA_IRQHandler+0x10c>
 8006e14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e18:	e00e      	b.n	8006e38 <HAL_DMA_IRQHandler+0x10c>
 8006e1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006e1e:	e00b      	b.n	8006e38 <HAL_DMA_IRQHandler+0x10c>
 8006e20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e24:	e008      	b.n	8006e38 <HAL_DMA_IRQHandler+0x10c>
 8006e26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e2a:	e005      	b.n	8006e38 <HAL_DMA_IRQHandler+0x10c>
 8006e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e30:	e002      	b.n	8006e38 <HAL_DMA_IRQHandler+0x10c>
 8006e32:	2340      	movs	r3, #64	; 0x40
 8006e34:	e000      	b.n	8006e38 <HAL_DMA_IRQHandler+0x10c>
 8006e36:	2304      	movs	r3, #4
 8006e38:	4a79      	ldr	r2, [pc, #484]	; (8007020 <HAL_DMA_IRQHandler+0x2f4>)
 8006e3a:	6053      	str	r3, [r2, #4]
 8006e3c:	e057      	b.n	8006eee <HAL_DMA_IRQHandler+0x1c2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a6d      	ldr	r2, [pc, #436]	; (8006ff8 <HAL_DMA_IRQHandler+0x2cc>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d04f      	beq.n	8006ee8 <HAL_DMA_IRQHandler+0x1bc>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a6b      	ldr	r2, [pc, #428]	; (8006ffc <HAL_DMA_IRQHandler+0x2d0>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d048      	beq.n	8006ee4 <HAL_DMA_IRQHandler+0x1b8>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a6a      	ldr	r2, [pc, #424]	; (8007000 <HAL_DMA_IRQHandler+0x2d4>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d040      	beq.n	8006ede <HAL_DMA_IRQHandler+0x1b2>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a68      	ldr	r2, [pc, #416]	; (8007004 <HAL_DMA_IRQHandler+0x2d8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d038      	beq.n	8006ed8 <HAL_DMA_IRQHandler+0x1ac>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a67      	ldr	r2, [pc, #412]	; (8007008 <HAL_DMA_IRQHandler+0x2dc>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d030      	beq.n	8006ed2 <HAL_DMA_IRQHandler+0x1a6>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a65      	ldr	r2, [pc, #404]	; (800700c <HAL_DMA_IRQHandler+0x2e0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d028      	beq.n	8006ecc <HAL_DMA_IRQHandler+0x1a0>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a5d      	ldr	r2, [pc, #372]	; (8006ff4 <HAL_DMA_IRQHandler+0x2c8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d020      	beq.n	8006ec6 <HAL_DMA_IRQHandler+0x19a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a61      	ldr	r2, [pc, #388]	; (8007010 <HAL_DMA_IRQHandler+0x2e4>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d019      	beq.n	8006ec2 <HAL_DMA_IRQHandler+0x196>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a60      	ldr	r2, [pc, #384]	; (8007014 <HAL_DMA_IRQHandler+0x2e8>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d012      	beq.n	8006ebe <HAL_DMA_IRQHandler+0x192>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a5e      	ldr	r2, [pc, #376]	; (8007018 <HAL_DMA_IRQHandler+0x2ec>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00a      	beq.n	8006eb8 <HAL_DMA_IRQHandler+0x18c>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a5d      	ldr	r2, [pc, #372]	; (800701c <HAL_DMA_IRQHandler+0x2f0>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d102      	bne.n	8006eb2 <HAL_DMA_IRQHandler+0x186>
 8006eac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006eb0:	e01b      	b.n	8006eea <HAL_DMA_IRQHandler+0x1be>
 8006eb2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006eb6:	e018      	b.n	8006eea <HAL_DMA_IRQHandler+0x1be>
 8006eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ebc:	e015      	b.n	8006eea <HAL_DMA_IRQHandler+0x1be>
 8006ebe:	2340      	movs	r3, #64	; 0x40
 8006ec0:	e013      	b.n	8006eea <HAL_DMA_IRQHandler+0x1be>
 8006ec2:	2304      	movs	r3, #4
 8006ec4:	e011      	b.n	8006eea <HAL_DMA_IRQHandler+0x1be>
 8006ec6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006eca:	e00e      	b.n	8006eea <HAL_DMA_IRQHandler+0x1be>
 8006ecc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ed0:	e00b      	b.n	8006eea <HAL_DMA_IRQHandler+0x1be>
 8006ed2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006ed6:	e008      	b.n	8006eea <HAL_DMA_IRQHandler+0x1be>
 8006ed8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006edc:	e005      	b.n	8006eea <HAL_DMA_IRQHandler+0x1be>
 8006ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ee2:	e002      	b.n	8006eea <HAL_DMA_IRQHandler+0x1be>
 8006ee4:	2340      	movs	r3, #64	; 0x40
 8006ee6:	e000      	b.n	8006eea <HAL_DMA_IRQHandler+0x1be>
 8006ee8:	2304      	movs	r3, #4
 8006eea:	4a4e      	ldr	r2, [pc, #312]	; (8007024 <HAL_DMA_IRQHandler+0x2f8>)
 8006eec:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 8136 	beq.w	8007164 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006f00:	e130      	b.n	8007164 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	2202      	movs	r2, #2
 8006f08:	409a      	lsls	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 80f8 	beq.w	8007104 <HAL_DMA_IRQHandler+0x3d8>
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 80f2 	beq.w	8007104 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0320 	and.w	r3, r3, #32
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10b      	bne.n	8006f46 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 020a 	bic.w	r2, r2, #10
 8006f3c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	4b29      	ldr	r3, [pc, #164]	; (8006ff4 <HAL_DMA_IRQHandler+0x2c8>)
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d973      	bls.n	800703a <HAL_DMA_IRQHandler+0x30e>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a28      	ldr	r2, [pc, #160]	; (8006ff8 <HAL_DMA_IRQHandler+0x2cc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d06a      	beq.n	8007032 <HAL_DMA_IRQHandler+0x306>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a26      	ldr	r2, [pc, #152]	; (8006ffc <HAL_DMA_IRQHandler+0x2d0>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d063      	beq.n	800702e <HAL_DMA_IRQHandler+0x302>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a25      	ldr	r2, [pc, #148]	; (8007000 <HAL_DMA_IRQHandler+0x2d4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d05b      	beq.n	8007028 <HAL_DMA_IRQHandler+0x2fc>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a23      	ldr	r2, [pc, #140]	; (8007004 <HAL_DMA_IRQHandler+0x2d8>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d038      	beq.n	8006fec <HAL_DMA_IRQHandler+0x2c0>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a22      	ldr	r2, [pc, #136]	; (8007008 <HAL_DMA_IRQHandler+0x2dc>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d030      	beq.n	8006fe6 <HAL_DMA_IRQHandler+0x2ba>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a20      	ldr	r2, [pc, #128]	; (800700c <HAL_DMA_IRQHandler+0x2e0>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d028      	beq.n	8006fe0 <HAL_DMA_IRQHandler+0x2b4>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a18      	ldr	r2, [pc, #96]	; (8006ff4 <HAL_DMA_IRQHandler+0x2c8>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d020      	beq.n	8006fda <HAL_DMA_IRQHandler+0x2ae>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a1c      	ldr	r2, [pc, #112]	; (8007010 <HAL_DMA_IRQHandler+0x2e4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d019      	beq.n	8006fd6 <HAL_DMA_IRQHandler+0x2aa>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a1b      	ldr	r2, [pc, #108]	; (8007014 <HAL_DMA_IRQHandler+0x2e8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d012      	beq.n	8006fd2 <HAL_DMA_IRQHandler+0x2a6>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a19      	ldr	r2, [pc, #100]	; (8007018 <HAL_DMA_IRQHandler+0x2ec>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d00a      	beq.n	8006fcc <HAL_DMA_IRQHandler+0x2a0>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a18      	ldr	r2, [pc, #96]	; (800701c <HAL_DMA_IRQHandler+0x2f0>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d102      	bne.n	8006fc6 <HAL_DMA_IRQHandler+0x29a>
 8006fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fc4:	e036      	b.n	8007034 <HAL_DMA_IRQHandler+0x308>
 8006fc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fca:	e033      	b.n	8007034 <HAL_DMA_IRQHandler+0x308>
 8006fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fd0:	e030      	b.n	8007034 <HAL_DMA_IRQHandler+0x308>
 8006fd2:	2320      	movs	r3, #32
 8006fd4:	e02e      	b.n	8007034 <HAL_DMA_IRQHandler+0x308>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e02c      	b.n	8007034 <HAL_DMA_IRQHandler+0x308>
 8006fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fde:	e029      	b.n	8007034 <HAL_DMA_IRQHandler+0x308>
 8006fe0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006fe4:	e026      	b.n	8007034 <HAL_DMA_IRQHandler+0x308>
 8006fe6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fea:	e023      	b.n	8007034 <HAL_DMA_IRQHandler+0x308>
 8006fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ff0:	e020      	b.n	8007034 <HAL_DMA_IRQHandler+0x308>
 8006ff2:	bf00      	nop
 8006ff4:	40020080 	.word	0x40020080
 8006ff8:	40020008 	.word	0x40020008
 8006ffc:	4002001c 	.word	0x4002001c
 8007000:	40020030 	.word	0x40020030
 8007004:	40020044 	.word	0x40020044
 8007008:	40020058 	.word	0x40020058
 800700c:	4002006c 	.word	0x4002006c
 8007010:	40020408 	.word	0x40020408
 8007014:	4002041c 	.word	0x4002041c
 8007018:	40020430 	.word	0x40020430
 800701c:	40020444 	.word	0x40020444
 8007020:	40020400 	.word	0x40020400
 8007024:	40020000 	.word	0x40020000
 8007028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800702c:	e002      	b.n	8007034 <HAL_DMA_IRQHandler+0x308>
 800702e:	2320      	movs	r3, #32
 8007030:	e000      	b.n	8007034 <HAL_DMA_IRQHandler+0x308>
 8007032:	2302      	movs	r3, #2
 8007034:	4a4e      	ldr	r2, [pc, #312]	; (8007170 <HAL_DMA_IRQHandler+0x444>)
 8007036:	6053      	str	r3, [r2, #4]
 8007038:	e057      	b.n	80070ea <HAL_DMA_IRQHandler+0x3be>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a4d      	ldr	r2, [pc, #308]	; (8007174 <HAL_DMA_IRQHandler+0x448>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d04f      	beq.n	80070e4 <HAL_DMA_IRQHandler+0x3b8>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a4b      	ldr	r2, [pc, #300]	; (8007178 <HAL_DMA_IRQHandler+0x44c>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d048      	beq.n	80070e0 <HAL_DMA_IRQHandler+0x3b4>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a4a      	ldr	r2, [pc, #296]	; (800717c <HAL_DMA_IRQHandler+0x450>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d040      	beq.n	80070da <HAL_DMA_IRQHandler+0x3ae>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a48      	ldr	r2, [pc, #288]	; (8007180 <HAL_DMA_IRQHandler+0x454>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d038      	beq.n	80070d4 <HAL_DMA_IRQHandler+0x3a8>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a47      	ldr	r2, [pc, #284]	; (8007184 <HAL_DMA_IRQHandler+0x458>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d030      	beq.n	80070ce <HAL_DMA_IRQHandler+0x3a2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a45      	ldr	r2, [pc, #276]	; (8007188 <HAL_DMA_IRQHandler+0x45c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d028      	beq.n	80070c8 <HAL_DMA_IRQHandler+0x39c>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a44      	ldr	r2, [pc, #272]	; (800718c <HAL_DMA_IRQHandler+0x460>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d020      	beq.n	80070c2 <HAL_DMA_IRQHandler+0x396>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a42      	ldr	r2, [pc, #264]	; (8007190 <HAL_DMA_IRQHandler+0x464>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d019      	beq.n	80070be <HAL_DMA_IRQHandler+0x392>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a41      	ldr	r2, [pc, #260]	; (8007194 <HAL_DMA_IRQHandler+0x468>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d012      	beq.n	80070ba <HAL_DMA_IRQHandler+0x38e>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a3f      	ldr	r2, [pc, #252]	; (8007198 <HAL_DMA_IRQHandler+0x46c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00a      	beq.n	80070b4 <HAL_DMA_IRQHandler+0x388>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a3e      	ldr	r2, [pc, #248]	; (800719c <HAL_DMA_IRQHandler+0x470>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d102      	bne.n	80070ae <HAL_DMA_IRQHandler+0x382>
 80070a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070ac:	e01b      	b.n	80070e6 <HAL_DMA_IRQHandler+0x3ba>
 80070ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070b2:	e018      	b.n	80070e6 <HAL_DMA_IRQHandler+0x3ba>
 80070b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070b8:	e015      	b.n	80070e6 <HAL_DMA_IRQHandler+0x3ba>
 80070ba:	2320      	movs	r3, #32
 80070bc:	e013      	b.n	80070e6 <HAL_DMA_IRQHandler+0x3ba>
 80070be:	2302      	movs	r3, #2
 80070c0:	e011      	b.n	80070e6 <HAL_DMA_IRQHandler+0x3ba>
 80070c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070c6:	e00e      	b.n	80070e6 <HAL_DMA_IRQHandler+0x3ba>
 80070c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80070cc:	e00b      	b.n	80070e6 <HAL_DMA_IRQHandler+0x3ba>
 80070ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070d2:	e008      	b.n	80070e6 <HAL_DMA_IRQHandler+0x3ba>
 80070d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070d8:	e005      	b.n	80070e6 <HAL_DMA_IRQHandler+0x3ba>
 80070da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070de:	e002      	b.n	80070e6 <HAL_DMA_IRQHandler+0x3ba>
 80070e0:	2320      	movs	r3, #32
 80070e2:	e000      	b.n	80070e6 <HAL_DMA_IRQHandler+0x3ba>
 80070e4:	2302      	movs	r3, #2
 80070e6:	4a2e      	ldr	r2, [pc, #184]	; (80071a0 <HAL_DMA_IRQHandler+0x474>)
 80070e8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d034      	beq.n	8007164 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007102:	e02f      	b.n	8007164 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	2208      	movs	r2, #8
 800710a:	409a      	lsls	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4013      	ands	r3, r2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d028      	beq.n	8007166 <HAL_DMA_IRQHandler+0x43a>
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b00      	cmp	r3, #0
 800711c:	d023      	beq.n	8007166 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 020e 	bic.w	r2, r2, #14
 800712c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	2101      	movs	r1, #1
 8007138:	fa01 f202 	lsl.w	r2, r1, r2
 800713c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	4798      	blx	r3
    }
  }
  return;
 8007164:	bf00      	nop
 8007166:	bf00      	nop
}
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	40020400 	.word	0x40020400
 8007174:	40020008 	.word	0x40020008
 8007178:	4002001c 	.word	0x4002001c
 800717c:	40020030 	.word	0x40020030
 8007180:	40020044 	.word	0x40020044
 8007184:	40020058 	.word	0x40020058
 8007188:	4002006c 	.word	0x4002006c
 800718c:	40020080 	.word	0x40020080
 8007190:	40020408 	.word	0x40020408
 8007194:	4002041c 	.word	0x4002041c
 8007198:	40020430 	.word	0x40020430
 800719c:	40020444 	.word	0x40020444
 80071a0:	40020000 	.word	0x40020000

080071a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ba:	2101      	movs	r1, #1
 80071bc:	fa01 f202 	lsl.w	r2, r1, r2
 80071c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	2b10      	cmp	r3, #16
 80071d0:	d108      	bne.n	80071e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80071e2:	e007      	b.n	80071f4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	60da      	str	r2, [r3, #12]
}
 80071f4:	bf00      	nop
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr
	...

08007200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007200:	b480      	push	{r7}
 8007202:	b08b      	sub	sp, #44	; 0x2c
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800720a:	2300      	movs	r3, #0
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800720e:	2300      	movs	r3, #0
 8007210:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007212:	e179      	b.n	8007508 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007214:	2201      	movs	r2, #1
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	fa02 f303 	lsl.w	r3, r2, r3
 800721c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69fa      	ldr	r2, [r7, #28]
 8007224:	4013      	ands	r3, r2
 8007226:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007228:	69ba      	ldr	r2, [r7, #24]
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	429a      	cmp	r2, r3
 800722e:	f040 8168 	bne.w	8007502 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	4aa0      	ldr	r2, [pc, #640]	; (80074b8 <HAL_GPIO_Init+0x2b8>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d05e      	beq.n	80072fa <HAL_GPIO_Init+0xfa>
 800723c:	4a9e      	ldr	r2, [pc, #632]	; (80074b8 <HAL_GPIO_Init+0x2b8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d875      	bhi.n	800732e <HAL_GPIO_Init+0x12e>
 8007242:	4a9e      	ldr	r2, [pc, #632]	; (80074bc <HAL_GPIO_Init+0x2bc>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d058      	beq.n	80072fa <HAL_GPIO_Init+0xfa>
 8007248:	4a9c      	ldr	r2, [pc, #624]	; (80074bc <HAL_GPIO_Init+0x2bc>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d86f      	bhi.n	800732e <HAL_GPIO_Init+0x12e>
 800724e:	4a9c      	ldr	r2, [pc, #624]	; (80074c0 <HAL_GPIO_Init+0x2c0>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d052      	beq.n	80072fa <HAL_GPIO_Init+0xfa>
 8007254:	4a9a      	ldr	r2, [pc, #616]	; (80074c0 <HAL_GPIO_Init+0x2c0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d869      	bhi.n	800732e <HAL_GPIO_Init+0x12e>
 800725a:	4a9a      	ldr	r2, [pc, #616]	; (80074c4 <HAL_GPIO_Init+0x2c4>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d04c      	beq.n	80072fa <HAL_GPIO_Init+0xfa>
 8007260:	4a98      	ldr	r2, [pc, #608]	; (80074c4 <HAL_GPIO_Init+0x2c4>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d863      	bhi.n	800732e <HAL_GPIO_Init+0x12e>
 8007266:	4a98      	ldr	r2, [pc, #608]	; (80074c8 <HAL_GPIO_Init+0x2c8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d046      	beq.n	80072fa <HAL_GPIO_Init+0xfa>
 800726c:	4a96      	ldr	r2, [pc, #600]	; (80074c8 <HAL_GPIO_Init+0x2c8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d85d      	bhi.n	800732e <HAL_GPIO_Init+0x12e>
 8007272:	2b12      	cmp	r3, #18
 8007274:	d82a      	bhi.n	80072cc <HAL_GPIO_Init+0xcc>
 8007276:	2b12      	cmp	r3, #18
 8007278:	d859      	bhi.n	800732e <HAL_GPIO_Init+0x12e>
 800727a:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <HAL_GPIO_Init+0x80>)
 800727c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007280:	080072fb 	.word	0x080072fb
 8007284:	080072d5 	.word	0x080072d5
 8007288:	080072e7 	.word	0x080072e7
 800728c:	08007329 	.word	0x08007329
 8007290:	0800732f 	.word	0x0800732f
 8007294:	0800732f 	.word	0x0800732f
 8007298:	0800732f 	.word	0x0800732f
 800729c:	0800732f 	.word	0x0800732f
 80072a0:	0800732f 	.word	0x0800732f
 80072a4:	0800732f 	.word	0x0800732f
 80072a8:	0800732f 	.word	0x0800732f
 80072ac:	0800732f 	.word	0x0800732f
 80072b0:	0800732f 	.word	0x0800732f
 80072b4:	0800732f 	.word	0x0800732f
 80072b8:	0800732f 	.word	0x0800732f
 80072bc:	0800732f 	.word	0x0800732f
 80072c0:	0800732f 	.word	0x0800732f
 80072c4:	080072dd 	.word	0x080072dd
 80072c8:	080072f1 	.word	0x080072f1
 80072cc:	4a7f      	ldr	r2, [pc, #508]	; (80074cc <HAL_GPIO_Init+0x2cc>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d013      	beq.n	80072fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80072d2:	e02c      	b.n	800732e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	623b      	str	r3, [r7, #32]
          break;
 80072da:	e029      	b.n	8007330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	3304      	adds	r3, #4
 80072e2:	623b      	str	r3, [r7, #32]
          break;
 80072e4:	e024      	b.n	8007330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	3308      	adds	r3, #8
 80072ec:	623b      	str	r3, [r7, #32]
          break;
 80072ee:	e01f      	b.n	8007330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	330c      	adds	r3, #12
 80072f6:	623b      	str	r3, [r7, #32]
          break;
 80072f8:	e01a      	b.n	8007330 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d102      	bne.n	8007308 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007302:	2304      	movs	r3, #4
 8007304:	623b      	str	r3, [r7, #32]
          break;
 8007306:	e013      	b.n	8007330 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d105      	bne.n	800731c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007310:	2308      	movs	r3, #8
 8007312:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	611a      	str	r2, [r3, #16]
          break;
 800731a:	e009      	b.n	8007330 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800731c:	2308      	movs	r3, #8
 800731e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	69fa      	ldr	r2, [r7, #28]
 8007324:	615a      	str	r2, [r3, #20]
          break;
 8007326:	e003      	b.n	8007330 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007328:	2300      	movs	r3, #0
 800732a:	623b      	str	r3, [r7, #32]
          break;
 800732c:	e000      	b.n	8007330 <HAL_GPIO_Init+0x130>
          break;
 800732e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	2bff      	cmp	r3, #255	; 0xff
 8007334:	d801      	bhi.n	800733a <HAL_GPIO_Init+0x13a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	e001      	b.n	800733e <HAL_GPIO_Init+0x13e>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3304      	adds	r3, #4
 800733e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	2bff      	cmp	r3, #255	; 0xff
 8007344:	d802      	bhi.n	800734c <HAL_GPIO_Init+0x14c>
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	e002      	b.n	8007352 <HAL_GPIO_Init+0x152>
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	3b08      	subs	r3, #8
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	210f      	movs	r1, #15
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	fa01 f303 	lsl.w	r3, r1, r3
 8007360:	43db      	mvns	r3, r3
 8007362:	401a      	ands	r2, r3
 8007364:	6a39      	ldr	r1, [r7, #32]
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	fa01 f303 	lsl.w	r3, r1, r3
 800736c:	431a      	orrs	r2, r3
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 80c1 	beq.w	8007502 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007380:	4b53      	ldr	r3, [pc, #332]	; (80074d0 <HAL_GPIO_Init+0x2d0>)
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	4a52      	ldr	r2, [pc, #328]	; (80074d0 <HAL_GPIO_Init+0x2d0>)
 8007386:	f043 0301 	orr.w	r3, r3, #1
 800738a:	6193      	str	r3, [r2, #24]
 800738c:	4b50      	ldr	r3, [pc, #320]	; (80074d0 <HAL_GPIO_Init+0x2d0>)
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	60bb      	str	r3, [r7, #8]
 8007396:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007398:	4a4e      	ldr	r2, [pc, #312]	; (80074d4 <HAL_GPIO_Init+0x2d4>)
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	089b      	lsrs	r3, r3, #2
 800739e:	3302      	adds	r3, #2
 80073a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	f003 0303 	and.w	r3, r3, #3
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	220f      	movs	r2, #15
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	43db      	mvns	r3, r3
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	4013      	ands	r3, r2
 80073ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a46      	ldr	r2, [pc, #280]	; (80074d8 <HAL_GPIO_Init+0x2d8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d01f      	beq.n	8007404 <HAL_GPIO_Init+0x204>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a45      	ldr	r2, [pc, #276]	; (80074dc <HAL_GPIO_Init+0x2dc>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d019      	beq.n	8007400 <HAL_GPIO_Init+0x200>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a44      	ldr	r2, [pc, #272]	; (80074e0 <HAL_GPIO_Init+0x2e0>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d013      	beq.n	80073fc <HAL_GPIO_Init+0x1fc>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a43      	ldr	r2, [pc, #268]	; (80074e4 <HAL_GPIO_Init+0x2e4>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d00d      	beq.n	80073f8 <HAL_GPIO_Init+0x1f8>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a42      	ldr	r2, [pc, #264]	; (80074e8 <HAL_GPIO_Init+0x2e8>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d007      	beq.n	80073f4 <HAL_GPIO_Init+0x1f4>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a41      	ldr	r2, [pc, #260]	; (80074ec <HAL_GPIO_Init+0x2ec>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d101      	bne.n	80073f0 <HAL_GPIO_Init+0x1f0>
 80073ec:	2305      	movs	r3, #5
 80073ee:	e00a      	b.n	8007406 <HAL_GPIO_Init+0x206>
 80073f0:	2306      	movs	r3, #6
 80073f2:	e008      	b.n	8007406 <HAL_GPIO_Init+0x206>
 80073f4:	2304      	movs	r3, #4
 80073f6:	e006      	b.n	8007406 <HAL_GPIO_Init+0x206>
 80073f8:	2303      	movs	r3, #3
 80073fa:	e004      	b.n	8007406 <HAL_GPIO_Init+0x206>
 80073fc:	2302      	movs	r3, #2
 80073fe:	e002      	b.n	8007406 <HAL_GPIO_Init+0x206>
 8007400:	2301      	movs	r3, #1
 8007402:	e000      	b.n	8007406 <HAL_GPIO_Init+0x206>
 8007404:	2300      	movs	r3, #0
 8007406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007408:	f002 0203 	and.w	r2, r2, #3
 800740c:	0092      	lsls	r2, r2, #2
 800740e:	4093      	lsls	r3, r2
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007416:	492f      	ldr	r1, [pc, #188]	; (80074d4 <HAL_GPIO_Init+0x2d4>)
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	089b      	lsrs	r3, r3, #2
 800741c:	3302      	adds	r3, #2
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d006      	beq.n	800743e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007430:	4b2f      	ldr	r3, [pc, #188]	; (80074f0 <HAL_GPIO_Init+0x2f0>)
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	492e      	ldr	r1, [pc, #184]	; (80074f0 <HAL_GPIO_Init+0x2f0>)
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	4313      	orrs	r3, r2
 800743a:	600b      	str	r3, [r1, #0]
 800743c:	e006      	b.n	800744c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800743e:	4b2c      	ldr	r3, [pc, #176]	; (80074f0 <HAL_GPIO_Init+0x2f0>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	43db      	mvns	r3, r3
 8007446:	492a      	ldr	r1, [pc, #168]	; (80074f0 <HAL_GPIO_Init+0x2f0>)
 8007448:	4013      	ands	r3, r2
 800744a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d006      	beq.n	8007466 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007458:	4b25      	ldr	r3, [pc, #148]	; (80074f0 <HAL_GPIO_Init+0x2f0>)
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	4924      	ldr	r1, [pc, #144]	; (80074f0 <HAL_GPIO_Init+0x2f0>)
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	4313      	orrs	r3, r2
 8007462:	604b      	str	r3, [r1, #4]
 8007464:	e006      	b.n	8007474 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007466:	4b22      	ldr	r3, [pc, #136]	; (80074f0 <HAL_GPIO_Init+0x2f0>)
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	43db      	mvns	r3, r3
 800746e:	4920      	ldr	r1, [pc, #128]	; (80074f0 <HAL_GPIO_Init+0x2f0>)
 8007470:	4013      	ands	r3, r2
 8007472:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d006      	beq.n	800748e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007480:	4b1b      	ldr	r3, [pc, #108]	; (80074f0 <HAL_GPIO_Init+0x2f0>)
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	491a      	ldr	r1, [pc, #104]	; (80074f0 <HAL_GPIO_Init+0x2f0>)
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	4313      	orrs	r3, r2
 800748a:	608b      	str	r3, [r1, #8]
 800748c:	e006      	b.n	800749c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800748e:	4b18      	ldr	r3, [pc, #96]	; (80074f0 <HAL_GPIO_Init+0x2f0>)
 8007490:	689a      	ldr	r2, [r3, #8]
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	43db      	mvns	r3, r3
 8007496:	4916      	ldr	r1, [pc, #88]	; (80074f0 <HAL_GPIO_Init+0x2f0>)
 8007498:	4013      	ands	r3, r2
 800749a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d025      	beq.n	80074f4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80074a8:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <HAL_GPIO_Init+0x2f0>)
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	4910      	ldr	r1, [pc, #64]	; (80074f0 <HAL_GPIO_Init+0x2f0>)
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	60cb      	str	r3, [r1, #12]
 80074b4:	e025      	b.n	8007502 <HAL_GPIO_Init+0x302>
 80074b6:	bf00      	nop
 80074b8:	10320000 	.word	0x10320000
 80074bc:	10310000 	.word	0x10310000
 80074c0:	10220000 	.word	0x10220000
 80074c4:	10210000 	.word	0x10210000
 80074c8:	10120000 	.word	0x10120000
 80074cc:	10110000 	.word	0x10110000
 80074d0:	40021000 	.word	0x40021000
 80074d4:	40010000 	.word	0x40010000
 80074d8:	40010800 	.word	0x40010800
 80074dc:	40010c00 	.word	0x40010c00
 80074e0:	40011000 	.word	0x40011000
 80074e4:	40011400 	.word	0x40011400
 80074e8:	40011800 	.word	0x40011800
 80074ec:	40011c00 	.word	0x40011c00
 80074f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80074f4:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <HAL_GPIO_Init+0x324>)
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	43db      	mvns	r3, r3
 80074fc:	4909      	ldr	r1, [pc, #36]	; (8007524 <HAL_GPIO_Init+0x324>)
 80074fe:	4013      	ands	r3, r2
 8007500:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	3301      	adds	r3, #1
 8007506:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	fa22 f303 	lsr.w	r3, r2, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	f47f ae7e 	bne.w	8007214 <HAL_GPIO_Init+0x14>
  }
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	372c      	adds	r7, #44	; 0x2c
 800751e:	46bd      	mov	sp, r7
 8007520:	bc80      	pop	{r7}
 8007522:	4770      	bx	lr
 8007524:	40010400 	.word	0x40010400

08007528 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	887b      	ldrh	r3, [r7, #2]
 800753a:	4013      	ands	r3, r2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007540:	2301      	movs	r3, #1
 8007542:	73fb      	strb	r3, [r7, #15]
 8007544:	e001      	b.n	800754a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	bc80      	pop	{r7}
 8007554:	4770      	bx	lr

08007556 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	460b      	mov	r3, r1
 8007560:	807b      	strh	r3, [r7, #2]
 8007562:	4613      	mov	r3, r2
 8007564:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007566:	787b      	ldrb	r3, [r7, #1]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800756c:	887a      	ldrh	r2, [r7, #2]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007572:	e003      	b.n	800757c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007574:	887b      	ldrh	r3, [r7, #2]
 8007576:	041a      	lsls	r2, r3, #16
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	611a      	str	r2, [r3, #16]
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	bc80      	pop	{r7}
 8007584:	4770      	bx	lr
	...

08007588 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e26c      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 8087 	beq.w	80076b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80075a8:	4b92      	ldr	r3, [pc, #584]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f003 030c 	and.w	r3, r3, #12
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d00c      	beq.n	80075ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80075b4:	4b8f      	ldr	r3, [pc, #572]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f003 030c 	and.w	r3, r3, #12
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d112      	bne.n	80075e6 <HAL_RCC_OscConfig+0x5e>
 80075c0:	4b8c      	ldr	r3, [pc, #560]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075cc:	d10b      	bne.n	80075e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075ce:	4b89      	ldr	r3, [pc, #548]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d06c      	beq.n	80076b4 <HAL_RCC_OscConfig+0x12c>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d168      	bne.n	80076b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e246      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ee:	d106      	bne.n	80075fe <HAL_RCC_OscConfig+0x76>
 80075f0:	4b80      	ldr	r3, [pc, #512]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a7f      	ldr	r2, [pc, #508]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 80075f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	e02e      	b.n	800765c <HAL_RCC_OscConfig+0xd4>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10c      	bne.n	8007620 <HAL_RCC_OscConfig+0x98>
 8007606:	4b7b      	ldr	r3, [pc, #492]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a7a      	ldr	r2, [pc, #488]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 800760c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	4b78      	ldr	r3, [pc, #480]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a77      	ldr	r2, [pc, #476]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 8007618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800761c:	6013      	str	r3, [r2, #0]
 800761e:	e01d      	b.n	800765c <HAL_RCC_OscConfig+0xd4>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007628:	d10c      	bne.n	8007644 <HAL_RCC_OscConfig+0xbc>
 800762a:	4b72      	ldr	r3, [pc, #456]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a71      	ldr	r2, [pc, #452]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 8007630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	4b6f      	ldr	r3, [pc, #444]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a6e      	ldr	r2, [pc, #440]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 800763c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	e00b      	b.n	800765c <HAL_RCC_OscConfig+0xd4>
 8007644:	4b6b      	ldr	r3, [pc, #428]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a6a      	ldr	r2, [pc, #424]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 800764a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	4b68      	ldr	r3, [pc, #416]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a67      	ldr	r2, [pc, #412]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 8007656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800765a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d013      	beq.n	800768c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007664:	f7fe f848 	bl	80056f8 <HAL_GetTick>
 8007668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800766a:	e008      	b.n	800767e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800766c:	f7fe f844 	bl	80056f8 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	2b64      	cmp	r3, #100	; 0x64
 8007678:	d901      	bls.n	800767e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e1fa      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800767e:	4b5d      	ldr	r3, [pc, #372]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d0f0      	beq.n	800766c <HAL_RCC_OscConfig+0xe4>
 800768a:	e014      	b.n	80076b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800768c:	f7fe f834 	bl	80056f8 <HAL_GetTick>
 8007690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007692:	e008      	b.n	80076a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007694:	f7fe f830 	bl	80056f8 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	2b64      	cmp	r3, #100	; 0x64
 80076a0:	d901      	bls.n	80076a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e1e6      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076a6:	4b53      	ldr	r3, [pc, #332]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1f0      	bne.n	8007694 <HAL_RCC_OscConfig+0x10c>
 80076b2:	e000      	b.n	80076b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d063      	beq.n	800778a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80076c2:	4b4c      	ldr	r3, [pc, #304]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f003 030c 	and.w	r3, r3, #12
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80076ce:	4b49      	ldr	r3, [pc, #292]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f003 030c 	and.w	r3, r3, #12
 80076d6:	2b08      	cmp	r3, #8
 80076d8:	d11c      	bne.n	8007714 <HAL_RCC_OscConfig+0x18c>
 80076da:	4b46      	ldr	r3, [pc, #280]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d116      	bne.n	8007714 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076e6:	4b43      	ldr	r3, [pc, #268]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d005      	beq.n	80076fe <HAL_RCC_OscConfig+0x176>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d001      	beq.n	80076fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e1ba      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076fe:	4b3d      	ldr	r3, [pc, #244]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	4939      	ldr	r1, [pc, #228]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 800770e:	4313      	orrs	r3, r2
 8007710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007712:	e03a      	b.n	800778a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d020      	beq.n	800775e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800771c:	4b36      	ldr	r3, [pc, #216]	; (80077f8 <HAL_RCC_OscConfig+0x270>)
 800771e:	2201      	movs	r2, #1
 8007720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007722:	f7fd ffe9 	bl	80056f8 <HAL_GetTick>
 8007726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007728:	e008      	b.n	800773c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800772a:	f7fd ffe5 	bl	80056f8 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	2b02      	cmp	r3, #2
 8007736:	d901      	bls.n	800773c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e19b      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800773c:	4b2d      	ldr	r3, [pc, #180]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d0f0      	beq.n	800772a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007748:	4b2a      	ldr	r3, [pc, #168]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	4927      	ldr	r1, [pc, #156]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 8007758:	4313      	orrs	r3, r2
 800775a:	600b      	str	r3, [r1, #0]
 800775c:	e015      	b.n	800778a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800775e:	4b26      	ldr	r3, [pc, #152]	; (80077f8 <HAL_RCC_OscConfig+0x270>)
 8007760:	2200      	movs	r2, #0
 8007762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007764:	f7fd ffc8 	bl	80056f8 <HAL_GetTick>
 8007768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800776c:	f7fd ffc4 	bl	80056f8 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b02      	cmp	r3, #2
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e17a      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800777e:	4b1d      	ldr	r3, [pc, #116]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f0      	bne.n	800776c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0308 	and.w	r3, r3, #8
 8007792:	2b00      	cmp	r3, #0
 8007794:	d03a      	beq.n	800780c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d019      	beq.n	80077d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800779e:	4b17      	ldr	r3, [pc, #92]	; (80077fc <HAL_RCC_OscConfig+0x274>)
 80077a0:	2201      	movs	r2, #1
 80077a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077a4:	f7fd ffa8 	bl	80056f8 <HAL_GetTick>
 80077a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077aa:	e008      	b.n	80077be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077ac:	f7fd ffa4 	bl	80056f8 <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d901      	bls.n	80077be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e15a      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077be:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <HAL_RCC_OscConfig+0x26c>)
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0f0      	beq.n	80077ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80077ca:	2001      	movs	r0, #1
 80077cc:	f000 fada 	bl	8007d84 <RCC_Delay>
 80077d0:	e01c      	b.n	800780c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077d2:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <HAL_RCC_OscConfig+0x274>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077d8:	f7fd ff8e 	bl	80056f8 <HAL_GetTick>
 80077dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077de:	e00f      	b.n	8007800 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077e0:	f7fd ff8a 	bl	80056f8 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d908      	bls.n	8007800 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e140      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
 80077f2:	bf00      	nop
 80077f4:	40021000 	.word	0x40021000
 80077f8:	42420000 	.word	0x42420000
 80077fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007800:	4b9e      	ldr	r3, [pc, #632]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e9      	bne.n	80077e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80a6 	beq.w	8007966 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800781a:	2300      	movs	r3, #0
 800781c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800781e:	4b97      	ldr	r3, [pc, #604]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10d      	bne.n	8007846 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800782a:	4b94      	ldr	r3, [pc, #592]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	4a93      	ldr	r2, [pc, #588]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 8007830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007834:	61d3      	str	r3, [r2, #28]
 8007836:	4b91      	ldr	r3, [pc, #580]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800783e:	60bb      	str	r3, [r7, #8]
 8007840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007842:	2301      	movs	r3, #1
 8007844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007846:	4b8e      	ldr	r3, [pc, #568]	; (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784e:	2b00      	cmp	r3, #0
 8007850:	d118      	bne.n	8007884 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007852:	4b8b      	ldr	r3, [pc, #556]	; (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a8a      	ldr	r2, [pc, #552]	; (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 8007858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800785c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800785e:	f7fd ff4b 	bl	80056f8 <HAL_GetTick>
 8007862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007864:	e008      	b.n	8007878 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007866:	f7fd ff47 	bl	80056f8 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	2b64      	cmp	r3, #100	; 0x64
 8007872:	d901      	bls.n	8007878 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e0fd      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007878:	4b81      	ldr	r3, [pc, #516]	; (8007a80 <HAL_RCC_OscConfig+0x4f8>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007880:	2b00      	cmp	r3, #0
 8007882:	d0f0      	beq.n	8007866 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d106      	bne.n	800789a <HAL_RCC_OscConfig+0x312>
 800788c:	4b7b      	ldr	r3, [pc, #492]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	4a7a      	ldr	r2, [pc, #488]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 8007892:	f043 0301 	orr.w	r3, r3, #1
 8007896:	6213      	str	r3, [r2, #32]
 8007898:	e02d      	b.n	80078f6 <HAL_RCC_OscConfig+0x36e>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10c      	bne.n	80078bc <HAL_RCC_OscConfig+0x334>
 80078a2:	4b76      	ldr	r3, [pc, #472]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	4a75      	ldr	r2, [pc, #468]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80078a8:	f023 0301 	bic.w	r3, r3, #1
 80078ac:	6213      	str	r3, [r2, #32]
 80078ae:	4b73      	ldr	r3, [pc, #460]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	4a72      	ldr	r2, [pc, #456]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80078b4:	f023 0304 	bic.w	r3, r3, #4
 80078b8:	6213      	str	r3, [r2, #32]
 80078ba:	e01c      	b.n	80078f6 <HAL_RCC_OscConfig+0x36e>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	2b05      	cmp	r3, #5
 80078c2:	d10c      	bne.n	80078de <HAL_RCC_OscConfig+0x356>
 80078c4:	4b6d      	ldr	r3, [pc, #436]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	4a6c      	ldr	r2, [pc, #432]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80078ca:	f043 0304 	orr.w	r3, r3, #4
 80078ce:	6213      	str	r3, [r2, #32]
 80078d0:	4b6a      	ldr	r3, [pc, #424]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	4a69      	ldr	r2, [pc, #420]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80078d6:	f043 0301 	orr.w	r3, r3, #1
 80078da:	6213      	str	r3, [r2, #32]
 80078dc:	e00b      	b.n	80078f6 <HAL_RCC_OscConfig+0x36e>
 80078de:	4b67      	ldr	r3, [pc, #412]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	4a66      	ldr	r2, [pc, #408]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80078e4:	f023 0301 	bic.w	r3, r3, #1
 80078e8:	6213      	str	r3, [r2, #32]
 80078ea:	4b64      	ldr	r3, [pc, #400]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	4a63      	ldr	r2, [pc, #396]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80078f0:	f023 0304 	bic.w	r3, r3, #4
 80078f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d015      	beq.n	800792a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078fe:	f7fd fefb 	bl	80056f8 <HAL_GetTick>
 8007902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007904:	e00a      	b.n	800791c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007906:	f7fd fef7 	bl	80056f8 <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	f241 3288 	movw	r2, #5000	; 0x1388
 8007914:	4293      	cmp	r3, r2
 8007916:	d901      	bls.n	800791c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e0ab      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800791c:	4b57      	ldr	r3, [pc, #348]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	f003 0302 	and.w	r3, r3, #2
 8007924:	2b00      	cmp	r3, #0
 8007926:	d0ee      	beq.n	8007906 <HAL_RCC_OscConfig+0x37e>
 8007928:	e014      	b.n	8007954 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800792a:	f7fd fee5 	bl	80056f8 <HAL_GetTick>
 800792e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007930:	e00a      	b.n	8007948 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007932:	f7fd fee1 	bl	80056f8 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007940:	4293      	cmp	r3, r2
 8007942:	d901      	bls.n	8007948 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e095      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007948:	4b4c      	ldr	r3, [pc, #304]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1ee      	bne.n	8007932 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d105      	bne.n	8007966 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800795a:	4b48      	ldr	r3, [pc, #288]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	4a47      	ldr	r2, [pc, #284]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 8007960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007964:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 8081 	beq.w	8007a72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007970:	4b42      	ldr	r3, [pc, #264]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f003 030c 	and.w	r3, r3, #12
 8007978:	2b08      	cmp	r3, #8
 800797a:	d061      	beq.n	8007a40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	2b02      	cmp	r3, #2
 8007982:	d146      	bne.n	8007a12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007984:	4b3f      	ldr	r3, [pc, #252]	; (8007a84 <HAL_RCC_OscConfig+0x4fc>)
 8007986:	2200      	movs	r2, #0
 8007988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800798a:	f7fd feb5 	bl	80056f8 <HAL_GetTick>
 800798e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007990:	e008      	b.n	80079a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007992:	f7fd feb1 	bl	80056f8 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	2b02      	cmp	r3, #2
 800799e:	d901      	bls.n	80079a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e067      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079a4:	4b35      	ldr	r3, [pc, #212]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1f0      	bne.n	8007992 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079b8:	d108      	bne.n	80079cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80079ba:	4b30      	ldr	r3, [pc, #192]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	492d      	ldr	r1, [pc, #180]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80079c8:	4313      	orrs	r3, r2
 80079ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079cc:	4b2b      	ldr	r3, [pc, #172]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a19      	ldr	r1, [r3, #32]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079dc:	430b      	orrs	r3, r1
 80079de:	4927      	ldr	r1, [pc, #156]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 80079e0:	4313      	orrs	r3, r2
 80079e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079e4:	4b27      	ldr	r3, [pc, #156]	; (8007a84 <HAL_RCC_OscConfig+0x4fc>)
 80079e6:	2201      	movs	r2, #1
 80079e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ea:	f7fd fe85 	bl	80056f8 <HAL_GetTick>
 80079ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80079f0:	e008      	b.n	8007a04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079f2:	f7fd fe81 	bl	80056f8 <HAL_GetTick>
 80079f6:	4602      	mov	r2, r0
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d901      	bls.n	8007a04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e037      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a04:	4b1d      	ldr	r3, [pc, #116]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0f0      	beq.n	80079f2 <HAL_RCC_OscConfig+0x46a>
 8007a10:	e02f      	b.n	8007a72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a12:	4b1c      	ldr	r3, [pc, #112]	; (8007a84 <HAL_RCC_OscConfig+0x4fc>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a18:	f7fd fe6e 	bl	80056f8 <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a20:	f7fd fe6a 	bl	80056f8 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e020      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a32:	4b12      	ldr	r3, [pc, #72]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1f0      	bne.n	8007a20 <HAL_RCC_OscConfig+0x498>
 8007a3e:	e018      	b.n	8007a72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e013      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007a4c:	4b0b      	ldr	r3, [pc, #44]	; (8007a7c <HAL_RCC_OscConfig+0x4f4>)
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d106      	bne.n	8007a6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d001      	beq.n	8007a72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e000      	b.n	8007a74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	40021000 	.word	0x40021000
 8007a80:	40007000 	.word	0x40007000
 8007a84:	42420060 	.word	0x42420060

08007a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e0d0      	b.n	8007c3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a9c:	4b6a      	ldr	r3, [pc, #424]	; (8007c48 <HAL_RCC_ClockConfig+0x1c0>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0307 	and.w	r3, r3, #7
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d910      	bls.n	8007acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aaa:	4b67      	ldr	r3, [pc, #412]	; (8007c48 <HAL_RCC_ClockConfig+0x1c0>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f023 0207 	bic.w	r2, r3, #7
 8007ab2:	4965      	ldr	r1, [pc, #404]	; (8007c48 <HAL_RCC_ClockConfig+0x1c0>)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aba:	4b63      	ldr	r3, [pc, #396]	; (8007c48 <HAL_RCC_ClockConfig+0x1c0>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0307 	and.w	r3, r3, #7
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d001      	beq.n	8007acc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e0b8      	b.n	8007c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d020      	beq.n	8007b1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d005      	beq.n	8007af0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ae4:	4b59      	ldr	r3, [pc, #356]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	4a58      	ldr	r2, [pc, #352]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007aea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007aee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0308 	and.w	r3, r3, #8
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d005      	beq.n	8007b08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007afc:	4b53      	ldr	r3, [pc, #332]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	4a52      	ldr	r2, [pc, #328]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007b02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007b06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b08:	4b50      	ldr	r3, [pc, #320]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	494d      	ldr	r1, [pc, #308]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d040      	beq.n	8007ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d107      	bne.n	8007b3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b2e:	4b47      	ldr	r3, [pc, #284]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d115      	bne.n	8007b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e07f      	b.n	8007c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d107      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b46:	4b41      	ldr	r3, [pc, #260]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d109      	bne.n	8007b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e073      	b.n	8007c3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b56:	4b3d      	ldr	r3, [pc, #244]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0302 	and.w	r3, r3, #2
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e06b      	b.n	8007c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b66:	4b39      	ldr	r3, [pc, #228]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f023 0203 	bic.w	r2, r3, #3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	4936      	ldr	r1, [pc, #216]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b78:	f7fd fdbe 	bl	80056f8 <HAL_GetTick>
 8007b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b7e:	e00a      	b.n	8007b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b80:	f7fd fdba 	bl	80056f8 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e053      	b.n	8007c3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b96:	4b2d      	ldr	r3, [pc, #180]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f003 020c 	and.w	r2, r3, #12
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d1eb      	bne.n	8007b80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ba8:	4b27      	ldr	r3, [pc, #156]	; (8007c48 <HAL_RCC_ClockConfig+0x1c0>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0307 	and.w	r3, r3, #7
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d210      	bcs.n	8007bd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bb6:	4b24      	ldr	r3, [pc, #144]	; (8007c48 <HAL_RCC_ClockConfig+0x1c0>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f023 0207 	bic.w	r2, r3, #7
 8007bbe:	4922      	ldr	r1, [pc, #136]	; (8007c48 <HAL_RCC_ClockConfig+0x1c0>)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bc6:	4b20      	ldr	r3, [pc, #128]	; (8007c48 <HAL_RCC_ClockConfig+0x1c0>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0307 	and.w	r3, r3, #7
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d001      	beq.n	8007bd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e032      	b.n	8007c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0304 	and.w	r3, r3, #4
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d008      	beq.n	8007bf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007be4:	4b19      	ldr	r3, [pc, #100]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	4916      	ldr	r1, [pc, #88]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0308 	and.w	r3, r3, #8
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d009      	beq.n	8007c16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c02:	4b12      	ldr	r3, [pc, #72]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	00db      	lsls	r3, r3, #3
 8007c10:	490e      	ldr	r1, [pc, #56]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c16:	f000 f821 	bl	8007c5c <HAL_RCC_GetSysClockFreq>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	4b0b      	ldr	r3, [pc, #44]	; (8007c4c <HAL_RCC_ClockConfig+0x1c4>)
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	091b      	lsrs	r3, r3, #4
 8007c22:	f003 030f 	and.w	r3, r3, #15
 8007c26:	490a      	ldr	r1, [pc, #40]	; (8007c50 <HAL_RCC_ClockConfig+0x1c8>)
 8007c28:	5ccb      	ldrb	r3, [r1, r3]
 8007c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c2e:	4a09      	ldr	r2, [pc, #36]	; (8007c54 <HAL_RCC_ClockConfig+0x1cc>)
 8007c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c32:	4b09      	ldr	r3, [pc, #36]	; (8007c58 <HAL_RCC_ClockConfig+0x1d0>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fd fd2e 	bl	8005698 <HAL_InitTick>

  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	40022000 	.word	0x40022000
 8007c4c:	40021000 	.word	0x40021000
 8007c50:	0800b168 	.word	0x0800b168
 8007c54:	20000000 	.word	0x20000000
 8007c58:	20000004 	.word	0x20000004

08007c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c5c:	b490      	push	{r4, r7}
 8007c5e:	b08a      	sub	sp, #40	; 0x28
 8007c60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007c62:	4b2a      	ldr	r3, [pc, #168]	; (8007d0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8007c64:	1d3c      	adds	r4, r7, #4
 8007c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007c6c:	f240 2301 	movw	r3, #513	; 0x201
 8007c70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	61fb      	str	r3, [r7, #28]
 8007c76:	2300      	movs	r3, #0
 8007c78:	61bb      	str	r3, [r7, #24]
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c7e:	2300      	movs	r3, #0
 8007c80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007c86:	4b22      	ldr	r3, [pc, #136]	; (8007d10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	f003 030c 	and.w	r3, r3, #12
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d002      	beq.n	8007c9c <HAL_RCC_GetSysClockFreq+0x40>
 8007c96:	2b08      	cmp	r3, #8
 8007c98:	d003      	beq.n	8007ca2 <HAL_RCC_GetSysClockFreq+0x46>
 8007c9a:	e02d      	b.n	8007cf8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007c9c:	4b1d      	ldr	r3, [pc, #116]	; (8007d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007c9e:	623b      	str	r3, [r7, #32]
      break;
 8007ca0:	e02d      	b.n	8007cfe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	0c9b      	lsrs	r3, r3, #18
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007cae:	4413      	add	r3, r2
 8007cb0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007cb4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d013      	beq.n	8007ce8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007cc0:	4b13      	ldr	r3, [pc, #76]	; (8007d10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	0c5b      	lsrs	r3, r3, #17
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007cce:	4413      	add	r3, r2
 8007cd0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007cd4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	4a0e      	ldr	r2, [pc, #56]	; (8007d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cda:	fb02 f203 	mul.w	r2, r2, r3
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ce6:	e004      	b.n	8007cf2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	4a0b      	ldr	r2, [pc, #44]	; (8007d18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007cec:	fb02 f303 	mul.w	r3, r2, r3
 8007cf0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	623b      	str	r3, [r7, #32]
      break;
 8007cf6:	e002      	b.n	8007cfe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007cf8:	4b08      	ldr	r3, [pc, #32]	; (8007d1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007cfa:	623b      	str	r3, [r7, #32]
      break;
 8007cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3728      	adds	r7, #40	; 0x28
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bc90      	pop	{r4, r7}
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	0800b0d4 	.word	0x0800b0d4
 8007d10:	40021000 	.word	0x40021000
 8007d14:	00f42400 	.word	0x00f42400
 8007d18:	003d0900 	.word	0x003d0900
 8007d1c:	007a1200 	.word	0x007a1200

08007d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d24:	4b02      	ldr	r3, [pc, #8]	; (8007d30 <HAL_RCC_GetHCLKFreq+0x10>)
 8007d26:	681b      	ldr	r3, [r3, #0]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bc80      	pop	{r7}
 8007d2e:	4770      	bx	lr
 8007d30:	20000000 	.word	0x20000000

08007d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d38:	f7ff fff2 	bl	8007d20 <HAL_RCC_GetHCLKFreq>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	4b05      	ldr	r3, [pc, #20]	; (8007d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	0a1b      	lsrs	r3, r3, #8
 8007d44:	f003 0307 	and.w	r3, r3, #7
 8007d48:	4903      	ldr	r1, [pc, #12]	; (8007d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d4a:	5ccb      	ldrb	r3, [r1, r3]
 8007d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	40021000 	.word	0x40021000
 8007d58:	0800b178 	.word	0x0800b178

08007d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d60:	f7ff ffde 	bl	8007d20 <HAL_RCC_GetHCLKFreq>
 8007d64:	4602      	mov	r2, r0
 8007d66:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	0adb      	lsrs	r3, r3, #11
 8007d6c:	f003 0307 	and.w	r3, r3, #7
 8007d70:	4903      	ldr	r1, [pc, #12]	; (8007d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d72:	5ccb      	ldrb	r3, [r1, r3]
 8007d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	40021000 	.word	0x40021000
 8007d80:	0800b178 	.word	0x0800b178

08007d84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <RCC_Delay+0x34>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a0a      	ldr	r2, [pc, #40]	; (8007dbc <RCC_Delay+0x38>)
 8007d92:	fba2 2303 	umull	r2, r3, r2, r3
 8007d96:	0a5b      	lsrs	r3, r3, #9
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	fb02 f303 	mul.w	r3, r2, r3
 8007d9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007da0:	bf00      	nop
  }
  while (Delay --);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	1e5a      	subs	r2, r3, #1
 8007da6:	60fa      	str	r2, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1f9      	bne.n	8007da0 <RCC_Delay+0x1c>
}
 8007dac:	bf00      	nop
 8007dae:	bf00      	nop
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bc80      	pop	{r7}
 8007db6:	4770      	bx	lr
 8007db8:	20000000 	.word	0x20000000
 8007dbc:	10624dd3 	.word	0x10624dd3

08007dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	613b      	str	r3, [r7, #16]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d07d      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007de0:	4b4f      	ldr	r3, [pc, #316]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10d      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dec:	4b4c      	ldr	r3, [pc, #304]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dee:	69db      	ldr	r3, [r3, #28]
 8007df0:	4a4b      	ldr	r2, [pc, #300]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007df6:	61d3      	str	r3, [r2, #28]
 8007df8:	4b49      	ldr	r3, [pc, #292]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e00:	60bb      	str	r3, [r7, #8]
 8007e02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e04:	2301      	movs	r3, #1
 8007e06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e08:	4b46      	ldr	r3, [pc, #280]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d118      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e14:	4b43      	ldr	r3, [pc, #268]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a42      	ldr	r2, [pc, #264]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e20:	f7fd fc6a 	bl	80056f8 <HAL_GetTick>
 8007e24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e26:	e008      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e28:	f7fd fc66 	bl	80056f8 <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	2b64      	cmp	r3, #100	; 0x64
 8007e34:	d901      	bls.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e06d      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e3a:	4b3a      	ldr	r3, [pc, #232]	; (8007f24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0f0      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007e46:	4b36      	ldr	r3, [pc, #216]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d02e      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d027      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e64:	4b2e      	ldr	r3, [pc, #184]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e6e:	4b2e      	ldr	r3, [pc, #184]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007e70:	2201      	movs	r2, #1
 8007e72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e74:	4b2c      	ldr	r3, [pc, #176]	; (8007f28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007e7a:	4a29      	ldr	r2, [pc, #164]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d014      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e8a:	f7fd fc35 	bl	80056f8 <HAL_GetTick>
 8007e8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e90:	e00a      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e92:	f7fd fc31 	bl	80056f8 <HAL_GetTick>
 8007e96:	4602      	mov	r2, r0
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d901      	bls.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e036      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ea8:	4b1d      	ldr	r3, [pc, #116]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d0ee      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007eb4:	4b1a      	ldr	r3, [pc, #104]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	4917      	ldr	r1, [pc, #92]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d105      	bne.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ecc:	4b14      	ldr	r3, [pc, #80]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	4a13      	ldr	r2, [pc, #76]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ed6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0302 	and.w	r3, r3, #2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d008      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007ee4:	4b0e      	ldr	r3, [pc, #56]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	490b      	ldr	r1, [pc, #44]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0310 	and.w	r3, r3, #16
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d008      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f02:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	4904      	ldr	r1, [pc, #16]	; (8007f20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	40021000 	.word	0x40021000
 8007f24:	40007000 	.word	0x40007000
 8007f28:	42420440 	.word	0x42420440

08007f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d001      	beq.n	8007f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e044      	b.n	8007fce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f042 0201 	orr.w	r2, r2, #1
 8007f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a1d      	ldr	r2, [pc, #116]	; (8007fd8 <HAL_TIM_Base_Start_IT+0xac>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d018      	beq.n	8007f98 <HAL_TIM_Base_Start_IT+0x6c>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a1c      	ldr	r2, [pc, #112]	; (8007fdc <HAL_TIM_Base_Start_IT+0xb0>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d013      	beq.n	8007f98 <HAL_TIM_Base_Start_IT+0x6c>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f78:	d00e      	beq.n	8007f98 <HAL_TIM_Base_Start_IT+0x6c>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a18      	ldr	r2, [pc, #96]	; (8007fe0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d009      	beq.n	8007f98 <HAL_TIM_Base_Start_IT+0x6c>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a16      	ldr	r2, [pc, #88]	; (8007fe4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d004      	beq.n	8007f98 <HAL_TIM_Base_Start_IT+0x6c>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a15      	ldr	r2, [pc, #84]	; (8007fe8 <HAL_TIM_Base_Start_IT+0xbc>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d111      	bne.n	8007fbc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f003 0307 	and.w	r3, r3, #7
 8007fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b06      	cmp	r3, #6
 8007fa8:	d010      	beq.n	8007fcc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f042 0201 	orr.w	r2, r2, #1
 8007fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fba:	e007      	b.n	8007fcc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0201 	orr.w	r2, r2, #1
 8007fca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bc80      	pop	{r7}
 8007fd6:	4770      	bx	lr
 8007fd8:	40012c00 	.word	0x40012c00
 8007fdc:	40013400 	.word	0x40013400
 8007fe0:	40000400 	.word	0x40000400
 8007fe4:	40000800 	.word	0x40000800
 8007fe8:	40000c00 	.word	0x40000c00

08007fec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68da      	ldr	r2, [r3, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f022 0201 	bic.w	r2, r2, #1
 8008002:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6a1a      	ldr	r2, [r3, #32]
 800800a:	f241 1311 	movw	r3, #4369	; 0x1111
 800800e:	4013      	ands	r3, r2
 8008010:	2b00      	cmp	r3, #0
 8008012:	d10f      	bne.n	8008034 <HAL_TIM_Base_Stop_IT+0x48>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6a1a      	ldr	r2, [r3, #32]
 800801a:	f240 4344 	movw	r3, #1092	; 0x444
 800801e:	4013      	ands	r3, r2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d107      	bne.n	8008034 <HAL_TIM_Base_Stop_IT+0x48>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0201 	bic.w	r2, r2, #1
 8008032:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	bc80      	pop	{r7}
 8008046:	4770      	bx	lr

08008048 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e041      	b.n	80080de <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d106      	bne.n	8008074 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7fd f8f4 	bl	800525c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3304      	adds	r3, #4
 8008084:	4619      	mov	r1, r3
 8008086:	4610      	mov	r0, r2
 8008088:	f000 fbe8 	bl	800885c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d101      	bne.n	80080f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e041      	b.n	800817c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d106      	bne.n	8008112 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7fd f873 	bl	80051f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2202      	movs	r2, #2
 8008116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	3304      	adds	r3, #4
 8008122:	4619      	mov	r1, r3
 8008124:	4610      	mov	r0, r2
 8008126:	f000 fb99 	bl	800885c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d109      	bne.n	80081a8 <HAL_TIM_PWM_Start+0x24>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b01      	cmp	r3, #1
 800819e:	bf14      	ite	ne
 80081a0:	2301      	movne	r3, #1
 80081a2:	2300      	moveq	r3, #0
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	e022      	b.n	80081ee <HAL_TIM_PWM_Start+0x6a>
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	2b04      	cmp	r3, #4
 80081ac:	d109      	bne.n	80081c2 <HAL_TIM_PWM_Start+0x3e>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	bf14      	ite	ne
 80081ba:	2301      	movne	r3, #1
 80081bc:	2300      	moveq	r3, #0
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	e015      	b.n	80081ee <HAL_TIM_PWM_Start+0x6a>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	d109      	bne.n	80081dc <HAL_TIM_PWM_Start+0x58>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	bf14      	ite	ne
 80081d4:	2301      	movne	r3, #1
 80081d6:	2300      	moveq	r3, #0
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	e008      	b.n	80081ee <HAL_TIM_PWM_Start+0x6a>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	bf14      	ite	ne
 80081e8:	2301      	movne	r3, #1
 80081ea:	2300      	moveq	r3, #0
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e072      	b.n	80082dc <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d104      	bne.n	8008206 <HAL_TIM_PWM_Start+0x82>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008204:	e013      	b.n	800822e <HAL_TIM_PWM_Start+0xaa>
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b04      	cmp	r3, #4
 800820a:	d104      	bne.n	8008216 <HAL_TIM_PWM_Start+0x92>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008214:	e00b      	b.n	800822e <HAL_TIM_PWM_Start+0xaa>
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	2b08      	cmp	r3, #8
 800821a:	d104      	bne.n	8008226 <HAL_TIM_PWM_Start+0xa2>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008224:	e003      	b.n	800822e <HAL_TIM_PWM_Start+0xaa>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2202      	movs	r2, #2
 800822a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2201      	movs	r2, #1
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f000 fd36 	bl	8008ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a28      	ldr	r2, [pc, #160]	; (80082e4 <HAL_TIM_PWM_Start+0x160>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d004      	beq.n	8008250 <HAL_TIM_PWM_Start+0xcc>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a27      	ldr	r2, [pc, #156]	; (80082e8 <HAL_TIM_PWM_Start+0x164>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d101      	bne.n	8008254 <HAL_TIM_PWM_Start+0xd0>
 8008250:	2301      	movs	r3, #1
 8008252:	e000      	b.n	8008256 <HAL_TIM_PWM_Start+0xd2>
 8008254:	2300      	movs	r3, #0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d007      	beq.n	800826a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008268:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a1d      	ldr	r2, [pc, #116]	; (80082e4 <HAL_TIM_PWM_Start+0x160>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d018      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x122>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a1b      	ldr	r2, [pc, #108]	; (80082e8 <HAL_TIM_PWM_Start+0x164>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d013      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x122>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008286:	d00e      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x122>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a17      	ldr	r2, [pc, #92]	; (80082ec <HAL_TIM_PWM_Start+0x168>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d009      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x122>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a16      	ldr	r2, [pc, #88]	; (80082f0 <HAL_TIM_PWM_Start+0x16c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d004      	beq.n	80082a6 <HAL_TIM_PWM_Start+0x122>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a14      	ldr	r2, [pc, #80]	; (80082f4 <HAL_TIM_PWM_Start+0x170>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d111      	bne.n	80082ca <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f003 0307 	and.w	r3, r3, #7
 80082b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b06      	cmp	r3, #6
 80082b6:	d010      	beq.n	80082da <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f042 0201 	orr.w	r2, r2, #1
 80082c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082c8:	e007      	b.n	80082da <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f042 0201 	orr.w	r2, r2, #1
 80082d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	40012c00 	.word	0x40012c00
 80082e8:	40013400 	.word	0x40013400
 80082ec:	40000400 	.word	0x40000400
 80082f0:	40000800 	.word	0x40000800
 80082f4:	40000c00 	.word	0x40000c00

080082f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2200      	movs	r2, #0
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	4618      	mov	r0, r3
 800830c:	f000 fccc 	bl	8008ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a2e      	ldr	r2, [pc, #184]	; (80083d0 <HAL_TIM_PWM_Stop+0xd8>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d004      	beq.n	8008324 <HAL_TIM_PWM_Stop+0x2c>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a2d      	ldr	r2, [pc, #180]	; (80083d4 <HAL_TIM_PWM_Stop+0xdc>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d101      	bne.n	8008328 <HAL_TIM_PWM_Stop+0x30>
 8008324:	2301      	movs	r3, #1
 8008326:	e000      	b.n	800832a <HAL_TIM_PWM_Stop+0x32>
 8008328:	2300      	movs	r3, #0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d017      	beq.n	800835e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6a1a      	ldr	r2, [r3, #32]
 8008334:	f241 1311 	movw	r3, #4369	; 0x1111
 8008338:	4013      	ands	r3, r2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10f      	bne.n	800835e <HAL_TIM_PWM_Stop+0x66>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6a1a      	ldr	r2, [r3, #32]
 8008344:	f240 4344 	movw	r3, #1092	; 0x444
 8008348:	4013      	ands	r3, r2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d107      	bne.n	800835e <HAL_TIM_PWM_Stop+0x66>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800835c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6a1a      	ldr	r2, [r3, #32]
 8008364:	f241 1311 	movw	r3, #4369	; 0x1111
 8008368:	4013      	ands	r3, r2
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10f      	bne.n	800838e <HAL_TIM_PWM_Stop+0x96>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6a1a      	ldr	r2, [r3, #32]
 8008374:	f240 4344 	movw	r3, #1092	; 0x444
 8008378:	4013      	ands	r3, r2
 800837a:	2b00      	cmp	r3, #0
 800837c:	d107      	bne.n	800838e <HAL_TIM_PWM_Stop+0x96>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0201 	bic.w	r2, r2, #1
 800838c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d104      	bne.n	800839e <HAL_TIM_PWM_Stop+0xa6>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800839c:	e013      	b.n	80083c6 <HAL_TIM_PWM_Stop+0xce>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d104      	bne.n	80083ae <HAL_TIM_PWM_Stop+0xb6>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083ac:	e00b      	b.n	80083c6 <HAL_TIM_PWM_Stop+0xce>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b08      	cmp	r3, #8
 80083b2:	d104      	bne.n	80083be <HAL_TIM_PWM_Stop+0xc6>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083bc:	e003      	b.n	80083c6 <HAL_TIM_PWM_Stop+0xce>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2201      	movs	r2, #1
 80083c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	40012c00 	.word	0x40012c00
 80083d4:	40013400 	.word	0x40013400

080083d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d122      	bne.n	8008434 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d11b      	bne.n	8008434 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f06f 0202 	mvn.w	r2, #2
 8008404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fa03 	bl	8008826 <HAL_TIM_IC_CaptureCallback>
 8008420:	e005      	b.n	800842e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f9f6 	bl	8008814 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fa05 	bl	8008838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	f003 0304 	and.w	r3, r3, #4
 800843e:	2b04      	cmp	r3, #4
 8008440:	d122      	bne.n	8008488 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f003 0304 	and.w	r3, r3, #4
 800844c:	2b04      	cmp	r3, #4
 800844e:	d11b      	bne.n	8008488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f06f 0204 	mvn.w	r2, #4
 8008458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2202      	movs	r2, #2
 800845e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f9d9 	bl	8008826 <HAL_TIM_IC_CaptureCallback>
 8008474:	e005      	b.n	8008482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f9cc 	bl	8008814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 f9db 	bl	8008838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f003 0308 	and.w	r3, r3, #8
 8008492:	2b08      	cmp	r3, #8
 8008494:	d122      	bne.n	80084dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f003 0308 	and.w	r3, r3, #8
 80084a0:	2b08      	cmp	r3, #8
 80084a2:	d11b      	bne.n	80084dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f06f 0208 	mvn.w	r2, #8
 80084ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2204      	movs	r2, #4
 80084b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	f003 0303 	and.w	r3, r3, #3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f9af 	bl	8008826 <HAL_TIM_IC_CaptureCallback>
 80084c8:	e005      	b.n	80084d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f9a2 	bl	8008814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f9b1 	bl	8008838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f003 0310 	and.w	r3, r3, #16
 80084e6:	2b10      	cmp	r3, #16
 80084e8:	d122      	bne.n	8008530 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f003 0310 	and.w	r3, r3, #16
 80084f4:	2b10      	cmp	r3, #16
 80084f6:	d11b      	bne.n	8008530 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f06f 0210 	mvn.w	r2, #16
 8008500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2208      	movs	r2, #8
 8008506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f985 	bl	8008826 <HAL_TIM_IC_CaptureCallback>
 800851c:	e005      	b.n	800852a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f978 	bl	8008814 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f987 	bl	8008838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b01      	cmp	r3, #1
 800853c:	d10e      	bne.n	800855c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b01      	cmp	r3, #1
 800854a:	d107      	bne.n	800855c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f06f 0201 	mvn.w	r2, #1
 8008554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7fb fb3e 	bl	8003bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008566:	2b80      	cmp	r3, #128	; 0x80
 8008568:	d10e      	bne.n	8008588 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008574:	2b80      	cmp	r3, #128	; 0x80
 8008576:	d107      	bne.n	8008588 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fd84 	bl	8009090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008592:	2b40      	cmp	r3, #64	; 0x40
 8008594:	d10e      	bne.n	80085b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085a0:	2b40      	cmp	r3, #64	; 0x40
 80085a2:	d107      	bne.n	80085b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80085ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f94b 	bl	800884a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f003 0320 	and.w	r3, r3, #32
 80085be:	2b20      	cmp	r3, #32
 80085c0:	d10e      	bne.n	80085e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f003 0320 	and.w	r3, r3, #32
 80085cc:	2b20      	cmp	r3, #32
 80085ce:	d107      	bne.n	80085e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f06f 0220 	mvn.w	r2, #32
 80085d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fd4f 	bl	800907e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d101      	bne.n	8008602 <HAL_TIM_OC_ConfigChannel+0x1a>
 80085fe:	2302      	movs	r3, #2
 8008600:	e046      	b.n	8008690 <HAL_TIM_OC_ConfigChannel+0xa8>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b0c      	cmp	r3, #12
 800860e:	d839      	bhi.n	8008684 <HAL_TIM_OC_ConfigChannel+0x9c>
 8008610:	a201      	add	r2, pc, #4	; (adr r2, 8008618 <HAL_TIM_OC_ConfigChannel+0x30>)
 8008612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008616:	bf00      	nop
 8008618:	0800864d 	.word	0x0800864d
 800861c:	08008685 	.word	0x08008685
 8008620:	08008685 	.word	0x08008685
 8008624:	08008685 	.word	0x08008685
 8008628:	0800865b 	.word	0x0800865b
 800862c:	08008685 	.word	0x08008685
 8008630:	08008685 	.word	0x08008685
 8008634:	08008685 	.word	0x08008685
 8008638:	08008669 	.word	0x08008669
 800863c:	08008685 	.word	0x08008685
 8008640:	08008685 	.word	0x08008685
 8008644:	08008685 	.word	0x08008685
 8008648:	08008677 	.word	0x08008677
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68b9      	ldr	r1, [r7, #8]
 8008652:	4618      	mov	r0, r3
 8008654:	f000 f97c 	bl	8008950 <TIM_OC1_SetConfig>
      break;
 8008658:	e015      	b.n	8008686 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68b9      	ldr	r1, [r7, #8]
 8008660:	4618      	mov	r0, r3
 8008662:	f000 f9e5 	bl	8008a30 <TIM_OC2_SetConfig>
      break;
 8008666:	e00e      	b.n	8008686 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68b9      	ldr	r1, [r7, #8]
 800866e:	4618      	mov	r0, r3
 8008670:	f000 fa52 	bl	8008b18 <TIM_OC3_SetConfig>
      break;
 8008674:	e007      	b.n	8008686 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68b9      	ldr	r1, [r7, #8]
 800867c:	4618      	mov	r0, r3
 800867e:	f000 fabf 	bl	8008c00 <TIM_OC4_SetConfig>
      break;
 8008682:	e000      	b.n	8008686 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8008684:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d101      	bne.n	80086b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80086ae:	2302      	movs	r3, #2
 80086b0:	e0ac      	b.n	800880c <HAL_TIM_PWM_ConfigChannel+0x174>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b0c      	cmp	r3, #12
 80086be:	f200 809f 	bhi.w	8008800 <HAL_TIM_PWM_ConfigChannel+0x168>
 80086c2:	a201      	add	r2, pc, #4	; (adr r2, 80086c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80086c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c8:	080086fd 	.word	0x080086fd
 80086cc:	08008801 	.word	0x08008801
 80086d0:	08008801 	.word	0x08008801
 80086d4:	08008801 	.word	0x08008801
 80086d8:	0800873d 	.word	0x0800873d
 80086dc:	08008801 	.word	0x08008801
 80086e0:	08008801 	.word	0x08008801
 80086e4:	08008801 	.word	0x08008801
 80086e8:	0800877f 	.word	0x0800877f
 80086ec:	08008801 	.word	0x08008801
 80086f0:	08008801 	.word	0x08008801
 80086f4:	08008801 	.word	0x08008801
 80086f8:	080087bf 	.word	0x080087bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68b9      	ldr	r1, [r7, #8]
 8008702:	4618      	mov	r0, r3
 8008704:	f000 f924 	bl	8008950 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	699a      	ldr	r2, [r3, #24]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f042 0208 	orr.w	r2, r2, #8
 8008716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	699a      	ldr	r2, [r3, #24]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f022 0204 	bic.w	r2, r2, #4
 8008726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6999      	ldr	r1, [r3, #24]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	691a      	ldr	r2, [r3, #16]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	430a      	orrs	r2, r1
 8008738:	619a      	str	r2, [r3, #24]
      break;
 800873a:	e062      	b.n	8008802 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68b9      	ldr	r1, [r7, #8]
 8008742:	4618      	mov	r0, r3
 8008744:	f000 f974 	bl	8008a30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	699a      	ldr	r2, [r3, #24]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699a      	ldr	r2, [r3, #24]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6999      	ldr	r1, [r3, #24]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	021a      	lsls	r2, r3, #8
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	430a      	orrs	r2, r1
 800877a:	619a      	str	r2, [r3, #24]
      break;
 800877c:	e041      	b.n	8008802 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	68b9      	ldr	r1, [r7, #8]
 8008784:	4618      	mov	r0, r3
 8008786:	f000 f9c7 	bl	8008b18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	69da      	ldr	r2, [r3, #28]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f042 0208 	orr.w	r2, r2, #8
 8008798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	69da      	ldr	r2, [r3, #28]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0204 	bic.w	r2, r2, #4
 80087a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	69d9      	ldr	r1, [r3, #28]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	691a      	ldr	r2, [r3, #16]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	430a      	orrs	r2, r1
 80087ba:	61da      	str	r2, [r3, #28]
      break;
 80087bc:	e021      	b.n	8008802 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68b9      	ldr	r1, [r7, #8]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fa1b 	bl	8008c00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	69da      	ldr	r2, [r3, #28]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	69da      	ldr	r2, [r3, #28]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	69d9      	ldr	r1, [r3, #28]
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	021a      	lsls	r2, r3, #8
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	430a      	orrs	r2, r1
 80087fc:	61da      	str	r2, [r3, #28]
      break;
 80087fe:	e000      	b.n	8008802 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008800:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	bc80      	pop	{r7}
 8008824:	4770      	bx	lr

08008826 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800882e:	bf00      	nop
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	bc80      	pop	{r7}
 8008836:	4770      	bx	lr

08008838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	bc80      	pop	{r7}
 8008848:	4770      	bx	lr

0800884a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008852:	bf00      	nop
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	bc80      	pop	{r7}
 800885a:	4770      	bx	lr

0800885c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a33      	ldr	r2, [pc, #204]	; (800893c <TIM_Base_SetConfig+0xe0>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d013      	beq.n	800889c <TIM_Base_SetConfig+0x40>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a32      	ldr	r2, [pc, #200]	; (8008940 <TIM_Base_SetConfig+0xe4>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d00f      	beq.n	800889c <TIM_Base_SetConfig+0x40>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008882:	d00b      	beq.n	800889c <TIM_Base_SetConfig+0x40>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a2f      	ldr	r2, [pc, #188]	; (8008944 <TIM_Base_SetConfig+0xe8>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d007      	beq.n	800889c <TIM_Base_SetConfig+0x40>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a2e      	ldr	r2, [pc, #184]	; (8008948 <TIM_Base_SetConfig+0xec>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d003      	beq.n	800889c <TIM_Base_SetConfig+0x40>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	4a2d      	ldr	r2, [pc, #180]	; (800894c <TIM_Base_SetConfig+0xf0>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d108      	bne.n	80088ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a22      	ldr	r2, [pc, #136]	; (800893c <TIM_Base_SetConfig+0xe0>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d013      	beq.n	80088de <TIM_Base_SetConfig+0x82>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a21      	ldr	r2, [pc, #132]	; (8008940 <TIM_Base_SetConfig+0xe4>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d00f      	beq.n	80088de <TIM_Base_SetConfig+0x82>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088c4:	d00b      	beq.n	80088de <TIM_Base_SetConfig+0x82>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a1e      	ldr	r2, [pc, #120]	; (8008944 <TIM_Base_SetConfig+0xe8>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d007      	beq.n	80088de <TIM_Base_SetConfig+0x82>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a1d      	ldr	r2, [pc, #116]	; (8008948 <TIM_Base_SetConfig+0xec>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d003      	beq.n	80088de <TIM_Base_SetConfig+0x82>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a1c      	ldr	r2, [pc, #112]	; (800894c <TIM_Base_SetConfig+0xf0>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d108      	bne.n	80088f0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	695b      	ldr	r3, [r3, #20]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	689a      	ldr	r2, [r3, #8]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a09      	ldr	r2, [pc, #36]	; (800893c <TIM_Base_SetConfig+0xe0>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d003      	beq.n	8008924 <TIM_Base_SetConfig+0xc8>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a08      	ldr	r2, [pc, #32]	; (8008940 <TIM_Base_SetConfig+0xe4>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d103      	bne.n	800892c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	691a      	ldr	r2, [r3, #16]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	615a      	str	r2, [r3, #20]
}
 8008932:	bf00      	nop
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	bc80      	pop	{r7}
 800893a:	4770      	bx	lr
 800893c:	40012c00 	.word	0x40012c00
 8008940:	40013400 	.word	0x40013400
 8008944:	40000400 	.word	0x40000400
 8008948:	40000800 	.word	0x40000800
 800894c:	40000c00 	.word	0x40000c00

08008950 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008950:	b480      	push	{r7}
 8008952:	b087      	sub	sp, #28
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	f023 0201 	bic.w	r2, r3, #1
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800897e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f023 0303 	bic.w	r3, r3, #3
 8008986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	4313      	orrs	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f023 0302 	bic.w	r3, r3, #2
 8008998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a20      	ldr	r2, [pc, #128]	; (8008a28 <TIM_OC1_SetConfig+0xd8>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d003      	beq.n	80089b4 <TIM_OC1_SetConfig+0x64>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a1f      	ldr	r2, [pc, #124]	; (8008a2c <TIM_OC1_SetConfig+0xdc>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d10c      	bne.n	80089ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f023 0308 	bic.w	r3, r3, #8
 80089ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f023 0304 	bic.w	r3, r3, #4
 80089cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a15      	ldr	r2, [pc, #84]	; (8008a28 <TIM_OC1_SetConfig+0xd8>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d003      	beq.n	80089de <TIM_OC1_SetConfig+0x8e>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a14      	ldr	r2, [pc, #80]	; (8008a2c <TIM_OC1_SetConfig+0xdc>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d111      	bne.n	8008a02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	621a      	str	r2, [r3, #32]
}
 8008a1c:	bf00      	nop
 8008a1e:	371c      	adds	r7, #28
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	40012c00 	.word	0x40012c00
 8008a2c:	40013400 	.word	0x40013400

08008a30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	f023 0210 	bic.w	r2, r3, #16
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	021b      	lsls	r3, r3, #8
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	f023 0320 	bic.w	r3, r3, #32
 8008a7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	011b      	lsls	r3, r3, #4
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a21      	ldr	r2, [pc, #132]	; (8008b10 <TIM_OC2_SetConfig+0xe0>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d003      	beq.n	8008a98 <TIM_OC2_SetConfig+0x68>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a20      	ldr	r2, [pc, #128]	; (8008b14 <TIM_OC2_SetConfig+0xe4>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d10d      	bne.n	8008ab4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	011b      	lsls	r3, r3, #4
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ab2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a16      	ldr	r2, [pc, #88]	; (8008b10 <TIM_OC2_SetConfig+0xe0>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d003      	beq.n	8008ac4 <TIM_OC2_SetConfig+0x94>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a15      	ldr	r2, [pc, #84]	; (8008b14 <TIM_OC2_SetConfig+0xe4>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d113      	bne.n	8008aec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008aca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	693a      	ldr	r2, [r7, #16]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	621a      	str	r2, [r3, #32]
}
 8008b06:	bf00      	nop
 8008b08:	371c      	adds	r7, #28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bc80      	pop	{r7}
 8008b0e:	4770      	bx	lr
 8008b10:	40012c00 	.word	0x40012c00
 8008b14:	40013400 	.word	0x40013400

08008b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f023 0303 	bic.w	r3, r3, #3
 8008b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	021b      	lsls	r3, r3, #8
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a21      	ldr	r2, [pc, #132]	; (8008bf8 <TIM_OC3_SetConfig+0xe0>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d003      	beq.n	8008b7e <TIM_OC3_SetConfig+0x66>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a20      	ldr	r2, [pc, #128]	; (8008bfc <TIM_OC3_SetConfig+0xe4>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d10d      	bne.n	8008b9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	021b      	lsls	r3, r3, #8
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a16      	ldr	r2, [pc, #88]	; (8008bf8 <TIM_OC3_SetConfig+0xe0>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d003      	beq.n	8008baa <TIM_OC3_SetConfig+0x92>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a15      	ldr	r2, [pc, #84]	; (8008bfc <TIM_OC3_SetConfig+0xe4>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d113      	bne.n	8008bd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	011b      	lsls	r3, r3, #4
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	011b      	lsls	r3, r3, #4
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68fa      	ldr	r2, [r7, #12]
 8008bdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	621a      	str	r2, [r3, #32]
}
 8008bec:	bf00      	nop
 8008bee:	371c      	adds	r7, #28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bc80      	pop	{r7}
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	40012c00 	.word	0x40012c00
 8008bfc:	40013400 	.word	0x40013400

08008c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	021b      	lsls	r3, r3, #8
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	031b      	lsls	r3, r3, #12
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a11      	ldr	r2, [pc, #68]	; (8008ca0 <TIM_OC4_SetConfig+0xa0>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d003      	beq.n	8008c68 <TIM_OC4_SetConfig+0x68>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a10      	ldr	r2, [pc, #64]	; (8008ca4 <TIM_OC4_SetConfig+0xa4>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d109      	bne.n	8008c7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	695b      	ldr	r3, [r3, #20]
 8008c74:	019b      	lsls	r3, r3, #6
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	621a      	str	r2, [r3, #32]
}
 8008c96:	bf00      	nop
 8008c98:	371c      	adds	r7, #28
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bc80      	pop	{r7}
 8008c9e:	4770      	bx	lr
 8008ca0:	40012c00 	.word	0x40012c00
 8008ca4:	40013400 	.word	0x40013400

08008ca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	f003 031f 	and.w	r3, r3, #31
 8008cba:	2201      	movs	r2, #1
 8008cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a1a      	ldr	r2, [r3, #32]
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	43db      	mvns	r3, r3
 8008cca:	401a      	ands	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a1a      	ldr	r2, [r3, #32]
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f003 031f 	and.w	r3, r3, #31
 8008cda:	6879      	ldr	r1, [r7, #4]
 8008cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce0:	431a      	orrs	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	621a      	str	r2, [r3, #32]
}
 8008ce6:	bf00      	nop
 8008ce8:	371c      	adds	r7, #28
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bc80      	pop	{r7}
 8008cee:	4770      	bx	lr

08008cf0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d109      	bne.n	8008d14 <HAL_TIMEx_PWMN_Start+0x24>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	bf14      	ite	ne
 8008d0c:	2301      	movne	r3, #1
 8008d0e:	2300      	moveq	r3, #0
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	e022      	b.n	8008d5a <HAL_TIMEx_PWMN_Start+0x6a>
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	d109      	bne.n	8008d2e <HAL_TIMEx_PWMN_Start+0x3e>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	bf14      	ite	ne
 8008d26:	2301      	movne	r3, #1
 8008d28:	2300      	moveq	r3, #0
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	e015      	b.n	8008d5a <HAL_TIMEx_PWMN_Start+0x6a>
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	d109      	bne.n	8008d48 <HAL_TIMEx_PWMN_Start+0x58>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	bf14      	ite	ne
 8008d40:	2301      	movne	r3, #1
 8008d42:	2300      	moveq	r3, #0
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	e008      	b.n	8008d5a <HAL_TIMEx_PWMN_Start+0x6a>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	bf14      	ite	ne
 8008d54:	2301      	movne	r3, #1
 8008d56:	2300      	moveq	r3, #0
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e063      	b.n	8008e2a <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d104      	bne.n	8008d72 <HAL_TIMEx_PWMN_Start+0x82>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d70:	e013      	b.n	8008d9a <HAL_TIMEx_PWMN_Start+0xaa>
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	2b04      	cmp	r3, #4
 8008d76:	d104      	bne.n	8008d82 <HAL_TIMEx_PWMN_Start+0x92>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d80:	e00b      	b.n	8008d9a <HAL_TIMEx_PWMN_Start+0xaa>
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	2b08      	cmp	r3, #8
 8008d86:	d104      	bne.n	8008d92 <HAL_TIMEx_PWMN_Start+0xa2>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d90:	e003      	b.n	8008d9a <HAL_TIMEx_PWMN_Start+0xaa>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2202      	movs	r2, #2
 8008d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2204      	movs	r2, #4
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 f97d 	bl	80090a2 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008db6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a1d      	ldr	r2, [pc, #116]	; (8008e34 <HAL_TIMEx_PWMN_Start+0x144>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d018      	beq.n	8008df4 <HAL_TIMEx_PWMN_Start+0x104>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a1c      	ldr	r2, [pc, #112]	; (8008e38 <HAL_TIMEx_PWMN_Start+0x148>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d013      	beq.n	8008df4 <HAL_TIMEx_PWMN_Start+0x104>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dd4:	d00e      	beq.n	8008df4 <HAL_TIMEx_PWMN_Start+0x104>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a18      	ldr	r2, [pc, #96]	; (8008e3c <HAL_TIMEx_PWMN_Start+0x14c>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d009      	beq.n	8008df4 <HAL_TIMEx_PWMN_Start+0x104>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a16      	ldr	r2, [pc, #88]	; (8008e40 <HAL_TIMEx_PWMN_Start+0x150>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d004      	beq.n	8008df4 <HAL_TIMEx_PWMN_Start+0x104>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a15      	ldr	r2, [pc, #84]	; (8008e44 <HAL_TIMEx_PWMN_Start+0x154>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d111      	bne.n	8008e18 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b06      	cmp	r3, #6
 8008e04:	d010      	beq.n	8008e28 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f042 0201 	orr.w	r2, r2, #1
 8008e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e16:	e007      	b.n	8008e28 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f042 0201 	orr.w	r2, r2, #1
 8008e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	40012c00 	.word	0x40012c00
 8008e38:	40013400 	.word	0x40013400
 8008e3c:	40000400 	.word	0x40000400
 8008e40:	40000800 	.word	0x40000800
 8008e44:	40000c00 	.word	0x40000c00

08008e48 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2200      	movs	r2, #0
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 f921 	bl	80090a2 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6a1a      	ldr	r2, [r3, #32]
 8008e66:	f241 1311 	movw	r3, #4369	; 0x1111
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10f      	bne.n	8008e90 <HAL_TIMEx_PWMN_Stop+0x48>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6a1a      	ldr	r2, [r3, #32]
 8008e76:	f240 4344 	movw	r3, #1092	; 0x444
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d107      	bne.n	8008e90 <HAL_TIMEx_PWMN_Stop+0x48>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6a1a      	ldr	r2, [r3, #32]
 8008e96:	f241 1311 	movw	r3, #4369	; 0x1111
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10f      	bne.n	8008ec0 <HAL_TIMEx_PWMN_Stop+0x78>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6a1a      	ldr	r2, [r3, #32]
 8008ea6:	f240 4344 	movw	r3, #1092	; 0x444
 8008eaa:	4013      	ands	r3, r2
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d107      	bne.n	8008ec0 <HAL_TIMEx_PWMN_Stop+0x78>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f022 0201 	bic.w	r2, r2, #1
 8008ebe:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d104      	bne.n	8008ed0 <HAL_TIMEx_PWMN_Stop+0x88>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ece:	e013      	b.n	8008ef8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d104      	bne.n	8008ee0 <HAL_TIMEx_PWMN_Stop+0x98>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ede:	e00b      	b.n	8008ef8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	2b08      	cmp	r3, #8
 8008ee4:	d104      	bne.n	8008ef0 <HAL_TIMEx_PWMN_Stop+0xa8>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eee:	e003      	b.n	8008ef8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d101      	bne.n	8008f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f18:	2302      	movs	r3, #2
 8008f1a:	e050      	b.n	8008fbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2202      	movs	r2, #2
 8008f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a1b      	ldr	r2, [pc, #108]	; (8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d018      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a19      	ldr	r2, [pc, #100]	; (8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d013      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f72:	d00e      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a15      	ldr	r2, [pc, #84]	; (8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d009      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a14      	ldr	r2, [pc, #80]	; (8008fd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d004      	beq.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a12      	ldr	r2, [pc, #72]	; (8008fd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d10c      	bne.n	8008fac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bc80      	pop	{r7}
 8008fc6:	4770      	bx	lr
 8008fc8:	40012c00 	.word	0x40012c00
 8008fcc:	40013400 	.word	0x40013400
 8008fd0:	40000400 	.word	0x40000400
 8008fd4:	40000800 	.word	0x40000800
 8008fd8:	40000c00 	.word	0x40000c00

08008fdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d101      	bne.n	8008ff8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e03d      	b.n	8009074 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	4313      	orrs	r3, r2
 800900c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	4313      	orrs	r3, r2
 800901a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	4313      	orrs	r3, r2
 8009028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4313      	orrs	r3, r2
 8009036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	4313      	orrs	r3, r2
 8009044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	4313      	orrs	r3, r2
 8009052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	69db      	ldr	r3, [r3, #28]
 800905e:	4313      	orrs	r3, r2
 8009060:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	bc80      	pop	{r7}
 800907c:	4770      	bx	lr

0800907e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800907e:	b480      	push	{r7}
 8009080:	b083      	sub	sp, #12
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009086:	bf00      	nop
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	bc80      	pop	{r7}
 800908e:	4770      	bx	lr

08009090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	bc80      	pop	{r7}
 80090a0:	4770      	bx	lr

080090a2 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b087      	sub	sp, #28
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	60f8      	str	r0, [r7, #12]
 80090aa:	60b9      	str	r1, [r7, #8]
 80090ac:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f003 031f 	and.w	r3, r3, #31
 80090b4:	2204      	movs	r2, #4
 80090b6:	fa02 f303 	lsl.w	r3, r2, r3
 80090ba:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6a1a      	ldr	r2, [r3, #32]
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	43db      	mvns	r3, r3
 80090c4:	401a      	ands	r2, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6a1a      	ldr	r2, [r3, #32]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	f003 031f 	and.w	r3, r3, #31
 80090d4:	6879      	ldr	r1, [r7, #4]
 80090d6:	fa01 f303 	lsl.w	r3, r1, r3
 80090da:	431a      	orrs	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	621a      	str	r2, [r3, #32]
}
 80090e0:	bf00      	nop
 80090e2:	371c      	adds	r7, #28
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bc80      	pop	{r7}
 80090e8:	4770      	bx	lr

080090ea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b082      	sub	sp, #8
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e03f      	b.n	800917c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b00      	cmp	r3, #0
 8009106:	d106      	bne.n	8009116 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7fc f937 	bl	8005384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2224      	movs	r2, #36	; 0x24
 800911a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68da      	ldr	r2, [r3, #12]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800912c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fd64 	bl	8009bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	691a      	ldr	r2, [r3, #16]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009142:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	695a      	ldr	r2, [r3, #20]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009152:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68da      	ldr	r2, [r3, #12]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009162:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2220      	movs	r2, #32
 800916e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2220      	movs	r2, #32
 8009176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	4613      	mov	r3, r2
 8009190:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b20      	cmp	r3, #32
 800919c:	d153      	bne.n	8009246 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <HAL_UART_Transmit_DMA+0x26>
 80091a4:	88fb      	ldrh	r3, [r7, #6]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	e04c      	b.n	8009248 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d101      	bne.n	80091bc <HAL_UART_Transmit_DMA+0x38>
 80091b8:	2302      	movs	r3, #2
 80091ba:	e045      	b.n	8009248 <HAL_UART_Transmit_DMA+0xc4>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	88fa      	ldrh	r2, [r7, #6]
 80091ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	88fa      	ldrh	r2, [r7, #6]
 80091d4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2221      	movs	r2, #33	; 0x21
 80091e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e8:	4a19      	ldr	r2, [pc, #100]	; (8009250 <HAL_UART_Transmit_DMA+0xcc>)
 80091ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f0:	4a18      	ldr	r2, [pc, #96]	; (8009254 <HAL_UART_Transmit_DMA+0xd0>)
 80091f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f8:	4a17      	ldr	r2, [pc, #92]	; (8009258 <HAL_UART_Transmit_DMA+0xd4>)
 80091fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009200:	2200      	movs	r2, #0
 8009202:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8009204:	f107 0308 	add.w	r3, r7, #8
 8009208:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	6819      	ldr	r1, [r3, #0]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3304      	adds	r3, #4
 8009218:	461a      	mov	r2, r3
 800921a:	88fb      	ldrh	r3, [r7, #6]
 800921c:	f7fd fbe4 	bl	80069e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009228:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	695a      	ldr	r2, [r3, #20]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009240:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	e000      	b.n	8009248 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8009246:	2302      	movs	r3, #2
  }
}
 8009248:	4618      	mov	r0, r3
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	08009699 	.word	0x08009699
 8009254:	080096eb 	.word	0x080096eb
 8009258:	080097d3 	.word	0x080097d3

0800925c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	4613      	mov	r3, r2
 8009268:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b20      	cmp	r3, #32
 8009274:	d13c      	bne.n	80092f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d002      	beq.n	8009282 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800927c:	88fb      	ldrh	r3, [r7, #6]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e035      	b.n	80092f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800928c:	2b01      	cmp	r3, #1
 800928e:	d101      	bne.n	8009294 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8009290:	2302      	movs	r3, #2
 8009292:	e02e      	b.n	80092f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2201      	movs	r2, #1
 80092a0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80092a2:	88fb      	ldrh	r3, [r7, #6]
 80092a4:	461a      	mov	r2, r3
 80092a6:	68b9      	ldr	r1, [r7, #8]
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f000 fadd 	bl	8009868 <UART_Start_Receive_DMA>
 80092ae:	4603      	mov	r3, r0
 80092b0:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80092b2:	7dfb      	ldrb	r3, [r7, #23]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d119      	bne.n	80092ec <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d113      	bne.n	80092e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092c0:	2300      	movs	r3, #0
 80092c2:	613b      	str	r3, [r7, #16]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	613b      	str	r3, [r7, #16]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	613b      	str	r3, [r7, #16]
 80092d4:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68da      	ldr	r2, [r3, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f042 0210 	orr.w	r2, r2, #16
 80092e4:	60da      	str	r2, [r3, #12]
 80092e6:	e001      	b.n	80092ec <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
 80092ee:	e000      	b.n	80092f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80092f0:	2302      	movs	r3, #2
  }
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b08a      	sub	sp, #40	; 0x28
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800931c:	2300      	movs	r3, #0
 800931e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009320:	2300      	movs	r3, #0
 8009322:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	f003 030f 	and.w	r3, r3, #15
 800932a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10d      	bne.n	800934e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	f003 0320 	and.w	r3, r3, #32
 8009338:	2b00      	cmp	r3, #0
 800933a:	d008      	beq.n	800934e <HAL_UART_IRQHandler+0x52>
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	f003 0320 	and.w	r3, r3, #32
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fbae 	bl	8009aa8 <UART_Receive_IT>
      return;
 800934c:	e17b      	b.n	8009646 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 80b1 	beq.w	80094b8 <HAL_UART_IRQHandler+0x1bc>
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	2b00      	cmp	r3, #0
 800935e:	d105      	bne.n	800936c <HAL_UART_IRQHandler+0x70>
 8009360:	6a3b      	ldr	r3, [r7, #32]
 8009362:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 80a6 	beq.w	80094b8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00a      	beq.n	800938c <HAL_UART_IRQHandler+0x90>
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937c:	2b00      	cmp	r3, #0
 800937e:	d005      	beq.n	800938c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009384:	f043 0201 	orr.w	r2, r3, #1
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00a      	beq.n	80093ac <HAL_UART_IRQHandler+0xb0>
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	2b00      	cmp	r3, #0
 800939e:	d005      	beq.n	80093ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a4:	f043 0202 	orr.w	r2, r3, #2
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00a      	beq.n	80093cc <HAL_UART_IRQHandler+0xd0>
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d005      	beq.n	80093cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c4:	f043 0204 	orr.w	r2, r3, #4
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	f003 0308 	and.w	r3, r3, #8
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00f      	beq.n	80093f6 <HAL_UART_IRQHandler+0xfa>
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	f003 0320 	and.w	r3, r3, #32
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d104      	bne.n	80093ea <HAL_UART_IRQHandler+0xee>
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d005      	beq.n	80093f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ee:	f043 0208 	orr.w	r2, r3, #8
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f000 811e 	beq.w	800963c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	f003 0320 	and.w	r3, r3, #32
 8009406:	2b00      	cmp	r3, #0
 8009408:	d007      	beq.n	800941a <HAL_UART_IRQHandler+0x11e>
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	f003 0320 	and.w	r3, r3, #32
 8009410:	2b00      	cmp	r3, #0
 8009412:	d002      	beq.n	800941a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fb47 	bl	8009aa8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009424:	2b00      	cmp	r3, #0
 8009426:	bf14      	ite	ne
 8009428:	2301      	movne	r3, #1
 800942a:	2300      	moveq	r3, #0
 800942c:	b2db      	uxtb	r3, r3
 800942e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009434:	f003 0308 	and.w	r3, r3, #8
 8009438:	2b00      	cmp	r3, #0
 800943a:	d102      	bne.n	8009442 <HAL_UART_IRQHandler+0x146>
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d031      	beq.n	80094a6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fa89 	bl	800995a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009452:	2b00      	cmp	r3, #0
 8009454:	d023      	beq.n	800949e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	695a      	ldr	r2, [r3, #20]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009464:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946a:	2b00      	cmp	r3, #0
 800946c:	d013      	beq.n	8009496 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009472:	4a76      	ldr	r2, [pc, #472]	; (800964c <HAL_UART_IRQHandler+0x350>)
 8009474:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947a:	4618      	mov	r0, r3
 800947c:	f7fd fb4e 	bl	8006b1c <HAL_DMA_Abort_IT>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d016      	beq.n	80094b4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009490:	4610      	mov	r0, r2
 8009492:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009494:	e00e      	b.n	80094b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f8f5 	bl	8009686 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800949c:	e00a      	b.n	80094b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f8f1 	bl	8009686 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a4:	e006      	b.n	80094b4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f8ed 	bl	8009686 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80094b2:	e0c3      	b.n	800963c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b4:	bf00      	nop
    return;
 80094b6:	e0c1      	b.n	800963c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094bc:	2b01      	cmp	r3, #1
 80094be:	f040 80a1 	bne.w	8009604 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c4:	f003 0310 	and.w	r3, r3, #16
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 809b 	beq.w	8009604 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	f003 0310 	and.w	r3, r3, #16
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 8095 	beq.w	8009604 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094da:	2300      	movs	r3, #0
 80094dc:	60fb      	str	r3, [r7, #12]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	60fb      	str	r3, [r7, #12]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	60fb      	str	r3, [r7, #12]
 80094ee:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d04e      	beq.n	800959c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009508:	8a3b      	ldrh	r3, [r7, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 8098 	beq.w	8009640 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009514:	8a3a      	ldrh	r2, [r7, #16]
 8009516:	429a      	cmp	r2, r3
 8009518:	f080 8092 	bcs.w	8009640 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	8a3a      	ldrh	r2, [r7, #16]
 8009520:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	2b20      	cmp	r3, #32
 800952a:	d02b      	beq.n	8009584 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68da      	ldr	r2, [r3, #12]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800953a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	695a      	ldr	r2, [r3, #20]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f022 0201 	bic.w	r2, r2, #1
 800954a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	695a      	ldr	r2, [r3, #20]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800955a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2220      	movs	r2, #32
 8009560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68da      	ldr	r2, [r3, #12]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f022 0210 	bic.w	r2, r2, #16
 8009578:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957e:	4618      	mov	r0, r3
 8009580:	f7fd fa91 	bl	8006aa6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800958c:	b29b      	uxth	r3, r3
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	b29b      	uxth	r3, r3
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7f8 ff03 	bl	80023a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800959a:	e051      	b.n	8009640 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d047      	beq.n	8009644 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80095b4:	8a7b      	ldrh	r3, [r7, #18]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d044      	beq.n	8009644 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68da      	ldr	r2, [r3, #12]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80095c8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	695a      	ldr	r2, [r3, #20]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f022 0201 	bic.w	r2, r2, #1
 80095d8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2220      	movs	r2, #32
 80095de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68da      	ldr	r2, [r3, #12]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 0210 	bic.w	r2, r2, #16
 80095f6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80095f8:	8a7b      	ldrh	r3, [r7, #18]
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7f8 fecf 	bl	80023a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009602:	e01f      	b.n	8009644 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800960a:	2b00      	cmp	r3, #0
 800960c:	d008      	beq.n	8009620 <HAL_UART_IRQHandler+0x324>
 800960e:	6a3b      	ldr	r3, [r7, #32]
 8009610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009614:	2b00      	cmp	r3, #0
 8009616:	d003      	beq.n	8009620 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 f9de 	bl	80099da <UART_Transmit_IT>
    return;
 800961e:	e012      	b.n	8009646 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00d      	beq.n	8009646 <HAL_UART_IRQHandler+0x34a>
 800962a:	6a3b      	ldr	r3, [r7, #32]
 800962c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009630:	2b00      	cmp	r3, #0
 8009632:	d008      	beq.n	8009646 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fa1f 	bl	8009a78 <UART_EndTransmit_IT>
    return;
 800963a:	e004      	b.n	8009646 <HAL_UART_IRQHandler+0x34a>
    return;
 800963c:	bf00      	nop
 800963e:	e002      	b.n	8009646 <HAL_UART_IRQHandler+0x34a>
      return;
 8009640:	bf00      	nop
 8009642:	e000      	b.n	8009646 <HAL_UART_IRQHandler+0x34a>
      return;
 8009644:	bf00      	nop
  }
}
 8009646:	3728      	adds	r7, #40	; 0x28
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	080099b3 	.word	0x080099b3

08009650 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	bc80      	pop	{r7}
 8009660:	4770      	bx	lr

08009662 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009662:	b480      	push	{r7}
 8009664:	b083      	sub	sp, #12
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800966a:	bf00      	nop
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	bc80      	pop	{r7}
 8009672:	4770      	bx	lr

08009674 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800967c:	bf00      	nop
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	bc80      	pop	{r7}
 8009684:	4770      	bx	lr

08009686 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009686:	b480      	push	{r7}
 8009688:	b083      	sub	sp, #12
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800968e:	bf00      	nop
 8009690:	370c      	adds	r7, #12
 8009692:	46bd      	mov	sp, r7
 8009694:	bc80      	pop	{r7}
 8009696:	4770      	bx	lr

08009698 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0320 	and.w	r3, r3, #32
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d113      	bne.n	80096dc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	695a      	ldr	r2, [r3, #20]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096c8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68da      	ldr	r2, [r3, #12]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096d8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096da:	e002      	b.n	80096e2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7f8 fe4b 	bl	8002378 <HAL_UART_TxCpltCallback>
}
 80096e2:	bf00      	nop
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f7ff ffa9 	bl	8009650 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096fe:	bf00      	nop
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009712:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0320 	and.w	r3, r3, #32
 800971e:	2b00      	cmp	r3, #0
 8009720:	d12a      	bne.n	8009778 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2200      	movs	r2, #0
 8009726:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009736:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	695a      	ldr	r2, [r3, #20]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f022 0201 	bic.w	r2, r2, #1
 8009746:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	695a      	ldr	r2, [r3, #20]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009756:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2220      	movs	r2, #32
 800975c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009764:	2b01      	cmp	r3, #1
 8009766:	d107      	bne.n	8009778 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68da      	ldr	r2, [r3, #12]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f022 0210 	bic.w	r2, r2, #16
 8009776:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977c:	2b01      	cmp	r3, #1
 800977e:	d106      	bne.n	800978e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009784:	4619      	mov	r1, r3
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f7f8 fe0a 	bl	80023a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800978c:	e002      	b.n	8009794 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f7ff ff67 	bl	8009662 <HAL_UART_RxCpltCallback>
}
 8009794:	bf00      	nop
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d108      	bne.n	80097c4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80097b6:	085b      	lsrs	r3, r3, #1
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	4619      	mov	r1, r3
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f7f8 fdef 	bl	80023a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097c2:	e002      	b.n	80097ca <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f7ff ff55 	bl	8009674 <HAL_UART_RxHalfCpltCallback>
}
 80097ca:	bf00      	nop
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80097da:	2300      	movs	r3, #0
 80097dc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	bf14      	ite	ne
 80097f2:	2301      	movne	r3, #1
 80097f4:	2300      	moveq	r3, #0
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b21      	cmp	r3, #33	; 0x21
 8009804:	d108      	bne.n	8009818 <UART_DMAError+0x46>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d005      	beq.n	8009818 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	2200      	movs	r2, #0
 8009810:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009812:	68b8      	ldr	r0, [r7, #8]
 8009814:	f000 f88c 	bl	8009930 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	695b      	ldr	r3, [r3, #20]
 800981e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009822:	2b00      	cmp	r3, #0
 8009824:	bf14      	ite	ne
 8009826:	2301      	movne	r3, #1
 8009828:	2300      	moveq	r3, #0
 800982a:	b2db      	uxtb	r3, r3
 800982c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009834:	b2db      	uxtb	r3, r3
 8009836:	2b22      	cmp	r3, #34	; 0x22
 8009838:	d108      	bne.n	800984c <UART_DMAError+0x7a>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d005      	beq.n	800984c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2200      	movs	r2, #0
 8009844:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009846:	68b8      	ldr	r0, [r7, #8]
 8009848:	f000 f887 	bl	800995a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009850:	f043 0210 	orr.w	r2, r3, #16
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009858:	68b8      	ldr	r0, [r7, #8]
 800985a:	f7ff ff14 	bl	8009686 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800985e:	bf00      	nop
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
	...

08009868 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	4613      	mov	r3, r2
 8009874:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	88fa      	ldrh	r2, [r7, #6]
 8009880:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2222      	movs	r2, #34	; 0x22
 800988c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009894:	4a23      	ldr	r2, [pc, #140]	; (8009924 <UART_Start_Receive_DMA+0xbc>)
 8009896:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989c:	4a22      	ldr	r2, [pc, #136]	; (8009928 <UART_Start_Receive_DMA+0xc0>)
 800989e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a4:	4a21      	ldr	r2, [pc, #132]	; (800992c <UART_Start_Receive_DMA+0xc4>)
 80098a6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ac:	2200      	movs	r2, #0
 80098ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80098b0:	f107 0308 	add.w	r3, r7, #8
 80098b4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3304      	adds	r3, #4
 80098c0:	4619      	mov	r1, r3
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	88fb      	ldrh	r3, [r7, #6]
 80098c8:	f7fd f88e 	bl	80069e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80098cc:	2300      	movs	r3, #0
 80098ce:	613b      	str	r3, [r7, #16]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	613b      	str	r3, [r7, #16]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	613b      	str	r3, [r7, #16]
 80098e0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68da      	ldr	r2, [r3, #12]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098f8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	695a      	ldr	r2, [r3, #20]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f042 0201 	orr.w	r2, r2, #1
 8009908:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	695a      	ldr	r2, [r3, #20]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009918:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	08009707 	.word	0x08009707
 8009928:	0800979d 	.word	0x0800979d
 800992c:	080097d3 	.word	0x080097d3

08009930 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	68da      	ldr	r2, [r3, #12]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009946:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2220      	movs	r2, #32
 800994c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009950:	bf00      	nop
 8009952:	370c      	adds	r7, #12
 8009954:	46bd      	mov	sp, r7
 8009956:	bc80      	pop	{r7}
 8009958:	4770      	bx	lr

0800995a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800995a:	b480      	push	{r7}
 800995c:	b083      	sub	sp, #12
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68da      	ldr	r2, [r3, #12]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009970:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	695a      	ldr	r2, [r3, #20]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f022 0201 	bic.w	r2, r2, #1
 8009980:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009986:	2b01      	cmp	r3, #1
 8009988:	d107      	bne.n	800999a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68da      	ldr	r2, [r3, #12]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f022 0210 	bic.w	r2, r2, #16
 8009998:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2220      	movs	r2, #32
 800999e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bc80      	pop	{r7}
 80099b0:	4770      	bx	lr

080099b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b084      	sub	sp, #16
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f7ff fe5a 	bl	8009686 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099d2:	bf00      	nop
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80099da:	b480      	push	{r7}
 80099dc:	b085      	sub	sp, #20
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b21      	cmp	r3, #33	; 0x21
 80099ec:	d13e      	bne.n	8009a6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099f6:	d114      	bne.n	8009a22 <UART_Transmit_IT+0x48>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d110      	bne.n	8009a22 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a1b      	ldr	r3, [r3, #32]
 8009a04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	881b      	ldrh	r3, [r3, #0]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	1c9a      	adds	r2, r3, #2
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	621a      	str	r2, [r3, #32]
 8009a20:	e008      	b.n	8009a34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	1c59      	adds	r1, r3, #1
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	6211      	str	r1, [r2, #32]
 8009a2c:	781a      	ldrb	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	4619      	mov	r1, r3
 8009a42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10f      	bne.n	8009a68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68da      	ldr	r2, [r3, #12]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68da      	ldr	r2, [r3, #12]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	e000      	b.n	8009a6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a6c:	2302      	movs	r3, #2
  }
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bc80      	pop	{r7}
 8009a76:	4770      	bx	lr

08009a78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2220      	movs	r2, #32
 8009a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f7f8 fc6d 	bl	8002378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b22      	cmp	r3, #34	; 0x22
 8009aba:	f040 8099 	bne.w	8009bf0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ac6:	d117      	bne.n	8009af8 <UART_Receive_IT+0x50>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d113      	bne.n	8009af8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af0:	1c9a      	adds	r2, r3, #2
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	629a      	str	r2, [r3, #40]	; 0x28
 8009af6:	e026      	b.n	8009b46 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8009afe:	2300      	movs	r3, #0
 8009b00:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b0a:	d007      	beq.n	8009b1c <UART_Receive_IT+0x74>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10a      	bne.n	8009b2a <UART_Receive_IT+0x82>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d106      	bne.n	8009b2a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	b2da      	uxtb	r2, r3
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	701a      	strb	r2, [r3, #0]
 8009b28:	e008      	b.n	8009b3c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	4619      	mov	r1, r3
 8009b54:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d148      	bne.n	8009bec <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68da      	ldr	r2, [r3, #12]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f022 0220 	bic.w	r2, r2, #32
 8009b68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68da      	ldr	r2, [r3, #12]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	695a      	ldr	r2, [r3, #20]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f022 0201 	bic.w	r2, r2, #1
 8009b88:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2220      	movs	r2, #32
 8009b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d123      	bne.n	8009be2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68da      	ldr	r2, [r3, #12]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f022 0210 	bic.w	r2, r2, #16
 8009bae:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 0310 	and.w	r3, r3, #16
 8009bba:	2b10      	cmp	r3, #16
 8009bbc:	d10a      	bne.n	8009bd4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60fb      	str	r3, [r7, #12]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	60fb      	str	r3, [r7, #12]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	60fb      	str	r3, [r7, #12]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7f8 fbe0 	bl	80023a0 <HAL_UARTEx_RxEventCallback>
 8009be0:	e002      	b.n	8009be8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff fd3d 	bl	8009662 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	e002      	b.n	8009bf2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	e000      	b.n	8009bf2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009bf0:	2302      	movs	r3, #2
  }
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3718      	adds	r7, #24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
	...

08009bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	68da      	ldr	r2, [r3, #12]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	430a      	orrs	r2, r1
 8009c18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	689a      	ldr	r2, [r3, #8]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	431a      	orrs	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009c36:	f023 030c 	bic.w	r3, r3, #12
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	6812      	ldr	r2, [r2, #0]
 8009c3e:	68b9      	ldr	r1, [r7, #8]
 8009c40:	430b      	orrs	r3, r1
 8009c42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	699a      	ldr	r2, [r3, #24]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	430a      	orrs	r2, r1
 8009c58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a2c      	ldr	r2, [pc, #176]	; (8009d10 <UART_SetConfig+0x114>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d103      	bne.n	8009c6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009c64:	f7fe f87a 	bl	8007d5c <HAL_RCC_GetPCLK2Freq>
 8009c68:	60f8      	str	r0, [r7, #12]
 8009c6a:	e002      	b.n	8009c72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009c6c:	f7fe f862 	bl	8007d34 <HAL_RCC_GetPCLK1Freq>
 8009c70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	4613      	mov	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	009a      	lsls	r2, r3, #2
 8009c7c:	441a      	add	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c88:	4a22      	ldr	r2, [pc, #136]	; (8009d14 <UART_SetConfig+0x118>)
 8009c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c8e:	095b      	lsrs	r3, r3, #5
 8009c90:	0119      	lsls	r1, r3, #4
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	4613      	mov	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	009a      	lsls	r2, r3, #2
 8009c9c:	441a      	add	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ca8:	4b1a      	ldr	r3, [pc, #104]	; (8009d14 <UART_SetConfig+0x118>)
 8009caa:	fba3 0302 	umull	r0, r3, r3, r2
 8009cae:	095b      	lsrs	r3, r3, #5
 8009cb0:	2064      	movs	r0, #100	; 0x64
 8009cb2:	fb00 f303 	mul.w	r3, r0, r3
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	011b      	lsls	r3, r3, #4
 8009cba:	3332      	adds	r3, #50	; 0x32
 8009cbc:	4a15      	ldr	r2, [pc, #84]	; (8009d14 <UART_SetConfig+0x118>)
 8009cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc2:	095b      	lsrs	r3, r3, #5
 8009cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cc8:	4419      	add	r1, r3
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	4613      	mov	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	009a      	lsls	r2, r3, #2
 8009cd4:	441a      	add	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ce0:	4b0c      	ldr	r3, [pc, #48]	; (8009d14 <UART_SetConfig+0x118>)
 8009ce2:	fba3 0302 	umull	r0, r3, r3, r2
 8009ce6:	095b      	lsrs	r3, r3, #5
 8009ce8:	2064      	movs	r0, #100	; 0x64
 8009cea:	fb00 f303 	mul.w	r3, r0, r3
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	011b      	lsls	r3, r3, #4
 8009cf2:	3332      	adds	r3, #50	; 0x32
 8009cf4:	4a07      	ldr	r2, [pc, #28]	; (8009d14 <UART_SetConfig+0x118>)
 8009cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cfa:	095b      	lsrs	r3, r3, #5
 8009cfc:	f003 020f 	and.w	r2, r3, #15
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	440a      	add	r2, r1
 8009d06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009d08:	bf00      	nop
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	40013800 	.word	0x40013800
 8009d14:	51eb851f 	.word	0x51eb851f

08009d18 <__cxa_pure_virtual>:
 8009d18:	b508      	push	{r3, lr}
 8009d1a:	f000 f80d 	bl	8009d38 <_ZSt9terminatev>

08009d1e <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009d1e:	b508      	push	{r3, lr}
 8009d20:	4780      	blx	r0
 8009d22:	f001 f93b 	bl	800af9c <abort>
	...

08009d28 <_ZSt13get_terminatev>:
 8009d28:	4b02      	ldr	r3, [pc, #8]	; (8009d34 <_ZSt13get_terminatev+0xc>)
 8009d2a:	6818      	ldr	r0, [r3, #0]
 8009d2c:	f3bf 8f5b 	dmb	ish
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	2000000c 	.word	0x2000000c

08009d38 <_ZSt9terminatev>:
 8009d38:	b508      	push	{r3, lr}
 8009d3a:	f7ff fff5 	bl	8009d28 <_ZSt13get_terminatev>
 8009d3e:	f7ff ffee 	bl	8009d1e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08009d44 <log1pf>:
 8009d44:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	4605      	mov	r5, r0
 8009d50:	db06      	blt.n	8009d60 <log1pf+0x1c>
 8009d52:	4601      	mov	r1, r0
 8009d54:	f7f6 ff02 	bl	8000b5c <__addsf3>
 8009d58:	4604      	mov	r4, r0
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d60:	4b8b      	ldr	r3, [pc, #556]	; (8009f90 <log1pf+0x24c>)
 8009d62:	4298      	cmp	r0, r3
 8009d64:	dc7d      	bgt.n	8009e62 <log1pf+0x11e>
 8009d66:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8009d6a:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8009d6e:	db0d      	blt.n	8009d8c <log1pf+0x48>
 8009d70:	4988      	ldr	r1, [pc, #544]	; (8009f94 <log1pf+0x250>)
 8009d72:	f7f7 f98f 	bl	8001094 <__aeabi_fcmpeq>
 8009d76:	b120      	cbz	r0, 8009d82 <log1pf+0x3e>
 8009d78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d7c:	2001      	movs	r0, #1
 8009d7e:	f000 bfc5 	b.w	800ad0c <__math_divzerof>
 8009d82:	4620      	mov	r0, r4
 8009d84:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d88:	f000 bfd0 	b.w	800ad2c <__math_invalidf>
 8009d8c:	f1b6 5f44 	cmp.w	r6, #822083584	; 0x31000000
 8009d90:	da14      	bge.n	8009dbc <log1pf+0x78>
 8009d92:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8009d96:	f7f6 fee1 	bl	8000b5c <__addsf3>
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	f7f7 f9a2 	bl	80010e4 <__aeabi_fcmpgt>
 8009da0:	b110      	cbz	r0, 8009da8 <log1pf+0x64>
 8009da2:	f1b6 5f12 	cmp.w	r6, #612368384	; 0x24800000
 8009da6:	dbd8      	blt.n	8009d5a <log1pf+0x16>
 8009da8:	4621      	mov	r1, r4
 8009daa:	4620      	mov	r0, r4
 8009dac:	f7f6 ffde 	bl	8000d6c <__aeabi_fmul>
 8009db0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009db4:	f7f6 ffda 	bl	8000d6c <__aeabi_fmul>
 8009db8:	4601      	mov	r1, r0
 8009dba:	e072      	b.n	8009ea2 <log1pf+0x15e>
 8009dbc:	4b76      	ldr	r3, [pc, #472]	; (8009f98 <log1pf+0x254>)
 8009dbe:	441d      	add	r5, r3
 8009dc0:	429d      	cmp	r5, r3
 8009dc2:	d85c      	bhi.n	8009e7e <log1pf+0x13a>
 8009dc4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f7f6 fec7 	bl	8000b5c <__addsf3>
 8009dce:	15c6      	asrs	r6, r0, #23
 8009dd0:	3e7f      	subs	r6, #127	; 0x7f
 8009dd2:	2e00      	cmp	r6, #0
 8009dd4:	4607      	mov	r7, r0
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	dd4a      	ble.n	8009e70 <log1pf+0x12c>
 8009dda:	4621      	mov	r1, r4
 8009ddc:	f7f6 febc 	bl	8000b58 <__aeabi_fsub>
 8009de0:	4601      	mov	r1, r0
 8009de2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009de6:	f7f6 feb7 	bl	8000b58 <__aeabi_fsub>
 8009dea:	4639      	mov	r1, r7
 8009dec:	f7f7 f872 	bl	8000ed4 <__aeabi_fdiv>
 8009df0:	4607      	mov	r7, r0
 8009df2:	4b6a      	ldr	r3, [pc, #424]	; (8009f9c <log1pf+0x258>)
 8009df4:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8009df8:	429d      	cmp	r5, r3
 8009dfa:	bfc8      	it	gt
 8009dfc:	f045 507c 	orrgt.w	r0, r5, #1056964608	; 0x3f000000
 8009e00:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009e04:	bfc9      	itett	gt
 8009e06:	f5c5 0500 	rsbgt	r5, r5, #8388608	; 0x800000
 8009e0a:	f045 507e 	orrle.w	r0, r5, #1065353216	; 0x3f800000
 8009e0e:	3601      	addgt	r6, #1
 8009e10:	10ad      	asrgt	r5, r5, #2
 8009e12:	f7f6 fea1 	bl	8000b58 <__aeabi_fsub>
 8009e16:	4604      	mov	r4, r0
 8009e18:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f7f6 ffa5 	bl	8000d6c <__aeabi_fmul>
 8009e22:	4621      	mov	r1, r4
 8009e24:	f7f6 ffa2 	bl	8000d6c <__aeabi_fmul>
 8009e28:	4680      	mov	r8, r0
 8009e2a:	2d00      	cmp	r5, #0
 8009e2c:	d156      	bne.n	8009edc <log1pf+0x198>
 8009e2e:	2100      	movs	r1, #0
 8009e30:	4620      	mov	r0, r4
 8009e32:	f7f7 f92f 	bl	8001094 <__aeabi_fcmpeq>
 8009e36:	b328      	cbz	r0, 8009e84 <log1pf+0x140>
 8009e38:	2e00      	cmp	r6, #0
 8009e3a:	f000 80a6 	beq.w	8009f8a <log1pf+0x246>
 8009e3e:	4630      	mov	r0, r6
 8009e40:	f7f6 ff40 	bl	8000cc4 <__aeabi_i2f>
 8009e44:	4956      	ldr	r1, [pc, #344]	; (8009fa0 <log1pf+0x25c>)
 8009e46:	4605      	mov	r5, r0
 8009e48:	f7f6 ff90 	bl	8000d6c <__aeabi_fmul>
 8009e4c:	4639      	mov	r1, r7
 8009e4e:	f7f6 fe85 	bl	8000b5c <__addsf3>
 8009e52:	4954      	ldr	r1, [pc, #336]	; (8009fa4 <log1pf+0x260>)
 8009e54:	4604      	mov	r4, r0
 8009e56:	4628      	mov	r0, r5
 8009e58:	f7f6 ff88 	bl	8000d6c <__aeabi_fmul>
 8009e5c:	4601      	mov	r1, r0
 8009e5e:	4620      	mov	r0, r4
 8009e60:	e778      	b.n	8009d54 <log1pf+0x10>
 8009e62:	f1b0 4fb4 	cmp.w	r0, #1509949440	; 0x5a000000
 8009e66:	dbad      	blt.n	8009dc4 <log1pf+0x80>
 8009e68:	15c6      	asrs	r6, r0, #23
 8009e6a:	2700      	movs	r7, #0
 8009e6c:	3e7f      	subs	r6, #127	; 0x7f
 8009e6e:	e7c0      	b.n	8009df2 <log1pf+0xae>
 8009e70:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009e74:	f7f6 fe70 	bl	8000b58 <__aeabi_fsub>
 8009e78:	4601      	mov	r1, r0
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	e7b3      	b.n	8009de6 <log1pf+0xa2>
 8009e7e:	2501      	movs	r5, #1
 8009e80:	2600      	movs	r6, #0
 8009e82:	e7c9      	b.n	8009e18 <log1pf+0xd4>
 8009e84:	4948      	ldr	r1, [pc, #288]	; (8009fa8 <log1pf+0x264>)
 8009e86:	4620      	mov	r0, r4
 8009e88:	f7f6 ff70 	bl	8000d6c <__aeabi_fmul>
 8009e8c:	4601      	mov	r1, r0
 8009e8e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8009e92:	f7f6 fe61 	bl	8000b58 <__aeabi_fsub>
 8009e96:	4641      	mov	r1, r8
 8009e98:	f7f6 ff68 	bl	8000d6c <__aeabi_fmul>
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	b926      	cbnz	r6, 8009eaa <log1pf+0x166>
 8009ea0:	4601      	mov	r1, r0
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f7f6 fe58 	bl	8000b58 <__aeabi_fsub>
 8009ea8:	e756      	b.n	8009d58 <log1pf+0x14>
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f7f6 ff0a 	bl	8000cc4 <__aeabi_i2f>
 8009eb0:	493c      	ldr	r1, [pc, #240]	; (8009fa4 <log1pf+0x260>)
 8009eb2:	4680      	mov	r8, r0
 8009eb4:	f7f6 ff5a 	bl	8000d6c <__aeabi_fmul>
 8009eb8:	4939      	ldr	r1, [pc, #228]	; (8009fa0 <log1pf+0x25c>)
 8009eba:	4606      	mov	r6, r0
 8009ebc:	4640      	mov	r0, r8
 8009ebe:	f7f6 ff55 	bl	8000d6c <__aeabi_fmul>
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	f7f6 fe4a 	bl	8000b5c <__addsf3>
 8009ec8:	4601      	mov	r1, r0
 8009eca:	4628      	mov	r0, r5
 8009ecc:	f7f6 fe44 	bl	8000b58 <__aeabi_fsub>
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	f7f6 fe41 	bl	8000b58 <__aeabi_fsub>
 8009ed6:	4601      	mov	r1, r0
 8009ed8:	4630      	mov	r0, r6
 8009eda:	e7e3      	b.n	8009ea4 <log1pf+0x160>
 8009edc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f7f6 fe3b 	bl	8000b5c <__addsf3>
 8009ee6:	4601      	mov	r1, r0
 8009ee8:	4620      	mov	r0, r4
 8009eea:	f7f6 fff3 	bl	8000ed4 <__aeabi_fdiv>
 8009eee:	4601      	mov	r1, r0
 8009ef0:	4681      	mov	r9, r0
 8009ef2:	f7f6 ff3b 	bl	8000d6c <__aeabi_fmul>
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	492c      	ldr	r1, [pc, #176]	; (8009fac <log1pf+0x268>)
 8009efa:	f7f6 ff37 	bl	8000d6c <__aeabi_fmul>
 8009efe:	492c      	ldr	r1, [pc, #176]	; (8009fb0 <log1pf+0x26c>)
 8009f00:	f7f6 fe2c 	bl	8000b5c <__addsf3>
 8009f04:	4629      	mov	r1, r5
 8009f06:	f7f6 ff31 	bl	8000d6c <__aeabi_fmul>
 8009f0a:	492a      	ldr	r1, [pc, #168]	; (8009fb4 <log1pf+0x270>)
 8009f0c:	f7f6 fe26 	bl	8000b5c <__addsf3>
 8009f10:	4629      	mov	r1, r5
 8009f12:	f7f6 ff2b 	bl	8000d6c <__aeabi_fmul>
 8009f16:	4928      	ldr	r1, [pc, #160]	; (8009fb8 <log1pf+0x274>)
 8009f18:	f7f6 fe20 	bl	8000b5c <__addsf3>
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	f7f6 ff25 	bl	8000d6c <__aeabi_fmul>
 8009f22:	4926      	ldr	r1, [pc, #152]	; (8009fbc <log1pf+0x278>)
 8009f24:	f7f6 fe1a 	bl	8000b5c <__addsf3>
 8009f28:	4629      	mov	r1, r5
 8009f2a:	f7f6 ff1f 	bl	8000d6c <__aeabi_fmul>
 8009f2e:	4924      	ldr	r1, [pc, #144]	; (8009fc0 <log1pf+0x27c>)
 8009f30:	f7f6 fe14 	bl	8000b5c <__addsf3>
 8009f34:	4629      	mov	r1, r5
 8009f36:	f7f6 ff19 	bl	8000d6c <__aeabi_fmul>
 8009f3a:	491b      	ldr	r1, [pc, #108]	; (8009fa8 <log1pf+0x264>)
 8009f3c:	f7f6 fe0e 	bl	8000b5c <__addsf3>
 8009f40:	4629      	mov	r1, r5
 8009f42:	f7f6 ff13 	bl	8000d6c <__aeabi_fmul>
 8009f46:	4641      	mov	r1, r8
 8009f48:	f7f6 fe08 	bl	8000b5c <__addsf3>
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	f7f6 ff0d 	bl	8000d6c <__aeabi_fmul>
 8009f52:	4605      	mov	r5, r0
 8009f54:	b926      	cbnz	r6, 8009f60 <log1pf+0x21c>
 8009f56:	4601      	mov	r1, r0
 8009f58:	4640      	mov	r0, r8
 8009f5a:	f7f6 fdfd 	bl	8000b58 <__aeabi_fsub>
 8009f5e:	e72b      	b.n	8009db8 <log1pf+0x74>
 8009f60:	4630      	mov	r0, r6
 8009f62:	f7f6 feaf 	bl	8000cc4 <__aeabi_i2f>
 8009f66:	490f      	ldr	r1, [pc, #60]	; (8009fa4 <log1pf+0x260>)
 8009f68:	4681      	mov	r9, r0
 8009f6a:	f7f6 feff 	bl	8000d6c <__aeabi_fmul>
 8009f6e:	490c      	ldr	r1, [pc, #48]	; (8009fa0 <log1pf+0x25c>)
 8009f70:	4606      	mov	r6, r0
 8009f72:	4648      	mov	r0, r9
 8009f74:	f7f6 fefa 	bl	8000d6c <__aeabi_fmul>
 8009f78:	4639      	mov	r1, r7
 8009f7a:	f7f6 fdef 	bl	8000b5c <__addsf3>
 8009f7e:	4629      	mov	r1, r5
 8009f80:	f7f6 fdec 	bl	8000b5c <__addsf3>
 8009f84:	4601      	mov	r1, r0
 8009f86:	4640      	mov	r0, r8
 8009f88:	e7a0      	b.n	8009ecc <log1pf+0x188>
 8009f8a:	2400      	movs	r4, #0
 8009f8c:	e6e5      	b.n	8009d5a <log1pf+0x16>
 8009f8e:	bf00      	nop
 8009f90:	3ed413d6 	.word	0x3ed413d6
 8009f94:	bf800000 	.word	0xbf800000
 8009f98:	416a09e0 	.word	0x416a09e0
 8009f9c:	003504f6 	.word	0x003504f6
 8009fa0:	3717f7d1 	.word	0x3717f7d1
 8009fa4:	3f317180 	.word	0x3f317180
 8009fa8:	3f2aaaab 	.word	0x3f2aaaab
 8009fac:	3e178897 	.word	0x3e178897
 8009fb0:	3e1cd04f 	.word	0x3e1cd04f
 8009fb4:	3e3a3325 	.word	0x3e3a3325
 8009fb8:	3e638e29 	.word	0x3e638e29
 8009fbc:	3e924925 	.word	0x3e924925
 8009fc0:	3ecccccd 	.word	0x3ecccccd

08009fc4 <pow>:
 8009fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fc8:	461f      	mov	r7, r3
 8009fca:	4680      	mov	r8, r0
 8009fcc:	4689      	mov	r9, r1
 8009fce:	4616      	mov	r6, r2
 8009fd0:	f000 f8d2 	bl	800a178 <__ieee754_pow>
 8009fd4:	4b4d      	ldr	r3, [pc, #308]	; (800a10c <pow+0x148>)
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	f993 3000 	ldrsb.w	r3, [r3]
 8009fdc:	460d      	mov	r5, r1
 8009fde:	3301      	adds	r3, #1
 8009fe0:	d015      	beq.n	800a00e <pow+0x4a>
 8009fe2:	4632      	mov	r2, r6
 8009fe4:	463b      	mov	r3, r7
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	4639      	mov	r1, r7
 8009fea:	f7f6 fd73 	bl	8000ad4 <__aeabi_dcmpun>
 8009fee:	b970      	cbnz	r0, 800a00e <pow+0x4a>
 8009ff0:	4642      	mov	r2, r8
 8009ff2:	464b      	mov	r3, r9
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	4649      	mov	r1, r9
 8009ff8:	f7f6 fd6c 	bl	8000ad4 <__aeabi_dcmpun>
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2300      	movs	r3, #0
 800a000:	b148      	cbz	r0, 800a016 <pow+0x52>
 800a002:	4630      	mov	r0, r6
 800a004:	4639      	mov	r1, r7
 800a006:	f7f6 fd33 	bl	8000a70 <__aeabi_dcmpeq>
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d17b      	bne.n	800a106 <pow+0x142>
 800a00e:	4620      	mov	r0, r4
 800a010:	4629      	mov	r1, r5
 800a012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a016:	4640      	mov	r0, r8
 800a018:	4649      	mov	r1, r9
 800a01a:	f7f6 fd29 	bl	8000a70 <__aeabi_dcmpeq>
 800a01e:	b1e0      	cbz	r0, 800a05a <pow+0x96>
 800a020:	2200      	movs	r2, #0
 800a022:	2300      	movs	r3, #0
 800a024:	4630      	mov	r0, r6
 800a026:	4639      	mov	r1, r7
 800a028:	f7f6 fd22 	bl	8000a70 <__aeabi_dcmpeq>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d16a      	bne.n	800a106 <pow+0x142>
 800a030:	4630      	mov	r0, r6
 800a032:	4639      	mov	r1, r7
 800a034:	f000 fe93 	bl	800ad5e <finite>
 800a038:	2800      	cmp	r0, #0
 800a03a:	d0e8      	beq.n	800a00e <pow+0x4a>
 800a03c:	2200      	movs	r2, #0
 800a03e:	2300      	movs	r3, #0
 800a040:	4630      	mov	r0, r6
 800a042:	4639      	mov	r1, r7
 800a044:	f7f6 fd1e 	bl	8000a84 <__aeabi_dcmplt>
 800a048:	2800      	cmp	r0, #0
 800a04a:	d0e0      	beq.n	800a00e <pow+0x4a>
 800a04c:	f000 ffae 	bl	800afac <__errno>
 800a050:	2321      	movs	r3, #33	; 0x21
 800a052:	2400      	movs	r4, #0
 800a054:	6003      	str	r3, [r0, #0]
 800a056:	4d2e      	ldr	r5, [pc, #184]	; (800a110 <pow+0x14c>)
 800a058:	e7d9      	b.n	800a00e <pow+0x4a>
 800a05a:	4620      	mov	r0, r4
 800a05c:	4629      	mov	r1, r5
 800a05e:	f000 fe7e 	bl	800ad5e <finite>
 800a062:	bba8      	cbnz	r0, 800a0d0 <pow+0x10c>
 800a064:	4640      	mov	r0, r8
 800a066:	4649      	mov	r1, r9
 800a068:	f000 fe79 	bl	800ad5e <finite>
 800a06c:	b380      	cbz	r0, 800a0d0 <pow+0x10c>
 800a06e:	4630      	mov	r0, r6
 800a070:	4639      	mov	r1, r7
 800a072:	f000 fe74 	bl	800ad5e <finite>
 800a076:	b358      	cbz	r0, 800a0d0 <pow+0x10c>
 800a078:	4622      	mov	r2, r4
 800a07a:	462b      	mov	r3, r5
 800a07c:	4620      	mov	r0, r4
 800a07e:	4629      	mov	r1, r5
 800a080:	f7f6 fd28 	bl	8000ad4 <__aeabi_dcmpun>
 800a084:	b160      	cbz	r0, 800a0a0 <pow+0xdc>
 800a086:	f000 ff91 	bl	800afac <__errno>
 800a08a:	2321      	movs	r3, #33	; 0x21
 800a08c:	2200      	movs	r2, #0
 800a08e:	6003      	str	r3, [r0, #0]
 800a090:	2300      	movs	r3, #0
 800a092:	4610      	mov	r0, r2
 800a094:	4619      	mov	r1, r3
 800a096:	f7f6 fbad 	bl	80007f4 <__aeabi_ddiv>
 800a09a:	4604      	mov	r4, r0
 800a09c:	460d      	mov	r5, r1
 800a09e:	e7b6      	b.n	800a00e <pow+0x4a>
 800a0a0:	f000 ff84 	bl	800afac <__errno>
 800a0a4:	2322      	movs	r3, #34	; 0x22
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	6003      	str	r3, [r0, #0]
 800a0aa:	4649      	mov	r1, r9
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	4640      	mov	r0, r8
 800a0b0:	f7f6 fce8 	bl	8000a84 <__aeabi_dcmplt>
 800a0b4:	2400      	movs	r4, #0
 800a0b6:	b148      	cbz	r0, 800a0cc <pow+0x108>
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	4639      	mov	r1, r7
 800a0bc:	f000 fe5c 	bl	800ad78 <rint>
 800a0c0:	4632      	mov	r2, r6
 800a0c2:	463b      	mov	r3, r7
 800a0c4:	f7f6 fcd4 	bl	8000a70 <__aeabi_dcmpeq>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d0c4      	beq.n	800a056 <pow+0x92>
 800a0cc:	4d11      	ldr	r5, [pc, #68]	; (800a114 <pow+0x150>)
 800a0ce:	e79e      	b.n	800a00e <pow+0x4a>
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	f7f6 fcca 	bl	8000a70 <__aeabi_dcmpeq>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d096      	beq.n	800a00e <pow+0x4a>
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	4649      	mov	r1, r9
 800a0e4:	f000 fe3b 	bl	800ad5e <finite>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d090      	beq.n	800a00e <pow+0x4a>
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	f000 fe35 	bl	800ad5e <finite>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	d08a      	beq.n	800a00e <pow+0x4a>
 800a0f8:	f000 ff58 	bl	800afac <__errno>
 800a0fc:	2322      	movs	r3, #34	; 0x22
 800a0fe:	2400      	movs	r4, #0
 800a100:	2500      	movs	r5, #0
 800a102:	6003      	str	r3, [r0, #0]
 800a104:	e783      	b.n	800a00e <pow+0x4a>
 800a106:	2400      	movs	r4, #0
 800a108:	4d03      	ldr	r5, [pc, #12]	; (800a118 <pow+0x154>)
 800a10a:	e780      	b.n	800a00e <pow+0x4a>
 800a10c:	20000010 	.word	0x20000010
 800a110:	fff00000 	.word	0xfff00000
 800a114:	7ff00000 	.word	0x7ff00000
 800a118:	3ff00000 	.word	0x3ff00000

0800a11c <sqrt>:
 800a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11e:	4606      	mov	r6, r0
 800a120:	460f      	mov	r7, r1
 800a122:	f000 fd3f 	bl	800aba4 <__ieee754_sqrt>
 800a126:	4b12      	ldr	r3, [pc, #72]	; (800a170 <sqrt+0x54>)
 800a128:	4604      	mov	r4, r0
 800a12a:	f993 3000 	ldrsb.w	r3, [r3]
 800a12e:	460d      	mov	r5, r1
 800a130:	3301      	adds	r3, #1
 800a132:	d019      	beq.n	800a168 <sqrt+0x4c>
 800a134:	4632      	mov	r2, r6
 800a136:	463b      	mov	r3, r7
 800a138:	4630      	mov	r0, r6
 800a13a:	4639      	mov	r1, r7
 800a13c:	f7f6 fcca 	bl	8000ad4 <__aeabi_dcmpun>
 800a140:	b990      	cbnz	r0, 800a168 <sqrt+0x4c>
 800a142:	2200      	movs	r2, #0
 800a144:	2300      	movs	r3, #0
 800a146:	4630      	mov	r0, r6
 800a148:	4639      	mov	r1, r7
 800a14a:	f7f6 fc9b 	bl	8000a84 <__aeabi_dcmplt>
 800a14e:	b158      	cbz	r0, 800a168 <sqrt+0x4c>
 800a150:	f000 ff2c 	bl	800afac <__errno>
 800a154:	2321      	movs	r3, #33	; 0x21
 800a156:	2200      	movs	r2, #0
 800a158:	6003      	str	r3, [r0, #0]
 800a15a:	2300      	movs	r3, #0
 800a15c:	4610      	mov	r0, r2
 800a15e:	4619      	mov	r1, r3
 800a160:	f7f6 fb48 	bl	80007f4 <__aeabi_ddiv>
 800a164:	4604      	mov	r4, r0
 800a166:	460d      	mov	r5, r1
 800a168:	4620      	mov	r0, r4
 800a16a:	4629      	mov	r1, r5
 800a16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a16e:	bf00      	nop
 800a170:	20000010 	.word	0x20000010
 800a174:	00000000 	.word	0x00000000

0800a178 <__ieee754_pow>:
 800a178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17c:	b093      	sub	sp, #76	; 0x4c
 800a17e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a182:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800a186:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a18a:	ea55 0302 	orrs.w	r3, r5, r2
 800a18e:	4607      	mov	r7, r0
 800a190:	4688      	mov	r8, r1
 800a192:	f000 84bf 	beq.w	800ab14 <__ieee754_pow+0x99c>
 800a196:	4b7e      	ldr	r3, [pc, #504]	; (800a390 <__ieee754_pow+0x218>)
 800a198:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a19c:	429c      	cmp	r4, r3
 800a19e:	4689      	mov	r9, r1
 800a1a0:	4682      	mov	sl, r0
 800a1a2:	dc09      	bgt.n	800a1b8 <__ieee754_pow+0x40>
 800a1a4:	d103      	bne.n	800a1ae <__ieee754_pow+0x36>
 800a1a6:	b978      	cbnz	r0, 800a1c8 <__ieee754_pow+0x50>
 800a1a8:	42a5      	cmp	r5, r4
 800a1aa:	dd02      	ble.n	800a1b2 <__ieee754_pow+0x3a>
 800a1ac:	e00c      	b.n	800a1c8 <__ieee754_pow+0x50>
 800a1ae:	429d      	cmp	r5, r3
 800a1b0:	dc02      	bgt.n	800a1b8 <__ieee754_pow+0x40>
 800a1b2:	429d      	cmp	r5, r3
 800a1b4:	d10e      	bne.n	800a1d4 <__ieee754_pow+0x5c>
 800a1b6:	b16a      	cbz	r2, 800a1d4 <__ieee754_pow+0x5c>
 800a1b8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a1bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a1c0:	ea54 030a 	orrs.w	r3, r4, sl
 800a1c4:	f000 84a6 	beq.w	800ab14 <__ieee754_pow+0x99c>
 800a1c8:	4872      	ldr	r0, [pc, #456]	; (800a394 <__ieee754_pow+0x21c>)
 800a1ca:	b013      	add	sp, #76	; 0x4c
 800a1cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d0:	f000 bdcc 	b.w	800ad6c <nan>
 800a1d4:	f1b9 0f00 	cmp.w	r9, #0
 800a1d8:	da39      	bge.n	800a24e <__ieee754_pow+0xd6>
 800a1da:	4b6f      	ldr	r3, [pc, #444]	; (800a398 <__ieee754_pow+0x220>)
 800a1dc:	429d      	cmp	r5, r3
 800a1de:	dc54      	bgt.n	800a28a <__ieee754_pow+0x112>
 800a1e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a1e4:	429d      	cmp	r5, r3
 800a1e6:	f340 84a6 	ble.w	800ab36 <__ieee754_pow+0x9be>
 800a1ea:	152b      	asrs	r3, r5, #20
 800a1ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a1f0:	2b14      	cmp	r3, #20
 800a1f2:	dd0f      	ble.n	800a214 <__ieee754_pow+0x9c>
 800a1f4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a1f8:	fa22 f103 	lsr.w	r1, r2, r3
 800a1fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a200:	4293      	cmp	r3, r2
 800a202:	f040 8498 	bne.w	800ab36 <__ieee754_pow+0x9be>
 800a206:	f001 0101 	and.w	r1, r1, #1
 800a20a:	f1c1 0302 	rsb	r3, r1, #2
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	b182      	cbz	r2, 800a234 <__ieee754_pow+0xbc>
 800a212:	e05e      	b.n	800a2d2 <__ieee754_pow+0x15a>
 800a214:	2a00      	cmp	r2, #0
 800a216:	d15a      	bne.n	800a2ce <__ieee754_pow+0x156>
 800a218:	f1c3 0314 	rsb	r3, r3, #20
 800a21c:	fa45 f103 	asr.w	r1, r5, r3
 800a220:	fa01 f303 	lsl.w	r3, r1, r3
 800a224:	42ab      	cmp	r3, r5
 800a226:	f040 8483 	bne.w	800ab30 <__ieee754_pow+0x9b8>
 800a22a:	f001 0101 	and.w	r1, r1, #1
 800a22e:	f1c1 0302 	rsb	r3, r1, #2
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	4b59      	ldr	r3, [pc, #356]	; (800a39c <__ieee754_pow+0x224>)
 800a236:	429d      	cmp	r5, r3
 800a238:	d130      	bne.n	800a29c <__ieee754_pow+0x124>
 800a23a:	2e00      	cmp	r6, #0
 800a23c:	f280 8474 	bge.w	800ab28 <__ieee754_pow+0x9b0>
 800a240:	463a      	mov	r2, r7
 800a242:	4643      	mov	r3, r8
 800a244:	2000      	movs	r0, #0
 800a246:	4955      	ldr	r1, [pc, #340]	; (800a39c <__ieee754_pow+0x224>)
 800a248:	f7f6 fad4 	bl	80007f4 <__aeabi_ddiv>
 800a24c:	e02f      	b.n	800a2ae <__ieee754_pow+0x136>
 800a24e:	2300      	movs	r3, #0
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	2a00      	cmp	r2, #0
 800a254:	d13d      	bne.n	800a2d2 <__ieee754_pow+0x15a>
 800a256:	4b4e      	ldr	r3, [pc, #312]	; (800a390 <__ieee754_pow+0x218>)
 800a258:	429d      	cmp	r5, r3
 800a25a:	d1eb      	bne.n	800a234 <__ieee754_pow+0xbc>
 800a25c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a260:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a264:	ea53 030a 	orrs.w	r3, r3, sl
 800a268:	f000 8454 	beq.w	800ab14 <__ieee754_pow+0x99c>
 800a26c:	4b4c      	ldr	r3, [pc, #304]	; (800a3a0 <__ieee754_pow+0x228>)
 800a26e:	429c      	cmp	r4, r3
 800a270:	dd0d      	ble.n	800a28e <__ieee754_pow+0x116>
 800a272:	2e00      	cmp	r6, #0
 800a274:	f280 8454 	bge.w	800ab20 <__ieee754_pow+0x9a8>
 800a278:	f04f 0b00 	mov.w	fp, #0
 800a27c:	f04f 0c00 	mov.w	ip, #0
 800a280:	4658      	mov	r0, fp
 800a282:	4661      	mov	r1, ip
 800a284:	b013      	add	sp, #76	; 0x4c
 800a286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28a:	2302      	movs	r3, #2
 800a28c:	e7e0      	b.n	800a250 <__ieee754_pow+0xd8>
 800a28e:	2e00      	cmp	r6, #0
 800a290:	daf2      	bge.n	800a278 <__ieee754_pow+0x100>
 800a292:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800a296:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800a29a:	e7f1      	b.n	800a280 <__ieee754_pow+0x108>
 800a29c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800a2a0:	d108      	bne.n	800a2b4 <__ieee754_pow+0x13c>
 800a2a2:	463a      	mov	r2, r7
 800a2a4:	4643      	mov	r3, r8
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	4641      	mov	r1, r8
 800a2aa:	f7f6 f979 	bl	80005a0 <__aeabi_dmul>
 800a2ae:	4683      	mov	fp, r0
 800a2b0:	468c      	mov	ip, r1
 800a2b2:	e7e5      	b.n	800a280 <__ieee754_pow+0x108>
 800a2b4:	4b3b      	ldr	r3, [pc, #236]	; (800a3a4 <__ieee754_pow+0x22c>)
 800a2b6:	429e      	cmp	r6, r3
 800a2b8:	d10b      	bne.n	800a2d2 <__ieee754_pow+0x15a>
 800a2ba:	f1b9 0f00 	cmp.w	r9, #0
 800a2be:	db08      	blt.n	800a2d2 <__ieee754_pow+0x15a>
 800a2c0:	4638      	mov	r0, r7
 800a2c2:	4641      	mov	r1, r8
 800a2c4:	b013      	add	sp, #76	; 0x4c
 800a2c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ca:	f000 bc6b 	b.w	800aba4 <__ieee754_sqrt>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	4641      	mov	r1, r8
 800a2d6:	f000 fd3f 	bl	800ad58 <fabs>
 800a2da:	4683      	mov	fp, r0
 800a2dc:	468c      	mov	ip, r1
 800a2de:	f1ba 0f00 	cmp.w	sl, #0
 800a2e2:	d129      	bne.n	800a338 <__ieee754_pow+0x1c0>
 800a2e4:	b124      	cbz	r4, 800a2f0 <__ieee754_pow+0x178>
 800a2e6:	4b2d      	ldr	r3, [pc, #180]	; (800a39c <__ieee754_pow+0x224>)
 800a2e8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d123      	bne.n	800a338 <__ieee754_pow+0x1c0>
 800a2f0:	2e00      	cmp	r6, #0
 800a2f2:	da07      	bge.n	800a304 <__ieee754_pow+0x18c>
 800a2f4:	465a      	mov	r2, fp
 800a2f6:	4663      	mov	r3, ip
 800a2f8:	2000      	movs	r0, #0
 800a2fa:	4928      	ldr	r1, [pc, #160]	; (800a39c <__ieee754_pow+0x224>)
 800a2fc:	f7f6 fa7a 	bl	80007f4 <__aeabi_ddiv>
 800a300:	4683      	mov	fp, r0
 800a302:	468c      	mov	ip, r1
 800a304:	f1b9 0f00 	cmp.w	r9, #0
 800a308:	daba      	bge.n	800a280 <__ieee754_pow+0x108>
 800a30a:	9b00      	ldr	r3, [sp, #0]
 800a30c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a310:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a314:	4323      	orrs	r3, r4
 800a316:	d108      	bne.n	800a32a <__ieee754_pow+0x1b2>
 800a318:	465a      	mov	r2, fp
 800a31a:	4663      	mov	r3, ip
 800a31c:	4658      	mov	r0, fp
 800a31e:	4661      	mov	r1, ip
 800a320:	f7f5 ff86 	bl	8000230 <__aeabi_dsub>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	e78e      	b.n	800a248 <__ieee754_pow+0xd0>
 800a32a:	9b00      	ldr	r3, [sp, #0]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d1a7      	bne.n	800a280 <__ieee754_pow+0x108>
 800a330:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800a334:	469c      	mov	ip, r3
 800a336:	e7a3      	b.n	800a280 <__ieee754_pow+0x108>
 800a338:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800a33c:	3b01      	subs	r3, #1
 800a33e:	930c      	str	r3, [sp, #48]	; 0x30
 800a340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a342:	9b00      	ldr	r3, [sp, #0]
 800a344:	4313      	orrs	r3, r2
 800a346:	d104      	bne.n	800a352 <__ieee754_pow+0x1da>
 800a348:	463a      	mov	r2, r7
 800a34a:	4643      	mov	r3, r8
 800a34c:	4638      	mov	r0, r7
 800a34e:	4641      	mov	r1, r8
 800a350:	e7e6      	b.n	800a320 <__ieee754_pow+0x1a8>
 800a352:	4b15      	ldr	r3, [pc, #84]	; (800a3a8 <__ieee754_pow+0x230>)
 800a354:	429d      	cmp	r5, r3
 800a356:	f340 80f9 	ble.w	800a54c <__ieee754_pow+0x3d4>
 800a35a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a35e:	429d      	cmp	r5, r3
 800a360:	4b0f      	ldr	r3, [pc, #60]	; (800a3a0 <__ieee754_pow+0x228>)
 800a362:	dd09      	ble.n	800a378 <__ieee754_pow+0x200>
 800a364:	429c      	cmp	r4, r3
 800a366:	dc0c      	bgt.n	800a382 <__ieee754_pow+0x20a>
 800a368:	2e00      	cmp	r6, #0
 800a36a:	da85      	bge.n	800a278 <__ieee754_pow+0x100>
 800a36c:	a306      	add	r3, pc, #24	; (adr r3, 800a388 <__ieee754_pow+0x210>)
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	4610      	mov	r0, r2
 800a374:	4619      	mov	r1, r3
 800a376:	e798      	b.n	800a2aa <__ieee754_pow+0x132>
 800a378:	429c      	cmp	r4, r3
 800a37a:	dbf5      	blt.n	800a368 <__ieee754_pow+0x1f0>
 800a37c:	4b07      	ldr	r3, [pc, #28]	; (800a39c <__ieee754_pow+0x224>)
 800a37e:	429c      	cmp	r4, r3
 800a380:	dd14      	ble.n	800a3ac <__ieee754_pow+0x234>
 800a382:	2e00      	cmp	r6, #0
 800a384:	dcf2      	bgt.n	800a36c <__ieee754_pow+0x1f4>
 800a386:	e777      	b.n	800a278 <__ieee754_pow+0x100>
 800a388:	8800759c 	.word	0x8800759c
 800a38c:	7e37e43c 	.word	0x7e37e43c
 800a390:	7ff00000 	.word	0x7ff00000
 800a394:	0800b180 	.word	0x0800b180
 800a398:	433fffff 	.word	0x433fffff
 800a39c:	3ff00000 	.word	0x3ff00000
 800a3a0:	3fefffff 	.word	0x3fefffff
 800a3a4:	3fe00000 	.word	0x3fe00000
 800a3a8:	41e00000 	.word	0x41e00000
 800a3ac:	4661      	mov	r1, ip
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	4658      	mov	r0, fp
 800a3b2:	4b61      	ldr	r3, [pc, #388]	; (800a538 <__ieee754_pow+0x3c0>)
 800a3b4:	f7f5 ff3c 	bl	8000230 <__aeabi_dsub>
 800a3b8:	a355      	add	r3, pc, #340	; (adr r3, 800a510 <__ieee754_pow+0x398>)
 800a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3be:	4604      	mov	r4, r0
 800a3c0:	460d      	mov	r5, r1
 800a3c2:	f7f6 f8ed 	bl	80005a0 <__aeabi_dmul>
 800a3c6:	a354      	add	r3, pc, #336	; (adr r3, 800a518 <__ieee754_pow+0x3a0>)
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	4606      	mov	r6, r0
 800a3ce:	460f      	mov	r7, r1
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	f7f6 f8e4 	bl	80005a0 <__aeabi_dmul>
 800a3d8:	2200      	movs	r2, #0
 800a3da:	4682      	mov	sl, r0
 800a3dc:	468b      	mov	fp, r1
 800a3de:	4620      	mov	r0, r4
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4b56      	ldr	r3, [pc, #344]	; (800a53c <__ieee754_pow+0x3c4>)
 800a3e4:	f7f6 f8dc 	bl	80005a0 <__aeabi_dmul>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	a14c      	add	r1, pc, #304	; (adr r1, 800a520 <__ieee754_pow+0x3a8>)
 800a3ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3f2:	f7f5 ff1d 	bl	8000230 <__aeabi_dsub>
 800a3f6:	4622      	mov	r2, r4
 800a3f8:	462b      	mov	r3, r5
 800a3fa:	f7f6 f8d1 	bl	80005a0 <__aeabi_dmul>
 800a3fe:	4602      	mov	r2, r0
 800a400:	460b      	mov	r3, r1
 800a402:	2000      	movs	r0, #0
 800a404:	494e      	ldr	r1, [pc, #312]	; (800a540 <__ieee754_pow+0x3c8>)
 800a406:	f7f5 ff13 	bl	8000230 <__aeabi_dsub>
 800a40a:	4622      	mov	r2, r4
 800a40c:	462b      	mov	r3, r5
 800a40e:	4680      	mov	r8, r0
 800a410:	4689      	mov	r9, r1
 800a412:	4620      	mov	r0, r4
 800a414:	4629      	mov	r1, r5
 800a416:	f7f6 f8c3 	bl	80005a0 <__aeabi_dmul>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4640      	mov	r0, r8
 800a420:	4649      	mov	r1, r9
 800a422:	f7f6 f8bd 	bl	80005a0 <__aeabi_dmul>
 800a426:	a340      	add	r3, pc, #256	; (adr r3, 800a528 <__ieee754_pow+0x3b0>)
 800a428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42c:	f7f6 f8b8 	bl	80005a0 <__aeabi_dmul>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	4650      	mov	r0, sl
 800a436:	4659      	mov	r1, fp
 800a438:	f7f5 fefa 	bl	8000230 <__aeabi_dsub>
 800a43c:	f04f 0a00 	mov.w	sl, #0
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4604      	mov	r4, r0
 800a446:	460d      	mov	r5, r1
 800a448:	4630      	mov	r0, r6
 800a44a:	4639      	mov	r1, r7
 800a44c:	f7f5 fef2 	bl	8000234 <__adddf3>
 800a450:	4632      	mov	r2, r6
 800a452:	463b      	mov	r3, r7
 800a454:	4650      	mov	r0, sl
 800a456:	468b      	mov	fp, r1
 800a458:	f7f5 feea 	bl	8000230 <__aeabi_dsub>
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	4620      	mov	r0, r4
 800a462:	4629      	mov	r1, r5
 800a464:	f7f5 fee4 	bl	8000230 <__aeabi_dsub>
 800a468:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a46c:	9b00      	ldr	r3, [sp, #0]
 800a46e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a470:	3b01      	subs	r3, #1
 800a472:	4313      	orrs	r3, r2
 800a474:	f04f 0600 	mov.w	r6, #0
 800a478:	f04f 0200 	mov.w	r2, #0
 800a47c:	bf0c      	ite	eq
 800a47e:	4b31      	ldreq	r3, [pc, #196]	; (800a544 <__ieee754_pow+0x3cc>)
 800a480:	4b2d      	ldrne	r3, [pc, #180]	; (800a538 <__ieee754_pow+0x3c0>)
 800a482:	4604      	mov	r4, r0
 800a484:	460d      	mov	r5, r1
 800a486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a48a:	e9cd 2300 	strd	r2, r3, [sp]
 800a48e:	4632      	mov	r2, r6
 800a490:	463b      	mov	r3, r7
 800a492:	f7f5 fecd 	bl	8000230 <__aeabi_dsub>
 800a496:	4652      	mov	r2, sl
 800a498:	465b      	mov	r3, fp
 800a49a:	f7f6 f881 	bl	80005a0 <__aeabi_dmul>
 800a49e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4a2:	4680      	mov	r8, r0
 800a4a4:	4689      	mov	r9, r1
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	f7f6 f879 	bl	80005a0 <__aeabi_dmul>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	4640      	mov	r0, r8
 800a4b4:	4649      	mov	r1, r9
 800a4b6:	f7f5 febd 	bl	8000234 <__adddf3>
 800a4ba:	4632      	mov	r2, r6
 800a4bc:	463b      	mov	r3, r7
 800a4be:	4680      	mov	r8, r0
 800a4c0:	4689      	mov	r9, r1
 800a4c2:	4650      	mov	r0, sl
 800a4c4:	4659      	mov	r1, fp
 800a4c6:	f7f6 f86b 	bl	80005a0 <__aeabi_dmul>
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	460d      	mov	r5, r1
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	4649      	mov	r1, r9
 800a4d4:	4640      	mov	r0, r8
 800a4d6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a4da:	f7f5 feab 	bl	8000234 <__adddf3>
 800a4de:	4b1a      	ldr	r3, [pc, #104]	; (800a548 <__ieee754_pow+0x3d0>)
 800a4e0:	4682      	mov	sl, r0
 800a4e2:	4299      	cmp	r1, r3
 800a4e4:	460f      	mov	r7, r1
 800a4e6:	460e      	mov	r6, r1
 800a4e8:	f340 82ed 	ble.w	800aac6 <__ieee754_pow+0x94e>
 800a4ec:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a4f0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a4f4:	4303      	orrs	r3, r0
 800a4f6:	f000 81e7 	beq.w	800a8c8 <__ieee754_pow+0x750>
 800a4fa:	a30d      	add	r3, pc, #52	; (adr r3, 800a530 <__ieee754_pow+0x3b8>)
 800a4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a500:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a504:	f7f6 f84c 	bl	80005a0 <__aeabi_dmul>
 800a508:	a309      	add	r3, pc, #36	; (adr r3, 800a530 <__ieee754_pow+0x3b8>)
 800a50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50e:	e6cc      	b.n	800a2aa <__ieee754_pow+0x132>
 800a510:	60000000 	.word	0x60000000
 800a514:	3ff71547 	.word	0x3ff71547
 800a518:	f85ddf44 	.word	0xf85ddf44
 800a51c:	3e54ae0b 	.word	0x3e54ae0b
 800a520:	55555555 	.word	0x55555555
 800a524:	3fd55555 	.word	0x3fd55555
 800a528:	652b82fe 	.word	0x652b82fe
 800a52c:	3ff71547 	.word	0x3ff71547
 800a530:	8800759c 	.word	0x8800759c
 800a534:	7e37e43c 	.word	0x7e37e43c
 800a538:	3ff00000 	.word	0x3ff00000
 800a53c:	3fd00000 	.word	0x3fd00000
 800a540:	3fe00000 	.word	0x3fe00000
 800a544:	bff00000 	.word	0xbff00000
 800a548:	408fffff 	.word	0x408fffff
 800a54c:	4bd4      	ldr	r3, [pc, #848]	; (800a8a0 <__ieee754_pow+0x728>)
 800a54e:	2200      	movs	r2, #0
 800a550:	ea09 0303 	and.w	r3, r9, r3
 800a554:	b943      	cbnz	r3, 800a568 <__ieee754_pow+0x3f0>
 800a556:	4658      	mov	r0, fp
 800a558:	4661      	mov	r1, ip
 800a55a:	4bd2      	ldr	r3, [pc, #840]	; (800a8a4 <__ieee754_pow+0x72c>)
 800a55c:	f7f6 f820 	bl	80005a0 <__aeabi_dmul>
 800a560:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a564:	4683      	mov	fp, r0
 800a566:	460c      	mov	r4, r1
 800a568:	1523      	asrs	r3, r4, #20
 800a56a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a56e:	4413      	add	r3, r2
 800a570:	930b      	str	r3, [sp, #44]	; 0x2c
 800a572:	4bcd      	ldr	r3, [pc, #820]	; (800a8a8 <__ieee754_pow+0x730>)
 800a574:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a578:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a57c:	429c      	cmp	r4, r3
 800a57e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a582:	dd08      	ble.n	800a596 <__ieee754_pow+0x41e>
 800a584:	4bc9      	ldr	r3, [pc, #804]	; (800a8ac <__ieee754_pow+0x734>)
 800a586:	429c      	cmp	r4, r3
 800a588:	f340 819c 	ble.w	800a8c4 <__ieee754_pow+0x74c>
 800a58c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a58e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a592:	3301      	adds	r3, #1
 800a594:	930b      	str	r3, [sp, #44]	; 0x2c
 800a596:	2600      	movs	r6, #0
 800a598:	00f3      	lsls	r3, r6, #3
 800a59a:	930d      	str	r3, [sp, #52]	; 0x34
 800a59c:	4bc4      	ldr	r3, [pc, #784]	; (800a8b0 <__ieee754_pow+0x738>)
 800a59e:	4658      	mov	r0, fp
 800a5a0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a5a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a5b0:	4623      	mov	r3, r4
 800a5b2:	f7f5 fe3d 	bl	8000230 <__aeabi_dsub>
 800a5b6:	46da      	mov	sl, fp
 800a5b8:	462b      	mov	r3, r5
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a5c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a5c4:	f7f5 fe36 	bl	8000234 <__adddf3>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	2000      	movs	r0, #0
 800a5ce:	49b9      	ldr	r1, [pc, #740]	; (800a8b4 <__ieee754_pow+0x73c>)
 800a5d0:	f7f6 f910 	bl	80007f4 <__aeabi_ddiv>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a5dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a5e0:	f7f5 ffde 	bl	80005a0 <__aeabi_dmul>
 800a5e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a5e8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a5ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	46ab      	mov	fp, r5
 800a5f6:	106d      	asrs	r5, r5, #1
 800a5f8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a5fc:	9304      	str	r3, [sp, #16]
 800a5fe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a602:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a606:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a60a:	4640      	mov	r0, r8
 800a60c:	4649      	mov	r1, r9
 800a60e:	4614      	mov	r4, r2
 800a610:	461d      	mov	r5, r3
 800a612:	f7f5 ffc5 	bl	80005a0 <__aeabi_dmul>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a61e:	f7f5 fe07 	bl	8000230 <__aeabi_dsub>
 800a622:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a626:	4606      	mov	r6, r0
 800a628:	460f      	mov	r7, r1
 800a62a:	4620      	mov	r0, r4
 800a62c:	4629      	mov	r1, r5
 800a62e:	f7f5 fdff 	bl	8000230 <__aeabi_dsub>
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
 800a636:	4650      	mov	r0, sl
 800a638:	4659      	mov	r1, fp
 800a63a:	f7f5 fdf9 	bl	8000230 <__aeabi_dsub>
 800a63e:	4642      	mov	r2, r8
 800a640:	464b      	mov	r3, r9
 800a642:	f7f5 ffad 	bl	80005a0 <__aeabi_dmul>
 800a646:	4602      	mov	r2, r0
 800a648:	460b      	mov	r3, r1
 800a64a:	4630      	mov	r0, r6
 800a64c:	4639      	mov	r1, r7
 800a64e:	f7f5 fdef 	bl	8000230 <__aeabi_dsub>
 800a652:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a656:	f7f5 ffa3 	bl	80005a0 <__aeabi_dmul>
 800a65a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a65e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a662:	4610      	mov	r0, r2
 800a664:	4619      	mov	r1, r3
 800a666:	f7f5 ff9b 	bl	80005a0 <__aeabi_dmul>
 800a66a:	a37b      	add	r3, pc, #492	; (adr r3, 800a858 <__ieee754_pow+0x6e0>)
 800a66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a670:	4604      	mov	r4, r0
 800a672:	460d      	mov	r5, r1
 800a674:	f7f5 ff94 	bl	80005a0 <__aeabi_dmul>
 800a678:	a379      	add	r3, pc, #484	; (adr r3, 800a860 <__ieee754_pow+0x6e8>)
 800a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67e:	f7f5 fdd9 	bl	8000234 <__adddf3>
 800a682:	4622      	mov	r2, r4
 800a684:	462b      	mov	r3, r5
 800a686:	f7f5 ff8b 	bl	80005a0 <__aeabi_dmul>
 800a68a:	a377      	add	r3, pc, #476	; (adr r3, 800a868 <__ieee754_pow+0x6f0>)
 800a68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a690:	f7f5 fdd0 	bl	8000234 <__adddf3>
 800a694:	4622      	mov	r2, r4
 800a696:	462b      	mov	r3, r5
 800a698:	f7f5 ff82 	bl	80005a0 <__aeabi_dmul>
 800a69c:	a374      	add	r3, pc, #464	; (adr r3, 800a870 <__ieee754_pow+0x6f8>)
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	f7f5 fdc7 	bl	8000234 <__adddf3>
 800a6a6:	4622      	mov	r2, r4
 800a6a8:	462b      	mov	r3, r5
 800a6aa:	f7f5 ff79 	bl	80005a0 <__aeabi_dmul>
 800a6ae:	a372      	add	r3, pc, #456	; (adr r3, 800a878 <__ieee754_pow+0x700>)
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	f7f5 fdbe 	bl	8000234 <__adddf3>
 800a6b8:	4622      	mov	r2, r4
 800a6ba:	462b      	mov	r3, r5
 800a6bc:	f7f5 ff70 	bl	80005a0 <__aeabi_dmul>
 800a6c0:	a36f      	add	r3, pc, #444	; (adr r3, 800a880 <__ieee754_pow+0x708>)
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	f7f5 fdb5 	bl	8000234 <__adddf3>
 800a6ca:	4622      	mov	r2, r4
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	460f      	mov	r7, r1
 800a6d0:	462b      	mov	r3, r5
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	f7f5 ff63 	bl	80005a0 <__aeabi_dmul>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	4630      	mov	r0, r6
 800a6e0:	4639      	mov	r1, r7
 800a6e2:	f7f5 ff5d 	bl	80005a0 <__aeabi_dmul>
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	460d      	mov	r5, r1
 800a6ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6ee:	4642      	mov	r2, r8
 800a6f0:	464b      	mov	r3, r9
 800a6f2:	f7f5 fd9f 	bl	8000234 <__adddf3>
 800a6f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a6fa:	f7f5 ff51 	bl	80005a0 <__aeabi_dmul>
 800a6fe:	4622      	mov	r2, r4
 800a700:	462b      	mov	r3, r5
 800a702:	f7f5 fd97 	bl	8000234 <__adddf3>
 800a706:	4642      	mov	r2, r8
 800a708:	4606      	mov	r6, r0
 800a70a:	460f      	mov	r7, r1
 800a70c:	464b      	mov	r3, r9
 800a70e:	4640      	mov	r0, r8
 800a710:	4649      	mov	r1, r9
 800a712:	f7f5 ff45 	bl	80005a0 <__aeabi_dmul>
 800a716:	2200      	movs	r2, #0
 800a718:	4b67      	ldr	r3, [pc, #412]	; (800a8b8 <__ieee754_pow+0x740>)
 800a71a:	4682      	mov	sl, r0
 800a71c:	468b      	mov	fp, r1
 800a71e:	f7f5 fd89 	bl	8000234 <__adddf3>
 800a722:	4632      	mov	r2, r6
 800a724:	463b      	mov	r3, r7
 800a726:	f7f5 fd85 	bl	8000234 <__adddf3>
 800a72a:	9c04      	ldr	r4, [sp, #16]
 800a72c:	460d      	mov	r5, r1
 800a72e:	4622      	mov	r2, r4
 800a730:	460b      	mov	r3, r1
 800a732:	4640      	mov	r0, r8
 800a734:	4649      	mov	r1, r9
 800a736:	f7f5 ff33 	bl	80005a0 <__aeabi_dmul>
 800a73a:	2200      	movs	r2, #0
 800a73c:	4680      	mov	r8, r0
 800a73e:	4689      	mov	r9, r1
 800a740:	4620      	mov	r0, r4
 800a742:	4629      	mov	r1, r5
 800a744:	4b5c      	ldr	r3, [pc, #368]	; (800a8b8 <__ieee754_pow+0x740>)
 800a746:	f7f5 fd73 	bl	8000230 <__aeabi_dsub>
 800a74a:	4652      	mov	r2, sl
 800a74c:	465b      	mov	r3, fp
 800a74e:	f7f5 fd6f 	bl	8000230 <__aeabi_dsub>
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	4630      	mov	r0, r6
 800a758:	4639      	mov	r1, r7
 800a75a:	f7f5 fd69 	bl	8000230 <__aeabi_dsub>
 800a75e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a762:	f7f5 ff1d 	bl	80005a0 <__aeabi_dmul>
 800a766:	4622      	mov	r2, r4
 800a768:	4606      	mov	r6, r0
 800a76a:	460f      	mov	r7, r1
 800a76c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a770:	462b      	mov	r3, r5
 800a772:	f7f5 ff15 	bl	80005a0 <__aeabi_dmul>
 800a776:	4602      	mov	r2, r0
 800a778:	460b      	mov	r3, r1
 800a77a:	4630      	mov	r0, r6
 800a77c:	4639      	mov	r1, r7
 800a77e:	f7f5 fd59 	bl	8000234 <__adddf3>
 800a782:	4606      	mov	r6, r0
 800a784:	460f      	mov	r7, r1
 800a786:	4602      	mov	r2, r0
 800a788:	460b      	mov	r3, r1
 800a78a:	4640      	mov	r0, r8
 800a78c:	4649      	mov	r1, r9
 800a78e:	f7f5 fd51 	bl	8000234 <__adddf3>
 800a792:	a33d      	add	r3, pc, #244	; (adr r3, 800a888 <__ieee754_pow+0x710>)
 800a794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a798:	9c04      	ldr	r4, [sp, #16]
 800a79a:	460d      	mov	r5, r1
 800a79c:	4620      	mov	r0, r4
 800a79e:	f7f5 feff 	bl	80005a0 <__aeabi_dmul>
 800a7a2:	4642      	mov	r2, r8
 800a7a4:	464b      	mov	r3, r9
 800a7a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	f7f5 fd3f 	bl	8000230 <__aeabi_dsub>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	4639      	mov	r1, r7
 800a7ba:	f7f5 fd39 	bl	8000230 <__aeabi_dsub>
 800a7be:	a334      	add	r3, pc, #208	; (adr r3, 800a890 <__ieee754_pow+0x718>)
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	f7f5 feec 	bl	80005a0 <__aeabi_dmul>
 800a7c8:	a333      	add	r3, pc, #204	; (adr r3, 800a898 <__ieee754_pow+0x720>)
 800a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ce:	4606      	mov	r6, r0
 800a7d0:	460f      	mov	r7, r1
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	f7f5 fee3 	bl	80005a0 <__aeabi_dmul>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	460b      	mov	r3, r1
 800a7de:	4630      	mov	r0, r6
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	f7f5 fd27 	bl	8000234 <__adddf3>
 800a7e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7e8:	4b34      	ldr	r3, [pc, #208]	; (800a8bc <__ieee754_pow+0x744>)
 800a7ea:	4413      	add	r3, r2
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	f7f5 fd20 	bl	8000234 <__adddf3>
 800a7f4:	4680      	mov	r8, r0
 800a7f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a7f8:	4689      	mov	r9, r1
 800a7fa:	f7f5 fe67 	bl	80004cc <__aeabi_i2d>
 800a7fe:	4604      	mov	r4, r0
 800a800:	460d      	mov	r5, r1
 800a802:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a804:	4b2e      	ldr	r3, [pc, #184]	; (800a8c0 <__ieee754_pow+0x748>)
 800a806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a80a:	4413      	add	r3, r2
 800a80c:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a810:	4642      	mov	r2, r8
 800a812:	464b      	mov	r3, r9
 800a814:	f7f5 fd0e 	bl	8000234 <__adddf3>
 800a818:	4632      	mov	r2, r6
 800a81a:	463b      	mov	r3, r7
 800a81c:	f7f5 fd0a 	bl	8000234 <__adddf3>
 800a820:	4622      	mov	r2, r4
 800a822:	462b      	mov	r3, r5
 800a824:	f7f5 fd06 	bl	8000234 <__adddf3>
 800a828:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a82c:	4622      	mov	r2, r4
 800a82e:	462b      	mov	r3, r5
 800a830:	4650      	mov	r0, sl
 800a832:	468b      	mov	fp, r1
 800a834:	f7f5 fcfc 	bl	8000230 <__aeabi_dsub>
 800a838:	4632      	mov	r2, r6
 800a83a:	463b      	mov	r3, r7
 800a83c:	f7f5 fcf8 	bl	8000230 <__aeabi_dsub>
 800a840:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a844:	f7f5 fcf4 	bl	8000230 <__aeabi_dsub>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	4640      	mov	r0, r8
 800a84e:	4649      	mov	r1, r9
 800a850:	e608      	b.n	800a464 <__ieee754_pow+0x2ec>
 800a852:	bf00      	nop
 800a854:	f3af 8000 	nop.w
 800a858:	4a454eef 	.word	0x4a454eef
 800a85c:	3fca7e28 	.word	0x3fca7e28
 800a860:	93c9db65 	.word	0x93c9db65
 800a864:	3fcd864a 	.word	0x3fcd864a
 800a868:	a91d4101 	.word	0xa91d4101
 800a86c:	3fd17460 	.word	0x3fd17460
 800a870:	518f264d 	.word	0x518f264d
 800a874:	3fd55555 	.word	0x3fd55555
 800a878:	db6fabff 	.word	0xdb6fabff
 800a87c:	3fdb6db6 	.word	0x3fdb6db6
 800a880:	33333303 	.word	0x33333303
 800a884:	3fe33333 	.word	0x3fe33333
 800a888:	e0000000 	.word	0xe0000000
 800a88c:	3feec709 	.word	0x3feec709
 800a890:	dc3a03fd 	.word	0xdc3a03fd
 800a894:	3feec709 	.word	0x3feec709
 800a898:	145b01f5 	.word	0x145b01f5
 800a89c:	be3e2fe0 	.word	0xbe3e2fe0
 800a8a0:	7ff00000 	.word	0x7ff00000
 800a8a4:	43400000 	.word	0x43400000
 800a8a8:	0003988e 	.word	0x0003988e
 800a8ac:	000bb679 	.word	0x000bb679
 800a8b0:	0800b188 	.word	0x0800b188
 800a8b4:	3ff00000 	.word	0x3ff00000
 800a8b8:	40080000 	.word	0x40080000
 800a8bc:	0800b1a8 	.word	0x0800b1a8
 800a8c0:	0800b198 	.word	0x0800b198
 800a8c4:	2601      	movs	r6, #1
 800a8c6:	e667      	b.n	800a598 <__ieee754_pow+0x420>
 800a8c8:	a39d      	add	r3, pc, #628	; (adr r3, 800ab40 <__ieee754_pow+0x9c8>)
 800a8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ce:	4640      	mov	r0, r8
 800a8d0:	4649      	mov	r1, r9
 800a8d2:	f7f5 fcaf 	bl	8000234 <__adddf3>
 800a8d6:	4622      	mov	r2, r4
 800a8d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8dc:	462b      	mov	r3, r5
 800a8de:	4650      	mov	r0, sl
 800a8e0:	4639      	mov	r1, r7
 800a8e2:	f7f5 fca5 	bl	8000230 <__aeabi_dsub>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8ee:	f7f6 f8e7 	bl	8000ac0 <__aeabi_dcmpgt>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	f47f ae01 	bne.w	800a4fa <__ieee754_pow+0x382>
 800a8f8:	4aa5      	ldr	r2, [pc, #660]	; (800ab90 <__ieee754_pow+0xa18>)
 800a8fa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a8fe:	4293      	cmp	r3, r2
 800a900:	f340 8103 	ble.w	800ab0a <__ieee754_pow+0x992>
 800a904:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a908:	2000      	movs	r0, #0
 800a90a:	151b      	asrs	r3, r3, #20
 800a90c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a910:	fa4a f303 	asr.w	r3, sl, r3
 800a914:	4433      	add	r3, r6
 800a916:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a91a:	4f9e      	ldr	r7, [pc, #632]	; (800ab94 <__ieee754_pow+0xa1c>)
 800a91c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a920:	4117      	asrs	r7, r2
 800a922:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a926:	ea23 0107 	bic.w	r1, r3, r7
 800a92a:	f1c2 0214 	rsb	r2, r2, #20
 800a92e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a932:	460b      	mov	r3, r1
 800a934:	fa4a fa02 	asr.w	sl, sl, r2
 800a938:	2e00      	cmp	r6, #0
 800a93a:	4602      	mov	r2, r0
 800a93c:	4629      	mov	r1, r5
 800a93e:	4620      	mov	r0, r4
 800a940:	bfb8      	it	lt
 800a942:	f1ca 0a00 	rsblt	sl, sl, #0
 800a946:	f7f5 fc73 	bl	8000230 <__aeabi_dsub>
 800a94a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a94e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a952:	2400      	movs	r4, #0
 800a954:	4642      	mov	r2, r8
 800a956:	464b      	mov	r3, r9
 800a958:	f7f5 fc6c 	bl	8000234 <__adddf3>
 800a95c:	a37a      	add	r3, pc, #488	; (adr r3, 800ab48 <__ieee754_pow+0x9d0>)
 800a95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a962:	4620      	mov	r0, r4
 800a964:	460d      	mov	r5, r1
 800a966:	f7f5 fe1b 	bl	80005a0 <__aeabi_dmul>
 800a96a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a96e:	4606      	mov	r6, r0
 800a970:	460f      	mov	r7, r1
 800a972:	4620      	mov	r0, r4
 800a974:	4629      	mov	r1, r5
 800a976:	f7f5 fc5b 	bl	8000230 <__aeabi_dsub>
 800a97a:	4602      	mov	r2, r0
 800a97c:	460b      	mov	r3, r1
 800a97e:	4640      	mov	r0, r8
 800a980:	4649      	mov	r1, r9
 800a982:	f7f5 fc55 	bl	8000230 <__aeabi_dsub>
 800a986:	a372      	add	r3, pc, #456	; (adr r3, 800ab50 <__ieee754_pow+0x9d8>)
 800a988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98c:	f7f5 fe08 	bl	80005a0 <__aeabi_dmul>
 800a990:	a371      	add	r3, pc, #452	; (adr r3, 800ab58 <__ieee754_pow+0x9e0>)
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	4680      	mov	r8, r0
 800a998:	4689      	mov	r9, r1
 800a99a:	4620      	mov	r0, r4
 800a99c:	4629      	mov	r1, r5
 800a99e:	f7f5 fdff 	bl	80005a0 <__aeabi_dmul>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	4640      	mov	r0, r8
 800a9a8:	4649      	mov	r1, r9
 800a9aa:	f7f5 fc43 	bl	8000234 <__adddf3>
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	460d      	mov	r5, r1
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	4639      	mov	r1, r7
 800a9ba:	f7f5 fc3b 	bl	8000234 <__adddf3>
 800a9be:	4632      	mov	r2, r6
 800a9c0:	463b      	mov	r3, r7
 800a9c2:	4680      	mov	r8, r0
 800a9c4:	4689      	mov	r9, r1
 800a9c6:	f7f5 fc33 	bl	8000230 <__aeabi_dsub>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	4629      	mov	r1, r5
 800a9d2:	f7f5 fc2d 	bl	8000230 <__aeabi_dsub>
 800a9d6:	4642      	mov	r2, r8
 800a9d8:	4606      	mov	r6, r0
 800a9da:	460f      	mov	r7, r1
 800a9dc:	464b      	mov	r3, r9
 800a9de:	4640      	mov	r0, r8
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	f7f5 fddd 	bl	80005a0 <__aeabi_dmul>
 800a9e6:	a35e      	add	r3, pc, #376	; (adr r3, 800ab60 <__ieee754_pow+0x9e8>)
 800a9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	460d      	mov	r5, r1
 800a9f0:	f7f5 fdd6 	bl	80005a0 <__aeabi_dmul>
 800a9f4:	a35c      	add	r3, pc, #368	; (adr r3, 800ab68 <__ieee754_pow+0x9f0>)
 800a9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fa:	f7f5 fc19 	bl	8000230 <__aeabi_dsub>
 800a9fe:	4622      	mov	r2, r4
 800aa00:	462b      	mov	r3, r5
 800aa02:	f7f5 fdcd 	bl	80005a0 <__aeabi_dmul>
 800aa06:	a35a      	add	r3, pc, #360	; (adr r3, 800ab70 <__ieee754_pow+0x9f8>)
 800aa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa0c:	f7f5 fc12 	bl	8000234 <__adddf3>
 800aa10:	4622      	mov	r2, r4
 800aa12:	462b      	mov	r3, r5
 800aa14:	f7f5 fdc4 	bl	80005a0 <__aeabi_dmul>
 800aa18:	a357      	add	r3, pc, #348	; (adr r3, 800ab78 <__ieee754_pow+0xa00>)
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	f7f5 fc07 	bl	8000230 <__aeabi_dsub>
 800aa22:	4622      	mov	r2, r4
 800aa24:	462b      	mov	r3, r5
 800aa26:	f7f5 fdbb 	bl	80005a0 <__aeabi_dmul>
 800aa2a:	a355      	add	r3, pc, #340	; (adr r3, 800ab80 <__ieee754_pow+0xa08>)
 800aa2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa30:	f7f5 fc00 	bl	8000234 <__adddf3>
 800aa34:	4622      	mov	r2, r4
 800aa36:	462b      	mov	r3, r5
 800aa38:	f7f5 fdb2 	bl	80005a0 <__aeabi_dmul>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	460b      	mov	r3, r1
 800aa40:	4640      	mov	r0, r8
 800aa42:	4649      	mov	r1, r9
 800aa44:	f7f5 fbf4 	bl	8000230 <__aeabi_dsub>
 800aa48:	4604      	mov	r4, r0
 800aa4a:	460d      	mov	r5, r1
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	4640      	mov	r0, r8
 800aa52:	4649      	mov	r1, r9
 800aa54:	f7f5 fda4 	bl	80005a0 <__aeabi_dmul>
 800aa58:	2200      	movs	r2, #0
 800aa5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa62:	4620      	mov	r0, r4
 800aa64:	4629      	mov	r1, r5
 800aa66:	f7f5 fbe3 	bl	8000230 <__aeabi_dsub>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa72:	f7f5 febf 	bl	80007f4 <__aeabi_ddiv>
 800aa76:	4632      	mov	r2, r6
 800aa78:	4604      	mov	r4, r0
 800aa7a:	460d      	mov	r5, r1
 800aa7c:	463b      	mov	r3, r7
 800aa7e:	4640      	mov	r0, r8
 800aa80:	4649      	mov	r1, r9
 800aa82:	f7f5 fd8d 	bl	80005a0 <__aeabi_dmul>
 800aa86:	4632      	mov	r2, r6
 800aa88:	463b      	mov	r3, r7
 800aa8a:	f7f5 fbd3 	bl	8000234 <__adddf3>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	460b      	mov	r3, r1
 800aa92:	4620      	mov	r0, r4
 800aa94:	4629      	mov	r1, r5
 800aa96:	f7f5 fbcb 	bl	8000230 <__aeabi_dsub>
 800aa9a:	4642      	mov	r2, r8
 800aa9c:	464b      	mov	r3, r9
 800aa9e:	f7f5 fbc7 	bl	8000230 <__aeabi_dsub>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	493b      	ldr	r1, [pc, #236]	; (800ab98 <__ieee754_pow+0xa20>)
 800aaaa:	f7f5 fbc1 	bl	8000230 <__aeabi_dsub>
 800aaae:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800aab2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800aab6:	da2b      	bge.n	800ab10 <__ieee754_pow+0x998>
 800aab8:	4652      	mov	r2, sl
 800aaba:	f000 f9e9 	bl	800ae90 <scalbn>
 800aabe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aac2:	f7ff bbf2 	b.w	800a2aa <__ieee754_pow+0x132>
 800aac6:	4b35      	ldr	r3, [pc, #212]	; (800ab9c <__ieee754_pow+0xa24>)
 800aac8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800aacc:	429f      	cmp	r7, r3
 800aace:	f77f af13 	ble.w	800a8f8 <__ieee754_pow+0x780>
 800aad2:	4b33      	ldr	r3, [pc, #204]	; (800aba0 <__ieee754_pow+0xa28>)
 800aad4:	440b      	add	r3, r1
 800aad6:	4303      	orrs	r3, r0
 800aad8:	d00b      	beq.n	800aaf2 <__ieee754_pow+0x97a>
 800aada:	a32b      	add	r3, pc, #172	; (adr r3, 800ab88 <__ieee754_pow+0xa10>)
 800aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aae4:	f7f5 fd5c 	bl	80005a0 <__aeabi_dmul>
 800aae8:	a327      	add	r3, pc, #156	; (adr r3, 800ab88 <__ieee754_pow+0xa10>)
 800aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaee:	f7ff bbdc 	b.w	800a2aa <__ieee754_pow+0x132>
 800aaf2:	4622      	mov	r2, r4
 800aaf4:	462b      	mov	r3, r5
 800aaf6:	f7f5 fb9b 	bl	8000230 <__aeabi_dsub>
 800aafa:	4642      	mov	r2, r8
 800aafc:	464b      	mov	r3, r9
 800aafe:	f7f5 ffd5 	bl	8000aac <__aeabi_dcmpge>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	f43f aef8 	beq.w	800a8f8 <__ieee754_pow+0x780>
 800ab08:	e7e7      	b.n	800aada <__ieee754_pow+0x962>
 800ab0a:	f04f 0a00 	mov.w	sl, #0
 800ab0e:	e71e      	b.n	800a94e <__ieee754_pow+0x7d6>
 800ab10:	4621      	mov	r1, r4
 800ab12:	e7d4      	b.n	800aabe <__ieee754_pow+0x946>
 800ab14:	f04f 0b00 	mov.w	fp, #0
 800ab18:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ab98 <__ieee754_pow+0xa20>
 800ab1c:	f7ff bbb0 	b.w	800a280 <__ieee754_pow+0x108>
 800ab20:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800ab24:	f7ff bbac 	b.w	800a280 <__ieee754_pow+0x108>
 800ab28:	4638      	mov	r0, r7
 800ab2a:	4641      	mov	r1, r8
 800ab2c:	f7ff bbbf 	b.w	800a2ae <__ieee754_pow+0x136>
 800ab30:	9200      	str	r2, [sp, #0]
 800ab32:	f7ff bb7f 	b.w	800a234 <__ieee754_pow+0xbc>
 800ab36:	2300      	movs	r3, #0
 800ab38:	f7ff bb69 	b.w	800a20e <__ieee754_pow+0x96>
 800ab3c:	f3af 8000 	nop.w
 800ab40:	652b82fe 	.word	0x652b82fe
 800ab44:	3c971547 	.word	0x3c971547
 800ab48:	00000000 	.word	0x00000000
 800ab4c:	3fe62e43 	.word	0x3fe62e43
 800ab50:	fefa39ef 	.word	0xfefa39ef
 800ab54:	3fe62e42 	.word	0x3fe62e42
 800ab58:	0ca86c39 	.word	0x0ca86c39
 800ab5c:	be205c61 	.word	0xbe205c61
 800ab60:	72bea4d0 	.word	0x72bea4d0
 800ab64:	3e663769 	.word	0x3e663769
 800ab68:	c5d26bf1 	.word	0xc5d26bf1
 800ab6c:	3ebbbd41 	.word	0x3ebbbd41
 800ab70:	af25de2c 	.word	0xaf25de2c
 800ab74:	3f11566a 	.word	0x3f11566a
 800ab78:	16bebd93 	.word	0x16bebd93
 800ab7c:	3f66c16c 	.word	0x3f66c16c
 800ab80:	5555553e 	.word	0x5555553e
 800ab84:	3fc55555 	.word	0x3fc55555
 800ab88:	c2f8f359 	.word	0xc2f8f359
 800ab8c:	01a56e1f 	.word	0x01a56e1f
 800ab90:	3fe00000 	.word	0x3fe00000
 800ab94:	000fffff 	.word	0x000fffff
 800ab98:	3ff00000 	.word	0x3ff00000
 800ab9c:	4090cbff 	.word	0x4090cbff
 800aba0:	3f6f3400 	.word	0x3f6f3400

0800aba4 <__ieee754_sqrt>:
 800aba4:	f8df c150 	ldr.w	ip, [pc, #336]	; 800acf8 <__ieee754_sqrt+0x154>
 800aba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abac:	ea3c 0c01 	bics.w	ip, ip, r1
 800abb0:	460b      	mov	r3, r1
 800abb2:	4606      	mov	r6, r0
 800abb4:	460d      	mov	r5, r1
 800abb6:	460a      	mov	r2, r1
 800abb8:	4607      	mov	r7, r0
 800abba:	4604      	mov	r4, r0
 800abbc:	d10e      	bne.n	800abdc <__ieee754_sqrt+0x38>
 800abbe:	4602      	mov	r2, r0
 800abc0:	f7f5 fcee 	bl	80005a0 <__aeabi_dmul>
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	4630      	mov	r0, r6
 800abca:	4629      	mov	r1, r5
 800abcc:	f7f5 fb32 	bl	8000234 <__adddf3>
 800abd0:	4606      	mov	r6, r0
 800abd2:	460d      	mov	r5, r1
 800abd4:	4630      	mov	r0, r6
 800abd6:	4629      	mov	r1, r5
 800abd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abdc:	2900      	cmp	r1, #0
 800abde:	dc0d      	bgt.n	800abfc <__ieee754_sqrt+0x58>
 800abe0:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800abe4:	ea5c 0707 	orrs.w	r7, ip, r7
 800abe8:	d0f4      	beq.n	800abd4 <__ieee754_sqrt+0x30>
 800abea:	b139      	cbz	r1, 800abfc <__ieee754_sqrt+0x58>
 800abec:	4602      	mov	r2, r0
 800abee:	f7f5 fb1f 	bl	8000230 <__aeabi_dsub>
 800abf2:	4602      	mov	r2, r0
 800abf4:	460b      	mov	r3, r1
 800abf6:	f7f5 fdfd 	bl	80007f4 <__aeabi_ddiv>
 800abfa:	e7e9      	b.n	800abd0 <__ieee754_sqrt+0x2c>
 800abfc:	1512      	asrs	r2, r2, #20
 800abfe:	d074      	beq.n	800acea <__ieee754_sqrt+0x146>
 800ac00:	2000      	movs	r0, #0
 800ac02:	07d5      	lsls	r5, r2, #31
 800ac04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac08:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800ac0c:	bf5e      	ittt	pl
 800ac0e:	0fe3      	lsrpl	r3, r4, #31
 800ac10:	0064      	lslpl	r4, r4, #1
 800ac12:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800ac16:	0fe3      	lsrs	r3, r4, #31
 800ac18:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ac1c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800ac20:	2516      	movs	r5, #22
 800ac22:	4601      	mov	r1, r0
 800ac24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ac28:	1076      	asrs	r6, r6, #1
 800ac2a:	0064      	lsls	r4, r4, #1
 800ac2c:	188f      	adds	r7, r1, r2
 800ac2e:	429f      	cmp	r7, r3
 800ac30:	bfde      	ittt	le
 800ac32:	1bdb      	suble	r3, r3, r7
 800ac34:	18b9      	addle	r1, r7, r2
 800ac36:	1880      	addle	r0, r0, r2
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	3d01      	subs	r5, #1
 800ac3c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ac40:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ac44:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ac48:	d1f0      	bne.n	800ac2c <__ieee754_sqrt+0x88>
 800ac4a:	462a      	mov	r2, r5
 800ac4c:	f04f 0e20 	mov.w	lr, #32
 800ac50:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ac54:	428b      	cmp	r3, r1
 800ac56:	eb07 0c05 	add.w	ip, r7, r5
 800ac5a:	dc02      	bgt.n	800ac62 <__ieee754_sqrt+0xbe>
 800ac5c:	d113      	bne.n	800ac86 <__ieee754_sqrt+0xe2>
 800ac5e:	45a4      	cmp	ip, r4
 800ac60:	d811      	bhi.n	800ac86 <__ieee754_sqrt+0xe2>
 800ac62:	f1bc 0f00 	cmp.w	ip, #0
 800ac66:	eb0c 0507 	add.w	r5, ip, r7
 800ac6a:	da43      	bge.n	800acf4 <__ieee754_sqrt+0x150>
 800ac6c:	2d00      	cmp	r5, #0
 800ac6e:	db41      	blt.n	800acf4 <__ieee754_sqrt+0x150>
 800ac70:	f101 0801 	add.w	r8, r1, #1
 800ac74:	1a5b      	subs	r3, r3, r1
 800ac76:	4641      	mov	r1, r8
 800ac78:	45a4      	cmp	ip, r4
 800ac7a:	bf88      	it	hi
 800ac7c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ac80:	eba4 040c 	sub.w	r4, r4, ip
 800ac84:	443a      	add	r2, r7
 800ac86:	005b      	lsls	r3, r3, #1
 800ac88:	f1be 0e01 	subs.w	lr, lr, #1
 800ac8c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ac90:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800ac94:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ac98:	d1dc      	bne.n	800ac54 <__ieee754_sqrt+0xb0>
 800ac9a:	4323      	orrs	r3, r4
 800ac9c:	d006      	beq.n	800acac <__ieee754_sqrt+0x108>
 800ac9e:	1c54      	adds	r4, r2, #1
 800aca0:	bf0b      	itete	eq
 800aca2:	4672      	moveq	r2, lr
 800aca4:	3201      	addne	r2, #1
 800aca6:	3001      	addeq	r0, #1
 800aca8:	f022 0201 	bicne.w	r2, r2, #1
 800acac:	1043      	asrs	r3, r0, #1
 800acae:	07c1      	lsls	r1, r0, #31
 800acb0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800acb4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800acb8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800acbc:	bf48      	it	mi
 800acbe:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800acc2:	4610      	mov	r0, r2
 800acc4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800acc8:	e782      	b.n	800abd0 <__ieee754_sqrt+0x2c>
 800acca:	0ae3      	lsrs	r3, r4, #11
 800accc:	3915      	subs	r1, #21
 800acce:	0564      	lsls	r4, r4, #21
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d0fa      	beq.n	800acca <__ieee754_sqrt+0x126>
 800acd4:	02de      	lsls	r6, r3, #11
 800acd6:	d50a      	bpl.n	800acee <__ieee754_sqrt+0x14a>
 800acd8:	f1c2 0020 	rsb	r0, r2, #32
 800acdc:	fa24 f000 	lsr.w	r0, r4, r0
 800ace0:	1e55      	subs	r5, r2, #1
 800ace2:	4094      	lsls	r4, r2
 800ace4:	4303      	orrs	r3, r0
 800ace6:	1b4a      	subs	r2, r1, r5
 800ace8:	e78a      	b.n	800ac00 <__ieee754_sqrt+0x5c>
 800acea:	4611      	mov	r1, r2
 800acec:	e7f0      	b.n	800acd0 <__ieee754_sqrt+0x12c>
 800acee:	005b      	lsls	r3, r3, #1
 800acf0:	3201      	adds	r2, #1
 800acf2:	e7ef      	b.n	800acd4 <__ieee754_sqrt+0x130>
 800acf4:	4688      	mov	r8, r1
 800acf6:	e7bd      	b.n	800ac74 <__ieee754_sqrt+0xd0>
 800acf8:	7ff00000 	.word	0x7ff00000

0800acfc <with_errnof>:
 800acfc:	b538      	push	{r3, r4, r5, lr}
 800acfe:	4604      	mov	r4, r0
 800ad00:	460d      	mov	r5, r1
 800ad02:	f000 f953 	bl	800afac <__errno>
 800ad06:	6005      	str	r5, [r0, #0]
 800ad08:	4620      	mov	r0, r4
 800ad0a:	bd38      	pop	{r3, r4, r5, pc}

0800ad0c <__math_divzerof>:
 800ad0c:	b508      	push	{r3, lr}
 800ad0e:	b948      	cbnz	r0, 800ad24 <__math_divzerof+0x18>
 800ad10:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ad14:	2100      	movs	r1, #0
 800ad16:	f7f6 f8dd 	bl	8000ed4 <__aeabi_fdiv>
 800ad1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ad1e:	2122      	movs	r1, #34	; 0x22
 800ad20:	f7ff bfec 	b.w	800acfc <with_errnof>
 800ad24:	4800      	ldr	r0, [pc, #0]	; (800ad28 <__math_divzerof+0x1c>)
 800ad26:	e7f5      	b.n	800ad14 <__math_divzerof+0x8>
 800ad28:	bf800000 	.word	0xbf800000

0800ad2c <__math_invalidf>:
 800ad2c:	b538      	push	{r3, r4, r5, lr}
 800ad2e:	4601      	mov	r1, r0
 800ad30:	4605      	mov	r5, r0
 800ad32:	f7f5 ff11 	bl	8000b58 <__aeabi_fsub>
 800ad36:	4601      	mov	r1, r0
 800ad38:	f7f6 f8cc 	bl	8000ed4 <__aeabi_fdiv>
 800ad3c:	4629      	mov	r1, r5
 800ad3e:	4604      	mov	r4, r0
 800ad40:	4628      	mov	r0, r5
 800ad42:	f7f6 f9d9 	bl	80010f8 <__aeabi_fcmpun>
 800ad46:	b928      	cbnz	r0, 800ad54 <__math_invalidf+0x28>
 800ad48:	4620      	mov	r0, r4
 800ad4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad4e:	2121      	movs	r1, #33	; 0x21
 800ad50:	f7ff bfd4 	b.w	800acfc <with_errnof>
 800ad54:	4620      	mov	r0, r4
 800ad56:	bd38      	pop	{r3, r4, r5, pc}

0800ad58 <fabs>:
 800ad58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ad5c:	4770      	bx	lr

0800ad5e <finite>:
 800ad5e:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800ad62:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ad66:	0fc0      	lsrs	r0, r0, #31
 800ad68:	4770      	bx	lr
	...

0800ad6c <nan>:
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	4901      	ldr	r1, [pc, #4]	; (800ad74 <nan+0x8>)
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	7ff80000 	.word	0x7ff80000

0800ad78 <rint>:
 800ad78:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 800ad7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad7e:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 800ad82:	2f13      	cmp	r7, #19
 800ad84:	4602      	mov	r2, r0
 800ad86:	460b      	mov	r3, r1
 800ad88:	460c      	mov	r4, r1
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 800ad90:	dc59      	bgt.n	800ae46 <rint+0xce>
 800ad92:	2f00      	cmp	r7, #0
 800ad94:	da2a      	bge.n	800adec <rint+0x74>
 800ad96:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ad9a:	4301      	orrs	r1, r0
 800ad9c:	d022      	beq.n	800ade4 <rint+0x6c>
 800ad9e:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800ada2:	4301      	orrs	r1, r0
 800ada4:	424d      	negs	r5, r1
 800ada6:	430d      	orrs	r5, r1
 800ada8:	4936      	ldr	r1, [pc, #216]	; (800ae84 <rint+0x10c>)
 800adaa:	0c5c      	lsrs	r4, r3, #17
 800adac:	0b2d      	lsrs	r5, r5, #12
 800adae:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800adb2:	0464      	lsls	r4, r4, #17
 800adb4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800adb8:	ea45 0304 	orr.w	r3, r5, r4
 800adbc:	e9d1 4500 	ldrd	r4, r5, [r1]
 800adc0:	4620      	mov	r0, r4
 800adc2:	4629      	mov	r1, r5
 800adc4:	f7f5 fa36 	bl	8000234 <__adddf3>
 800adc8:	e9cd 0100 	strd	r0, r1, [sp]
 800adcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800add0:	462b      	mov	r3, r5
 800add2:	4622      	mov	r2, r4
 800add4:	f7f5 fa2c 	bl	8000230 <__aeabi_dsub>
 800add8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800addc:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 800ade0:	4602      	mov	r2, r0
 800ade2:	460b      	mov	r3, r1
 800ade4:	4610      	mov	r0, r2
 800ade6:	4619      	mov	r1, r3
 800ade8:	b003      	add	sp, #12
 800adea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adec:	4926      	ldr	r1, [pc, #152]	; (800ae88 <rint+0x110>)
 800adee:	4139      	asrs	r1, r7
 800adf0:	ea03 0001 	and.w	r0, r3, r1
 800adf4:	4310      	orrs	r0, r2
 800adf6:	d0f5      	beq.n	800ade4 <rint+0x6c>
 800adf8:	084b      	lsrs	r3, r1, #1
 800adfa:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 800adfe:	ea52 0501 	orrs.w	r5, r2, r1
 800ae02:	d00c      	beq.n	800ae1e <rint+0xa6>
 800ae04:	ea24 0303 	bic.w	r3, r4, r3
 800ae08:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800ae0c:	2f13      	cmp	r7, #19
 800ae0e:	bf0c      	ite	eq
 800ae10:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 800ae14:	2500      	movne	r5, #0
 800ae16:	fa44 f707 	asr.w	r7, r4, r7
 800ae1a:	ea43 0407 	orr.w	r4, r3, r7
 800ae1e:	4919      	ldr	r1, [pc, #100]	; (800ae84 <rint+0x10c>)
 800ae20:	4623      	mov	r3, r4
 800ae22:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800ae26:	462a      	mov	r2, r5
 800ae28:	e9d6 4500 	ldrd	r4, r5, [r6]
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	4629      	mov	r1, r5
 800ae30:	f7f5 fa00 	bl	8000234 <__adddf3>
 800ae34:	e9cd 0100 	strd	r0, r1, [sp]
 800ae38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae3c:	4622      	mov	r2, r4
 800ae3e:	462b      	mov	r3, r5
 800ae40:	f7f5 f9f6 	bl	8000230 <__aeabi_dsub>
 800ae44:	e7cc      	b.n	800ade0 <rint+0x68>
 800ae46:	2f33      	cmp	r7, #51	; 0x33
 800ae48:	dd05      	ble.n	800ae56 <rint+0xde>
 800ae4a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800ae4e:	d1c9      	bne.n	800ade4 <rint+0x6c>
 800ae50:	f7f5 f9f0 	bl	8000234 <__adddf3>
 800ae54:	e7c4      	b.n	800ade0 <rint+0x68>
 800ae56:	f04f 31ff 	mov.w	r1, #4294967295
 800ae5a:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 800ae5e:	fa21 f10c 	lsr.w	r1, r1, ip
 800ae62:	4208      	tst	r0, r1
 800ae64:	d0be      	beq.n	800ade4 <rint+0x6c>
 800ae66:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 800ae6a:	bf18      	it	ne
 800ae6c:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 800ae70:	ea4f 0351 	mov.w	r3, r1, lsr #1
 800ae74:	bf1e      	ittt	ne
 800ae76:	ea20 0303 	bicne.w	r3, r0, r3
 800ae7a:	fa45 fc0c 	asrne.w	ip, r5, ip
 800ae7e:	ea43 050c 	orrne.w	r5, r3, ip
 800ae82:	e7cc      	b.n	800ae1e <rint+0xa6>
 800ae84:	0800b1b8 	.word	0x0800b1b8
 800ae88:	000fffff 	.word	0x000fffff
 800ae8c:	00000000 	.word	0x00000000

0800ae90 <scalbn>:
 800ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae92:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ae96:	4604      	mov	r4, r0
 800ae98:	460d      	mov	r5, r1
 800ae9a:	4617      	mov	r7, r2
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	b996      	cbnz	r6, 800aec6 <scalbn+0x36>
 800aea0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aea4:	4303      	orrs	r3, r0
 800aea6:	d039      	beq.n	800af1c <scalbn+0x8c>
 800aea8:	4b35      	ldr	r3, [pc, #212]	; (800af80 <scalbn+0xf0>)
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f7f5 fb78 	bl	80005a0 <__aeabi_dmul>
 800aeb0:	4b34      	ldr	r3, [pc, #208]	; (800af84 <scalbn+0xf4>)
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	429f      	cmp	r7, r3
 800aeb6:	460d      	mov	r5, r1
 800aeb8:	da0f      	bge.n	800aeda <scalbn+0x4a>
 800aeba:	a32d      	add	r3, pc, #180	; (adr r3, 800af70 <scalbn+0xe0>)
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	f7f5 fb6e 	bl	80005a0 <__aeabi_dmul>
 800aec4:	e006      	b.n	800aed4 <scalbn+0x44>
 800aec6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800aeca:	4296      	cmp	r6, r2
 800aecc:	d10a      	bne.n	800aee4 <scalbn+0x54>
 800aece:	4602      	mov	r2, r0
 800aed0:	f7f5 f9b0 	bl	8000234 <__adddf3>
 800aed4:	4604      	mov	r4, r0
 800aed6:	460d      	mov	r5, r1
 800aed8:	e020      	b.n	800af1c <scalbn+0x8c>
 800aeda:	460b      	mov	r3, r1
 800aedc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800aee0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800aee4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800aee8:	19b9      	adds	r1, r7, r6
 800aeea:	4291      	cmp	r1, r2
 800aeec:	dd0e      	ble.n	800af0c <scalbn+0x7c>
 800aeee:	a322      	add	r3, pc, #136	; (adr r3, 800af78 <scalbn+0xe8>)
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800aef8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800aefc:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800af00:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800af04:	4820      	ldr	r0, [pc, #128]	; (800af88 <scalbn+0xf8>)
 800af06:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800af0a:	e7d9      	b.n	800aec0 <scalbn+0x30>
 800af0c:	2900      	cmp	r1, #0
 800af0e:	dd08      	ble.n	800af22 <scalbn+0x92>
 800af10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af18:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800af1c:	4620      	mov	r0, r4
 800af1e:	4629      	mov	r1, r5
 800af20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af22:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800af26:	da16      	bge.n	800af56 <scalbn+0xc6>
 800af28:	f24c 3350 	movw	r3, #50000	; 0xc350
 800af2c:	429f      	cmp	r7, r3
 800af2e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800af32:	dd08      	ble.n	800af46 <scalbn+0xb6>
 800af34:	4c15      	ldr	r4, [pc, #84]	; (800af8c <scalbn+0xfc>)
 800af36:	4814      	ldr	r0, [pc, #80]	; (800af88 <scalbn+0xf8>)
 800af38:	f363 74df 	bfi	r4, r3, #31, #1
 800af3c:	a30e      	add	r3, pc, #56	; (adr r3, 800af78 <scalbn+0xe8>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	4621      	mov	r1, r4
 800af44:	e7bc      	b.n	800aec0 <scalbn+0x30>
 800af46:	4c12      	ldr	r4, [pc, #72]	; (800af90 <scalbn+0x100>)
 800af48:	4812      	ldr	r0, [pc, #72]	; (800af94 <scalbn+0x104>)
 800af4a:	f363 74df 	bfi	r4, r3, #31, #1
 800af4e:	a308      	add	r3, pc, #32	; (adr r3, 800af70 <scalbn+0xe0>)
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	e7f5      	b.n	800af42 <scalbn+0xb2>
 800af56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af5a:	3136      	adds	r1, #54	; 0x36
 800af5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800af60:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800af64:	4620      	mov	r0, r4
 800af66:	4629      	mov	r1, r5
 800af68:	2200      	movs	r2, #0
 800af6a:	4b0b      	ldr	r3, [pc, #44]	; (800af98 <scalbn+0x108>)
 800af6c:	e7a8      	b.n	800aec0 <scalbn+0x30>
 800af6e:	bf00      	nop
 800af70:	c2f8f359 	.word	0xc2f8f359
 800af74:	01a56e1f 	.word	0x01a56e1f
 800af78:	8800759c 	.word	0x8800759c
 800af7c:	7e37e43c 	.word	0x7e37e43c
 800af80:	43500000 	.word	0x43500000
 800af84:	ffff3cb0 	.word	0xffff3cb0
 800af88:	8800759c 	.word	0x8800759c
 800af8c:	7e37e43c 	.word	0x7e37e43c
 800af90:	01a56e1f 	.word	0x01a56e1f
 800af94:	c2f8f359 	.word	0xc2f8f359
 800af98:	3c900000 	.word	0x3c900000

0800af9c <abort>:
 800af9c:	2006      	movs	r0, #6
 800af9e:	b508      	push	{r3, lr}
 800afa0:	f000 f85e 	bl	800b060 <raise>
 800afa4:	2001      	movs	r0, #1
 800afa6:	f7fa fb2a 	bl	80055fe <_exit>
	...

0800afac <__errno>:
 800afac:	4b01      	ldr	r3, [pc, #4]	; (800afb4 <__errno+0x8>)
 800afae:	6818      	ldr	r0, [r3, #0]
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	20000014 	.word	0x20000014

0800afb8 <__libc_init_array>:
 800afb8:	b570      	push	{r4, r5, r6, lr}
 800afba:	2600      	movs	r6, #0
 800afbc:	4d0c      	ldr	r5, [pc, #48]	; (800aff0 <__libc_init_array+0x38>)
 800afbe:	4c0d      	ldr	r4, [pc, #52]	; (800aff4 <__libc_init_array+0x3c>)
 800afc0:	1b64      	subs	r4, r4, r5
 800afc2:	10a4      	asrs	r4, r4, #2
 800afc4:	42a6      	cmp	r6, r4
 800afc6:	d109      	bne.n	800afdc <__libc_init_array+0x24>
 800afc8:	f000 f866 	bl	800b098 <_init>
 800afcc:	2600      	movs	r6, #0
 800afce:	4d0a      	ldr	r5, [pc, #40]	; (800aff8 <__libc_init_array+0x40>)
 800afd0:	4c0a      	ldr	r4, [pc, #40]	; (800affc <__libc_init_array+0x44>)
 800afd2:	1b64      	subs	r4, r4, r5
 800afd4:	10a4      	asrs	r4, r4, #2
 800afd6:	42a6      	cmp	r6, r4
 800afd8:	d105      	bne.n	800afe6 <__libc_init_array+0x2e>
 800afda:	bd70      	pop	{r4, r5, r6, pc}
 800afdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800afe0:	4798      	blx	r3
 800afe2:	3601      	adds	r6, #1
 800afe4:	e7ee      	b.n	800afc4 <__libc_init_array+0xc>
 800afe6:	f855 3b04 	ldr.w	r3, [r5], #4
 800afea:	4798      	blx	r3
 800afec:	3601      	adds	r6, #1
 800afee:	e7f2      	b.n	800afd6 <__libc_init_array+0x1e>
 800aff0:	0800b1c8 	.word	0x0800b1c8
 800aff4:	0800b1c8 	.word	0x0800b1c8
 800aff8:	0800b1c8 	.word	0x0800b1c8
 800affc:	0800b1d0 	.word	0x0800b1d0

0800b000 <memset>:
 800b000:	4603      	mov	r3, r0
 800b002:	4402      	add	r2, r0
 800b004:	4293      	cmp	r3, r2
 800b006:	d100      	bne.n	800b00a <memset+0xa>
 800b008:	4770      	bx	lr
 800b00a:	f803 1b01 	strb.w	r1, [r3], #1
 800b00e:	e7f9      	b.n	800b004 <memset+0x4>

0800b010 <_raise_r>:
 800b010:	291f      	cmp	r1, #31
 800b012:	b538      	push	{r3, r4, r5, lr}
 800b014:	4604      	mov	r4, r0
 800b016:	460d      	mov	r5, r1
 800b018:	d904      	bls.n	800b024 <_raise_r+0x14>
 800b01a:	2316      	movs	r3, #22
 800b01c:	6003      	str	r3, [r0, #0]
 800b01e:	f04f 30ff 	mov.w	r0, #4294967295
 800b022:	bd38      	pop	{r3, r4, r5, pc}
 800b024:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b026:	b112      	cbz	r2, 800b02e <_raise_r+0x1e>
 800b028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b02c:	b94b      	cbnz	r3, 800b042 <_raise_r+0x32>
 800b02e:	4620      	mov	r0, r4
 800b030:	f000 f830 	bl	800b094 <_getpid_r>
 800b034:	462a      	mov	r2, r5
 800b036:	4601      	mov	r1, r0
 800b038:	4620      	mov	r0, r4
 800b03a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b03e:	f000 b817 	b.w	800b070 <_kill_r>
 800b042:	2b01      	cmp	r3, #1
 800b044:	d00a      	beq.n	800b05c <_raise_r+0x4c>
 800b046:	1c59      	adds	r1, r3, #1
 800b048:	d103      	bne.n	800b052 <_raise_r+0x42>
 800b04a:	2316      	movs	r3, #22
 800b04c:	6003      	str	r3, [r0, #0]
 800b04e:	2001      	movs	r0, #1
 800b050:	e7e7      	b.n	800b022 <_raise_r+0x12>
 800b052:	2400      	movs	r4, #0
 800b054:	4628      	mov	r0, r5
 800b056:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b05a:	4798      	blx	r3
 800b05c:	2000      	movs	r0, #0
 800b05e:	e7e0      	b.n	800b022 <_raise_r+0x12>

0800b060 <raise>:
 800b060:	4b02      	ldr	r3, [pc, #8]	; (800b06c <raise+0xc>)
 800b062:	4601      	mov	r1, r0
 800b064:	6818      	ldr	r0, [r3, #0]
 800b066:	f7ff bfd3 	b.w	800b010 <_raise_r>
 800b06a:	bf00      	nop
 800b06c:	20000014 	.word	0x20000014

0800b070 <_kill_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	2300      	movs	r3, #0
 800b074:	4d06      	ldr	r5, [pc, #24]	; (800b090 <_kill_r+0x20>)
 800b076:	4604      	mov	r4, r0
 800b078:	4608      	mov	r0, r1
 800b07a:	4611      	mov	r1, r2
 800b07c:	602b      	str	r3, [r5, #0]
 800b07e:	f7fa faae 	bl	80055de <_kill>
 800b082:	1c43      	adds	r3, r0, #1
 800b084:	d102      	bne.n	800b08c <_kill_r+0x1c>
 800b086:	682b      	ldr	r3, [r5, #0]
 800b088:	b103      	cbz	r3, 800b08c <_kill_r+0x1c>
 800b08a:	6023      	str	r3, [r4, #0]
 800b08c:	bd38      	pop	{r3, r4, r5, pc}
 800b08e:	bf00      	nop
 800b090:	2000036c 	.word	0x2000036c

0800b094 <_getpid_r>:
 800b094:	f7fa ba9c 	b.w	80055d0 <_getpid>

0800b098 <_init>:
 800b098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09a:	bf00      	nop
 800b09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b09e:	bc08      	pop	{r3}
 800b0a0:	469e      	mov	lr, r3
 800b0a2:	4770      	bx	lr

0800b0a4 <_fini>:
 800b0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a6:	bf00      	nop
 800b0a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0aa:	bc08      	pop	{r3}
 800b0ac:	469e      	mov	lr, r3
 800b0ae:	4770      	bx	lr
